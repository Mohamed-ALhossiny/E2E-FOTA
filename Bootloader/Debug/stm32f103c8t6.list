
stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001ac8  08001ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad4  08001ad4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad4  08001ad4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad4  08001ad4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000064  08001b40  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00004a00  200000d8  08001b40  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033f7  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f93  00000000  00000000  00023484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00024418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00024828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000adc6  00000000  00000000  00024b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000295a  00000000  00000000  0002f93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00039187  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006b41f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f70  00000000  00000000  0006b470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ab0 	.word	0x08001ab0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08001ab0 	.word	0x08001ab0

0800014c <AFIO_INIT>:
 */
#include "RCC.h"
#include "AFIO.h"


void AFIO_INIT(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//no remap of CAN
	AFIO->MAPR &= ~(AFIO_MAPR_CAN_REMAP_Msk);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <AFIO_INIT+0x24>)
 8000152:	685b      	ldr	r3, [r3, #4]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <AFIO_INIT+0x24>)
 8000156:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800015a:	6053      	str	r3, [r2, #4]
	//No remap of USART3
	AFIO->MAPR &= ~(AFIO_MAPR_USART3_REMAP_Msk);
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <AFIO_INIT+0x24>)
 800015e:	685b      	ldr	r3, [r3, #4]
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <AFIO_INIT+0x24>)
 8000162:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000166:	6053      	str	r3, [r2, #4]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40010000 	.word	0x40010000

08000174 <BootLoader>:

uint8_t isFlashed = 0;

/*----------------------   Initialize Boot loader ( BL START )   ---------------------------*/

void BootLoader(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0

	if(((BOOTLOADER_MODE & 0x00FF) == BOOTLOADER_REQUEST)){
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <BootLoader+0x34>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b01      	cmp	r3, #1
 8000180:	d109      	bne.n	8000196 <BootLoader+0x22>
		ReceiveAndFlashUpdate();
 8000182:	f000 f815 	bl	80001b0 <ReceiveAndFlashUpdate>
		System_DeInit();
 8000186:	f000 fa1d 	bl	80005c4 <System_DeInit>
		JumpToApplication(BOOTLOADER_CURRENTBANK);
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <BootLoader+0x38>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f9fe 	bl	8000590 <JumpToApplication>
		System_DeInit();
		JumpToApplication(BOOTLOADER_CURRENTBANK);

	}

}
 8000194:	e006      	b.n	80001a4 <BootLoader+0x30>
		System_DeInit();
 8000196:	f000 fa15 	bl	80005c4 <System_DeInit>
		JumpToApplication(BOOTLOADER_CURRENTBANK);
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <BootLoader+0x38>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 f9f6 	bl	8000590 <JumpToApplication>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	08004000 	.word	0x08004000
 80001ac:	08004004 	.word	0x08004004

080001b0 <ReceiveAndFlashUpdate>:

static void ReceiveAndFlashUpdate(void) {
 80001b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80001b4:	b092      	sub	sp, #72	; 0x48
 80001b6:	af02      	add	r7, sp, #8
	uint64_t* Dwords;
	uint8_t* patch;
	uint8_t updateStatus = (uint8_t)((BOOTLOADER_MODE & 0xFF00) >> 8);
 80001b8:	4ba7      	ldr	r3, [pc, #668]	; (8000458 <ReceiveAndFlashUpdate+0x2a8>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	0a1b      	lsrs	r3, r3, #8
 80001be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t imageSize = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(updateStatus == VERSION_PATCH){
 80001c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d109      	bne.n	80001e2 <ReceiveAndFlashUpdate+0x32>
		patch = (uint8_t*)malloc(500);
 80001ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d2:	f001 fb37 	bl	8001844 <malloc>
 80001d6:	4603      	mov	r3, r0
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
		if(patch == NULL){
 80001da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10a      	bne.n	80001f6 <ReceiveAndFlashUpdate+0x46>
			return;
 80001e0:	e172      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
		}
	}else{
		Dwords = (uint64_t*)malloc(1024 * 9);
 80001e2:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80001e6:	f001 fb2d 	bl	8001844 <malloc>
 80001ea:	4603      	mov	r3, r0
 80001ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(Dwords == NULL){
 80001ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	f000 8160 	beq.w	80004b6 <ReceiveAndFlashUpdate+0x306>
			return;
		}

	}
	CANTX_msg.id = GATEWAY_BOOTLOADER_RQ_ID;
 80001f6:	4b99      	ldr	r3, [pc, #612]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 80001f8:	f240 1223 	movw	r2, #291	; 0x123
 80001fc:	601a      	str	r2, [r3, #0]
	CANTX_msg.format = STANDARD_FORMAT;
 80001fe:	4b97      	ldr	r3, [pc, #604]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 8000200:	2200      	movs	r2, #0
 8000202:	735a      	strb	r2, [r3, #13]
	CANTX_msg.type = DATA_FRAME;
 8000204:	4b95      	ldr	r3, [pc, #596]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 8000206:	2200      	movs	r2, #0
 8000208:	739a      	strb	r2, [r3, #14]
	CANTX_msg.length = 2;
 800020a:	4b94      	ldr	r3, [pc, #592]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 800020c:	2202      	movs	r2, #2
 800020e:	731a      	strb	r2, [r3, #12]
	//Bootloader ACK
	CAN_Transmit(CAN, &CANTX_msg);
 8000210:	4992      	ldr	r1, [pc, #584]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 8000212:	4893      	ldr	r0, [pc, #588]	; (8000460 <ReceiveAndFlashUpdate+0x2b0>)
 8000214:	f000 fac1 	bl	800079a <CAN_Transmit>


	CANTX_msg.length = 2;
 8000218:	4b90      	ldr	r3, [pc, #576]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 800021a:	2202      	movs	r2, #2
 800021c:	731a      	strb	r2, [r3, #12]
	//receiving app size
	while((CANRX_msg.ActiveFlag != ENABLE) || (CANRX_msg.id != GATEWAY_BOOTLOADER_RQ_ID));
 800021e:	bf00      	nop
 8000220:	4b90      	ldr	r3, [pc, #576]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000222:	7bdb      	ldrb	r3, [r3, #15]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d1fb      	bne.n	8000220 <ReceiveAndFlashUpdate+0x70>
 8000228:	4b8e      	ldr	r3, [pc, #568]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f240 1223 	movw	r2, #291	; 0x123
 8000230:	4293      	cmp	r3, r2
 8000232:	d1f5      	bne.n	8000220 <ReceiveAndFlashUpdate+0x70>
	CANRX_msg.ActiveFlag = DISABLE;
 8000234:	4b8b      	ldr	r3, [pc, #556]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000236:	2200      	movs	r2, #0
 8000238:	73da      	strb	r2, [r3, #15]
	uint16_t size = CANRX_msg.data[0] | CANRX_msg.data[1] << 8;
 800023a:	4b8a      	ldr	r3, [pc, #552]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 800023c:	791b      	ldrb	r3, [r3, #4]
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b88      	ldr	r3, [pc, #544]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000242:	795b      	ldrb	r3, [r3, #5]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21b      	sxth	r3, r3
 800024c:	863b      	strh	r3, [r7, #48]	; 0x30
	//receiving the image
	uint16_t wordCounter = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	86bb      	strh	r3, [r7, #52]	; 0x34
	while (wordCounter <= size) {
 8000252:	e066      	b.n	8000322 <ReceiveAndFlashUpdate+0x172>

		//Wait double word
		while((CANRX_msg.ActiveFlag != ENABLE) || (CANRX_msg.id != GATEWAY_BOOTLOADER_RQ_ID));
 8000254:	bf00      	nop
 8000256:	4b83      	ldr	r3, [pc, #524]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000258:	7bdb      	ldrb	r3, [r3, #15]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d1fb      	bne.n	8000256 <ReceiveAndFlashUpdate+0xa6>
 800025e:	4b81      	ldr	r3, [pc, #516]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f240 1223 	movw	r2, #291	; 0x123
 8000266:	4293      	cmp	r3, r2
 8000268:	d1f5      	bne.n	8000256 <ReceiveAndFlashUpdate+0xa6>
		CANRX_msg.ActiveFlag = DISABLE;
 800026a:	4b7e      	ldr	r3, [pc, #504]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 800026c:	2200      	movs	r2, #0
 800026e:	73da      	strb	r2, [r3, #15]

		for (uint8_t msgCounter = 0; msgCounter < CANRX_msg.length; msgCounter++) {
 8000270:	2300      	movs	r3, #0
 8000272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000276:	e03d      	b.n	80002f4 <ReceiveAndFlashUpdate+0x144>
			if(updateStatus == VERSION_PATCH){
 8000278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800027c:	2b03      	cmp	r3, #3
 800027e:	d10d      	bne.n	800029c <ReceiveAndFlashUpdate+0xec>
				patch[wordCounter + msgCounter] = CANRX_msg.data[msgCounter];
 8000280:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000284:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8000286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800028a:	440b      	add	r3, r1
 800028c:	4619      	mov	r1, r3
 800028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000290:	440b      	add	r3, r1
 8000292:	4974      	ldr	r1, [pc, #464]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 8000294:	440a      	add	r2, r1
 8000296:	7912      	ldrb	r2, [r2, #4]
 8000298:	701a      	strb	r2, [r3, #0]
 800029a:	e026      	b.n	80002ea <ReceiveAndFlashUpdate+0x13a>
			}else {
				Dwords[wordCounter / 8] = (Dwords[wordCounter / 8] << 8) | CANRX_msg.data[7 - msgCounter];
 800029c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800029e:	08db      	lsrs	r3, r3, #3
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002a6:	4413      	add	r3, r2
 80002a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80002ac:	f04f 0200 	mov.w	r2, #0
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80002ba:	0202      	lsls	r2, r0, #8
 80002bc:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 80002c0:	f1c1 0107 	rsb	r1, r1, #7
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 80002c6:	4401      	add	r1, r0
 80002c8:	7909      	ldrb	r1, [r1, #4]
 80002ca:	b2c9      	uxtb	r1, r1
 80002cc:	2000      	movs	r0, #0
 80002ce:	460c      	mov	r4, r1
 80002d0:	4605      	mov	r5, r0
 80002d2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80002d4:	08c9      	lsrs	r1, r1, #3
 80002d6:	b289      	uxth	r1, r1
 80002d8:	00c9      	lsls	r1, r1, #3
 80002da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80002dc:	4401      	add	r1, r0
 80002de:	ea42 0804 	orr.w	r8, r2, r4
 80002e2:	ea43 0905 	orr.w	r9, r3, r5
 80002e6:	e9c1 8900 	strd	r8, r9, [r1]
		for (uint8_t msgCounter = 0; msgCounter < CANRX_msg.length; msgCounter++) {
 80002ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80002ee:	3301      	adds	r3, #1
 80002f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80002f4:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <ReceiveAndFlashUpdate+0x2b4>)
 80002f6:	7b1b      	ldrb	r3, [r3, #12]
 80002f8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3bb      	bcc.n	8000278 <ReceiveAndFlashUpdate+0xc8>
			}
		}
		wordCounter+=8;
 8000300:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000302:	3308      	adds	r3, #8
 8000304:	86bb      	strh	r3, [r7, #52]	; 0x34
		CANTX_msg.data[0] = (uint8_t)(0xFF & wordCounter);
 8000306:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b54      	ldr	r3, [pc, #336]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 800030c:	711a      	strb	r2, [r3, #4]
		CANTX_msg.data[1] = (uint8_t)((0xFF00 & wordCounter) >> 8);
 800030e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b51      	ldr	r3, [pc, #324]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 8000318:	715a      	strb	r2, [r3, #5]
		//request next double word
		CAN_Transmit(CAN, &CANTX_msg);
 800031a:	4950      	ldr	r1, [pc, #320]	; (800045c <ReceiveAndFlashUpdate+0x2ac>)
 800031c:	4850      	ldr	r0, [pc, #320]	; (8000460 <ReceiveAndFlashUpdate+0x2b0>)
 800031e:	f000 fa3c 	bl	800079a <CAN_Transmit>
	while (wordCounter <= size) {
 8000322:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000324:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000326:	429a      	cmp	r2, r3
 8000328:	d994      	bls.n	8000254 <ReceiveAndFlashUpdate+0xa4>
	}

	if(updateStatus == VERSION_PATCH){
 800032a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800032e:	2b03      	cmp	r3, #3
 8000330:	d153      	bne.n	80003da <ReceiveAndFlashUpdate+0x22a>
		uint8_t* unCompressedPatch = (uint8_t*)malloc(8600);//patch file
 8000332:	f242 1098 	movw	r0, #8600	; 0x2198
 8000336:	f001 fa85 	bl	8001844 <malloc>
 800033a:	4603      	mov	r3, r0
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(unCompressedPatch == NULL){
 800033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000340:	2b00      	cmp	r3, #0
 8000342:	f000 80ba 	beq.w	80004ba <ReceiveAndFlashUpdate+0x30a>
			return;
		}
		uint32_t UncompatchSize = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t* image;
		uint8_t *oldimage = (uint8_t*)BOOTLOADER_CURRENTBANK;
 800034a:	4b47      	ldr	r3, [pc, #284]	; (8000468 <ReceiveAndFlashUpdate+0x2b8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t oldImageSize = BOOTLOADER_CURRENTBANK  == APP1_START_ADDRESS ? APP1_IMAGESIZE : APP2_IMAGESIZE;
 8000350:	4b45      	ldr	r3, [pc, #276]	; (8000468 <ReceiveAndFlashUpdate+0x2b8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a45      	ldr	r2, [pc, #276]	; (800046c <ReceiveAndFlashUpdate+0x2bc>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d102      	bne.n	8000360 <ReceiveAndFlashUpdate+0x1b0>
 800035a:	4b45      	ldr	r3, [pc, #276]	; (8000470 <ReceiveAndFlashUpdate+0x2c0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	e001      	b.n	8000364 <ReceiveAndFlashUpdate+0x1b4>
 8000360:	4b44      	ldr	r3, [pc, #272]	; (8000474 <ReceiveAndFlashUpdate+0x2c4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	623b      	str	r3, [r7, #32]

		UncompatchSize = LZ_Uncompress( patch, unCompressedPatch, size);
 8000366:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000368:	461a      	mov	r2, r3
 800036a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800036c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800036e:	f001 f86e 	bl	800144e <LZ_Uncompress>
 8000372:	4603      	mov	r3, r0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
		free(patch);
 8000376:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000378:	f001 fa6c 	bl	8001854 <free>
		if(UncompatchSize == -1){
 800037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000382:	f000 809c 	beq.w	80004be <ReceiveAndFlashUpdate+0x30e>
			return;
		}
		imageSize = bspatch_newsize(unCompressedPatch, UncompatchSize);
 8000386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000388:	4619      	mov	r1, r3
 800038a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800038c:	f000 ff3c 	bl	8001208 <bspatch_newsize>
 8000390:	4603      	mov	r3, r0
 8000392:	86fb      	strh	r3, [r7, #54]	; 0x36
		image = (uint8_t*)malloc(imageSize);
 8000394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fa54 	bl	8001844 <malloc>
 800039c:	4603      	mov	r3, r0
 800039e:	61fb      	str	r3, [r7, #28]
		if(image == NULL){
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f000 808d 	beq.w	80004c2 <ReceiveAndFlashUpdate+0x312>
			return;
		}
		bspatch(oldimage,  oldImageSize, unCompressedPatch, UncompatchSize, image,  imageSize);
 80003a8:	6a39      	ldr	r1, [r7, #32]
 80003aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	4613      	mov	r3, r2
 80003b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003ba:	f000 ff41 	bl	8001240 <bspatch>
		free(unCompressedPatch);
 80003be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003c0:	f001 fa48 	bl	8001854 <free>
		//flash Dword
		Program_Software((uint64_t*)image, imageSize / 8);
 80003c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003c6:	08db      	lsrs	r3, r3, #3
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	69f8      	ldr	r0, [r7, #28]
 80003ce:	f000 f885 	bl	80004dc <Program_Software>
		free(image);
 80003d2:	69f8      	ldr	r0, [r7, #28]
 80003d4:	f001 fa3e 	bl	8001854 <free>
 80003d8:	e006      	b.n	80003e8 <ReceiveAndFlashUpdate+0x238>
	}else {
		//flash Dword
		Program_Software(Dwords, size / 8);
 80003da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003dc:	08db      	lsrs	r3, r3, #3
 80003de:	b29b      	uxth	r3, r3
 80003e0:	4619      	mov	r1, r3
 80003e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80003e4:	f000 f87a 	bl	80004dc <Program_Software>
	}
	if(isFlashed == 0){
 80003e8:	4b23      	ldr	r3, [pc, #140]	; (8000478 <ReceiveAndFlashUpdate+0x2c8>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d06a      	beq.n	80004c6 <ReceiveAndFlashUpdate+0x316>
		return;
	}
	FLASH_Unlock();
 80003f0:	f000 fbe0 	bl	8000bb4 <FLASH_Unlock>
	//Update Flags
	uint32_t currentBank = BOOTLOADER_CURRENTBANK;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <ReceiveAndFlashUpdate+0x2b8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	61bb      	str	r3, [r7, #24]
	FLASH_EraseTypeDef pEraseInit;
	pEraseInit.PageAddress = CONFURATION_PAGE;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <ReceiveAndFlashUpdate+0x2a8>)
 80003fc:	613b      	str	r3, [r7, #16]
	pEraseInit.NbPages = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
	FLASH_Erase(&pEraseInit);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fbf4 	bl	8000bf4 <FLASH_Erase>
	FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_MODE_ADDRESS, BOOTLOADER_NORMALBOOT);
 800040c:	f04f 0202 	mov.w	r2, #2
 8000410:	f04f 0300 	mov.w	r3, #0
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <ReceiveAndFlashUpdate+0x2a8>)
 8000416:	2002      	movs	r0, #2
 8000418:	f000 fc6e 	bl	8000cf8 <FLASH_Program>
	if(currentBank  == APP1_START_ADDRESS){
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <ReceiveAndFlashUpdate+0x2bc>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d12d      	bne.n	8000480 <ReceiveAndFlashUpdate+0x2d0>

		FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_CURRENTBANK_ADDRESS, APP2_START_ADDRESS);
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <ReceiveAndFlashUpdate+0x2cc>)
 8000426:	f04f 0300 	mov.w	r3, #0
 800042a:	490f      	ldr	r1, [pc, #60]	; (8000468 <ReceiveAndFlashUpdate+0x2b8>)
 800042c:	2002      	movs	r0, #2
 800042e:	f000 fc63 	bl	8000cf8 <FLASH_Program>
		FLASH_Program(FLASH_TYPEPROGRAM_WORD, APP2_IMAGESIZE_ADDRESS, updateStatus == VERSION_PATCH ? imageSize : size);
 8000432:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000436:	2b03      	cmp	r3, #3
 8000438:	d101      	bne.n	800043e <ReceiveAndFlashUpdate+0x28e>
 800043a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800043c:	e000      	b.n	8000440 <ReceiveAndFlashUpdate+0x290>
 800043e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000440:	b29b      	uxth	r3, r3
 8000442:	2200      	movs	r2, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	607a      	str	r2, [r7, #4]
 8000448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800044c:	4909      	ldr	r1, [pc, #36]	; (8000474 <ReceiveAndFlashUpdate+0x2c4>)
 800044e:	2002      	movs	r0, #2
 8000450:	f000 fc52 	bl	8000cf8 <FLASH_Program>
 8000454:	e02c      	b.n	80004b0 <ReceiveAndFlashUpdate+0x300>
 8000456:	bf00      	nop
 8000458:	08004000 	.word	0x08004000
 800045c:	20000080 	.word	0x20000080
 8000460:	40006400 	.word	0x40006400
 8000464:	20000090 	.word	0x20000090
 8000468:	08004004 	.word	0x08004004
 800046c:	08005000 	.word	0x08005000
 8000470:	08004008 	.word	0x08004008
 8000474:	0800400c 	.word	0x0800400c
 8000478:	200000a0 	.word	0x200000a0
 800047c:	08012800 	.word	0x08012800

	}else {
		FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_CURRENTBANK_ADDRESS, APP1_START_ADDRESS);
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <ReceiveAndFlashUpdate+0x320>)
 8000482:	f04f 0300 	mov.w	r3, #0
 8000486:	4913      	ldr	r1, [pc, #76]	; (80004d4 <ReceiveAndFlashUpdate+0x324>)
 8000488:	2002      	movs	r0, #2
 800048a:	f000 fc35 	bl	8000cf8 <FLASH_Program>
		FLASH_Program(FLASH_TYPEPROGRAM_WORD, APP1_IMAGESIZE_ADDRESS, updateStatus == VERSION_PATCH ? imageSize : size);
 800048e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000492:	2b03      	cmp	r3, #3
 8000494:	d101      	bne.n	800049a <ReceiveAndFlashUpdate+0x2ea>
 8000496:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000498:	e000      	b.n	800049c <ReceiveAndFlashUpdate+0x2ec>
 800049a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800049c:	b29b      	uxth	r3, r3
 800049e:	2200      	movs	r2, #0
 80004a0:	469a      	mov	sl, r3
 80004a2:	4693      	mov	fp, r2
 80004a4:	4652      	mov	r2, sl
 80004a6:	465b      	mov	r3, fp
 80004a8:	490b      	ldr	r1, [pc, #44]	; (80004d8 <ReceiveAndFlashUpdate+0x328>)
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 fc24 	bl	8000cf8 <FLASH_Program>

	}

	FLASH_Lock();
 80004b0:	f000 fb92 	bl	8000bd8 <FLASH_Lock>
 80004b4:	e008      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
			return;
 80004b6:	bf00      	nop
 80004b8:	e006      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
			return;
 80004ba:	bf00      	nop
 80004bc:	e004      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
			return;
 80004be:	bf00      	nop
 80004c0:	e002      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
			return;
 80004c2:	bf00      	nop
 80004c4:	e000      	b.n	80004c8 <ReceiveAndFlashUpdate+0x318>
		return;
 80004c6:	bf00      	nop

}
 80004c8:	3740      	adds	r7, #64	; 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80004d0:	08005000 	.word	0x08005000
 80004d4:	08004004 	.word	0x08004004
 80004d8:	08004008 	.word	0x08004008

080004dc <Program_Software>:


void Program_Software(uint64_t *Data, uint16_t Data_length) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
/*--------------------  Erase APPLICATION AREA ----------------------*/

	FLASH_Unlock();
 80004e8:	f000 fb64 	bl	8000bb4 <FLASH_Unlock>

	FLASH_EraseTypeDef pEraseInit;
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]

	/* Get the application start address to erase application */
	if(BOOTLOADER_CURRENTBANK == APP1_START_ADDRESS){
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <Program_Software+0x8c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	; (800056c <Program_Software+0x90>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d102      	bne.n	8000500 <Program_Software+0x24>
		pEraseInit.PageAddress = APP2_START_ADDRESS;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <Program_Software+0x94>)
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	e009      	b.n	8000514 <Program_Software+0x38>
	}else if (BOOTLOADER_CURRENTBANK == APP2_START_ADDRESS){
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <Program_Software+0x8c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <Program_Software+0x94>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d102      	bne.n	8000510 <Program_Software+0x34>
		pEraseInit.PageAddress = APP1_START_ADDRESS;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <Program_Software+0x90>)
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	e001      	b.n	8000514 <Program_Software+0x38>
	}else{
		pEraseInit.PageAddress = APP1_START_ADDRESS;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <Program_Software+0x90>)
 8000512:	613b      	str	r3, [r7, #16]
	}

	/* Get the number of pages to erase */
	pEraseInit.NbPages = APP_BANK_SIZE / PAGE_SIZE_BYTES;
 8000514:	2336      	movs	r3, #54	; 0x36
 8000516:	617b      	str	r3, [r7, #20]
	//FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORDWORD, (APP1_START_ADDRESS + APPLICATION_WRITE_INDEX), HALFWORD_DATA);
	FLASH_Erase(&pEraseInit);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb69 	bl	8000bf4 <FLASH_Erase>

	uint32_t currentBankBaseAddress = pEraseInit.PageAddress;
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	61bb      	str	r3, [r7, #24]
	for(uint32_t DWcounter = 0;DWcounter <= Data_length; DWcounter++ ){
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	e00f      	b.n	800054c <Program_Software+0x70>
		FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (currentBankBaseAddress + DWcounter * 0x8), Data[DWcounter]); //0x16 double word size
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	00da      	lsls	r2, r3, #3
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	18d1      	adds	r1, r2, r3
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000540:	2003      	movs	r0, #3
 8000542:	f000 fbd9 	bl	8000cf8 <FLASH_Program>
	for(uint32_t DWcounter = 0;DWcounter <= Data_length; DWcounter++ ){
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	3301      	adds	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	887b      	ldrh	r3, [r7, #2]
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	429a      	cmp	r2, r3
 8000552:	d9eb      	bls.n	800052c <Program_Software+0x50>
	}

	FLASH_Lock();
 8000554:	f000 fb40 	bl	8000bd8 <FLASH_Lock>
	isFlashed = 1;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <Program_Software+0x98>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]

}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	08004004 	.word	0x08004004
 800056c:	08005000 	.word	0x08005000
 8000570:	08012800 	.word	0x08012800
 8000574:	200000a0 	.word	0x200000a0

08000578 <Set_MSP>:
		block[i] = 0;
	}
}
*/

static void Set_MSP(uint32_t topOfMainStack){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f383 8808 	msr	MSP, r3
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <JumpToApplication>:


static void JumpToApplication( uint32_t appAddress){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(appAddress + 4U)));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3304      	adds	r3, #4
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = appAddress - FLASH_BASE;
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <JumpToApplication+0x30>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80005a8:	6093      	str	r3, [r2, #8]

	Set_MSP(*(volatile uint32_t*) appAddress);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffe2 	bl	8000578 <Set_MSP>

	app_reset_handler();    //call the app reset handler
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4798      	blx	r3
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <System_DeInit>:



static void System_DeInit(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	RCC->CFGR &= ~(RCC_CFGR_SW);
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <System_DeInit+0x68>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <System_DeInit+0x68>)
 80005ce:	f023 0303 	bic.w	r3, r3, #3
 80005d2:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != 0);
 80005d4:	bf00      	nop
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <System_DeInit+0x68>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f003 030c 	and.w	r3, r3, #12
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f9      	bne.n	80005d6 <System_DeInit+0x12>
	RCC->CR &= ~(RCC_CR_PLLON);
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <System_DeInit+0x68>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <System_DeInit+0x68>)
 80005e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005ec:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~(RCC_CR_HSEON);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <System_DeInit+0x68>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <System_DeInit+0x68>)
 80005f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f8:	6013      	str	r3, [r2, #0]
	SysTick->CTRL = 0;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <System_DeInit+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <System_DeInit+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <System_DeInit+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
	RCC_DisablePeripheral(RCC_AFIOCLK);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fd21 	bl	8001054 <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_GPIOCCLK);
 8000612:	2004      	movs	r0, #4
 8000614:	f000 fd1e 	bl	8001054 <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_GPIOACLK);
 8000618:	2002      	movs	r0, #2
 800061a:	f000 fd1b 	bl	8001054 <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_CANCLK);
 800061e:	2039      	movs	r0, #57	; 0x39
 8000620:	f000 fd18 	bl	8001054 <RCC_DisablePeripheral>
	Disable_irq();
 8000624:	f000 fc20 	bl	8000e68 <Disable_irq>

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	e000e010 	.word	0xe000e010

08000634 <USB_LP_CAN1_RX0_IRQHandler>:




void USB_LP_CAN1_RX0_IRQHandler(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if(CAN->RF0R & CAN_RF0R_FMP0){
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x20>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d004      	beq.n	800064e <USB_LP_CAN1_RX0_IRQHandler+0x1a>
		CAN_Receive(CAN, CAN_FIFO0, &CANRX_msg);//make sure that the function det active flage to enable
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <USB_LP_CAN1_RX0_IRQHandler+0x24>)
 8000646:	2100      	movs	r1, #0
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x20>)
 800064a:	f000 f97e 	bl	800094a <CAN_Receive>
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40006400 	.word	0x40006400
 8000658:	20000090 	.word	0x20000090

0800065c <CAN_Setup>:

/* ------------------------------- Configuration for CAN ---------------------------------*/
/*
 * */

void CAN_Setup(CAN_TypeDef *CANx, CAN_setupTypeDef *CANsetupStruct) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	/* Initialization request */
	CANx->MCR |= CAN_MCR_INRQ;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f043 0201 	orr.w	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]

	/*Request to exit Sleep mode */
	CANx->MCR &= ~CAN_MCR_SLEEP_Msk;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 0202 	bic.w	r2, r3, #2
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]

	/* Wait for initialization mode */
	while (!(CAN_MSR_INAK & CANx->MSR))
 800067e:	bf00      	nop
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f9      	beq.n	8000680 <CAN_Setup+0x24>
		;

	/******************* SET MCR register configuration**************************/

	/* Set the time triggered communication mode */
	if (CANsetupStruct->TTCM == ENABLE) {
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d106      	bne.n	80006a2 <CAN_Setup+0x46>
		CANx->MCR |= CAN_MCR_TTCM;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e005      	b.n	80006ae <CAN_Setup+0x52>
	} else {
		CANx->MCR &= ~(CAN_MCR_TTCM_Msk);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
	}
	/* Set the automatic bus-off management */
	if (CANsetupStruct->ABOM == ENABLE) {
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d106      	bne.n	80006c4 <CAN_Setup+0x68>
		CANx->MCR |= CAN_MCR_ABOM;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e005      	b.n	80006d0 <CAN_Setup+0x74>
	} else {
		CANx->MCR &= ~(CAN_MCR_ABOM_Msk);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (CANsetupStruct->AWUM == ENABLE) {
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d106      	bne.n	80006e6 <CAN_Setup+0x8a>
		CANx->MCR |= CAN_MCR_AWUM;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f043 0220 	orr.w	r2, r3, #32
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e005      	b.n	80006f2 <CAN_Setup+0x96>
	} else {
		CANx->MCR &= ~(CAN_MCR_AWUM_Msk);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 0220 	bic.w	r2, r3, #32
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	601a      	str	r2, [r3, #0]
	}

	/* Set the no automatic retransmission */
	if (CANsetupStruct->NART == ENABLE) {
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	78db      	ldrb	r3, [r3, #3]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d106      	bne.n	8000708 <CAN_Setup+0xac>
		CANx->MCR |= CAN_MCR_NART;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f043 0210 	orr.w	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e005      	b.n	8000714 <CAN_Setup+0xb8>
	} else {
		CANx->MCR &= ~(CAN_MCR_NART_Msk);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 0210 	bic.w	r2, r3, #16
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (CANsetupStruct->TXFP == ENABLE) {
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d106      	bne.n	800072a <CAN_Setup+0xce>
		CANx->MCR &= ~(CAN_MCR_TXFP_Msk);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 0204 	bic.w	r2, r3, #4
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e005      	b.n	8000736 <CAN_Setup+0xda>
	} else {
		CANx->MCR |= CAN_MCR_TXFP;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 0204 	orr.w	r2, r3, #4
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
	}
	if(CANsetupStruct->RFLM == ENABLE){
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d106      	bne.n	800074c <CAN_Setup+0xf0>
		//FIFO Overload Lock Mode
		CANx->MCR |= CAN_MCR_RFLM;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 0208 	orr.w	r2, r3, #8
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e005      	b.n	8000758 <CAN_Setup+0xfc>
	}else{
		CANx->MCR &= ~(CAN_MCR_RFLM_Msk);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 0208 	bic.w	r2, r3, #8
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]
	 * tBS2 = tq * (TS2[2:0] + 1)  = 0.111 * (0+1)  = 0.111 micro sec
	 * NominalBitTime = 1 * tq + tBS1 + tBS2 = 0.111 + 0.777 + 0.111 = 0.999 micro sec
	 * Boudrate = 1 / NominalBitTime = 1 Mbps
	 *
	 * */
	CANx->BTR = CAN_BTR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a03      	ldr	r2, [pc, #12]	; (8000768 <CAN_Setup+0x10c>)
 800075c:	61da      	str	r2, [r3, #28]
	//set all filters to our can (other can must deactivate)
	//CANx->FMR &= ~(CAN_FMR_CAN2SB_Msk);

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	001e000f 	.word	0x001e000f

0800076c <CAN_Normal>:
}

/*
 * ---------------------------------- CAN set normal mode ---------------------------------
 */
void CAN_Normal(CAN_TypeDef *CANx) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	CANx->MCR &= ~(CAN_MCR_INRQ_Msk | CAN_MCR_SLEEP_Msk); //normal operating mode, reset(INRQ,SLEEP)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 0203 	bic.w	r2, r3, #3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]

	while (CANx->MSR & CAN_MSR_INAK)
 8000780:	bf00      	nop
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <CAN_Normal+0x16>
		;

}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <CAN_Transmit>:

/*
 * note : para MailboxNumber Can be :TX_MAILBOX_0, TX_MAILBOX_1, TX_MAILBOX_2
 *------------------------------------ CAN Transmission ----------------------------------
 */
void CAN_Transmit(CAN_TypeDef *CANx, CAN_msg *msg) {
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]
	/* check if transmission mailbox is empty */
	uint8_t mailBoxIndex = 10;
 80007a4:	230a      	movs	r3, #10
 80007a6:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 80007a8:	e019      	b.n	80007de <CAN_Transmit+0x44>
		if(CANx->TSR & CAN_TSR_TME0){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <CAN_Transmit+0x22>
			mailBoxIndex = CAN_TSR_TME0 >> 27;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e010      	b.n	80007de <CAN_Transmit+0x44>
		}else if(CANx->TSR & CAN_TSR_TME1){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <CAN_Transmit+0x34>
			mailBoxIndex = CAN_TSR_TME1 >> 27;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e007      	b.n	80007de <CAN_Transmit+0x44>
		}else if (CANx->TSR & CAN_TSR_TME2) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <CAN_Transmit+0x44>
			mailBoxIndex = CAN_TSR_TME2 >> 27;
 80007da:	2302      	movs	r3, #2
 80007dc:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b0a      	cmp	r3, #10
 80007e2:	d0e2      	beq.n	80007aa <CAN_Transmit+0x10>
		}
	}
	 // ------ check if transmission mailbox  is empty ------------------------------------

	CANx->sTxMailBox[mailBoxIndex].TIR = (uint32_t) 0; // Reset TIR register
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	3318      	adds	r3, #24
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	4413      	add	r3, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]

	// Setup identifier information   ?<==================
	if (msg->format == STANDARD_FORMAT) {
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	7b5b      	ldrb	r3, [r3, #13]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d110      	bne.n	800081c <CAN_Transmit+0x82>
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 21);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	3318      	adds	r3, #24
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4413      	add	r3, r2
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	055a      	lsls	r2, r3, #21
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	430a      	orrs	r2, r1
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	3318      	adds	r3, #24
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	440b      	add	r3, r1
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	e011      	b.n	8000840 <CAN_Transmit+0xa6>
	} else {
		// Extended ID
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 3)
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	3318      	adds	r3, #24
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	431a      	orrs	r2, r3
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	f042 0204 	orr.w	r2, r2, #4
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	3318      	adds	r3, #24
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	440b      	add	r3, r1
 800083e:	601a      	str	r2, [r3, #0]
				| CAN_TI0R_IDE;
	}

	// Setup type information
	if (msg->type == DATA_FRAME) {
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	7b9b      	ldrb	r3, [r3, #14]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d13c      	bne.n	80008c2 <CAN_Transmit+0x128>
		// DATA FRAME
		/*reset transmit data registers*/
		CANx->sTxMailBox[mailBoxIndex].TDLR = 0;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4413      	add	r3, r2
 8000850:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
		CANx->sTxMailBox[mailBoxIndex].TDHR = 0;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	79db      	ldrb	r3, [r3, #7]
 800086c:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[2] << 16)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	799b      	ldrb	r3, [r3, #6]
 8000872:	041b      	lsls	r3, r3, #16
 8000874:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	431a      	orrs	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8000884:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 8000886:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	440b      	add	r3, r1
 800088e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000892:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	7adb      	ldrb	r3, [r3, #11]
 8000898:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[6] << 16)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	7a9b      	ldrb	r3, [r3, #10]
 800089e:	041b      	lsls	r3, r3, #16
 80008a0:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	7a5b      	ldrb	r3, [r3, #9]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	431a      	orrs	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	7a1b      	ldrb	r3, [r3, #8]
 80008ae:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 80008b2:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	440b      	add	r3, r1
 80008ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e00d      	b.n	80008de <CAN_Transmit+0x144>
	} else {
		// REMOTE FRAME
		CANx->sTxMailBox[mailBoxIndex].TIR |= (CAN_TI0R_RTR);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	3318      	adds	r3, #24
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	4413      	add	r3, r2
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f042 0202 	orr.w	r2, r2, #2
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	3318      	adds	r3, #24
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	440b      	add	r3, r1
 80008dc:	601a      	str	r2, [r3, #0]
	}

	// Setup Can frame Data length Code
	CANx->sTxMailBox[mailBoxIndex].TDTR &= ~CAN_TDT0R_DLC;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	3318      	adds	r3, #24
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	4413      	add	r3, r2
 80008e8:	3304      	adds	r3, #4
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	f022 020f 	bic.w	r2, r2, #15
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	3318      	adds	r3, #24
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	440b      	add	r3, r1
 80008fa:	3304      	adds	r3, #4
 80008fc:	601a      	str	r2, [r3, #0]
	CANx->sTxMailBox[mailBoxIndex].TDTR |= (msg->length & CAN_TDT0R_DLC);
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	3318      	adds	r3, #24
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4413      	add	r3, r2
 8000908:	3304      	adds	r3, #4
 800090a:	6819      	ldr	r1, [r3, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	7b1b      	ldrb	r3, [r3, #12]
 8000910:	f003 020f 	and.w	r2, r3, #15
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	430a      	orrs	r2, r1
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	3318      	adds	r3, #24
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	601a      	str	r2, [r3, #0]

	/* Transmit Mailbox Request */
	CANx->sTxMailBox[mailBoxIndex].TIR |= CAN_TI0R_TXRQ;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	3318      	adds	r3, #24
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	4413      	add	r3, r2
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	f042 0201 	orr.w	r2, r2, #1
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	3318      	adds	r3, #24
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <CAN_Receive>:


/* -------------------------------      CAN Receiving     ------------------------------- */
// note para FifoNumber can be CAN_FIFO0, CAN_FIFO1
void CAN_Receive(CAN_TypeDef *CANx, uint8_t FifoNumber, CAN_msg *msg) {
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	460b      	mov	r3, r1
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	72fb      	strb	r3, [r7, #11]

	// Read identifier information
	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_IDE) == 0) {
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	331b      	adds	r3, #27
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10e      	bne.n	800098a <CAN_Receive+0x40>
		// Standard ID

		msg->format = STANDARD_FORMAT;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x000007FF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 21);
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	331b      	adds	r3, #27
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	0d5b      	lsrs	r3, r3, #21
 8000980:	f3c3 020a 	ubfx	r2, r3, #0, #11
		msg->id = (uint32_t) 0x000007FF
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e00d      	b.n	80009a6 <CAN_Receive+0x5c>
	} else {
		// Extended ID
		msg->format = EXTENDED_FORMAT;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x0003FFFF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 3);
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	331b      	adds	r3, #27
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	f3c3 0211 	ubfx	r2, r3, #0, #18
		msg->id = (uint32_t) 0x0003FFFF
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
	}

	// Read type information

	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_RTR) == 0) {
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	331b      	adds	r3, #27
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	4413      	add	r3, r2
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <CAN_Receive+0x78>

		msg->type = DATA_FRAME;                     // DATA   FRAME
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	739a      	strb	r2, [r3, #14]
 80009c0:	e002      	b.n	80009c8 <CAN_Receive+0x7e>

	} else {
		msg->type = REMOTE_FRAME;                   // REMOTE FRAME
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	739a      	strb	r2, [r3, #14]
	}

	// Read length (number of received bytes)
	msg->length = (uint8_t) 0x0000000F & CANx->sFIFOMailBox[FifoNumber].RDTR;
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	331b      	adds	r3, #27
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4413      	add	r3, r2
 80009d2:	3304      	adds	r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f003 030f 	and.w	r3, r3, #15
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	731a      	strb	r2, [r3, #12]

	// Read data bytes
	uint8_t ReceivDataCounter;

	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 80009e2:	2300      	movs	r3, #0
 80009e4:	75fb      	strb	r3, [r7, #23]
 80009e6:	e027      	b.n	8000a38 <CAN_Receive+0xee>
			ReceivDataCounter++)

			{
		if (ReceivDataCounter < 4) /*get Data from low register*/
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d810      	bhi.n	8000a10 <CAN_Receive+0xc6>
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	4413      	add	r3, r2
 80009f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009fa:	681a      	ldr	r2, [r3, #0]
					>> (ReceivDataCounter * 8)) & 0xFF; //get Data from low register byte by byte
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
 8000a04:	b2d1      	uxtb	r1, r2
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	711a      	strb	r2, [r3, #4]
 8000a0e:	e010      	b.n	8000a32 <CAN_Receive+0xe8>
		} else /*get Data from high register*/
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	4413      	add	r3, r2
 8000a18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a1c:	681a      	ldr	r2, [r3, #0]
					>> ((ReceivDataCounter - 4) * 8)) & 0xFF; //get Data from high register byte by byte
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	3b04      	subs	r3, #4
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	b2d1      	uxtb	r1, r2
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	460a      	mov	r2, r1
 8000a30:	711a      	strb	r2, [r3, #4]
			ReceivDataCounter++)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	3301      	adds	r3, #1
 8000a36:	75fb      	strb	r3, [r7, #23]
	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7b1b      	ldrb	r3, [r3, #12]
 8000a3c:	7dfa      	ldrb	r2, [r7, #23]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d3d2      	bcc.n	80009e8 <CAN_Receive+0x9e>
		}

	}

	if (FifoNumber == CAN_FIFO0) //check for input FIFO to release
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <CAN_Receive+0x10c>
	{

		CANx->RF0R |= CAN_RF0R_RFOM0;  //release FIFO 0
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	f043 0220 	orr.w	r2, r3, #32
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	e008      	b.n	8000a68 <CAN_Receive+0x11e>
	}

	else if (FifoNumber == CAN_FIFO1) {
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d105      	bne.n	8000a68 <CAN_Receive+0x11e>

		CANx->RF1R |= CAN_RF1R_RFOM1;  //release FIFO 1
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f043 0220 	orr.w	r2, r3, #32
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	611a      	str	r2, [r3, #16]

	else {

		/*wrong FIFO number input*/
	}
	msg->ActiveFlag = ENABLE;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	73da      	strb	r2, [r3, #15]
}
 8000a6e:	bf00      	nop
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <CAN_Interrupt_Enable>:
/*
 * ------------------------------------ CAN interrupt ------------------------------------
 */

void CAN_Interrupt_Enable(CAN_TypeDef *CANx, uint32_t CanInterruptType,
		FunctionalState InterruptNewState) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	4613      	mov	r3, r2
 8000a84:	71fb      	strb	r3, [r7, #7]

	if (InterruptNewState == ENABLE) //check for input new state of input interrupt
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d106      	bne.n	8000a9a <CAN_Interrupt_Enable+0x22>
			{

		CANx->IER |= CanInterruptType; // Enable the selected CANx interrupt
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	615a      	str	r2, [r3, #20]
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt

	} else {
		/*WRONG STATE */
	}
}
 8000a98:	e009      	b.n	8000aae <CAN_Interrupt_Enable+0x36>
	} else if (InterruptNewState == DISABLE) {
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d106      	bne.n	8000aae <CAN_Interrupt_Enable+0x36>
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	615a      	str	r2, [r3, #20]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <CAN_ConfigFilter>:
	return ErrorcodeType; //Return the error code
}


void CAN_ConfigFilter(CAN_TypeDef *CANx, CAN_FilterTypeDef *sFilterConfig)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;


    /* Initialization mode for the filter */
    CANx->FMR |= CAN_FMR_FINIT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ac8:	f043 0201 	orr.w	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200


    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f003 031f 	and.w	r3, r3, #31
 8000ada:	2201      	movs	r2, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CANx->FA1R &= ~(filternbrbitpos);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	401a      	ands	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */


      /* 32-bit scale for the filter */
      CANx->FS1R |= filternbrbitpos;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* Filter Mode */
      if (sFilterConfig->FilterMode == CAN_FILTERMODE_MASK)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d113      	bne.n	8000b34 <CAN_ConfigFilter+0x7c>
      {
        /* Id/Mask mode for the filter*/
        CANx->FM1R &= ~(filternbrbitpos);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	401a      	ands	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

        /* 32-bit identifier  */
        CANx->sFilterRegister[sFilterConfig->FilterBank].FR1 =((uint32_t)sFilterConfig->FilterId) << 21 ;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	0552      	lsls	r2, r2, #21
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	3348      	adds	r3, #72	; 0x48
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	e010      	b.n	8000b56 <CAN_ConfigFilter+0x9e>
      }
      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
      {
        /* Identifier list mode for the filter*/
        CANx->FM1R |= (filternbrbitpos);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    	CANx->sFilterRegister[sFilterConfig->FilterBank].FR0 = ((uint32_t)sFilterConfig->FilterMaskId) << 21 ;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	68d2      	ldr	r2, [r2, #12]
 8000b4c:	0559      	lsls	r1, r3, #21
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3248      	adds	r2, #72	; 0x48
 8000b52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FIFO0)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d109      	bne.n	8000b72 <CAN_ConfigFilter+0xba>
    {
      /* FIFO 0 assignation for the filter */
      CANx->FFA1R &= ~(filternbrbitpos);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b70:	e007      	b.n	8000b82 <CAN_ConfigFilter+0xca>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      CANx->FFA1R |= (filternbrbitpos);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d107      	bne.n	8000b9a <CAN_ConfigFilter+0xe2>
    {
      CANx->FA1R |= filternbrbitpos;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialization mode for the filter */
    CANx->FMR &= ~(CAN_FMR_FINIT);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ba0:	f023 0201 	bic.w	r2, r3, #1
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <FLASH_Unlock>:
/*
 * --------------------  Unlock the FLASH control register access  -----------------------
 *
 */
void FLASH_Unlock(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <FLASH_Unlock+0x18>)
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <FLASH_Unlock+0x1c>)
 8000bbc:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <FLASH_Unlock+0x18>)
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <FLASH_Unlock+0x20>)
 8000bc2:	605a      	str	r2, [r3, #4]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	45670123 	.word	0x45670123
 8000bd4:	cdef89ab 	.word	0xcdef89ab

08000bd8 <FLASH_Lock>:

/**
  *-------------------  Locks the FLASH control register access --------------------------
  */
void FLASH_Lock(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <FLASH_Lock+0x18>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <FLASH_Lock+0x18>)
 8000be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be6:	6113      	str	r3, [r2, #16]

}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <FLASH_Erase>:


void FLASH_Erase(FLASH_EraseTypeDef *pEraseInit)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	 uint32_t address = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d108      	bne.n	8000c1a <FLASH_Erase+0x26>
	  {
	        /*Mass erase to be done*/
	        FLASH_MassErase();
 8000c08:	f000 f828 	bl	8000c5c <FLASH_MassErase>
	        /* If the erase operation is completed, disable the MER Bit */
	        FLASH->CR &= ~(FLASH_CR_MER);
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <FLASH_Erase+0x64>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <FLASH_Erase+0x64>)
 8000c12:	f023 0304 	bic.w	r3, r3, #4
 8000c16:	6113      	str	r3, [r2, #16]
			   FLASH->CR &= ~(FLASH_CR_PER);

	         }
	  }

}
 8000c18:	e019      	b.n	8000c4e <FLASH_Erase+0x5a>
		     for(address = pEraseInit->PageAddress; address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress); address += FLASH_PAGE_SIZE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e00c      	b.n	8000c3c <FLASH_Erase+0x48>
		    	 FLASH_PageErase(address);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f000 f83e 	bl	8000ca4 <FLASH_PageErase>
			   FLASH->CR &= ~(FLASH_CR_PER);
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <FLASH_Erase+0x64>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <FLASH_Erase+0x64>)
 8000c2e:	f023 0302 	bic.w	r3, r3, #2
 8000c32:	6113      	str	r3, [r2, #16]
		     for(address = pEraseInit->PageAddress; address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress); address += FLASH_PAGE_SIZE)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	029a      	lsls	r2, r3, #10
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3e9      	bcc.n	8000c22 <FLASH_Erase+0x2e>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40022000 	.word	0x40022000

08000c5c <FLASH_MassErase>:
/*
 *  ----------------------------  Mass Erase Of Flash  ----------------------------------
 */
static void FLASH_MassErase(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

	   /* Wait for busy flag */
	   while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000c60:	bf00      	nop
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f9      	bne.n	8000c62 <FLASH_MassErase+0x6>
	   {
		  /* WAITING */
	   }
  /*  proceed to erase all sectors */
  FLASH->CR |= FLASH_CR_MER;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	6113      	str	r3, [r2, #16]
       /* Wait for busy flag */
       while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000c86:	bf00      	nop
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <FLASH_MassErase+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <FLASH_MassErase+0x2c>
       {
	       /* WAITING */
       }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <FLASH_PageErase>:
  *         Erase the specified FLASH memory page
  *         PageAddress FLASH page to erase
  *         The value of this parameter depend on device used within the same series
  */
static void FLASH_PageErase(uint32_t PageAddress)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* Wait for busy flag */
		  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000cac:	bf00      	nop
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f9      	bne.n	8000cae <FLASH_PageErase+0xa>
		  {
			  /* WAITING */
		  }
	    /* Proceed to erase the page */
	    FLASH->CR |= FLASH_CR_PER;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6113      	str	r3, [r2, #16]
	    FLASH->AR = PageAddress;
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6153      	str	r3, [r2, #20]
	    FLASH->CR |= FLASH_CR_STRT;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd6:	6113      	str	r3, [r2, #16]

		/* Wait for busy flag */
		  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000cd8:	bf00      	nop
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <FLASH_PageErase+0x50>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f9      	bne.n	8000cda <FLASH_PageErase+0x36>
		  {
			  /* WAITING */
		  }

}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <FLASH_Program>:

void FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	e9c7 2300 	strd	r2, r3, [r7]
	  uint8_t index = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	75fb      	strb	r3, [r7, #23]
	  uint8_t nbiterations = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75bb      	strb	r3, [r7, #22]
	  //if((FLASH->CR & FLASH_CR_LOCK)){
	 //	  FLASH_Unlock();
	  //}

	/* Wait for busy flag */
	  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000d0e:	bf00      	nop
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <FLASH_Program+0xb0>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f9      	bne.n	8000d10 <FLASH_Program+0x18>
	  {
		  /* WAITING */
	  }

	  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <FLASH_Program+0x30>
		  {
			/* Program halfword (16-bit) at a specified address. */
			nbiterations = 1U;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75bb      	strb	r3, [r7, #22]
 8000d26:	e007      	b.n	8000d38 <FLASH_Program+0x40>
		  }
		  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d102      	bne.n	8000d34 <FLASH_Program+0x3c>
		  {
			/* Program word (32-bit = 2*16-bit) at a specified address. */
			nbiterations = 2U;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	75bb      	strb	r3, [r7, #22]
 8000d32:	e001      	b.n	8000d38 <FLASH_Program+0x40>
		  }
		  else
		  {
			/* Program double word (64-bit = 4*16-bit) at a specified address. */
			nbiterations = 4U;
 8000d34:	2304      	movs	r3, #4
 8000d36:	75bb      	strb	r3, [r7, #22]
		  }

		for (index = 0U; index < nbiterations; index++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	75fb      	strb	r3, [r7, #23]
 8000d3c:	e02b      	b.n	8000d96 <FLASH_Program+0x9e>
		{
		  FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
 8000d40:	005a      	lsls	r2, r3, #1
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	eb02 0c03 	add.w	ip, r2, r3
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	0119      	lsls	r1, r3, #4
 8000d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	f1a1 0020 	sub.w	r0, r1, #32
 8000d58:	fa22 f401 	lsr.w	r4, r2, r1
 8000d5c:	fa03 f606 	lsl.w	r6, r3, r6
 8000d60:	4334      	orrs	r4, r6
 8000d62:	fa23 f000 	lsr.w	r0, r3, r0
 8000d66:	4304      	orrs	r4, r0
 8000d68:	fa23 f501 	lsr.w	r5, r3, r1
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4660      	mov	r0, ip
 8000d72:	f000 f81b 	bl	8000dac <FLASH_Program_HalfWord>

			/* Wait for busy flag */
			  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8000d76:	bf00      	nop
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <FLASH_Program+0xb0>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <FLASH_Program+0x80>
			  {
				  /* WAITING */
			  }

			/* If the program operation is completed, disable the PG Bit */
			  FLASH->CR &= (~FLASH_CR_PG);
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <FLASH_Program+0xb0>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <FLASH_Program+0xb0>)
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6113      	str	r3, [r2, #16]
		for (index = 0U; index < nbiterations; index++)
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	3301      	adds	r3, #1
 8000d94:	75fb      	strb	r3, [r7, #23]
 8000d96:	7dfa      	ldrb	r2, [r7, #23]
 8000d98:	7dbb      	ldrb	r3, [r7, #22]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3cf      	bcc.n	8000d3e <FLASH_Program+0x46>
		 }
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da8:	40022000 	.word	0x40022000

08000dac <FLASH_Program_HalfWord>:
  *        Address specify the address to be programmed.
  *        Data    specify the data to be programmed.
  *
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]

	/* Proceed to program the new data */
    /* Set Programming Bit */
	FLASH->CR |= FLASH_CR_PG;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <FLASH_Program_HalfWord+0x28>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <FLASH_Program_HalfWord+0x28>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6113      	str	r3, [r2, #16]
	  /* Write data in the address */
	  *(volatile uint16_t*)Address = Data;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	801a      	strh	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <GPIO_Config_Pin>:
}
void GPIO_Write_Port(GPIO_TypeDef *GPIOx,uint16_t Port_Value){
	GPIOx->ODR = Port_Value;
}

void GPIO_Config_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number, uint8_t Pin_Mode){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
 8000de4:	4613      	mov	r3, r2
 8000de6:	70bb      	strb	r3, [r7, #2]
	if(Pin_Number <= GPIO_PIN_7){
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d815      	bhi.n	8000e1a <GPIO_Config_Pin+0x42>
		GPIOx->CRL &= ~(0xC << (Pin_Number*4)); //Reset CNF bits
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	210c      	movs	r1, #12
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= (Pin_Mode << (Pin_Number*4));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	78b9      	ldrb	r1, [r7, #2]
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
		Pin_Number -= 8; //remove bits in CRL
		GPIOx->CRH &= ~(0xC << (Pin_Number*4));
		GPIOx->CRH |= (Pin_Mode << (Pin_Number*4));
	}

}
 8000e18:	e01a      	b.n	8000e50 <GPIO_Config_Pin+0x78>
	}else if (Pin_Number <= GPIO_PIN_15) {
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d817      	bhi.n	8000e50 <GPIO_Config_Pin+0x78>
		Pin_Number -= 8; //remove bits in CRL
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	3b08      	subs	r3, #8
 8000e24:	70fb      	strb	r3, [r7, #3]
		GPIOx->CRH &= ~(0xC << (Pin_Number*4));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	210c      	movs	r1, #12
 8000e30:	fa01 f202 	lsl.w	r2, r1, r2
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= (Pin_Mode << (Pin_Number*4));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	78b9      	ldrb	r1, [r7, #2]
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605a      	str	r2, [r3, #4]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <Enable_irq>:
  \brief   Enable IRQ Interrupts
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
void Enable_irq(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
	__asm volatile ("cpsie i" : : : "memory");
 8000e5e:	b662      	cpsie	i
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <Disable_irq>:
  \brief   Disable IRQ Interrupts
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
void Disable_irq(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	__asm volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
void NVIC_EnableIRQ(NVIC_IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <NVIC_EnableIRQ+0x30>)
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	0952      	lsrs	r2, r2, #5
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	4610      	mov	r0, r2
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
void NVIC_ClearPendingIRQ(NVIC_IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]

    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <NVIC_ClearPendingIRQ+0x30>)
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	0952      	lsrs	r2, r2, #5
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <RCC_Config>:
 */
#include "RCC.h"
#include "RCC_Config.h"


void RCC_Config(void){
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	//Enable Flash Prefetch
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <RCC_Config+0xe8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <RCC_Config+0xe8>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
	//Clock security system Disable
	RCC->CR &= ~(RCC_CR_CSSON_Msk);
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <RCC_Config+0xec>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <RCC_Config+0xec>)
 8000ef6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000efa:	6013      	str	r3, [r2, #0]
	//Clear All bits
	RCC->CR &= 0x0;
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <RCC_Config+0xec>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <RCC_Config+0xec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	RCC->CFGR &= 0x0;
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <RCC_Config+0xec>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <RCC_Config+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
	//reset all interrupts
	RCC->CIR = 0x0;
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <RCC_Config+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
	//enable HSI (ensure)
	RCC->CR |= RCC_CR_HSION;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <RCC_Config+0xec>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <RCC_Config+0xec>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 8000f22:	bf00      	nop
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <RCC_Config+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f9      	beq.n	8000f24 <RCC_Config+0x44>

#ifdef RCC_HSE_NO
	//enable HSE
	RCC->CR |= RCC_CR_HSEON;
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <RCC_Config+0xec>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <RCC_Config+0xec>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000f3c:	bf00      	nop
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <RCC_Config+0xec>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <RCC_Config+0x5e>
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <RCC_Config+0xec>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <RCC_Config+0xec>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6053      	str	r3, [r2, #4]
//



#ifdef RCC_AHB_PRESCALE
	RCC->CFGR |= RCC_AHB_PRESCALE;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <RCC_Config+0xec>)
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <RCC_Config+0xec>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	6053      	str	r3, [r2, #4]
#endif
#ifdef RCC_APB1_PRESCALE
	RCC->CFGR |= RCC_APB1_PRESCALE;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <RCC_Config+0xec>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <RCC_Config+0xec>)
 8000f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f68:	6053      	str	r3, [r2, #4]
#endif
#ifdef RCC_APB2_PRESCALE
	RCC->CFGR |= RCC_APB2_PRESCALE;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <RCC_Config+0xec>)
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <RCC_Config+0xec>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	6053      	str	r3, [r2, #4]
#endif

#ifdef RCC_SYSCLK
	//Configure Flash Letancy (2 Wait states)
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <RCC_Config+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <RCC_Config+0xe8>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_PLL_MUL;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <RCC_Config+0xec>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <RCC_Config+0xec>)
 8000f84:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000f88:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <RCC_Config+0xec>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <RCC_Config+0xec>)
 8000f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f94:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000f96:	bf00      	nop
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <RCC_Config+0xec>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f9      	beq.n	8000f98 <RCC_Config+0xb8>
	//Sysclk Selection
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <RCC_Config+0xec>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <RCC_Config+0xec>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000fb0:	bf00      	nop
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <RCC_Config+0xec>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f9      	beq.n	8000fb2 <RCC_Config+0xd2>
#endif
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40022000 	.word	0x40022000
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <RCC_EnablePeripheral>:

void RCC_EnablePeripheral(uint8_t peripheralNumber){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	if(peripheralNumber <= APB2_END){
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b1f      	cmp	r3, #31
 8000fde:	d80a      	bhi.n	8000ff6 <RCC_EnablePeripheral+0x26>
		RCC->APB2ENR |= (1 << peripheralNumber);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <RCC_EnablePeripheral+0x80>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <RCC_EnablePeripheral+0x80>)
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6193      	str	r3, [r2, #24]
		peripheralNumber -= AHB_START;
		RCC->AHBENR |= (1 << peripheralNumber);
	}else{
		//Do nothing
	}
}
 8000ff4:	e026      	b.n	8001044 <RCC_EnablePeripheral+0x74>
	}else if((peripheralNumber >= APB1_START) && (peripheralNumber <= APB1_END)){
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b1f      	cmp	r3, #31
 8000ffa:	d910      	bls.n	800101e <RCC_EnablePeripheral+0x4e>
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b3f      	cmp	r3, #63	; 0x3f
 8001000:	d80d      	bhi.n	800101e <RCC_EnablePeripheral+0x4e>
		peripheralNumber -= APB1_START;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	3b20      	subs	r3, #32
 8001006:	71fb      	strb	r3, [r7, #7]
		RCC->APB1ENR |= (1 << peripheralNumber);
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <RCC_EnablePeripheral+0x80>)
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <RCC_EnablePeripheral+0x80>)
 8001018:	430b      	orrs	r3, r1
 800101a:	61d3      	str	r3, [r2, #28]
}
 800101c:	e012      	b.n	8001044 <RCC_EnablePeripheral+0x74>
	}else if((peripheralNumber >= AHB_START) && (peripheralNumber <= AHB_END)){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b3f      	cmp	r3, #63	; 0x3f
 8001022:	d90f      	bls.n	8001044 <RCC_EnablePeripheral+0x74>
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b5f      	cmp	r3, #95	; 0x5f
 8001028:	d80c      	bhi.n	8001044 <RCC_EnablePeripheral+0x74>
		peripheralNumber -= AHB_START;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	3b40      	subs	r3, #64	; 0x40
 800102e:	71fb      	strb	r3, [r7, #7]
		RCC->AHBENR |= (1 << peripheralNumber);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <RCC_EnablePeripheral+0x80>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <RCC_EnablePeripheral+0x80>)
 8001040:	430b      	orrs	r3, r1
 8001042:	6153      	str	r3, [r2, #20]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <RCC_DisablePeripheral>:

void RCC_DisablePeripheral(uint8_t peripheralNumber){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	if(peripheralNumber <= APB2_END){
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d80b      	bhi.n	800107c <RCC_DisablePeripheral+0x28>
		RCC->APB2ENR &= ~((1 << peripheralNumber));
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	43d2      	mvns	r2, r2
 8001072:	4611      	mov	r1, r2
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 8001076:	400b      	ands	r3, r1
 8001078:	6193      	str	r3, [r2, #24]
		peripheralNumber -= AHB_START;
		RCC->AHBENR &= ~((1 << peripheralNumber));
	}else{
		//Do nothing
	}
}
 800107a:	e028      	b.n	80010ce <RCC_DisablePeripheral+0x7a>
	}else if((peripheralNumber >= APB1_START) && (peripheralNumber <= APB1_END)){
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b1f      	cmp	r3, #31
 8001080:	d911      	bls.n	80010a6 <RCC_DisablePeripheral+0x52>
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b3f      	cmp	r3, #63	; 0x3f
 8001086:	d80e      	bhi.n	80010a6 <RCC_DisablePeripheral+0x52>
		peripheralNumber -= APB1_START;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b20      	subs	r3, #32
 800108c:	71fb      	strb	r3, [r7, #7]
		RCC->APB1ENR &= ~((1 << peripheralNumber));
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	43d2      	mvns	r2, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	61d3      	str	r3, [r2, #28]
}
 80010a4:	e013      	b.n	80010ce <RCC_DisablePeripheral+0x7a>
	}else if((peripheralNumber >= AHB_START) && (peripheralNumber <= AHB_END)){
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b3f      	cmp	r3, #63	; 0x3f
 80010aa:	d910      	bls.n	80010ce <RCC_DisablePeripheral+0x7a>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b5f      	cmp	r3, #95	; 0x5f
 80010b0:	d80d      	bhi.n	80010ce <RCC_DisablePeripheral+0x7a>
		peripheralNumber -= AHB_START;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3b40      	subs	r3, #64	; 0x40
 80010b6:	71fb      	strb	r3, [r7, #7]
		RCC->AHBENR &= ~((1 << peripheralNumber));
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	4611      	mov	r1, r2
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <RCC_DisablePeripheral+0x84>)
 80010ca:	400b      	ands	r3, r1
 80010cc:	6153      	str	r3, [r2, #20]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000

080010dc <offtin>:
  extra block; seek forwards in oldfile by z bytes".
*/

static off_t
offtin(u_char *buf)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  off_t y;

  y=buf[7]&0x7F;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3307      	adds	r3, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ee:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[6];
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3306      	adds	r3, #6
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[5];
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3305      	adds	r3, #5
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[4];
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[3];
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3303      	adds	r3, #3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[2];
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3302      	adds	r3, #2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[1];
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
  y=y*256;y+=buf[0];
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  if(buf[7]&0x80) y=-y;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3307      	adds	r3, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	da02      	bge.n	800118c <offtin+0xb0>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	425b      	negs	r3, r3
 800118a:	60fb      	str	r3, [r7, #12]

  return y;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <bspatch_valid_header>:

bool
bspatch_valid_header(u_char* patch, ssize_t patchsz)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  ssize_t newsize, ctrllen, datalen;

  if (patchsz < 32) return false;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	dc01      	bgt.n	80011ac <bspatch_valid_header+0x14>
 80011a8:	2300      	movs	r3, #0
 80011aa:	e027      	b.n	80011fc <bspatch_valid_header+0x64>

  /* Make sure magic and header fields are valid */
  if(memcmp(patch, BSDIFF_CONFIG_MAGIC, 8) != 0) return false;
 80011ac:	2208      	movs	r2, #8
 80011ae:	4915      	ldr	r1, [pc, #84]	; (8001204 <bspatch_valid_header+0x6c>)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fb57 	bl	8001864 <memcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <bspatch_valid_header+0x28>
 80011bc:	2300      	movs	r3, #0
 80011be:	e01d      	b.n	80011fc <bspatch_valid_header+0x64>

  ctrllen=offtin(patch+8);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3308      	adds	r3, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff89 	bl	80010dc <offtin>
 80011ca:	6178      	str	r0, [r7, #20]
  datalen=offtin(patch+16);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3310      	adds	r3, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff83 	bl	80010dc <offtin>
 80011d6:	6138      	str	r0, [r7, #16]
  newsize=offtin(patch+24);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3318      	adds	r3, #24
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff7d 	bl	80010dc <offtin>
 80011e2:	60f8      	str	r0, [r7, #12]
  if((ctrllen<0) || (datalen<0) || (newsize<0))
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db05      	blt.n	80011f6 <bspatch_valid_header+0x5e>
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db02      	blt.n	80011f6 <bspatch_valid_header+0x5e>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da01      	bge.n	80011fa <bspatch_valid_header+0x62>
    return false;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <bspatch_valid_header+0x64>

  return true;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08001ac8 	.word	0x08001ac8

08001208 <bspatch_newsize>:

ssize_t
bspatch_newsize(u_char* patch, ssize_t patchsz)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  if (!bspatch_valid_header(patch, patchsz)) return -1;
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffbf 	bl	8001198 <bspatch_valid_header>
 800121a:	4603      	mov	r3, r0
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <bspatch_newsize+0x24>
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e005      	b.n	8001238 <bspatch_newsize+0x30>
  return offtin(patch+24);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3318      	adds	r3, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff53 	bl	80010dc <offtin>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <bspatch>:

int
bspatch(u_char* oldp,  ssize_t oldsz,
        u_char* patch, ssize_t patchsz,
        u_char* newp,  ssize_t newsz)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b090      	sub	sp, #64	; 0x40
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  off_t oldpos,newpos;
  off_t ctrl[3];
  off_t i;

  /* Sanity checks */
  if (oldp == NULL || patch == NULL || newp == NULL) return -1;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <bspatch+0x20>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <bspatch+0x20>
 800125a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <bspatch+0x26>
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	e0c9      	b.n	80013fa <bspatch+0x1ba>
  if (oldsz < 0    || patchsz < 0   || newsz < 0)    return -1;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db05      	blt.n	8001278 <bspatch+0x38>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db02      	blt.n	8001278 <bspatch+0x38>
 8001272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001274:	2b00      	cmp	r3, #0
 8001276:	da02      	bge.n	800127e <bspatch+0x3e>
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	e0bd      	b.n	80013fa <bspatch+0x1ba>
  if (!bspatch_valid_header(patch, patchsz)) return -2;
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff89 	bl	8001198 <bspatch_valid_header>
 8001286:	4603      	mov	r3, r0
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <bspatch+0x58>
 8001292:	f06f 0301 	mvn.w	r3, #1
 8001296:	e0b0      	b.n	80013fa <bspatch+0x1ba>

  /* Read lengths from patch header */
  ctrllen=offtin(patch+8);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3308      	adds	r3, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff1d 	bl	80010dc <offtin>
 80012a2:	6278      	str	r0, [r7, #36]	; 0x24
  datalen=offtin(patch+16);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3310      	adds	r3, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff17 	bl	80010dc <offtin>
 80012ae:	6238      	str	r0, [r7, #32]
  newsize=offtin(patch+24);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3318      	adds	r3, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff11 	bl	80010dc <offtin>
 80012ba:	61f8      	str	r0, [r7, #28]
  if (newsize > newsz) return -1;
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dd02      	ble.n	80012ca <bspatch+0x8a>
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	e097      	b.n	80013fa <bspatch+0x1ba>

  /* Get pointers into the header metadata */
  ctrlblock  = patch+32;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3320      	adds	r3, #32
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  diffblock  = patch+32+ctrllen;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	3320      	adds	r3, #32
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  extrablock = patch+32+ctrllen+datalen;
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	4413      	add	r3, r2
 80012e0:	3320      	adds	r3, #32
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Apply patch */
  oldpos=0;newpos=0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(newpos<newsize) {
 80012f0:	e07d      	b.n	80013ee <bspatch+0x1ae>
    /* Read control block */
    ctrl[0] = offtin(ctrlblock);
 80012f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012f4:	f7ff fef2 	bl	80010dc <offtin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]
    ctrl[1] = offtin(ctrlblock+8);
 80012fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fe:	3308      	adds	r3, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff feeb 	bl	80010dc <offtin>
 8001306:	4603      	mov	r3, r0
 8001308:	617b      	str	r3, [r7, #20]
    ctrl[2] = offtin(ctrlblock+16);
 800130a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130c:	3310      	adds	r3, #16
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fee4 	bl	80010dc <offtin>
 8001314:	4603      	mov	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
    ctrlblock += 24;
 8001318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131a:	3318      	adds	r3, #24
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Sanity check */
    if(newpos+ctrl[0]>newsize)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	4413      	add	r3, r2
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	429a      	cmp	r2, r3
 8001328:	da02      	bge.n	8001330 <bspatch+0xf0>
      return -3; /* Corrupt patch */
 800132a:	f06f 0302 	mvn.w	r3, #2
 800132e:	e064      	b.n	80013fa <bspatch+0x1ba>

    /* Read diff string */
    memcpy(newp + newpos, diffblock, ctrl[0]);
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800133a:	4618      	mov	r0, r3
 800133c:	f000 faa2 	bl	8001884 <memcpy>
    diffblock += ctrl[0];
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	461a      	mov	r2, r3
 8001344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001346:	4413      	add	r3, r2
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Add old data to diff string */
    for(i=0;i<ctrl[0];i++)
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
 800134e:	e024      	b.n	800139a <bspatch+0x15a>
      if((oldpos+i>=0) && (oldpos+i<oldsz))
 8001350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	db1c      	blt.n	8001394 <bspatch+0x154>
 800135a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	4413      	add	r3, r2
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	dd16      	ble.n	8001394 <bspatch+0x154>
        newp[newpos+i]+=oldp[oldpos+i];
 8001366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001370:	4413      	add	r3, r2
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	4413      	add	r3, r2
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	4403      	add	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800138c:	4403      	add	r3, r0
 800138e:	440a      	add	r2, r1
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
    for(i=0;i<ctrl[0];i++)
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3301      	adds	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139e:	429a      	cmp	r2, r3
 80013a0:	dbd6      	blt.n	8001350 <bspatch+0x110>

    /* Adjust pointers */
    newpos+=ctrl[0];
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a6:	4413      	add	r3, r2
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    oldpos+=ctrl[0];
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ae:	4413      	add	r3, r2
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Sanity check */
    if(newpos+ctrl[1]>newsize)
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	4413      	add	r3, r2
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	da02      	bge.n	80013c4 <bspatch+0x184>
      return -3; /* Corrupt patch */
 80013be:	f06f 0302 	mvn.w	r3, #2
 80013c2:	e01a      	b.n	80013fa <bspatch+0x1ba>

    /* Read extra string */
    memcpy(newp + newpos, extrablock, ctrl[1]);
 80013c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013c8:	4413      	add	r3, r2
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa58 	bl	8001884 <memcpy>
    extrablock += ctrl[1];
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	461a      	mov	r2, r3
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	4413      	add	r3, r2
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Adjust pointers */
    newpos+=ctrl[1];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e2:	4413      	add	r3, r2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    oldpos+=ctrl[2];
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ea:	4413      	add	r3, r2
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  while(newpos<newsize) {
 80013ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	f6ff af7d 	blt.w	80012f2 <bspatch+0xb2>
  };

  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3740      	adds	r7, #64	; 0x40
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_LZ_ReadVarSize>:
* _LZ_ReadVarSize() - Read unsigned integer with variable number of
* bytes depending on value.
*************************************************************************/

static int _LZ_ReadVarSize( unsigned int * x, unsigned char * buf )
{
 8001402:	b480      	push	{r7}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    unsigned int y, b, num_bytes;

    /* Read complete value (stop when byte contains zero in 8:th bit) */
    y = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
    num_bytes = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
    do
    {
        b = (unsigned int) (*buf ++);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	603a      	str	r2, [r7, #0]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
        y = (y << 7) | (b & 0x0000007f);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	01da      	lsls	r2, r3, #7
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001428:	4313      	orrs	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
        ++ num_bytes;
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3301      	adds	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
    }
    while( b & 0x00000080 );
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1eb      	bne.n	8001414 <_LZ_ReadVarSize+0x12>

    /* Store value in x */
    *x = y;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

    /* Return number of bytes read */
    return num_bytes;
 8001442:	693b      	ldr	r3, [r7, #16]
}
 8001444:	4618      	mov	r0, r3
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <LZ_Uncompress>:
*  insize  - Number of input bytes.
*************************************************************************/

int LZ_Uncompress( unsigned char *in, unsigned char *out,
    unsigned int insize )
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	; 0x28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
    unsigned char marker, symbol;
    unsigned int  i, inpos, outpos, length, offset;

    /* Do we have anything to uncompress? */
    if( insize < 1 )
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <LZ_Uncompress+0x18>
    {
        return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	e062      	b.n	800152c <LZ_Uncompress+0xde>
    }

    /* Get marker symbol from input stream */
    marker = in[ 0 ];
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	76fb      	strb	r3, [r7, #27]
    inpos = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]

    /* Main decompression loop */
    outpos = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    do
    {
        symbol = in[ inpos ++ ];
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	623a      	str	r2, [r7, #32]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	76bb      	strb	r3, [r7, #26]
        if( symbol == marker )
 8001482:	7eba      	ldrb	r2, [r7, #26]
 8001484:	7efb      	ldrb	r3, [r7, #27]
 8001486:	429a      	cmp	r2, r3
 8001488:	d144      	bne.n	8001514 <LZ_Uncompress+0xc6>
        {
            /* We had a marker byte */
            if( in[ inpos ] == 0 )
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10a      	bne.n	80014ac <LZ_Uncompress+0x5e>
            {
                /* It was a single occurrence of the marker byte */
                out[ outpos ++ ] = marker;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	61fa      	str	r2, [r7, #28]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	7efa      	ldrb	r2, [r7, #27]
 80014a2:	701a      	strb	r2, [r3, #0]
                ++ inpos;
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	3301      	adds	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
 80014aa:	e03a      	b.n	8001522 <LZ_Uncompress+0xd4>
            }
            else
            {
                /* Extract true length and offset */
                inpos += _LZ_ReadVarSize( &length, &in[ inpos ] );
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	441a      	add	r2, r3
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ffa2 	bl	8001402 <_LZ_ReadVarSize>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	4413      	add	r3, r2
 80014c6:	623b      	str	r3, [r7, #32]
                inpos += _LZ_ReadVarSize( &offset, &in[ inpos ] );
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	441a      	add	r2, r3
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff94 	bl	8001402 <_LZ_ReadVarSize>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	4413      	add	r3, r2
 80014e2:	623b      	str	r3, [r7, #32]

                /* Copy corresponding data from history window */
                for( i = 0; i < length; ++ i )
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e00f      	b.n	800150a <LZ_Uncompress+0xbc>
                {
                    out[ outpos ] = out[ outpos - offset ];
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	441a      	add	r2, r3
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	440b      	add	r3, r1
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
                    ++ outpos;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
                for( i = 0; i < length; ++ i )
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	3301      	adds	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	429a      	cmp	r2, r3
 8001510:	d3eb      	bcc.n	80014ea <LZ_Uncompress+0x9c>
 8001512:	e006      	b.n	8001522 <LZ_Uncompress+0xd4>
            }
        }
        else
        {
            /* No marker, plain copy */
            out[ outpos ++ ] = symbol;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	61fa      	str	r2, [r7, #28]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	7eba      	ldrb	r2, [r7, #26]
 8001520:	701a      	strb	r2, [r3, #0]
        }
    }
    while( inpos < insize );
 8001522:	6a3a      	ldr	r2, [r7, #32]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3a4      	bcc.n	8001474 <LZ_Uncompress+0x26>
    return outpos;
 800152a:	69fb      	ldr	r3, [r7, #28]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <main>:
#include "CAN.h"
#include "CRC.h"
#include "SysTick.h"
#include "BOOTLOADER.h"

int main(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
	RCC_Config();
 800153a:	f7ff fcd1 	bl	8000ee0 <RCC_Config>
	//SCB->VTOR = 0x08005000 - 0x08000000;
	Enable_irq();
 800153e:	f7ff fc8c 	bl	8000e5a <Enable_irq>
	NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001542:	2014      	movs	r0, #20
 8001544:	f7ff fc98 	bl	8000e78 <NVIC_EnableIRQ>
	//SysTick_INIT();

	RCC_EnablePeripheral(RCC_AFIOCLK);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fd41 	bl	8000fd0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_GPIOACLK);
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff fd3e 	bl	8000fd0 <RCC_EnablePeripheral>
	//RCC_EnablePeripheral(RCC_GPIOCCLK);
	RCC_EnablePeripheral(RCC_CANCLK);
 8001554:	2039      	movs	r0, #57	; 0x39
 8001556:	f7ff fd3b 	bl	8000fd0 <RCC_EnablePeripheral>

	AFIO_INIT();
 800155a:	f7fe fdf7 	bl	800014c <AFIO_INIT>
	//GPIO_Config_Pin(GPIOC, GPIO_PIN_13, GPIO_PINMODE_OUTPUT50MHZ);
	GPIO_Config_Pin(GPIOA, GPIO_PIN_11, GPIO_PINMODE_INPUT); //rx
 800155e:	2208      	movs	r2, #8
 8001560:	210b      	movs	r1, #11
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <main+0x90>)
 8001564:	f7ff fc38 	bl	8000dd8 <GPIO_Config_Pin>
	GPIO_Config_Pin(GPIOA, GPIO_PIN_12, GPIO_PINMODE_AFIO); //tx
 8001568:	220b      	movs	r2, #11
 800156a:	210c      	movs	r1, #12
 800156c:	4815      	ldr	r0, [pc, #84]	; (80015c4 <main+0x90>)
 800156e:	f7ff fc33 	bl	8000dd8 <GPIO_Config_Pin>

	CAN_setupTypeDef CANsetupStruct = { DISABLE, DISABLE, DISABLE, DISABLE,
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	809a      	strh	r2, [r3, #4]
			DISABLE, DISABLE, };
	CAN_Setup(CAN, &CANsetupStruct);
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4619      	mov	r1, r3
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <main+0x94>)
 8001584:	f7ff f86a 	bl	800065c <CAN_Setup>
	CAN_Normal(CAN);
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <main+0x94>)
 800158a:	f7ff f8ef 	bl	800076c <CAN_Normal>
	CAN_FilterTypeDef filter0;
	filter0.FilterActivation = CAN_FILTER_ENABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
	filter0.FilterBank = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
	filter0.FilterFIFOAssignment = CAN_FIFO0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
	filter0.FilterId = GATEWAY_BOOTLOADER_RQ_ID;
 800159a:	f240 1323 	movw	r3, #291	; 0x123
 800159e:	603b      	str	r3, [r7, #0]
	filter0.FilterMaskId = GATEWAY_BOOTLOADER_RQ_ID;
 80015a0:	f240 1323 	movw	r3, #291	; 0x123
 80015a4:	607b      	str	r3, [r7, #4]
	filter0.FilterMode = CAN_FILTERMODE_LIST;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
	CAN_ConfigFilter(CAN, &filter0);
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <main+0x94>)
 80015b0:	f7ff fa82 	bl	8000ab8 <CAN_ConfigFilter>
	CAN_Interrupt_Enable(CAN, CAN_IER_FMPIE0, ENABLE);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2102      	movs	r1, #2
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <main+0x94>)
 80015ba:	f7ff fa5d 	bl	8000a78 <CAN_Interrupt_Enable>
	BootLoader();
 80015be:	f7fe fdd9 	bl	8000174 <BootLoader>





	while(1){
 80015c2:	e7fe      	b.n	80015c2 <main+0x8e>
 80015c4:	40010800 	.word	0x40010800
 80015c8:	40006400 	.word	0x40006400

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
		uint8_t cont = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]
	  /* USER CODE END MemoryManagement_IRQn 0 */
	  while (cont == 0)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0fc      	beq.n	80015dc <HardFault_Handler+0xa>
	  {
	    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	    /* USER CODE END W1_MemoryManagement_IRQn 0 */
	  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	uint8_t cont = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (cont == 0)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0fc      	beq.n	80015f8 <MemManage_Handler+0xa>
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
extern volatile uint32_t ticks;
void SysTick_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	ticks++;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Handler+0x18>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <SysTick_Handler+0x18>)
 8001648:	6013      	str	r3, [r2, #0]

}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200000c0 	.word	0x200000c0

08001658 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
//EXTI
void EXTI0_IRQHandler(void){
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0


}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <DMA1_Channel1_IRQHandler>:
//DMA
extern fptr DMA_fptr[7];
void DMA1_Channel1_IRQHandler(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

	if(DMA->ISR & DMA_ISR_TCIF1){
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <DMA1_Channel1_IRQHandler+0x2c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <DMA1_Channel1_IRQHandler+0x16>
		DMA_fptr[0]();
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <DMA1_Channel1_IRQHandler+0x30>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4798      	blx	r3
	}
	DMA->IFCR |= (DMA_IFCR_CTCIF1);
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <DMA1_Channel1_IRQHandler+0x2c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <DMA1_Channel1_IRQHandler+0x2c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6053      	str	r3, [r2, #4]
	NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 80016b6:	200b      	movs	r0, #11
 80016b8:	f7ff fbf8 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020000 	.word	0x40020000
 80016c4:	200000a4 	.word	0x200000a4

080016c8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF2){
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <DMA1_Channel2_IRQHandler+0x2c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <DMA1_Channel2_IRQHandler+0x16>
			DMA_fptr[1]();
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <DMA1_Channel2_IRQHandler+0x30>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF2);
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <DMA1_Channel2_IRQHandler+0x2c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <DMA1_Channel2_IRQHandler+0x2c>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel2_IRQn);
 80016ea:	200c      	movs	r0, #12
 80016ec:	f7ff fbde 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020000 	.word	0x40020000
 80016f8:	200000a4 	.word	0x200000a4

080016fc <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF3){
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <DMA1_Channel3_IRQHandler+0x2c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <DMA1_Channel3_IRQHandler+0x16>
			DMA_fptr[2]();
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <DMA1_Channel3_IRQHandler+0x30>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF3);
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <DMA1_Channel3_IRQHandler+0x2c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <DMA1_Channel3_IRQHandler+0x2c>)
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel3_IRQn);
 800171e:	200d      	movs	r0, #13
 8001720:	f7ff fbc4 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020000 	.word	0x40020000
 800172c:	200000a4 	.word	0x200000a4

08001730 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF4){
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <DMA1_Channel4_IRQHandler+0x2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <DMA1_Channel4_IRQHandler+0x16>
			DMA_fptr[3]();
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <DMA1_Channel4_IRQHandler+0x30>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF4);
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <DMA1_Channel4_IRQHandler+0x2c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <DMA1_Channel4_IRQHandler+0x2c>)
 800174c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001750:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel4_IRQn);
 8001752:	200e      	movs	r0, #14
 8001754:	f7ff fbaa 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40020000 	.word	0x40020000
 8001760:	200000a4 	.word	0x200000a4

08001764 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF5){
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <DMA1_Channel5_IRQHandler+0x2c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <DMA1_Channel5_IRQHandler+0x16>
			DMA_fptr[4]();
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <DMA1_Channel5_IRQHandler+0x30>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF5);
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <DMA1_Channel5_IRQHandler+0x2c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <DMA1_Channel5_IRQHandler+0x2c>)
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);
 8001786:	200f      	movs	r0, #15
 8001788:	f7ff fb90 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020000 	.word	0x40020000
 8001794:	200000a4 	.word	0x200000a4

08001798 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF6){
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <DMA1_Channel6_IRQHandler+0x2c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <DMA1_Channel6_IRQHandler+0x16>
			DMA_fptr[5]();
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <DMA1_Channel6_IRQHandler+0x30>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF6);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <DMA1_Channel6_IRQHandler+0x2c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <DMA1_Channel6_IRQHandler+0x2c>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b8:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel6_IRQn);
 80017ba:	2010      	movs	r0, #16
 80017bc:	f7ff fb76 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020000 	.word	0x40020000
 80017c8:	200000a4 	.word	0x200000a4

080017cc <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF7){
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <DMA1_Channel7_IRQHandler+0x2c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DMA1_Channel7_IRQHandler+0x16>
			DMA_fptr[6]();
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <DMA1_Channel7_IRQHandler+0x30>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF7);
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <DMA1_Channel7_IRQHandler+0x2c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <DMA1_Channel7_IRQHandler+0x2c>)
 80017e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ec:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel7_IRQn);
 80017ee:	2011      	movs	r0, #17
 80017f0:	f7ff fb5c 	bl	8000eac <NVIC_ClearPendingIRQ>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020000 	.word	0x40020000
 80017fc:	200000a4 	.word	0x200000a4

08001800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <LoopFillZerobss+0xa>)
  ldr r1, =_edata
 8001802:	490b      	ldr	r1, [pc, #44]	; (8001830 <LoopFillZerobss+0xe>)
  ldr r2, =_sidata
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopFillZerobss+0x12>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <LoopFillZerobss+0x16>)
  ldr r4, =_ebss
 8001818:	4c08      	ldr	r4, [pc, #32]	; (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>


/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fe85 	bl	8001534 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001834:	08001adc 	.word	0x08001adc
  ldr r2, =_sbss
 8001838:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800183c:	200000d8 	.word	0x200000d8

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <malloc>:
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <malloc+0xc>)
 8001846:	4601      	mov	r1, r0
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	f000 b891 	b.w	8001970 <_malloc_r>
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000

08001854 <free>:
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <free+0xc>)
 8001856:	4601      	mov	r1, r0
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	f000 b821 	b.w	80018a0 <_free_r>
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000

08001864 <memcmp>:
 8001864:	b510      	push	{r4, lr}
 8001866:	3901      	subs	r1, #1
 8001868:	4402      	add	r2, r0
 800186a:	4290      	cmp	r0, r2
 800186c:	d101      	bne.n	8001872 <memcmp+0xe>
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <memcmp+0x1a>
 8001872:	7803      	ldrb	r3, [r0, #0]
 8001874:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001878:	42a3      	cmp	r3, r4
 800187a:	d001      	beq.n	8001880 <memcmp+0x1c>
 800187c:	1b18      	subs	r0, r3, r4
 800187e:	bd10      	pop	{r4, pc}
 8001880:	3001      	adds	r0, #1
 8001882:	e7f2      	b.n	800186a <memcmp+0x6>

08001884 <memcpy>:
 8001884:	440a      	add	r2, r1
 8001886:	4291      	cmp	r1, r2
 8001888:	f100 33ff 	add.w	r3, r0, #4294967295
 800188c:	d100      	bne.n	8001890 <memcpy+0xc>
 800188e:	4770      	bx	lr
 8001890:	b510      	push	{r4, lr}
 8001892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001896:	4291      	cmp	r1, r2
 8001898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800189c:	d1f9      	bne.n	8001892 <memcpy+0xe>
 800189e:	bd10      	pop	{r4, pc}

080018a0 <_free_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4605      	mov	r5, r0
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d040      	beq.n	800192a <_free_r+0x8a>
 80018a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018ac:	1f0c      	subs	r4, r1, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bfb8      	it	lt
 80018b2:	18e4      	addlt	r4, r4, r3
 80018b4:	f000 f8e0 	bl	8001a78 <__malloc_lock>
 80018b8:	4a1c      	ldr	r2, [pc, #112]	; (800192c <_free_r+0x8c>)
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	b933      	cbnz	r3, 80018cc <_free_r+0x2c>
 80018be:	6063      	str	r3, [r4, #4]
 80018c0:	6014      	str	r4, [r2, #0]
 80018c2:	4628      	mov	r0, r5
 80018c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c8:	f000 b8dc 	b.w	8001a84 <__malloc_unlock>
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	d908      	bls.n	80018e2 <_free_r+0x42>
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	1821      	adds	r1, r4, r0
 80018d4:	428b      	cmp	r3, r1
 80018d6:	bf01      	itttt	eq
 80018d8:	6819      	ldreq	r1, [r3, #0]
 80018da:	685b      	ldreq	r3, [r3, #4]
 80018dc:	1809      	addeq	r1, r1, r0
 80018de:	6021      	streq	r1, [r4, #0]
 80018e0:	e7ed      	b.n	80018be <_free_r+0x1e>
 80018e2:	461a      	mov	r2, r3
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	b10b      	cbz	r3, 80018ec <_free_r+0x4c>
 80018e8:	42a3      	cmp	r3, r4
 80018ea:	d9fa      	bls.n	80018e2 <_free_r+0x42>
 80018ec:	6811      	ldr	r1, [r2, #0]
 80018ee:	1850      	adds	r0, r2, r1
 80018f0:	42a0      	cmp	r0, r4
 80018f2:	d10b      	bne.n	800190c <_free_r+0x6c>
 80018f4:	6820      	ldr	r0, [r4, #0]
 80018f6:	4401      	add	r1, r0
 80018f8:	1850      	adds	r0, r2, r1
 80018fa:	4283      	cmp	r3, r0
 80018fc:	6011      	str	r1, [r2, #0]
 80018fe:	d1e0      	bne.n	80018c2 <_free_r+0x22>
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4401      	add	r1, r0
 8001906:	6011      	str	r1, [r2, #0]
 8001908:	6053      	str	r3, [r2, #4]
 800190a:	e7da      	b.n	80018c2 <_free_r+0x22>
 800190c:	d902      	bls.n	8001914 <_free_r+0x74>
 800190e:	230c      	movs	r3, #12
 8001910:	602b      	str	r3, [r5, #0]
 8001912:	e7d6      	b.n	80018c2 <_free_r+0x22>
 8001914:	6820      	ldr	r0, [r4, #0]
 8001916:	1821      	adds	r1, r4, r0
 8001918:	428b      	cmp	r3, r1
 800191a:	bf01      	itttt	eq
 800191c:	6819      	ldreq	r1, [r3, #0]
 800191e:	685b      	ldreq	r3, [r3, #4]
 8001920:	1809      	addeq	r1, r1, r0
 8001922:	6021      	streq	r1, [r4, #0]
 8001924:	6063      	str	r3, [r4, #4]
 8001926:	6054      	str	r4, [r2, #4]
 8001928:	e7cb      	b.n	80018c2 <_free_r+0x22>
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	200000c4 	.word	0x200000c4

08001930 <sbrk_aligned>:
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	4e0e      	ldr	r6, [pc, #56]	; (800196c <sbrk_aligned+0x3c>)
 8001934:	460c      	mov	r4, r1
 8001936:	6831      	ldr	r1, [r6, #0]
 8001938:	4605      	mov	r5, r0
 800193a:	b911      	cbnz	r1, 8001942 <sbrk_aligned+0x12>
 800193c:	f000 f88c 	bl	8001a58 <_sbrk_r>
 8001940:	6030      	str	r0, [r6, #0]
 8001942:	4621      	mov	r1, r4
 8001944:	4628      	mov	r0, r5
 8001946:	f000 f887 	bl	8001a58 <_sbrk_r>
 800194a:	1c43      	adds	r3, r0, #1
 800194c:	d00a      	beq.n	8001964 <sbrk_aligned+0x34>
 800194e:	1cc4      	adds	r4, r0, #3
 8001950:	f024 0403 	bic.w	r4, r4, #3
 8001954:	42a0      	cmp	r0, r4
 8001956:	d007      	beq.n	8001968 <sbrk_aligned+0x38>
 8001958:	1a21      	subs	r1, r4, r0
 800195a:	4628      	mov	r0, r5
 800195c:	f000 f87c 	bl	8001a58 <_sbrk_r>
 8001960:	3001      	adds	r0, #1
 8001962:	d101      	bne.n	8001968 <sbrk_aligned+0x38>
 8001964:	f04f 34ff 	mov.w	r4, #4294967295
 8001968:	4620      	mov	r0, r4
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	200000c8 	.word	0x200000c8

08001970 <_malloc_r>:
 8001970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001974:	1ccd      	adds	r5, r1, #3
 8001976:	f025 0503 	bic.w	r5, r5, #3
 800197a:	3508      	adds	r5, #8
 800197c:	2d0c      	cmp	r5, #12
 800197e:	bf38      	it	cc
 8001980:	250c      	movcc	r5, #12
 8001982:	2d00      	cmp	r5, #0
 8001984:	4607      	mov	r7, r0
 8001986:	db01      	blt.n	800198c <_malloc_r+0x1c>
 8001988:	42a9      	cmp	r1, r5
 800198a:	d905      	bls.n	8001998 <_malloc_r+0x28>
 800198c:	230c      	movs	r3, #12
 800198e:	2600      	movs	r6, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4630      	mov	r0, r6
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001998:	4e2e      	ldr	r6, [pc, #184]	; (8001a54 <_malloc_r+0xe4>)
 800199a:	f000 f86d 	bl	8001a78 <__malloc_lock>
 800199e:	6833      	ldr	r3, [r6, #0]
 80019a0:	461c      	mov	r4, r3
 80019a2:	bb34      	cbnz	r4, 80019f2 <_malloc_r+0x82>
 80019a4:	4629      	mov	r1, r5
 80019a6:	4638      	mov	r0, r7
 80019a8:	f7ff ffc2 	bl	8001930 <sbrk_aligned>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	4604      	mov	r4, r0
 80019b0:	d14d      	bne.n	8001a4e <_malloc_r+0xde>
 80019b2:	6834      	ldr	r4, [r6, #0]
 80019b4:	4626      	mov	r6, r4
 80019b6:	2e00      	cmp	r6, #0
 80019b8:	d140      	bne.n	8001a3c <_malloc_r+0xcc>
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	4631      	mov	r1, r6
 80019be:	4638      	mov	r0, r7
 80019c0:	eb04 0803 	add.w	r8, r4, r3
 80019c4:	f000 f848 	bl	8001a58 <_sbrk_r>
 80019c8:	4580      	cmp	r8, r0
 80019ca:	d13a      	bne.n	8001a42 <_malloc_r+0xd2>
 80019cc:	6821      	ldr	r1, [r4, #0]
 80019ce:	3503      	adds	r5, #3
 80019d0:	1a6d      	subs	r5, r5, r1
 80019d2:	f025 0503 	bic.w	r5, r5, #3
 80019d6:	3508      	adds	r5, #8
 80019d8:	2d0c      	cmp	r5, #12
 80019da:	bf38      	it	cc
 80019dc:	250c      	movcc	r5, #12
 80019de:	4638      	mov	r0, r7
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7ff ffa5 	bl	8001930 <sbrk_aligned>
 80019e6:	3001      	adds	r0, #1
 80019e8:	d02b      	beq.n	8001a42 <_malloc_r+0xd2>
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	442b      	add	r3, r5
 80019ee:	6023      	str	r3, [r4, #0]
 80019f0:	e00e      	b.n	8001a10 <_malloc_r+0xa0>
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	1b52      	subs	r2, r2, r5
 80019f6:	d41e      	bmi.n	8001a36 <_malloc_r+0xc6>
 80019f8:	2a0b      	cmp	r2, #11
 80019fa:	d916      	bls.n	8001a2a <_malloc_r+0xba>
 80019fc:	1961      	adds	r1, r4, r5
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	6025      	str	r5, [r4, #0]
 8001a02:	bf18      	it	ne
 8001a04:	6059      	strne	r1, [r3, #4]
 8001a06:	6863      	ldr	r3, [r4, #4]
 8001a08:	bf08      	it	eq
 8001a0a:	6031      	streq	r1, [r6, #0]
 8001a0c:	5162      	str	r2, [r4, r5]
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	4638      	mov	r0, r7
 8001a12:	f104 060b 	add.w	r6, r4, #11
 8001a16:	f000 f835 	bl	8001a84 <__malloc_unlock>
 8001a1a:	f026 0607 	bic.w	r6, r6, #7
 8001a1e:	1d23      	adds	r3, r4, #4
 8001a20:	1af2      	subs	r2, r6, r3
 8001a22:	d0b6      	beq.n	8001992 <_malloc_r+0x22>
 8001a24:	1b9b      	subs	r3, r3, r6
 8001a26:	50a3      	str	r3, [r4, r2]
 8001a28:	e7b3      	b.n	8001992 <_malloc_r+0x22>
 8001a2a:	6862      	ldr	r2, [r4, #4]
 8001a2c:	42a3      	cmp	r3, r4
 8001a2e:	bf0c      	ite	eq
 8001a30:	6032      	streq	r2, [r6, #0]
 8001a32:	605a      	strne	r2, [r3, #4]
 8001a34:	e7ec      	b.n	8001a10 <_malloc_r+0xa0>
 8001a36:	4623      	mov	r3, r4
 8001a38:	6864      	ldr	r4, [r4, #4]
 8001a3a:	e7b2      	b.n	80019a2 <_malloc_r+0x32>
 8001a3c:	4634      	mov	r4, r6
 8001a3e:	6876      	ldr	r6, [r6, #4]
 8001a40:	e7b9      	b.n	80019b6 <_malloc_r+0x46>
 8001a42:	230c      	movs	r3, #12
 8001a44:	4638      	mov	r0, r7
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	f000 f81c 	bl	8001a84 <__malloc_unlock>
 8001a4c:	e7a1      	b.n	8001992 <_malloc_r+0x22>
 8001a4e:	6025      	str	r5, [r4, #0]
 8001a50:	e7de      	b.n	8001a10 <_malloc_r+0xa0>
 8001a52:	bf00      	nop
 8001a54:	200000c4 	.word	0x200000c4

08001a58 <_sbrk_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4d05      	ldr	r5, [pc, #20]	; (8001a74 <_sbrk_r+0x1c>)
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	602b      	str	r3, [r5, #0]
 8001a64:	f000 f816 	bl	8001a94 <_sbrk>
 8001a68:	1c43      	adds	r3, r0, #1
 8001a6a:	d102      	bne.n	8001a72 <_sbrk_r+0x1a>
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	b103      	cbz	r3, 8001a72 <_sbrk_r+0x1a>
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	200000cc 	.word	0x200000cc

08001a78 <__malloc_lock>:
 8001a78:	4801      	ldr	r0, [pc, #4]	; (8001a80 <__malloc_lock+0x8>)
 8001a7a:	f000 b809 	b.w	8001a90 <__retarget_lock_acquire_recursive>
 8001a7e:	bf00      	nop
 8001a80:	200000d0 	.word	0x200000d0

08001a84 <__malloc_unlock>:
 8001a84:	4801      	ldr	r0, [pc, #4]	; (8001a8c <__malloc_unlock+0x8>)
 8001a86:	f000 b804 	b.w	8001a92 <__retarget_lock_release_recursive>
 8001a8a:	bf00      	nop
 8001a8c:	200000d0 	.word	0x200000d0

08001a90 <__retarget_lock_acquire_recursive>:
 8001a90:	4770      	bx	lr

08001a92 <__retarget_lock_release_recursive>:
 8001a92:	4770      	bx	lr

08001a94 <_sbrk>:
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <_sbrk+0x14>)
 8001a96:	4603      	mov	r3, r0
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	b909      	cbnz	r1, 8001aa0 <_sbrk+0xc>
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <_sbrk+0x18>)
 8001a9e:	6011      	str	r1, [r2, #0]
 8001aa0:	6810      	ldr	r0, [r2, #0]
 8001aa2:	4403      	add	r3, r0
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4770      	bx	lr
 8001aa8:	200000d4 	.word	0x200000d4
 8001aac:	200000d8 	.word	0x200000d8

08001ab0 <_init>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	bf00      	nop
 8001ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab6:	bc08      	pop	{r3}
 8001ab8:	469e      	mov	lr, r3
 8001aba:	4770      	bx	lr

08001abc <_fini>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	bf00      	nop
 8001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac2:	bc08      	pop	{r3}
 8001ac4:	469e      	mov	lr, r3
 8001ac6:	4770      	bx	lr
