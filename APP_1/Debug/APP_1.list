
APP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08007014  08007014  000100d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08007014  08007014  000100d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007014  08007014  000100d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007014  08007014  000100d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007018  08007018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800701c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200000d0  080070ec  000100d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080070ec  00010134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031b7  00000000  00000000  000100f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e75  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00014128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00014538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f3c  00000000  00000000  00014880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019af  00000000  00000000  000197bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00038a7b  00000000  00000000  0001b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00053be6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e54  00000000  00000000  00053c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	200000d0 	.word	0x200000d0
 800512c:	00000000 	.word	0x00000000
 8005130:	08006ffc 	.word	0x08006ffc

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	200000d4 	.word	0x200000d4
 800514c:	08006ffc 	.word	0x08006ffc

08005150 <__aeabi_drsub>:
 8005150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005154:	e002      	b.n	800515c <__adddf3>
 8005156:	bf00      	nop

08005158 <__aeabi_dsub>:
 8005158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800515c <__adddf3>:
 800515c:	b530      	push	{r4, r5, lr}
 800515e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005166:	ea94 0f05 	teq	r4, r5
 800516a:	bf08      	it	eq
 800516c:	ea90 0f02 	teqeq	r0, r2
 8005170:	bf1f      	itttt	ne
 8005172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800517a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800517e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005182:	f000 80e2 	beq.w	800534a <__adddf3+0x1ee>
 8005186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800518a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800518e:	bfb8      	it	lt
 8005190:	426d      	neglt	r5, r5
 8005192:	dd0c      	ble.n	80051ae <__adddf3+0x52>
 8005194:	442c      	add	r4, r5
 8005196:	ea80 0202 	eor.w	r2, r0, r2
 800519a:	ea81 0303 	eor.w	r3, r1, r3
 800519e:	ea82 0000 	eor.w	r0, r2, r0
 80051a2:	ea83 0101 	eor.w	r1, r3, r1
 80051a6:	ea80 0202 	eor.w	r2, r0, r2
 80051aa:	ea81 0303 	eor.w	r3, r1, r3
 80051ae:	2d36      	cmp	r5, #54	; 0x36
 80051b0:	bf88      	it	hi
 80051b2:	bd30      	pophi	{r4, r5, pc}
 80051b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80051c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051c4:	d002      	beq.n	80051cc <__adddf3+0x70>
 80051c6:	4240      	negs	r0, r0
 80051c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80051d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051d8:	d002      	beq.n	80051e0 <__adddf3+0x84>
 80051da:	4252      	negs	r2, r2
 80051dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80051e0:	ea94 0f05 	teq	r4, r5
 80051e4:	f000 80a7 	beq.w	8005336 <__adddf3+0x1da>
 80051e8:	f1a4 0401 	sub.w	r4, r4, #1
 80051ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80051f0:	db0d      	blt.n	800520e <__adddf3+0xb2>
 80051f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80051f6:	fa22 f205 	lsr.w	r2, r2, r5
 80051fa:	1880      	adds	r0, r0, r2
 80051fc:	f141 0100 	adc.w	r1, r1, #0
 8005200:	fa03 f20e 	lsl.w	r2, r3, lr
 8005204:	1880      	adds	r0, r0, r2
 8005206:	fa43 f305 	asr.w	r3, r3, r5
 800520a:	4159      	adcs	r1, r3
 800520c:	e00e      	b.n	800522c <__adddf3+0xd0>
 800520e:	f1a5 0520 	sub.w	r5, r5, #32
 8005212:	f10e 0e20 	add.w	lr, lr, #32
 8005216:	2a01      	cmp	r2, #1
 8005218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800521c:	bf28      	it	cs
 800521e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005222:	fa43 f305 	asr.w	r3, r3, r5
 8005226:	18c0      	adds	r0, r0, r3
 8005228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800522c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005230:	d507      	bpl.n	8005242 <__adddf3+0xe6>
 8005232:	f04f 0e00 	mov.w	lr, #0
 8005236:	f1dc 0c00 	rsbs	ip, ip, #0
 800523a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800523e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005246:	d31b      	bcc.n	8005280 <__adddf3+0x124>
 8005248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800524c:	d30c      	bcc.n	8005268 <__adddf3+0x10c>
 800524e:	0849      	lsrs	r1, r1, #1
 8005250:	ea5f 0030 	movs.w	r0, r0, rrx
 8005254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005258:	f104 0401 	add.w	r4, r4, #1
 800525c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005264:	f080 809a 	bcs.w	800539c <__adddf3+0x240>
 8005268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800526c:	bf08      	it	eq
 800526e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005272:	f150 0000 	adcs.w	r0, r0, #0
 8005276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800527a:	ea41 0105 	orr.w	r1, r1, r5
 800527e:	bd30      	pop	{r4, r5, pc}
 8005280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005284:	4140      	adcs	r0, r0
 8005286:	eb41 0101 	adc.w	r1, r1, r1
 800528a:	3c01      	subs	r4, #1
 800528c:	bf28      	it	cs
 800528e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005292:	d2e9      	bcs.n	8005268 <__adddf3+0x10c>
 8005294:	f091 0f00 	teq	r1, #0
 8005298:	bf04      	itt	eq
 800529a:	4601      	moveq	r1, r0
 800529c:	2000      	moveq	r0, #0
 800529e:	fab1 f381 	clz	r3, r1
 80052a2:	bf08      	it	eq
 80052a4:	3320      	addeq	r3, #32
 80052a6:	f1a3 030b 	sub.w	r3, r3, #11
 80052aa:	f1b3 0220 	subs.w	r2, r3, #32
 80052ae:	da0c      	bge.n	80052ca <__adddf3+0x16e>
 80052b0:	320c      	adds	r2, #12
 80052b2:	dd08      	ble.n	80052c6 <__adddf3+0x16a>
 80052b4:	f102 0c14 	add.w	ip, r2, #20
 80052b8:	f1c2 020c 	rsb	r2, r2, #12
 80052bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80052c0:	fa21 f102 	lsr.w	r1, r1, r2
 80052c4:	e00c      	b.n	80052e0 <__adddf3+0x184>
 80052c6:	f102 0214 	add.w	r2, r2, #20
 80052ca:	bfd8      	it	le
 80052cc:	f1c2 0c20 	rsble	ip, r2, #32
 80052d0:	fa01 f102 	lsl.w	r1, r1, r2
 80052d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052d8:	bfdc      	itt	le
 80052da:	ea41 010c 	orrle.w	r1, r1, ip
 80052de:	4090      	lslle	r0, r2
 80052e0:	1ae4      	subs	r4, r4, r3
 80052e2:	bfa2      	ittt	ge
 80052e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80052e8:	4329      	orrge	r1, r5
 80052ea:	bd30      	popge	{r4, r5, pc}
 80052ec:	ea6f 0404 	mvn.w	r4, r4
 80052f0:	3c1f      	subs	r4, #31
 80052f2:	da1c      	bge.n	800532e <__adddf3+0x1d2>
 80052f4:	340c      	adds	r4, #12
 80052f6:	dc0e      	bgt.n	8005316 <__adddf3+0x1ba>
 80052f8:	f104 0414 	add.w	r4, r4, #20
 80052fc:	f1c4 0220 	rsb	r2, r4, #32
 8005300:	fa20 f004 	lsr.w	r0, r0, r4
 8005304:	fa01 f302 	lsl.w	r3, r1, r2
 8005308:	ea40 0003 	orr.w	r0, r0, r3
 800530c:	fa21 f304 	lsr.w	r3, r1, r4
 8005310:	ea45 0103 	orr.w	r1, r5, r3
 8005314:	bd30      	pop	{r4, r5, pc}
 8005316:	f1c4 040c 	rsb	r4, r4, #12
 800531a:	f1c4 0220 	rsb	r2, r4, #32
 800531e:	fa20 f002 	lsr.w	r0, r0, r2
 8005322:	fa01 f304 	lsl.w	r3, r1, r4
 8005326:	ea40 0003 	orr.w	r0, r0, r3
 800532a:	4629      	mov	r1, r5
 800532c:	bd30      	pop	{r4, r5, pc}
 800532e:	fa21 f004 	lsr.w	r0, r1, r4
 8005332:	4629      	mov	r1, r5
 8005334:	bd30      	pop	{r4, r5, pc}
 8005336:	f094 0f00 	teq	r4, #0
 800533a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800533e:	bf06      	itte	eq
 8005340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005344:	3401      	addeq	r4, #1
 8005346:	3d01      	subne	r5, #1
 8005348:	e74e      	b.n	80051e8 <__adddf3+0x8c>
 800534a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800534e:	bf18      	it	ne
 8005350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005354:	d029      	beq.n	80053aa <__adddf3+0x24e>
 8005356:	ea94 0f05 	teq	r4, r5
 800535a:	bf08      	it	eq
 800535c:	ea90 0f02 	teqeq	r0, r2
 8005360:	d005      	beq.n	800536e <__adddf3+0x212>
 8005362:	ea54 0c00 	orrs.w	ip, r4, r0
 8005366:	bf04      	itt	eq
 8005368:	4619      	moveq	r1, r3
 800536a:	4610      	moveq	r0, r2
 800536c:	bd30      	pop	{r4, r5, pc}
 800536e:	ea91 0f03 	teq	r1, r3
 8005372:	bf1e      	ittt	ne
 8005374:	2100      	movne	r1, #0
 8005376:	2000      	movne	r0, #0
 8005378:	bd30      	popne	{r4, r5, pc}
 800537a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800537e:	d105      	bne.n	800538c <__adddf3+0x230>
 8005380:	0040      	lsls	r0, r0, #1
 8005382:	4149      	adcs	r1, r1
 8005384:	bf28      	it	cs
 8005386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800538a:	bd30      	pop	{r4, r5, pc}
 800538c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005390:	bf3c      	itt	cc
 8005392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005396:	bd30      	popcc	{r4, r5, pc}
 8005398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800539c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	bd30      	pop	{r4, r5, pc}
 80053aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053ae:	bf1a      	itte	ne
 80053b0:	4619      	movne	r1, r3
 80053b2:	4610      	movne	r0, r2
 80053b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053b8:	bf1c      	itt	ne
 80053ba:	460b      	movne	r3, r1
 80053bc:	4602      	movne	r2, r0
 80053be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053c2:	bf06      	itte	eq
 80053c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053c8:	ea91 0f03 	teqeq	r1, r3
 80053cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80053d0:	bd30      	pop	{r4, r5, pc}
 80053d2:	bf00      	nop

080053d4 <__aeabi_ui2d>:
 80053d4:	f090 0f00 	teq	r0, #0
 80053d8:	bf04      	itt	eq
 80053da:	2100      	moveq	r1, #0
 80053dc:	4770      	bxeq	lr
 80053de:	b530      	push	{r4, r5, lr}
 80053e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80053e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80053e8:	f04f 0500 	mov.w	r5, #0
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	e750      	b.n	8005294 <__adddf3+0x138>
 80053f2:	bf00      	nop

080053f4 <__aeabi_i2d>:
 80053f4:	f090 0f00 	teq	r0, #0
 80053f8:	bf04      	itt	eq
 80053fa:	2100      	moveq	r1, #0
 80053fc:	4770      	bxeq	lr
 80053fe:	b530      	push	{r4, r5, lr}
 8005400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800540c:	bf48      	it	mi
 800540e:	4240      	negmi	r0, r0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e73e      	b.n	8005294 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_f2d>:
 8005418:	0042      	lsls	r2, r0, #1
 800541a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800541e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005426:	bf1f      	itttt	ne
 8005428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800542c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005434:	4770      	bxne	lr
 8005436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800543a:	bf08      	it	eq
 800543c:	4770      	bxeq	lr
 800543e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005442:	bf04      	itt	eq
 8005444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005448:	4770      	bxeq	lr
 800544a:	b530      	push	{r4, r5, lr}
 800544c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005458:	e71c      	b.n	8005294 <__adddf3+0x138>
 800545a:	bf00      	nop

0800545c <__aeabi_ul2d>:
 800545c:	ea50 0201 	orrs.w	r2, r0, r1
 8005460:	bf08      	it	eq
 8005462:	4770      	bxeq	lr
 8005464:	b530      	push	{r4, r5, lr}
 8005466:	f04f 0500 	mov.w	r5, #0
 800546a:	e00a      	b.n	8005482 <__aeabi_l2d+0x16>

0800546c <__aeabi_l2d>:
 800546c:	ea50 0201 	orrs.w	r2, r0, r1
 8005470:	bf08      	it	eq
 8005472:	4770      	bxeq	lr
 8005474:	b530      	push	{r4, r5, lr}
 8005476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800547a:	d502      	bpl.n	8005482 <__aeabi_l2d+0x16>
 800547c:	4240      	negs	r0, r0
 800547e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800548a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800548e:	f43f aed8 	beq.w	8005242 <__adddf3+0xe6>
 8005492:	f04f 0203 	mov.w	r2, #3
 8005496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800549a:	bf18      	it	ne
 800549c:	3203      	addne	r2, #3
 800549e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054a2:	bf18      	it	ne
 80054a4:	3203      	addne	r2, #3
 80054a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054aa:	f1c2 0320 	rsb	r3, r2, #32
 80054ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80054b2:	fa20 f002 	lsr.w	r0, r0, r2
 80054b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80054ba:	ea40 000e 	orr.w	r0, r0, lr
 80054be:	fa21 f102 	lsr.w	r1, r1, r2
 80054c2:	4414      	add	r4, r2
 80054c4:	e6bd      	b.n	8005242 <__adddf3+0xe6>
 80054c6:	bf00      	nop

080054c8 <__aeabi_dmul>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80054d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054d6:	bf1d      	ittte	ne
 80054d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80054dc:	ea94 0f0c 	teqne	r4, ip
 80054e0:	ea95 0f0c 	teqne	r5, ip
 80054e4:	f000 f8de 	bleq	80056a4 <__aeabi_dmul+0x1dc>
 80054e8:	442c      	add	r4, r5
 80054ea:	ea81 0603 	eor.w	r6, r1, r3
 80054ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80054f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80054f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80054fa:	bf18      	it	ne
 80054fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005508:	d038      	beq.n	800557c <__aeabi_dmul+0xb4>
 800550a:	fba0 ce02 	umull	ip, lr, r0, r2
 800550e:	f04f 0500 	mov.w	r5, #0
 8005512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800551a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800551e:	f04f 0600 	mov.w	r6, #0
 8005522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005526:	f09c 0f00 	teq	ip, #0
 800552a:	bf18      	it	ne
 800552c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800553c:	d204      	bcs.n	8005548 <__aeabi_dmul+0x80>
 800553e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005542:	416d      	adcs	r5, r5
 8005544:	eb46 0606 	adc.w	r6, r6, r6
 8005548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800554c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800555c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005560:	bf88      	it	hi
 8005562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005566:	d81e      	bhi.n	80055a6 <__aeabi_dmul+0xde>
 8005568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800556c:	bf08      	it	eq
 800556e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005572:	f150 0000 	adcs.w	r0, r0, #0
 8005576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005580:	ea46 0101 	orr.w	r1, r6, r1
 8005584:	ea40 0002 	orr.w	r0, r0, r2
 8005588:	ea81 0103 	eor.w	r1, r1, r3
 800558c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005590:	bfc2      	ittt	gt
 8005592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800559a:	bd70      	popgt	{r4, r5, r6, pc}
 800559c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055a0:	f04f 0e00 	mov.w	lr, #0
 80055a4:	3c01      	subs	r4, #1
 80055a6:	f300 80ab 	bgt.w	8005700 <__aeabi_dmul+0x238>
 80055aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055ae:	bfde      	ittt	le
 80055b0:	2000      	movle	r0, #0
 80055b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80055b6:	bd70      	pople	{r4, r5, r6, pc}
 80055b8:	f1c4 0400 	rsb	r4, r4, #0
 80055bc:	3c20      	subs	r4, #32
 80055be:	da35      	bge.n	800562c <__aeabi_dmul+0x164>
 80055c0:	340c      	adds	r4, #12
 80055c2:	dc1b      	bgt.n	80055fc <__aeabi_dmul+0x134>
 80055c4:	f104 0414 	add.w	r4, r4, #20
 80055c8:	f1c4 0520 	rsb	r5, r4, #32
 80055cc:	fa00 f305 	lsl.w	r3, r0, r5
 80055d0:	fa20 f004 	lsr.w	r0, r0, r4
 80055d4:	fa01 f205 	lsl.w	r2, r1, r5
 80055d8:	ea40 0002 	orr.w	r0, r0, r2
 80055dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80055e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80055e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80055e8:	fa21 f604 	lsr.w	r6, r1, r4
 80055ec:	eb42 0106 	adc.w	r1, r2, r6
 80055f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80055f4:	bf08      	it	eq
 80055f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f1c4 040c 	rsb	r4, r4, #12
 8005600:	f1c4 0520 	rsb	r5, r4, #32
 8005604:	fa00 f304 	lsl.w	r3, r0, r4
 8005608:	fa20 f005 	lsr.w	r0, r0, r5
 800560c:	fa01 f204 	lsl.w	r2, r1, r4
 8005610:	ea40 0002 	orr.w	r0, r0, r2
 8005614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800561c:	f141 0100 	adc.w	r1, r1, #0
 8005620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005624:	bf08      	it	eq
 8005626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f1c4 0520 	rsb	r5, r4, #32
 8005630:	fa00 f205 	lsl.w	r2, r0, r5
 8005634:	ea4e 0e02 	orr.w	lr, lr, r2
 8005638:	fa20 f304 	lsr.w	r3, r0, r4
 800563c:	fa01 f205 	lsl.w	r2, r1, r5
 8005640:	ea43 0302 	orr.w	r3, r3, r2
 8005644:	fa21 f004 	lsr.w	r0, r1, r4
 8005648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800564c:	fa21 f204 	lsr.w	r2, r1, r4
 8005650:	ea20 0002 	bic.w	r0, r0, r2
 8005654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800565c:	bf08      	it	eq
 800565e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f094 0f00 	teq	r4, #0
 8005668:	d10f      	bne.n	800568a <__aeabi_dmul+0x1c2>
 800566a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800566e:	0040      	lsls	r0, r0, #1
 8005670:	eb41 0101 	adc.w	r1, r1, r1
 8005674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005678:	bf08      	it	eq
 800567a:	3c01      	subeq	r4, #1
 800567c:	d0f7      	beq.n	800566e <__aeabi_dmul+0x1a6>
 800567e:	ea41 0106 	orr.w	r1, r1, r6
 8005682:	f095 0f00 	teq	r5, #0
 8005686:	bf18      	it	ne
 8005688:	4770      	bxne	lr
 800568a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800568e:	0052      	lsls	r2, r2, #1
 8005690:	eb43 0303 	adc.w	r3, r3, r3
 8005694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005698:	bf08      	it	eq
 800569a:	3d01      	subeq	r5, #1
 800569c:	d0f7      	beq.n	800568e <__aeabi_dmul+0x1c6>
 800569e:	ea43 0306 	orr.w	r3, r3, r6
 80056a2:	4770      	bx	lr
 80056a4:	ea94 0f0c 	teq	r4, ip
 80056a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056ac:	bf18      	it	ne
 80056ae:	ea95 0f0c 	teqne	r5, ip
 80056b2:	d00c      	beq.n	80056ce <__aeabi_dmul+0x206>
 80056b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056b8:	bf18      	it	ne
 80056ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056be:	d1d1      	bne.n	8005664 <__aeabi_dmul+0x19c>
 80056c0:	ea81 0103 	eor.w	r1, r1, r3
 80056c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056d2:	bf06      	itte	eq
 80056d4:	4610      	moveq	r0, r2
 80056d6:	4619      	moveq	r1, r3
 80056d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056dc:	d019      	beq.n	8005712 <__aeabi_dmul+0x24a>
 80056de:	ea94 0f0c 	teq	r4, ip
 80056e2:	d102      	bne.n	80056ea <__aeabi_dmul+0x222>
 80056e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80056e8:	d113      	bne.n	8005712 <__aeabi_dmul+0x24a>
 80056ea:	ea95 0f0c 	teq	r5, ip
 80056ee:	d105      	bne.n	80056fc <__aeabi_dmul+0x234>
 80056f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80056f4:	bf1c      	itt	ne
 80056f6:	4610      	movne	r0, r2
 80056f8:	4619      	movne	r1, r3
 80056fa:	d10a      	bne.n	8005712 <__aeabi_dmul+0x24a>
 80056fc:	ea81 0103 	eor.w	r1, r1, r3
 8005700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570c:	f04f 0000 	mov.w	r0, #0
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800571a:	bd70      	pop	{r4, r5, r6, pc}

0800571c <__aeabi_ddiv>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800572a:	bf1d      	ittte	ne
 800572c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005730:	ea94 0f0c 	teqne	r4, ip
 8005734:	ea95 0f0c 	teqne	r5, ip
 8005738:	f000 f8a7 	bleq	800588a <__aeabi_ddiv+0x16e>
 800573c:	eba4 0405 	sub.w	r4, r4, r5
 8005740:	ea81 0e03 	eor.w	lr, r1, r3
 8005744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800574c:	f000 8088 	beq.w	8005860 <__aeabi_ddiv+0x144>
 8005750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800575c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800576c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005774:	429d      	cmp	r5, r3
 8005776:	bf08      	it	eq
 8005778:	4296      	cmpeq	r6, r2
 800577a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800577e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005782:	d202      	bcs.n	800578a <__aeabi_ddiv+0x6e>
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	ea4f 0232 	mov.w	r2, r2, rrx
 800578a:	1ab6      	subs	r6, r6, r2
 800578c:	eb65 0503 	sbc.w	r5, r5, r3
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	ea4f 0232 	mov.w	r2, r2, rrx
 8005796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800579a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800579e:	ebb6 0e02 	subs.w	lr, r6, r2
 80057a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057a6:	bf22      	ittt	cs
 80057a8:	1ab6      	subcs	r6, r6, r2
 80057aa:	4675      	movcs	r5, lr
 80057ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057be:	bf22      	ittt	cs
 80057c0:	1ab6      	subcs	r6, r6, r2
 80057c2:	4675      	movcs	r5, lr
 80057c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80057d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057d6:	bf22      	ittt	cs
 80057d8:	1ab6      	subcs	r6, r6, r2
 80057da:	4675      	movcs	r5, lr
 80057dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ee:	bf22      	ittt	cs
 80057f0:	1ab6      	subcs	r6, r6, r2
 80057f2:	4675      	movcs	r5, lr
 80057f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80057f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80057fc:	d018      	beq.n	8005830 <__aeabi_ddiv+0x114>
 80057fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800580a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800580e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800581a:	d1c0      	bne.n	800579e <__aeabi_ddiv+0x82>
 800581c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005820:	d10b      	bne.n	800583a <__aeabi_ddiv+0x11e>
 8005822:	ea41 0100 	orr.w	r1, r1, r0
 8005826:	f04f 0000 	mov.w	r0, #0
 800582a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800582e:	e7b6      	b.n	800579e <__aeabi_ddiv+0x82>
 8005830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005834:	bf04      	itt	eq
 8005836:	4301      	orreq	r1, r0
 8005838:	2000      	moveq	r0, #0
 800583a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800583e:	bf88      	it	hi
 8005840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005844:	f63f aeaf 	bhi.w	80055a6 <__aeabi_dmul+0xde>
 8005848:	ebb5 0c03 	subs.w	ip, r5, r3
 800584c:	bf04      	itt	eq
 800584e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005856:	f150 0000 	adcs.w	r0, r0, #0
 800585a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800586c:	bfc2      	ittt	gt
 800586e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005876:	bd70      	popgt	{r4, r5, r6, pc}
 8005878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800587c:	f04f 0e00 	mov.w	lr, #0
 8005880:	3c01      	subs	r4, #1
 8005882:	e690      	b.n	80055a6 <__aeabi_dmul+0xde>
 8005884:	ea45 0e06 	orr.w	lr, r5, r6
 8005888:	e68d      	b.n	80055a6 <__aeabi_dmul+0xde>
 800588a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800588e:	ea94 0f0c 	teq	r4, ip
 8005892:	bf08      	it	eq
 8005894:	ea95 0f0c 	teqeq	r5, ip
 8005898:	f43f af3b 	beq.w	8005712 <__aeabi_dmul+0x24a>
 800589c:	ea94 0f0c 	teq	r4, ip
 80058a0:	d10a      	bne.n	80058b8 <__aeabi_ddiv+0x19c>
 80058a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058a6:	f47f af34 	bne.w	8005712 <__aeabi_dmul+0x24a>
 80058aa:	ea95 0f0c 	teq	r5, ip
 80058ae:	f47f af25 	bne.w	80056fc <__aeabi_dmul+0x234>
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	e72c      	b.n	8005712 <__aeabi_dmul+0x24a>
 80058b8:	ea95 0f0c 	teq	r5, ip
 80058bc:	d106      	bne.n	80058cc <__aeabi_ddiv+0x1b0>
 80058be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058c2:	f43f aefd 	beq.w	80056c0 <__aeabi_dmul+0x1f8>
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	e722      	b.n	8005712 <__aeabi_dmul+0x24a>
 80058cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058d0:	bf18      	it	ne
 80058d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058d6:	f47f aec5 	bne.w	8005664 <__aeabi_dmul+0x19c>
 80058da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80058de:	f47f af0d 	bne.w	80056fc <__aeabi_dmul+0x234>
 80058e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80058e6:	f47f aeeb 	bne.w	80056c0 <__aeabi_dmul+0x1f8>
 80058ea:	e712      	b.n	8005712 <__aeabi_dmul+0x24a>

080058ec <__aeabi_d2uiz>:
 80058ec:	004a      	lsls	r2, r1, #1
 80058ee:	d211      	bcs.n	8005914 <__aeabi_d2uiz+0x28>
 80058f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80058f4:	d211      	bcs.n	800591a <__aeabi_d2uiz+0x2e>
 80058f6:	d50d      	bpl.n	8005914 <__aeabi_d2uiz+0x28>
 80058f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80058fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005900:	d40e      	bmi.n	8005920 <__aeabi_d2uiz+0x34>
 8005902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800590a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800590e:	fa23 f002 	lsr.w	r0, r3, r2
 8005912:	4770      	bx	lr
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	4770      	bx	lr
 800591a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800591e:	d102      	bne.n	8005926 <__aeabi_d2uiz+0x3a>
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	4770      	bx	lr
 8005926:	f04f 0000 	mov.w	r0, #0
 800592a:	4770      	bx	lr

0800592c <AFIO_INIT>:
 */
#include "RCC.h"
#include "AFIO.h"


void AFIO_INIT(void){
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
	//no remap of CAN
	AFIO->MAPR &= ~(AFIO_MAPR_CAN_REMAP_Msk);
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <AFIO_INIT+0x24>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <AFIO_INIT+0x24>)
 8005936:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800593a:	6053      	str	r3, [r2, #4]
	//No remap of USART3
	AFIO->MAPR &= ~(AFIO_MAPR_USART3_REMAP_Msk);
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <AFIO_INIT+0x24>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a03      	ldr	r2, [pc, #12]	; (8005950 <AFIO_INIT+0x24>)
 8005942:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005946:	6053      	str	r3, [r2, #4]
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr
 8005950:	40010000 	.word	0x40010000

08005954 <CAN_Setup>:

/* ------------------------------- Configuration for CAN ---------------------------------*/
/*
 * */

void CAN_Setup(CAN_TypeDef *CANx, CAN_setupTypeDef *CANsetupStruct) {
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
	/* Initialization request */
	CANx->MCR |= CAN_MCR_INRQ;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f043 0201 	orr.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]

	/*Request to exit Sleep mode */
	CANx->MCR &= ~CAN_MCR_SLEEP_Msk;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 0202 	bic.w	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]

	/* Wait for initialization mode */
	while (!(CAN_MSR_INAK & CANx->MSR))
 8005976:	bf00      	nop
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f9      	beq.n	8005978 <CAN_Setup+0x24>
		;

	/******************* SET MCR register configuration**************************/

	/* Set the time triggered communication mode */
	if (CANsetupStruct->TTCM == ENABLE) {
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d106      	bne.n	800599a <CAN_Setup+0x46>
		CANx->MCR |= CAN_MCR_TTCM;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e005      	b.n	80059a6 <CAN_Setup+0x52>
	} else {
		CANx->MCR &= ~(CAN_MCR_TTCM_Msk);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
	}
	/* Set the automatic bus-off management */
	if (CANsetupStruct->ABOM == ENABLE) {
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d106      	bne.n	80059bc <CAN_Setup+0x68>
		CANx->MCR |= CAN_MCR_ABOM;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e005      	b.n	80059c8 <CAN_Setup+0x74>
	} else {
		CANx->MCR &= ~(CAN_MCR_ABOM_Msk);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (CANsetupStruct->AWUM == ENABLE) {
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	789b      	ldrb	r3, [r3, #2]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d106      	bne.n	80059de <CAN_Setup+0x8a>
		CANx->MCR |= CAN_MCR_AWUM;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e005      	b.n	80059ea <CAN_Setup+0x96>
	} else {
		CANx->MCR &= ~(CAN_MCR_AWUM_Msk);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 0220 	bic.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
	}

	/* Set the no automatic retransmission */
	if (CANsetupStruct->NART == ENABLE) {
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d106      	bne.n	8005a00 <CAN_Setup+0xac>
		CANx->MCR |= CAN_MCR_NART;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f043 0210 	orr.w	r2, r3, #16
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e005      	b.n	8005a0c <CAN_Setup+0xb8>
	} else {
		CANx->MCR &= ~(CAN_MCR_NART_Msk);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 0210 	bic.w	r2, r3, #16
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (CANsetupStruct->TXFP == ENABLE) {
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	795b      	ldrb	r3, [r3, #5]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <CAN_Setup+0xce>
		CANx->MCR &= ~(CAN_MCR_TXFP_Msk);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 0204 	bic.w	r2, r3, #4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e005      	b.n	8005a2e <CAN_Setup+0xda>
	} else {
		CANx->MCR |= CAN_MCR_TXFP;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f043 0204 	orr.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
	}
	if(CANsetupStruct->RFLM == ENABLE){
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d106      	bne.n	8005a44 <CAN_Setup+0xf0>
		//FIFO Overload Lock Mode
		CANx->MCR |= CAN_MCR_RFLM;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f043 0208 	orr.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e005      	b.n	8005a50 <CAN_Setup+0xfc>
	}else{
		CANx->MCR &= ~(CAN_MCR_RFLM_Msk);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f023 0208 	bic.w	r2, r3, #8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
	 * tBS2 = tq * (TS2[2:0] + 1)  = 0.111 * (0+1)  = 0.111 micro sec
	 * NominalBitTime = 1 * tq + tBS1 + tBS2 = 0.111 + 0.777 + 0.111 = 0.999 micro sec
	 * Boudrate = 1 / NominalBitTime = 1 Mbps
	 *
	 * */
	CANx->BTR = CAN_BTR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a03      	ldr	r2, [pc, #12]	; (8005a60 <CAN_Setup+0x10c>)
 8005a54:	61da      	str	r2, [r3, #28]
	//set all filters to our can (other can must deactivate)
	//CANx->FMR &= ~(CAN_FMR_CAN2SB_Msk);

}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	001e000f 	.word	0x001e000f

08005a64 <CAN_Normal>:
}

/*
 * ---------------------------------- CAN set normal mode ---------------------------------
 */
void CAN_Normal(CAN_TypeDef *CANx) {
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

	CANx->MCR &= ~(CAN_MCR_INRQ_Msk | CAN_MCR_SLEEP_Msk); //normal operating mode, reset(INRQ,SLEEP)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 0203 	bic.w	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]

	while (CANx->MSR & CAN_MSR_INAK)
 8005a78:	bf00      	nop
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f9      	bne.n	8005a7a <CAN_Normal+0x16>
		;

}
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <CAN_Transmit>:

/*
 * note : para MailboxNumber Can be :TX_MAILBOX_0, TX_MAILBOX_1, TX_MAILBOX_2
 *------------------------------------ CAN Transmission ----------------------------------
 */
void CAN_Transmit(CAN_TypeDef *CANx, CAN_msg *msg) {
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
	/* check if transmission mailbox is empty */
	uint8_t mailBoxIndex = 10;
 8005a9c:	230a      	movs	r3, #10
 8005a9e:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 8005aa0:	e019      	b.n	8005ad6 <CAN_Transmit+0x44>
		if(CANx->TSR & CAN_TSR_TME0){
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <CAN_Transmit+0x22>
			mailBoxIndex = CAN_TSR_TME0 >> 27;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
 8005ab2:	e010      	b.n	8005ad6 <CAN_Transmit+0x44>
		}else if(CANx->TSR & CAN_TSR_TME1){
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <CAN_Transmit+0x34>
			mailBoxIndex = CAN_TSR_TME1 >> 27;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
 8005ac4:	e007      	b.n	8005ad6 <CAN_Transmit+0x44>
		}else if (CANx->TSR & CAN_TSR_TME2) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <CAN_Transmit+0x44>
			mailBoxIndex = CAN_TSR_TME2 >> 27;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b0a      	cmp	r3, #10
 8005ada:	d0e2      	beq.n	8005aa2 <CAN_Transmit+0x10>
		}
	}
	 // ------ check if transmission mailbox  is empty ------------------------------------

	CANx->sTxMailBox[mailBoxIndex].TIR = (uint32_t) 0; // Reset TIR register
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

	// Setup identifier information   ?<==================
	if (msg->format == STANDARD_FORMAT) {
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	7b5b      	ldrb	r3, [r3, #13]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d110      	bne.n	8005b14 <CAN_Transmit+0x82>
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 21);
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	3318      	adds	r3, #24
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	055a      	lsls	r2, r3, #21
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	440b      	add	r3, r1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e011      	b.n	8005b38 <CAN_Transmit+0xa6>
	} else {
		// Extended ID
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 3)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	431a      	orrs	r2, r3
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	f042 0204 	orr.w	r2, r2, #4
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	3318      	adds	r3, #24
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	440b      	add	r3, r1
 8005b36:	601a      	str	r2, [r3, #0]
				| CAN_TI0R_IDE;
	}

	// Setup type information
	if (msg->type == DATA_FRAME) {
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	7b9b      	ldrb	r3, [r3, #14]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d13c      	bne.n	8005bba <CAN_Transmit+0x128>
		// DATA FRAME
		/*reset transmit data registers*/
		CANx->sTxMailBox[mailBoxIndex].TDLR = 0;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
		CANx->sTxMailBox[mailBoxIndex].TDHR = 0;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	79db      	ldrb	r3, [r3, #7]
 8005b64:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[2] << 16)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	799b      	ldrb	r3, [r3, #6]
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	795b      	ldrb	r3, [r3, #5]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	431a      	orrs	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	791b      	ldrb	r3, [r3, #4]
 8005b7a:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 8005b7e:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005b8a:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	7adb      	ldrb	r3, [r3, #11]
 8005b90:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[6] << 16)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	7a9b      	ldrb	r3, [r3, #10]
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	7a5b      	ldrb	r3, [r3, #9]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	7a1b      	ldrb	r3, [r3, #8]
 8005ba6:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 8005baa:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	440b      	add	r3, r1
 8005bb2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e00d      	b.n	8005bd6 <CAN_Transmit+0x144>
	} else {
		// REMOTE FRAME
		CANx->sTxMailBox[mailBoxIndex].TIR |= (CAN_TI0R_RTR);
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	3318      	adds	r3, #24
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	4413      	add	r3, r2
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	f042 0202 	orr.w	r2, r2, #2
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	3318      	adds	r3, #24
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	440b      	add	r3, r1
 8005bd4:	601a      	str	r2, [r3, #0]
	}

	// Setup Can frame Data length Code
	CANx->sTxMailBox[mailBoxIndex].TDTR &= ~CAN_TDT0R_DLC;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	f022 020f 	bic.w	r2, r2, #15
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	3318      	adds	r3, #24
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	601a      	str	r2, [r3, #0]
	CANx->sTxMailBox[mailBoxIndex].TDTR |= (msg->length & CAN_TDT0R_DLC);
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	4413      	add	r3, r2
 8005c00:	3304      	adds	r3, #4
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	7b1b      	ldrb	r3, [r3, #12]
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	3318      	adds	r3, #24
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	440b      	add	r3, r1
 8005c18:	3304      	adds	r3, #4
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Transmit Mailbox Request */
	CANx->sTxMailBox[mailBoxIndex].TIR |= CAN_TI0R_TXRQ;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	3318      	adds	r3, #24
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	4413      	add	r3, r2
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	3318      	adds	r3, #24
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	440b      	add	r3, r1
 8005c36:	601a      	str	r2, [r3, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <CAN_Receive>:


/* -------------------------------      CAN Receiving     ------------------------------- */
// note para FifoNumber can be CAN_FIFO0, CAN_FIFO1
void CAN_Receive(CAN_TypeDef *CANx, uint8_t FifoNumber, CAN_msg *msg) {
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	72fb      	strb	r3, [r7, #11]

	// Read identifier information
	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_IDE) == 0) {
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	331b      	adds	r3, #27
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10e      	bne.n	8005c82 <CAN_Receive+0x40>
		// Standard ID

		msg->format = STANDARD_FORMAT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x000007FF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 21);
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	331b      	adds	r3, #27
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0d5b      	lsrs	r3, r3, #21
 8005c78:	f3c3 020a 	ubfx	r2, r3, #0, #11
		msg->id = (uint32_t) 0x000007FF
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e00d      	b.n	8005c9e <CAN_Receive+0x5c>
	} else {
		// Extended ID
		msg->format = EXTENDED_FORMAT;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x0003FFFF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 3);
 8005c88:	7afb      	ldrb	r3, [r7, #11]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	331b      	adds	r3, #27
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	4413      	add	r3, r2
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	08db      	lsrs	r3, r3, #3
 8005c96:	f3c3 0211 	ubfx	r2, r3, #0, #18
		msg->id = (uint32_t) 0x0003FFFF
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	601a      	str	r2, [r3, #0]
	}

	// Read type information

	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_RTR) == 0) {
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	331b      	adds	r3, #27
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	4413      	add	r3, r2
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <CAN_Receive+0x78>

		msg->type = DATA_FRAME;                     // DATA   FRAME
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	739a      	strb	r2, [r3, #14]
 8005cb8:	e002      	b.n	8005cc0 <CAN_Receive+0x7e>

	} else {
		msg->type = REMOTE_FRAME;                   // REMOTE FRAME
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	739a      	strb	r2, [r3, #14]
	}

	// Read length (number of received bytes)
	msg->length = (uint8_t) 0x0000000F & CANx->sFIFOMailBox[FifoNumber].RDTR;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	331b      	adds	r3, #27
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	3304      	adds	r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	731a      	strb	r2, [r3, #12]

	// Read data bytes
	uint8_t ReceivDataCounter;

	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
 8005cde:	e027      	b.n	8005d30 <CAN_Receive+0xee>
			ReceivDataCounter++)

			{
		if (ReceivDataCounter < 4) /*get Data from low register*/
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d810      	bhi.n	8005d08 <CAN_Receive+0xc6>
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005cf2:	681a      	ldr	r2, [r3, #0]
					>> (ReceivDataCounter * 8)) & 0xFF; //get Data from low register byte by byte
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	b2d1      	uxtb	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	460a      	mov	r2, r1
 8005d04:	711a      	strb	r2, [r3, #4]
 8005d06:	e010      	b.n	8005d2a <CAN_Receive+0xe8>
		} else /*get Data from high register*/
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d14:	681a      	ldr	r2, [r3, #0]
					>> ((ReceivDataCounter - 4) * 8)) & 0xFF; //get Data from high register byte by byte
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	3b04      	subs	r3, #4
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	b2d1      	uxtb	r1, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	460a      	mov	r2, r1
 8005d28:	711a      	strb	r2, [r3, #4]
			ReceivDataCounter++)
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7b1b      	ldrb	r3, [r3, #12]
 8005d34:	7dfa      	ldrb	r2, [r7, #23]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3d2      	bcc.n	8005ce0 <CAN_Receive+0x9e>
		}

	}

	if (FifoNumber == CAN_FIFO0) //check for input FIFO to release
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <CAN_Receive+0x10c>
	{

		CANx->RF0R |= CAN_RF0R_RFOM0;  //release FIFO 0
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	e008      	b.n	8005d60 <CAN_Receive+0x11e>
	}

	else if (FifoNumber == CAN_FIFO1) {
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <CAN_Receive+0x11e>

		CANx->RF1R |= CAN_RF1R_RFOM1;  //release FIFO 1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	611a      	str	r2, [r3, #16]

	else {

		/*wrong FIFO number input*/
	}
	msg->ActiveFlag = ENABLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	73da      	strb	r2, [r3, #15]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <CAN_Interrupt_Enable>:
/*
 * ------------------------------------ CAN interrupt ------------------------------------
 */

void CAN_Interrupt_Enable(CAN_TypeDef *CANx, uint32_t CanInterruptType,
		FunctionalState InterruptNewState) {
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]

	if (InterruptNewState == ENABLE) //check for input new state of input interrupt
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <CAN_Interrupt_Enable+0x22>
			{

		CANx->IER |= CanInterruptType; // Enable the selected CANx interrupt
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	615a      	str	r2, [r3, #20]
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt

	} else {
		/*WRONG STATE */
	}
}
 8005d90:	e009      	b.n	8005da6 <CAN_Interrupt_Enable+0x36>
	} else if (InterruptNewState == DISABLE) {
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <CAN_Interrupt_Enable+0x36>
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	401a      	ands	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	615a      	str	r2, [r3, #20]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <CAN_ConfigFilter>:
	return ErrorcodeType; //Return the error code
}


void CAN_ConfigFilter(CAN_TypeDef *CANx, CAN_FilterTypeDef *sFilterConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;


    /* Initialization mode for the filter */
    CANx->FMR |= CAN_FMR_FINIT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200


    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CANx->FA1R &= ~(filternbrbitpos);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	401a      	ands	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */


      /* 32-bit scale for the filter */
      CANx->FS1R |= filternbrbitpos;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* Filter Mode */
      if (sFilterConfig->FilterMode == CAN_FILTERMODE_MASK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d113      	bne.n	8005e2c <CAN_ConfigFilter+0x7c>
      {
        /* Id/Mask mode for the filter*/
        CANx->FM1R &= ~(filternbrbitpos);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

        /* 32-bit identifier  */
        CANx->sFilterRegister[sFilterConfig->FilterBank].FR1 =((uint32_t)sFilterConfig->FilterId) << 21 ;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	0552      	lsls	r2, r2, #21
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	3348      	adds	r3, #72	; 0x48
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e010      	b.n	8005e4e <CAN_ConfigFilter+0x9e>
      }
      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
      {
        /* Identifier list mode for the filter*/
        CANx->FM1R |= (filternbrbitpos);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    	CANx->sFilterRegister[sFilterConfig->FilterBank].FR0 = ((uint32_t)sFilterConfig->FilterMaskId) << 21 ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	68d2      	ldr	r2, [r2, #12]
 8005e44:	0559      	lsls	r1, r3, #21
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3248      	adds	r2, #72	; 0x48
 8005e4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FIFO0)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <CAN_ConfigFilter+0xba>
    {
      /* FIFO 0 assignation for the filter */
      CANx->FFA1R &= ~(filternbrbitpos);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	401a      	ands	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005e68:	e007      	b.n	8005e7a <CAN_ConfigFilter+0xca>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      CANx->FFA1R |= (filternbrbitpos);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d107      	bne.n	8005e92 <CAN_ConfigFilter+0xe2>
    {
      CANx->FA1R |= filternbrbitpos;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialization mode for the filter */
    CANx->FMR &= ~(CAN_FMR_FINIT);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e98:	f023 0201 	bic.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <FLASH_Unlock>:
/*
 * --------------------  Unlock the FLASH control register access  -----------------------
 *
 */
void FLASH_Unlock(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0

    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <FLASH_Unlock+0x18>)
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <FLASH_Unlock+0x1c>)
 8005eb4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005eb6:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <FLASH_Unlock+0x18>)
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <FLASH_Unlock+0x20>)
 8005eba:	605a      	str	r2, [r3, #4]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40022000 	.word	0x40022000
 8005ec8:	45670123 	.word	0x45670123
 8005ecc:	cdef89ab 	.word	0xcdef89ab

08005ed0 <FLASH_Lock>:

/**
  *-------------------  Locks the FLASH control register access --------------------------
  */
void FLASH_Lock(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <FLASH_Lock+0x18>)
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	4a03      	ldr	r2, [pc, #12]	; (8005ee8 <FLASH_Lock+0x18>)
 8005eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ede:	6113      	str	r3, [r2, #16]

}
 8005ee0:	bf00      	nop
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr
 8005ee8:	40022000 	.word	0x40022000

08005eec <FLASH_Program>:
	  }

}

void FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	e9c7 2300 	strd	r2, r3, [r7]
	  uint8_t index = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]
	  uint8_t nbiterations = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75bb      	strb	r3, [r7, #22]

		/* Wait for busy flag */
		  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8005f02:	bf00      	nop
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <FLASH_Program+0xb0>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f9      	bne.n	8005f04 <FLASH_Program+0x18>
		  {
			  /* WAITING */
		  }

		  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <FLASH_Program+0x30>
		      {
		        /* Program halfword (16-bit) at a specified address. */
		        nbiterations = 1U;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75bb      	strb	r3, [r7, #22]
 8005f1a:	e007      	b.n	8005f2c <FLASH_Program+0x40>
		      }
		      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d102      	bne.n	8005f28 <FLASH_Program+0x3c>
		      {
		        /* Program word (32-bit = 2*16-bit) at a specified address. */
		        nbiterations = 2U;
 8005f22:	2302      	movs	r3, #2
 8005f24:	75bb      	strb	r3, [r7, #22]
 8005f26:	e001      	b.n	8005f2c <FLASH_Program+0x40>
		      }
		      else
		      {
		        /* Program double word (64-bit = 4*16-bit) at a specified address. */
		        nbiterations = 4U;
 8005f28:	2304      	movs	r3, #4
 8005f2a:	75bb      	strb	r3, [r7, #22]
		      }

		    for (index = 0U; index < nbiterations; index++)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
 8005f30:	e02b      	b.n	8005f8a <FLASH_Program+0x9e>
		    {
		      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	005a      	lsls	r2, r3, #1
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	eb02 0c03 	add.w	ip, r2, r3
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	0119      	lsls	r1, r3, #4
 8005f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f44:	f1c1 0620 	rsb	r6, r1, #32
 8005f48:	f1a1 0020 	sub.w	r0, r1, #32
 8005f4c:	fa22 f401 	lsr.w	r4, r2, r1
 8005f50:	fa03 f606 	lsl.w	r6, r3, r6
 8005f54:	4334      	orrs	r4, r6
 8005f56:	fa23 f000 	lsr.w	r0, r3, r0
 8005f5a:	4304      	orrs	r4, r0
 8005f5c:	fa23 f501 	lsr.w	r5, r3, r1
 8005f60:	b2a3      	uxth	r3, r4
 8005f62:	4619      	mov	r1, r3
 8005f64:	4660      	mov	r0, ip
 8005f66:	f000 f81b 	bl	8005fa0 <FLASH_Program_HalfWord>

				/* Wait for busy flag */
				  while (RESET != (FLASH->SR & FLASH_SR_BSY))
 8005f6a:	bf00      	nop
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <FLASH_Program+0xb0>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f9      	bne.n	8005f6c <FLASH_Program+0x80>
				  {
					  /* WAITING */
				  }

		        /* If the program operation is completed, disable the PG Bit */
				  FLASH->CR &= (~FLASH_CR_PG);
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <FLASH_Program+0xb0>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <FLASH_Program+0xb0>)
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	6113      	str	r3, [r2, #16]
		    for (index = 0U; index < nbiterations; index++)
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	3301      	adds	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
 8005f8a:	7dfa      	ldrb	r2, [r7, #23]
 8005f8c:	7dbb      	ldrb	r3, [r7, #22]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3cf      	bcc.n	8005f32 <FLASH_Program+0x46>
		     }
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	40022000 	.word	0x40022000

08005fa0 <FLASH_Program_HalfWord>:
  *        Address specify the address to be programmed.
  *        Data    specify the data to be programmed.
  *
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]

	/* Proceed to program the new data */
    /* Set Programming Bit */
	FLASH->CR |= FLASH_CR_PG;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <FLASH_Program_HalfWord+0x28>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a05      	ldr	r2, [pc, #20]	; (8005fc8 <FLASH_Program_HalfWord+0x28>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	6113      	str	r3, [r2, #16]
	  /* Write data in the address */
	  *(volatile uint16_t*)Address = Data;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	887a      	ldrh	r2, [r7, #2]
 8005fbc:	801a      	strh	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	40022000 	.word	0x40022000

08005fcc <GPIO_Config_Pin>:
}
void GPIO_Write_Port(GPIO_TypeDef *GPIOx,uint16_t Port_Value){
	GPIOx->ODR = Port_Value;
}

void GPIO_Config_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number, uint8_t Pin_Mode){
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	70bb      	strb	r3, [r7, #2]
	if(Pin_Number <= GPIO_PIN_7){
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	d815      	bhi.n	800600e <GPIO_Config_Pin+0x42>
		GPIOx->CRL &= ~(0xC << (Pin_Number*4)); //Reset CNF bits
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	210c      	movs	r1, #12
 8005fec:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff0:	43d2      	mvns	r2, r2
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= (Pin_Mode << (Pin_Number*4));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	78b9      	ldrb	r1, [r7, #2]
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	0092      	lsls	r2, r2, #2
 8006002:	fa01 f202 	lsl.w	r2, r1, r2
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
		Pin_Number -= 8; //remove bits in CRL
		GPIOx->CRH &= ~(0xC << (Pin_Number*4));
		GPIOx->CRH |= (Pin_Mode << (Pin_Number*4));
	}

}
 800600c:	e01a      	b.n	8006044 <GPIO_Config_Pin+0x78>
	}else if (Pin_Number <= GPIO_PIN_15) {
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d817      	bhi.n	8006044 <GPIO_Config_Pin+0x78>
		Pin_Number -= 8; //remove bits in CRL
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	3b08      	subs	r3, #8
 8006018:	70fb      	strb	r3, [r7, #3]
		GPIOx->CRH &= ~(0xC << (Pin_Number*4));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	0092      	lsls	r2, r2, #2
 8006022:	210c      	movs	r1, #12
 8006024:	fa01 f202 	lsl.w	r2, r1, r2
 8006028:	43d2      	mvns	r2, r2
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= (Pin_Mode << (Pin_Number*4));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	78b9      	ldrb	r1, [r7, #2]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	0092      	lsls	r2, r2, #2
 800603a:	fa01 f202 	lsl.w	r2, r1, r2
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number){
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
	return (((GPIOx->IDR) >> Pin_Number) & 0x1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	b2db      	uxtb	r3, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <GPIO_Write_Pin>:
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number, uint8_t Value){
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
 8006082:	4613      	mov	r3, r2
 8006084:	70bb      	strb	r3, [r7, #2]
	if(Value == HIGH){
 8006086:	78bb      	ldrb	r3, [r7, #2]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d109      	bne.n	80060a0 <GPIO_Write_Pin+0x2a>
		GPIOx->BSRR |= (0x1 << Pin_Number);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	2101      	movs	r1, #1
 8006094:	fa01 f202 	lsl.w	r2, r1, r2
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	611a      	str	r2, [r3, #16]
	}else if(Value == LOW){
		GPIOx->BSRR |= (0x1 << (Pin_Number + 16));
	}
}
 800609e:	e00c      	b.n	80060ba <GPIO_Write_Pin+0x44>
	}else if(Value == LOW){
 80060a0:	78bb      	ldrb	r3, [r7, #2]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <GPIO_Write_Pin+0x44>
		GPIOx->BSRR |= (0x1 << (Pin_Number + 16));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	3210      	adds	r2, #16
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f202 	lsl.w	r2, r1, r2
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	611a      	str	r2, [r3, #16]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <Enable_irq>:
  \brief   Enable IRQ Interrupts
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
void Enable_irq(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	__asm volatile ("cpsie i" : : : "memory");
 80060c8:	b662      	cpsie	i
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr

080060d2 <Disable_irq>:
  \brief   Disable IRQ Interrupts
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
void Disable_irq(void)
{
 80060d2:	b480      	push	{r7}
 80060d4:	af00      	add	r7, sp, #0
	__asm volatile ("cpsid i" : : : "memory");
 80060d6:	b672      	cpsid	i
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
void NVIC_EnableIRQ(NVIC_IRQn_Type IRQn)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	71fb      	strb	r3, [r7, #7]

    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	4907      	ldr	r1, [pc, #28]	; (8006110 <NVIC_EnableIRQ+0x30>)
 80060f2:	79fa      	ldrb	r2, [r7, #7]
 80060f4:	0952      	lsrs	r2, r2, #5
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	4610      	mov	r0, r2
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	e000e100 	.word	0xe000e100

08006114 <NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
void NVIC_ClearPendingIRQ(NVIC_IRQn_Type IRQn)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]

    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	4907      	ldr	r1, [pc, #28]	; (8006144 <NVIC_ClearPendingIRQ+0x30>)
 8006126:	79fa      	ldrb	r2, [r7, #7]
 8006128:	0952      	lsrs	r2, r2, #5
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	4610      	mov	r0, r2
 800612e:	2201      	movs	r2, #1
 8006130:	409a      	lsls	r2, r3
 8006132:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8006136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	e000e100 	.word	0xe000e100

08006148 <RCC_Config>:
 */
#include "RCC.h"
#include "RCC_Config.h"


void RCC_Config(void){
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
	//Enable Flash Prefetch
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800614c:	4b38      	ldr	r3, [pc, #224]	; (8006230 <RCC_Config+0xe8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a37      	ldr	r2, [pc, #220]	; (8006230 <RCC_Config+0xe8>)
 8006152:	f043 0310 	orr.w	r3, r3, #16
 8006156:	6013      	str	r3, [r2, #0]
	//Clock security system Disable
	RCC->CR &= ~(RCC_CR_CSSON_Msk);
 8006158:	4b36      	ldr	r3, [pc, #216]	; (8006234 <RCC_Config+0xec>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a35      	ldr	r2, [pc, #212]	; (8006234 <RCC_Config+0xec>)
 800615e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006162:	6013      	str	r3, [r2, #0]
	//Clear All bits
	RCC->CR &= 0x0;
 8006164:	4b33      	ldr	r3, [pc, #204]	; (8006234 <RCC_Config+0xec>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4b32      	ldr	r3, [pc, #200]	; (8006234 <RCC_Config+0xec>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
	RCC->CFGR &= 0x0;
 800616e:	4b31      	ldr	r3, [pc, #196]	; (8006234 <RCC_Config+0xec>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4b30      	ldr	r3, [pc, #192]	; (8006234 <RCC_Config+0xec>)
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]
	//reset all interrupts
	RCC->CIR = 0x0;
 8006178:	4b2e      	ldr	r3, [pc, #184]	; (8006234 <RCC_Config+0xec>)
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
	//enable HSI (ensure)
	RCC->CR |= RCC_CR_HSION;
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <RCC_Config+0xec>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2c      	ldr	r2, [pc, #176]	; (8006234 <RCC_Config+0xec>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 800618a:	bf00      	nop
 800618c:	4b29      	ldr	r3, [pc, #164]	; (8006234 <RCC_Config+0xec>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f9      	beq.n	800618c <RCC_Config+0x44>

#ifdef RCC_HSE_NO
	//enable HSE
	RCC->CR |= RCC_CR_HSEON;
 8006198:	4b26      	ldr	r3, [pc, #152]	; (8006234 <RCC_Config+0xec>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a25      	ldr	r2, [pc, #148]	; (8006234 <RCC_Config+0xec>)
 800619e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 80061a4:	bf00      	nop
 80061a6:	4b23      	ldr	r3, [pc, #140]	; (8006234 <RCC_Config+0xec>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f9      	beq.n	80061a6 <RCC_Config+0x5e>
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80061b2:	4b20      	ldr	r3, [pc, #128]	; (8006234 <RCC_Config+0xec>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <RCC_Config+0xec>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061bc:	6053      	str	r3, [r2, #4]
//



#ifdef RCC_AHB_PRESCALE
	RCC->CFGR |= RCC_AHB_PRESCALE;
 80061be:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <RCC_Config+0xec>)
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <RCC_Config+0xec>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	6053      	str	r3, [r2, #4]
#endif
#ifdef RCC_APB1_PRESCALE
	RCC->CFGR |= RCC_APB1_PRESCALE;
 80061c6:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <RCC_Config+0xec>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	; (8006234 <RCC_Config+0xec>)
 80061cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061d0:	6053      	str	r3, [r2, #4]
#endif
#ifdef RCC_APB2_PRESCALE
	RCC->CFGR |= RCC_APB2_PRESCALE;
 80061d2:	4b18      	ldr	r3, [pc, #96]	; (8006234 <RCC_Config+0xec>)
 80061d4:	4a17      	ldr	r2, [pc, #92]	; (8006234 <RCC_Config+0xec>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
#endif

#ifdef RCC_SYSCLK
	//Configure Flash Letancy (2 Wait states)
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <RCC_Config+0xe8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a14      	ldr	r2, [pc, #80]	; (8006230 <RCC_Config+0xe8>)
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_PLL_MUL;
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <RCC_Config+0xec>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <RCC_Config+0xec>)
 80061ec:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80061f0:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <RCC_Config+0xec>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <RCC_Config+0xec>)
 80061f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fc:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80061fe:	bf00      	nop
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <RCC_Config+0xec>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f9      	beq.n	8006200 <RCC_Config+0xb8>
	//Sysclk Selection
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <RCC_Config+0xec>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <RCC_Config+0xec>)
 8006212:	f043 0302 	orr.w	r3, r3, #2
 8006216:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8006218:	bf00      	nop
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <RCC_Config+0xec>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f9      	beq.n	800621a <RCC_Config+0xd2>
#endif
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr
 8006230:	40022000 	.word	0x40022000
 8006234:	40021000 	.word	0x40021000

08006238 <RCC_EnablePeripheral>:

void RCC_EnablePeripheral(uint8_t peripheralNumber){
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
	if(peripheralNumber <= APB2_END){
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2b1f      	cmp	r3, #31
 8006246:	d80a      	bhi.n	800625e <RCC_EnablePeripheral+0x26>
		RCC->APB2ENR |= (1 << peripheralNumber);
 8006248:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	79fa      	ldrb	r2, [r7, #7]
 800624e:	2101      	movs	r1, #1
 8006250:	fa01 f202 	lsl.w	r2, r1, r2
 8006254:	4611      	mov	r1, r2
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6193      	str	r3, [r2, #24]
		peripheralNumber -= AHB_START;
		RCC->AHBENR |= (1 << peripheralNumber);
	}else{
		//Do nothing
	}
}
 800625c:	e026      	b.n	80062ac <RCC_EnablePeripheral+0x74>
	}else if((peripheralNumber >= APB1_START) && (peripheralNumber <= APB1_END)){
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b1f      	cmp	r3, #31
 8006262:	d910      	bls.n	8006286 <RCC_EnablePeripheral+0x4e>
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b3f      	cmp	r3, #63	; 0x3f
 8006268:	d80d      	bhi.n	8006286 <RCC_EnablePeripheral+0x4e>
		peripheralNumber -= APB1_START;
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	3b20      	subs	r3, #32
 800626e:	71fb      	strb	r3, [r7, #7]
		RCC->APB1ENR |= (1 << peripheralNumber);
 8006270:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	2101      	movs	r1, #1
 8006278:	fa01 f202 	lsl.w	r2, r1, r2
 800627c:	4611      	mov	r1, r2
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 8006280:	430b      	orrs	r3, r1
 8006282:	61d3      	str	r3, [r2, #28]
}
 8006284:	e012      	b.n	80062ac <RCC_EnablePeripheral+0x74>
	}else if((peripheralNumber >= AHB_START) && (peripheralNumber <= AHB_END)){
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	2b3f      	cmp	r3, #63	; 0x3f
 800628a:	d90f      	bls.n	80062ac <RCC_EnablePeripheral+0x74>
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b5f      	cmp	r3, #95	; 0x5f
 8006290:	d80c      	bhi.n	80062ac <RCC_EnablePeripheral+0x74>
		peripheralNumber -= AHB_START;
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	3b40      	subs	r3, #64	; 0x40
 8006296:	71fb      	strb	r3, [r7, #7]
		RCC->AHBENR |= (1 << peripheralNumber);
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	79fa      	ldrb	r2, [r7, #7]
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f202 	lsl.w	r2, r1, r2
 80062a4:	4611      	mov	r1, r2
 80062a6:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <RCC_EnablePeripheral+0x80>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6153      	str	r3, [r2, #20]
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000

080062bc <RCC_DisablePeripheral>:

void RCC_DisablePeripheral(uint8_t peripheralNumber){
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
	if(peripheralNumber <= APB2_END){
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	2b1f      	cmp	r3, #31
 80062ca:	d80b      	bhi.n	80062e4 <RCC_DisablePeripheral+0x28>
		RCC->APB2ENR &= ~((1 << peripheralNumber));
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <RCC_DisablePeripheral+0x84>)
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	79fa      	ldrb	r2, [r7, #7]
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f202 	lsl.w	r2, r1, r2
 80062d8:	43d2      	mvns	r2, r2
 80062da:	4611      	mov	r1, r2
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <RCC_DisablePeripheral+0x84>)
 80062de:	400b      	ands	r3, r1
 80062e0:	6193      	str	r3, [r2, #24]
		peripheralNumber -= AHB_START;
		RCC->AHBENR &= ~((1 << peripheralNumber));
	}else{
		//Do nothing
	}
}
 80062e2:	e028      	b.n	8006336 <RCC_DisablePeripheral+0x7a>
	}else if((peripheralNumber >= APB1_START) && (peripheralNumber <= APB1_END)){
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b1f      	cmp	r3, #31
 80062e8:	d911      	bls.n	800630e <RCC_DisablePeripheral+0x52>
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b3f      	cmp	r3, #63	; 0x3f
 80062ee:	d80e      	bhi.n	800630e <RCC_DisablePeripheral+0x52>
		peripheralNumber -= APB1_START;
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	3b20      	subs	r3, #32
 80062f4:	71fb      	strb	r3, [r7, #7]
		RCC->APB1ENR &= ~((1 << peripheralNumber));
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <RCC_DisablePeripheral+0x84>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006302:	43d2      	mvns	r2, r2
 8006304:	4611      	mov	r1, r2
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <RCC_DisablePeripheral+0x84>)
 8006308:	400b      	ands	r3, r1
 800630a:	61d3      	str	r3, [r2, #28]
}
 800630c:	e013      	b.n	8006336 <RCC_DisablePeripheral+0x7a>
	}else if((peripheralNumber >= AHB_START) && (peripheralNumber <= AHB_END)){
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b3f      	cmp	r3, #63	; 0x3f
 8006312:	d910      	bls.n	8006336 <RCC_DisablePeripheral+0x7a>
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	2b5f      	cmp	r3, #95	; 0x5f
 8006318:	d80d      	bhi.n	8006336 <RCC_DisablePeripheral+0x7a>
		peripheralNumber -= AHB_START;
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	3b40      	subs	r3, #64	; 0x40
 800631e:	71fb      	strb	r3, [r7, #7]
		RCC->AHBENR &= ~((1 << peripheralNumber));
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <RCC_DisablePeripheral+0x84>)
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	79fa      	ldrb	r2, [r7, #7]
 8006326:	2101      	movs	r1, #1
 8006328:	fa01 f202 	lsl.w	r2, r1, r2
 800632c:	43d2      	mvns	r2, r2
 800632e:	4611      	mov	r1, r2
 8006330:	4a03      	ldr	r2, [pc, #12]	; (8006340 <RCC_DisablePeripheral+0x84>)
 8006332:	400b      	ands	r3, r1
 8006334:	6153      	str	r3, [r2, #20]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	40021000 	.word	0x40021000

08006344 <SCB_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
void SCB_SetPriority(SCB_IRQn_Type IRQn, uint32_t priority)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	6039      	str	r1, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]

    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - SCB_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4906      	ldr	r1, [pc, #24]	; (8006370 <SCB_SetPriority+0x2c>)
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	3b04      	subs	r3, #4
 800635e:	0112      	lsls	r2, r2, #4
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	440b      	add	r3, r1
 8006364:	761a      	strb	r2, [r3, #24]

}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <SysTick_INIT>:
           must contain a vendor-specific implementation of this function.
 */

volatile uint32_t ticks;
void SysTick_INIT(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0

  SysTick->LOAD  = (uint32_t)(SYSTEMCLOCK/1000 - 1UL);                         /* set reload register */
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <SysTick_INIT+0x24>)
 800637a:	4a08      	ldr	r2, [pc, #32]	; (800639c <SysTick_INIT+0x28>)
 800637c:	605a      	str	r2, [r3, #4]
  SCB_SetPriority (SysTick_IRQn, (1UL << SCB_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800637e:	210f      	movs	r1, #15
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	f7ff ffde 	bl	8006344 <SCB_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <SysTick_INIT+0x24>)
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800638e:	4b02      	ldr	r3, [pc, #8]	; (8006398 <SysTick_INIT+0x24>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */                                                    /* Function successful */
}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000e010 	.word	0xe000e010
 800639c:	0001193f 	.word	0x0001193f

080063a0 <SysTick_Delay>:

void SysTick_Delay(uint32_t delay_ms){
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = ticks;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <SysTick_Delay+0x34>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
	uint32_t wait = delay_ms;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60bb      	str	r3, [r7, #8]

	/* Add a freq to guarantee minimum wait */
	wait += 1;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60bb      	str	r3, [r7, #8]

	while ((ticks - tickstart) < wait) {
 80063b8:	bf00      	nop
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <SysTick_Delay+0x34>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d8f8      	bhi.n	80063ba <SysTick_Delay+0x1a>
	}
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	20000108 	.word	0x20000108

080063d8 <SysTick_GetTicks>:
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);
}

uint32_t SysTick_GetTicks(void){
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
	return ticks;
 80063dc:	4b02      	ldr	r3, [pc, #8]	; (80063e8 <SysTick_GetTicks+0x10>)
 80063de:	681b      	ldr	r3, [r3, #0]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	20000108 	.word	0x20000108

080063ec <TIM_Base_SetConfig>:
#include "TIM.h"

/*
 * Available Timers -> TIM1, TIM2, TIM3, TIM4
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Config) {
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
	TIMx->CR1 |= Config->CounterMode;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
	TIMx->CR1 &= ~TIM_CR1_CKD;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	601a      	str	r2, [r3, #0]
	TIMx->CR1 |= (uint32_t) Config->ClockDivision;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
	TIMx->CR1 &= TIM_CR1_ARPE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
	TIMx->CR1 |= Config->AutoReloadPreload;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
	TIMx->ARR = (uint32_t) Config->Period;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->PSC = Config->Prescaler;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
	/* Set the Repetition Counter value */
	TIMx->RCR = Config->RepetitionCounter;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	631a      	str	r2, [r3, #48]	; 0x30

	TIMx->EGR = TIM_EGR_UG;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	615a      	str	r2, [r3, #20]
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr

0800646c <TIM_ConfigClockSource>:

void TIM_ConfigClockSource(TIM_TypeDef *TIMx,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	TIMx->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f023 0277 	bic.w	r2, r3, #119	; 0x77
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	609a      	str	r2, [r3, #8]
	TIMx->SMCR &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d04f      	beq.n	8006538 <TIM_ConfigClockSource+0xcc>
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	f200 8104 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a4:	f000 8102 	beq.w	80066ac <TIM_ConfigClockSource+0x240>
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	f200 80fc 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064b0:	2b70      	cmp	r3, #112	; 0x70
 80064b2:	d026      	beq.n	8006502 <TIM_ConfigClockSource+0x96>
 80064b4:	2b70      	cmp	r3, #112	; 0x70
 80064b6:	f200 80f7 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064ba:	2b60      	cmp	r3, #96	; 0x60
 80064bc:	f000 8086 	beq.w	80065cc <TIM_ConfigClockSource+0x160>
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	f200 80f1 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064c6:	2b50      	cmp	r3, #80	; 0x50
 80064c8:	d051      	beq.n	800656e <TIM_ConfigClockSource+0x102>
 80064ca:	2b50      	cmp	r3, #80	; 0x50
 80064cc:	f200 80ec 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	f000 80aa 	beq.w	800662a <TIM_ConfigClockSource+0x1be>
 80064d6:	2b40      	cmp	r3, #64	; 0x40
 80064d8:	f200 80e6 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064dc:	2b30      	cmp	r3, #48	; 0x30
 80064de:	f000 80d3 	beq.w	8006688 <TIM_ConfigClockSource+0x21c>
 80064e2:	2b30      	cmp	r3, #48	; 0x30
 80064e4:	f200 80e0 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	f000 80cd 	beq.w	8006688 <TIM_ConfigClockSource+0x21c>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	f200 80da 	bhi.w	80066a8 <TIM_ConfigClockSource+0x23c>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80c7 	beq.w	8006688 <TIM_ConfigClockSource+0x21c>
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	f000 80c4 	beq.w	8006688 <TIM_ConfigClockSource+0x21c>
		TIMx->SMCR |= (sClockSourceConfig->ClockSource | TIM_SLAVEMODE_EXTERNAL1);
		break;
	}

	default:
		break;
 8006500:	e0d2      	b.n	80066a8 <TIM_ConfigClockSource+0x23c>
		TIMx->SMCR &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (uint32_t) (sClockSourceConfig->ClockPrescaler
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
				| (sClockSourceConfig->ClockPolarity
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6858      	ldr	r0, [r3, #4]
						| (sClockSourceConfig->ClockFilter << 8U)));
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	4303      	orrs	r3, r0
				| (sClockSourceConfig->ClockPolarity
 8006522:	430b      	orrs	r3, r1
		TIMx->SMCR |= (uint32_t) (sClockSourceConfig->ClockPrescaler
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0277 	orr.w	r2, r3, #119	; 0x77
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
		break;
 8006536:	e0ba      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		TIMx->SMCR &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (uint32_t) (sClockSourceConfig->ClockPrescaler
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
				| (sClockSourceConfig->ClockPolarity
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6858      	ldr	r0, [r3, #4]
						| (sClockSourceConfig->ClockFilter << 8U)));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	4303      	orrs	r3, r0
				| (sClockSourceConfig->ClockPolarity
 8006558:	430b      	orrs	r3, r1
		TIMx->SMCR |= (uint32_t) (sClockSourceConfig->ClockPrescaler
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= TIM_SMCR_ECE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	609a      	str	r2, [r3, #8]
		break;
 800656c:	e09f      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		TIMx->CCER &= ~TIM_CCER_CC2E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0210 	bic.w	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]
		TIMx->CCMR1 &= ~TIM_CCMR1_IC2F;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |= (sClockSourceConfig->ClockFilter << 12U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	031b      	lsls	r3, r3, #12
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	619a      	str	r2, [r3, #24]
		TIMx->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]
		TIMx->CCER |= (sClockSourceConfig->ClockPolarity << 4U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]
		TIMx->SMCR &= ~TIM_SMCR_TS;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (TIM_CLOCKSOURCE_TI1 | TIM_SLAVEMODE_EXTERNAL1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f043 0257 	orr.w	r2, r3, #87	; 0x57
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	609a      	str	r2, [r3, #8]
		break;
 80065ca:	e070      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]
		TIMx->CCMR1 &= ~TIM_CCMR1_IC2F;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |= (sClockSourceConfig->ClockFilter << 12U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	619a      	str	r2, [r3, #24]
		TIMx->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	621a      	str	r2, [r3, #32]
		TIMx->CCER |= (sClockSourceConfig->ClockPolarity << 4U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]
		TIMx->SMCR &= ~TIM_SMCR_TS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (TIM_CLOCKSOURCE_TI2 | TIM_SLAVEMODE_EXTERNAL1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f043 0267 	orr.w	r2, r3, #103	; 0x67
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	609a      	str	r2, [r3, #8]
		break;
 8006628:	e041      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		TIMx->CCER &= ~TIM_CCER_CC2E;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0210 	bic.w	r2, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]
		TIMx->CCMR1 &= ~TIM_CCMR1_IC2F;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |= (sClockSourceConfig->ClockFilter << 12U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	031b      	lsls	r3, r3, #12
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	619a      	str	r2, [r3, #24]
		TIMx->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]
		TIMx->CCER |= (sClockSourceConfig->ClockPolarity << 4U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]
		TIMx->SMCR &= ~TIM_SMCR_TS;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (TIM_CLOCKSOURCE_TI1 | TIM_SLAVEMODE_EXTERNAL1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f043 0257 	orr.w	r2, r3, #87	; 0x57
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
		break;
 8006686:	e012      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		TIMx->SMCR &= ~TIM_SMCR_TS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	609a      	str	r2, [r3, #8]
		TIMx->SMCR |= (sClockSourceConfig->ClockSource | TIM_SLAVEMODE_EXTERNAL1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4313      	orrs	r3, r2
 800669e:	f043 0207 	orr.w	r2, r3, #7
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	609a      	str	r2, [r3, #8]
		break;
 80066a6:	e002      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <TIM_ConfigClockSource+0x242>
		break;
 80066ac:	bf00      	nop
	}
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <TIM_MasterConfigSynchronization>:

void TIM_MasterConfigSynchronization(TIM_TypeDef *TIMx, uint32_t masterOutputTrigger, uint32_t masterSlaveMode){
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
	TIMx->CR2 &= ~TIM_CR2_MMS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	605a      	str	r2, [r3, #4]
	TIMx->CR2 |= masterOutputTrigger;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	605a      	str	r2, [r3, #4]
	TIMx->SMCR &= ~TIM_SMCR_MSM;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
	TIMx->SMCR |= masterSlaveMode;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]

}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <TIM_Base_Start>:

void TIM_Base_Start(TIM_TypeDef *TIMx){
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
	TIMx->CR1|=(TIM_CR1_CEN);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]

}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <TIM_GetCounter>:

uint32_t TIM_GetCounter(TIM_TypeDef *TIMx){
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	return (TIMx->CNT);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <TIM_SetCounter>:
void TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t value){
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
	TIMx->CNT = value;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr
 800674c:	0000      	movs	r0, r0
	...

08006750 <ULTRASONIC_GetDistance>:

void jumpToBoot(void);
uint16_t ULTRASONIC_GetDistance(void);
void CAN_SendData(uint8_t* buffer, uint16_t length, uint32_t CAN_id);

uint16_t ULTRASONIC_GetDistance(void){
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
	uint32_t Value1 = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
	uint32_t Value2 = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	60bb      	str	r3, [r7, #8]
	uint32_t SysTicks = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
	GPIO_Write_Pin(GPIOA, GPIO_PIN_9, HIGH);
 8006762:	2201      	movs	r2, #1
 8006764:	2109      	movs	r1, #9
 8006766:	4834      	ldr	r0, [pc, #208]	; (8006838 <ULTRASONIC_GetDistance+0xe8>)
 8006768:	f7ff fc85 	bl	8006076 <GPIO_Write_Pin>
	TIM_SetCounter(TIM1, 0);
 800676c:	2100      	movs	r1, #0
 800676e:	4833      	ldr	r0, [pc, #204]	; (800683c <ULTRASONIC_GetDistance+0xec>)
 8006770:	f7ff ffdf 	bl	8006732 <TIM_SetCounter>
	while (TIM_GetCounter(TIM1) < 10);
 8006774:	bf00      	nop
 8006776:	4831      	ldr	r0, [pc, #196]	; (800683c <ULTRASONIC_GetDistance+0xec>)
 8006778:	f7ff ffd0 	bl	800671c <TIM_GetCounter>
 800677c:	4603      	mov	r3, r0
 800677e:	2b09      	cmp	r3, #9
 8006780:	d9f9      	bls.n	8006776 <ULTRASONIC_GetDistance+0x26>
	GPIO_Write_Pin(GPIOA, GPIO_PIN_9, LOW);
 8006782:	2200      	movs	r2, #0
 8006784:	2109      	movs	r1, #9
 8006786:	482c      	ldr	r0, [pc, #176]	; (8006838 <ULTRASONIC_GetDistance+0xe8>)
 8006788:	f7ff fc75 	bl	8006076 <GPIO_Write_Pin>
	SysTicks = SysTick_GetTicks();
 800678c:	f7ff fe24 	bl	80063d8 <SysTick_GetTicks>
 8006790:	6078      	str	r0, [r7, #4]

	while(!(GPIO_Read_Pin(GPIOA, GPIO_PIN_8)) && (SysTicks + 10 >  SysTick_GetTicks()));
 8006792:	bf00      	nop
 8006794:	2108      	movs	r1, #8
 8006796:	4828      	ldr	r0, [pc, #160]	; (8006838 <ULTRASONIC_GetDistance+0xe8>)
 8006798:	f7ff fc59 	bl	800604e <GPIO_Read_Pin>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <ULTRASONIC_GetDistance+0x62>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f103 040a 	add.w	r4, r3, #10
 80067a8:	f7ff fe16 	bl	80063d8 <SysTick_GetTicks>
 80067ac:	4603      	mov	r3, r0
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d8f0      	bhi.n	8006794 <ULTRASONIC_GetDistance+0x44>
	Value1 = TIM_GetCounter(TIM1);
 80067b2:	4822      	ldr	r0, [pc, #136]	; (800683c <ULTRASONIC_GetDistance+0xec>)
 80067b4:	f7ff ffb2 	bl	800671c <TIM_GetCounter>
 80067b8:	60f8      	str	r0, [r7, #12]

	SysTicks = SysTick_GetTicks();
 80067ba:	f7ff fe0d 	bl	80063d8 <SysTick_GetTicks>
 80067be:	6078      	str	r0, [r7, #4]
	while(GPIO_Read_Pin(GPIOA, GPIO_PIN_8) && (SysTicks + 50 > SysTick_GetTicks()));
 80067c0:	bf00      	nop
 80067c2:	2108      	movs	r1, #8
 80067c4:	481c      	ldr	r0, [pc, #112]	; (8006838 <ULTRASONIC_GetDistance+0xe8>)
 80067c6:	f7ff fc42 	bl	800604e <GPIO_Read_Pin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <ULTRASONIC_GetDistance+0x90>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80067d6:	f7ff fdff 	bl	80063d8 <SysTick_GetTicks>
 80067da:	4603      	mov	r3, r0
 80067dc:	429c      	cmp	r4, r3
 80067de:	d8f0      	bhi.n	80067c2 <ULTRASONIC_GetDistance+0x72>
	Value2 = TIM_GetCounter(TIM1);
 80067e0:	4816      	ldr	r0, [pc, #88]	; (800683c <ULTRASONIC_GetDistance+0xec>)
 80067e2:	f7ff ff9b 	bl	800671c <TIM_GetCounter>
 80067e6:	60b8      	str	r0, [r7, #8]

	return((Value2-Value1)* 0.03448/2);
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fdf0 	bl	80053d4 <__aeabi_ui2d>
 80067f4:	a30e      	add	r3, pc, #56	; (adr r3, 8006830 <ULTRASONIC_GetDistance+0xe0>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7fe fe65 	bl	80054c8 <__aeabi_dmul>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800680e:	f7fe ff85 	bl	800571c <__aeabi_ddiv>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	f7ff f867 	bl	80058ec <__aeabi_d2uiz>
 800681e:	4603      	mov	r3, r0
 8006820:	b29b      	uxth	r3, r3
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w
 8006830:	d0bb6ed6 	.word	0xd0bb6ed6
 8006834:	3fa1a75c 	.word	0x3fa1a75c
 8006838:	40010800 	.word	0x40010800
 800683c:	40012c00 	.word	0x40012c00

08006840 <main>:

uint8_t isdiagRequest = 0;
uint8_t isBootloaderRQ = 0;
const uint8_t currentVersion[] = "1.0.0";
const uint8_t ecu_id = 1;
int main(void) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b096      	sub	sp, #88	; 0x58
 8006844:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8006846:	f7ff fb31 	bl	8005eac <FLASH_Unlock>
	FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_CURRENTBANK_ADDRESS, APP1_START_ADDRESS);
 800684a:	4a92      	ldr	r2, [pc, #584]	; (8006a94 <main+0x254>)
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	4991      	ldr	r1, [pc, #580]	; (8006a98 <main+0x258>)
 8006852:	2002      	movs	r0, #2
 8006854:	f7ff fb4a 	bl	8005eec <FLASH_Program>
	FLASH_Lock();
 8006858:	f7ff fb3a 	bl	8005ed0 <FLASH_Lock>
	RCC_Config();
 800685c:	f7ff fc74 	bl	8006148 <RCC_Config>
	SCB->VTOR = 0x08005000 - 0x08000000;
 8006860:	4b8e      	ldr	r3, [pc, #568]	; (8006a9c <main+0x25c>)
 8006862:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006866:	609a      	str	r2, [r3, #8]
	Enable_irq();
 8006868:	f7ff fc2c 	bl	80060c4 <Enable_irq>
	NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800686c:	2014      	movs	r0, #20
 800686e:	f7ff fc37 	bl	80060e0 <NVIC_EnableIRQ>
	SysTick_INIT();
 8006872:	f7ff fd7f 	bl	8006374 <SysTick_INIT>

	RCC_EnablePeripheral(RCC_AFIOCLK);
 8006876:	2000      	movs	r0, #0
 8006878:	f7ff fcde 	bl	8006238 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_GPIOACLK);
 800687c:	2002      	movs	r0, #2
 800687e:	f7ff fcdb 	bl	8006238 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_GPIOCCLK);
 8006882:	2004      	movs	r0, #4
 8006884:	f7ff fcd8 	bl	8006238 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_CANCLK);
 8006888:	2039      	movs	r0, #57	; 0x39
 800688a:	f7ff fcd5 	bl	8006238 <RCC_EnablePeripheral>
	//for ultrasonic
	RCC_EnablePeripheral(RCC_TIM1CLK);
 800688e:	200b      	movs	r0, #11
 8006890:	f7ff fcd2 	bl	8006238 <RCC_EnablePeripheral>

	AFIO_INIT();
 8006894:	f7ff f84a 	bl	800592c <AFIO_INIT>
	GPIO_Config_Pin(GPIOC, GPIO_PIN_13, GPIO_PINMODE_OUTPUT50MHZ);
 8006898:	2203      	movs	r2, #3
 800689a:	210d      	movs	r1, #13
 800689c:	4880      	ldr	r0, [pc, #512]	; (8006aa0 <main+0x260>)
 800689e:	f7ff fb95 	bl	8005fcc <GPIO_Config_Pin>
	GPIO_Config_Pin(GPIOA, GPIO_PIN_11, GPIO_PINMODE_INPUT); //rx
 80068a2:	2208      	movs	r2, #8
 80068a4:	210b      	movs	r1, #11
 80068a6:	487f      	ldr	r0, [pc, #508]	; (8006aa4 <main+0x264>)
 80068a8:	f7ff fb90 	bl	8005fcc <GPIO_Config_Pin>
	GPIO_Config_Pin(GPIOA, GPIO_PIN_12, GPIO_PINMODE_AFIO); //tx
 80068ac:	220b      	movs	r2, #11
 80068ae:	210c      	movs	r1, #12
 80068b0:	487c      	ldr	r0, [pc, #496]	; (8006aa4 <main+0x264>)
 80068b2:	f7ff fb8b 	bl	8005fcc <GPIO_Config_Pin>

	GPIO_Config_Pin(GPIOA, GPIO_PIN_9, GPIO_PINMODE_OUTPUT50MHZ);//trigger
 80068b6:	2203      	movs	r2, #3
 80068b8:	2109      	movs	r1, #9
 80068ba:	487a      	ldr	r0, [pc, #488]	; (8006aa4 <main+0x264>)
 80068bc:	f7ff fb86 	bl	8005fcc <GPIO_Config_Pin>
	GPIO_Config_Pin(GPIOA, GPIO_PIN_8, GPIO_PINMODE_INPUT);//echo
 80068c0:	2208      	movs	r2, #8
 80068c2:	2108      	movs	r1, #8
 80068c4:	4877      	ldr	r0, [pc, #476]	; (8006aa4 <main+0x264>)
 80068c6:	f7ff fb81 	bl	8005fcc <GPIO_Config_Pin>
	GPIO_Config_Pin(GPIOA, GPIO_PIN_10, GPIO_PINMODE_OUTPUT50MHZ);//Buzzer
 80068ca:	2203      	movs	r2, #3
 80068cc:	210a      	movs	r1, #10
 80068ce:	4875      	ldr	r0, [pc, #468]	; (8006aa4 <main+0x264>)
 80068d0:	f7ff fb7c 	bl	8005fcc <GPIO_Config_Pin>

	CAN_setupTypeDef CANsetupStruct = { DISABLE, DISABLE, DISABLE, DISABLE,
 80068d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	809a      	strh	r2, [r3, #4]
			DISABLE, DISABLE, };
	CAN_Setup(CAN, &CANsetupStruct);
 80068de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80068e2:	4619      	mov	r1, r3
 80068e4:	4870      	ldr	r0, [pc, #448]	; (8006aa8 <main+0x268>)
 80068e6:	f7ff f835 	bl	8005954 <CAN_Setup>
	CAN_Normal(CAN);
 80068ea:	486f      	ldr	r0, [pc, #444]	; (8006aa8 <main+0x268>)
 80068ec:	f7ff f8ba 	bl	8005a64 <CAN_Normal>
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	filterConfig.FilterBank = 1;
 80068f4:	2301      	movs	r3, #1
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
	filterConfig.FilterFIFOAssignment = CAN_FIFO0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	643b      	str	r3, [r7, #64]	; 0x40
	filterConfig.FilterId = CAN_CURRENTVERSION_ID;
 80068fc:	2307      	movs	r3, #7
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38
	filterConfig.FilterMaskId = CAN_CURRENTVERSION_ID;
 8006900:	2307      	movs	r3, #7
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
	filterConfig.FilterMode = CAN_FILTERMODE_LIST;
 8006904:	2301      	movs	r3, #1
 8006906:	64bb      	str	r3, [r7, #72]	; 0x48
	CAN_ConfigFilter(CAN, &filterConfig);
 8006908:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800690c:	4619      	mov	r1, r3
 800690e:	4866      	ldr	r0, [pc, #408]	; (8006aa8 <main+0x268>)
 8006910:	f7ff fa4e 	bl	8005db0 <CAN_ConfigFilter>
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8006914:	2300      	movs	r3, #0
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
	filterConfig.FilterBank = 2;
 8006918:	2302      	movs	r3, #2
 800691a:	647b      	str	r3, [r7, #68]	; 0x44
	filterConfig.FilterFIFOAssignment = CAN_FIFO0;
 800691c:	2300      	movs	r3, #0
 800691e:	643b      	str	r3, [r7, #64]	; 0x40
	filterConfig.FilterId = CAN_BOOTLOADER_RQ_ID;
 8006920:	f240 1323 	movw	r3, #291	; 0x123
 8006924:	63bb      	str	r3, [r7, #56]	; 0x38
	filterConfig.FilterMaskId = CAN_BOOTLOADER_RQ_ID;
 8006926:	f240 1323 	movw	r3, #291	; 0x123
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
	filterConfig.FilterMode = CAN_FILTERMODE_LIST;
 800692c:	2301      	movs	r3, #1
 800692e:	64bb      	str	r3, [r7, #72]	; 0x48
	CAN_ConfigFilter(CAN, &filterConfig);
 8006930:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006934:	4619      	mov	r1, r3
 8006936:	485c      	ldr	r0, [pc, #368]	; (8006aa8 <main+0x268>)
 8006938:	f7ff fa3a 	bl	8005db0 <CAN_ConfigFilter>
	CAN_Interrupt_Enable(CAN, CAN_IER_FMPIE0, ENABLE);
 800693c:	2201      	movs	r2, #1
 800693e:	2102      	movs	r1, #2
 8006940:	4859      	ldr	r0, [pc, #356]	; (8006aa8 <main+0x268>)
 8006942:	f7ff fa15 	bl	8005d70 <CAN_Interrupt_Enable>
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8006946:	2300      	movs	r3, #0
 8006948:	64fb      	str	r3, [r7, #76]	; 0x4c
	filterConfig.FilterBank = 3;
 800694a:	2303      	movs	r3, #3
 800694c:	647b      	str	r3, [r7, #68]	; 0x44
	filterConfig.FilterFIFOAssignment = CAN_FIFO0;
 800694e:	2300      	movs	r3, #0
 8006950:	643b      	str	r3, [r7, #64]	; 0x40
	filterConfig.FilterId = ECU_DIAGNOSTIC_LOG_ID;
 8006952:	2316      	movs	r3, #22
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
	filterConfig.FilterMaskId = ECU_DIAGNOSTIC_LOG_ID;
 8006956:	2316      	movs	r3, #22
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
	filterConfig.FilterMode = CAN_FILTERMODE_LIST;
 800695a:	2301      	movs	r3, #1
 800695c:	64bb      	str	r3, [r7, #72]	; 0x48
	CAN_ConfigFilter(CAN, &filterConfig);
 800695e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006962:	4619      	mov	r1, r3
 8006964:	4850      	ldr	r0, [pc, #320]	; (8006aa8 <main+0x268>)
 8006966:	f7ff fa23 	bl	8005db0 <CAN_ConfigFilter>
	CAN_Interrupt_Enable(CAN, CAN_IER_FMPIE0, ENABLE);
 800696a:	2201      	movs	r2, #1
 800696c:	2102      	movs	r1, #2
 800696e:	484e      	ldr	r0, [pc, #312]	; (8006aa8 <main+0x268>)
 8006970:	f7ff f9fe 	bl	8005d70 <CAN_Interrupt_Enable>

	//Timer Configuration
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	609a      	str	r2, [r3, #8]
 8006980:	60da      	str	r2, [r3, #12]
	TIM_Base_InitTypeDef Config ={0};
 8006982:	f107 0310 	add.w	r3, r7, #16
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	611a      	str	r2, [r3, #16]
 8006992:	615a      	str	r2, [r3, #20]
	Config.Prescaler = 72 - 1;
 8006994:	2347      	movs	r3, #71	; 0x47
 8006996:	613b      	str	r3, [r7, #16]
	Config.CounterMode = TIM_COUNTERMODE_UP;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
	Config.Period = 0xffff;
 800699c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069a0:	61bb      	str	r3, [r7, #24]
	Config.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
	Config.RepetitionCounter = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	623b      	str	r3, [r7, #32]
	Config.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_Base_SetConfig(TIM1, &Config);
 80069ae:	f107 0310 	add.w	r3, r7, #16
 80069b2:	4619      	mov	r1, r3
 80069b4:	483d      	ldr	r0, [pc, #244]	; (8006aac <main+0x26c>)
 80069b6:	f7ff fd19 	bl	80063ec <TIM_Base_SetConfig>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_ConfigClockSource(TIM1, &sClockSourceConfig);
 80069c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c4:	4619      	mov	r1, r3
 80069c6:	4839      	ldr	r0, [pc, #228]	; (8006aac <main+0x26c>)
 80069c8:	f7ff fd50 	bl	800646c <TIM_ConfigClockSource>
	TIM_MasterConfigSynchronization(TIM1, TIM_TRGO_RESET, TIM_MASTERSLAVEMODE_DISABLE);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	4836      	ldr	r0, [pc, #216]	; (8006aac <main+0x26c>)
 80069d2:	f7ff fe71 	bl	80066b8 <TIM_MasterConfigSynchronization>

	TIM_Base_Start(TIM1);
 80069d6:	4835      	ldr	r0, [pc, #212]	; (8006aac <main+0x26c>)
 80069d8:	f7ff fe91 	bl	80066fe <TIM_Base_Start>
	GPIO_Write_Pin(GPIOA, GPIO_PIN_9, LOW);
 80069dc:	2200      	movs	r2, #0
 80069de:	2109      	movs	r1, #9
 80069e0:	4830      	ldr	r0, [pc, #192]	; (8006aa4 <main+0x264>)
 80069e2:	f7ff fb48 	bl	8006076 <GPIO_Write_Pin>


	while(1){
		Distance = ULTRASONIC_GetDistance();
 80069e6:	f7ff feb3 	bl	8006750 <ULTRASONIC_GetDistance>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <main+0x270>)
 80069f0:	801a      	strh	r2, [r3, #0]

		//APP1
		if((Distance < 40) & (Distance > 2)){
 80069f2:	4b2f      	ldr	r3, [pc, #188]	; (8006ab0 <main+0x270>)
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b27      	cmp	r3, #39	; 0x27
 80069f8:	bf94      	ite	ls
 80069fa:	2301      	movls	r3, #1
 80069fc:	2300      	movhi	r3, #0
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <main+0x270>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	bf8c      	ite	hi
 8006a08:	2301      	movhi	r3, #1
 8006a0a:	2300      	movls	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d011      	beq.n	8006a3a <main+0x1fa>
			GPIO_Write_Pin(GPIOA, GPIO_PIN_10, HIGH);
 8006a16:	2201      	movs	r2, #1
 8006a18:	210a      	movs	r1, #10
 8006a1a:	4822      	ldr	r0, [pc, #136]	; (8006aa4 <main+0x264>)
 8006a1c:	f7ff fb2b 	bl	8006076 <GPIO_Write_Pin>
			SysTick_Delay(500);
 8006a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a24:	f7ff fcbc 	bl	80063a0 <SysTick_Delay>
			GPIO_Write_Pin(GPIOA, GPIO_PIN_10, LOW);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	210a      	movs	r1, #10
 8006a2c:	481d      	ldr	r0, [pc, #116]	; (8006aa4 <main+0x264>)
 8006a2e:	f7ff fb22 	bl	8006076 <GPIO_Write_Pin>
			SysTick_Delay(500);
 8006a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a36:	f7ff fcb3 	bl	80063a0 <SysTick_Delay>
			SysTick_Delay(Distance * 10);
			GPIO_Write_Pin(GPIOA, GPIO_PIN_10, LOW);
			SysTick_Delay(Distance * 10);
		}
*/
		if(isdiagRequest == 1){
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <main+0x274>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d11e      	bne.n	8006a80 <main+0x240>
			isdiagRequest = 0;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <main+0x274>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
			CAN_msg msg = {0};
 8006a48:	463b      	mov	r3, r7
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	609a      	str	r2, [r3, #8]
 8006a52:	60da      	str	r2, [r3, #12]
			msg.id = CAN_DATA_ID;
 8006a54:	2306      	movs	r3, #6
 8006a56:	603b      	str	r3, [r7, #0]
			msg.format = STANDARD_FORMAT;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	737b      	strb	r3, [r7, #13]
			msg.type = DATA_FRAME;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73bb      	strb	r3, [r7, #14]
			msg.length = 2;
 8006a60:	2302      	movs	r3, #2
 8006a62:	733b      	strb	r3, [r7, #12]
			msg.data[0] = (uint8_t)(0xFF & sizeof(diagFile));
 8006a64:	23ce      	movs	r3, #206	; 0xce
 8006a66:	713b      	strb	r3, [r7, #4]
			msg.data[1] = (uint8_t)(0xFF & (sizeof(diagFile) >> 8));
 8006a68:	2300      	movs	r3, #0
 8006a6a:	717b      	strb	r3, [r7, #5]
			CAN_Transmit(CAN, &msg);
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	4619      	mov	r1, r3
 8006a70:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <main+0x268>)
 8006a72:	f7ff f80e 	bl	8005a92 <CAN_Transmit>
			CAN_SendData(diagFile, sizeof(diagFile), CAN_DATA_ID);
 8006a76:	2206      	movs	r2, #6
 8006a78:	21ce      	movs	r1, #206	; 0xce
 8006a7a:	480f      	ldr	r0, [pc, #60]	; (8006ab8 <main+0x278>)
 8006a7c:	f000 f820 	bl	8006ac0 <CAN_SendData>

		}
		if(isBootloaderRQ){
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <main+0x27c>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0ae      	beq.n	80069e6 <main+0x1a6>
			isBootloaderRQ = 0;
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <main+0x27c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
			jumpToBoot();
 8006a8e:	f000 f8d5 	bl	8006c3c <jumpToBoot>
		Distance = ULTRASONIC_GetDistance();
 8006a92:	e7a8      	b.n	80069e6 <main+0x1a6>
 8006a94:	08005000 	.word	0x08005000
 8006a98:	08004004 	.word	0x08004004
 8006a9c:	e000ed00 	.word	0xe000ed00
 8006aa0:	40011000 	.word	0x40011000
 8006aa4:	40010800 	.word	0x40010800
 8006aa8:	40006400 	.word	0x40006400
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	2000010c 	.word	0x2000010c
 8006ab4:	20000130 	.word	0x20000130
 8006ab8:	20000000 	.word	0x20000000
 8006abc:	20000131 	.word	0x20000131

08006ac0 <CAN_SendData>:


}


void CAN_SendData(uint8_t* buffer, uint16_t length, uint32_t CAN_id){
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	817b      	strh	r3, [r7, #10]
	CAN_msg msg = {0};
 8006ace:	f107 0314 	add.w	r3, r7, #20
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	605a      	str	r2, [r3, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
 8006ada:	60da      	str	r2, [r3, #12]
	msg.id = CAN_id;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	617b      	str	r3, [r7, #20]
	msg.format = STANDARD_FORMAT;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	msg.type = DATA_FRAME;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	msg.length = length < 8 ? length : 8;
 8006aec:	897b      	ldrh	r3, [r7, #10]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	bf28      	it	cs
 8006af2:	2308      	movcs	r3, #8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f887 3020 	strb.w	r3, [r7, #32]
	for (uint8_t datacounter = 0; datacounter < length;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b02:	e038      	b.n	8006b76 <CAN_SendData+0xb6>
			datacounter += 8) {
		for (uint8_t msgcounter = 0; msgcounter < 8; msgcounter++) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b0a:	e013      	b.n	8006b34 <CAN_SendData+0x74>
			msg.data[msgcounter] = buffer[datacounter
					+ msgcounter];
 8006b0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b14:	4413      	add	r3, r2
 8006b16:	461a      	mov	r2, r3
			msg.data[msgcounter] = buffer[datacounter
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	3328      	adds	r3, #40	; 0x28
 8006b24:	443b      	add	r3, r7
 8006b26:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t msgcounter = 0; msgcounter < 8; msgcounter++) {
 8006b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d9e7      	bls.n	8006b0c <CAN_SendData+0x4c>
		}
		if((length - datacounter) >= 8){
 8006b3c:	897a      	ldrh	r2, [r7, #10]
 8006b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b07      	cmp	r3, #7
 8006b46:	dd03      	ble.n	8006b50 <CAN_SendData+0x90>
			msg.length = 8;
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 3020 	strb.w	r3, [r7, #32]
 8006b4e:	e007      	b.n	8006b60 <CAN_SendData+0xa0>
		}else{
			msg.length = length - datacounter;
 8006b50:	897b      	ldrh	r3, [r7, #10]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f887 3020 	strb.w	r3, [r7, #32]
		}
		CAN_Transmit(CAN, &msg);
 8006b60:	f107 0314 	add.w	r3, r7, #20
 8006b64:	4619      	mov	r1, r3
 8006b66:	4809      	ldr	r0, [pc, #36]	; (8006b8c <CAN_SendData+0xcc>)
 8006b68:	f7fe ff93 	bl	8005a92 <CAN_Transmit>
			datacounter += 8) {
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	3308      	adds	r3, #8
 8006b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t datacounter = 0; datacounter < length;
 8006b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	897a      	ldrh	r2, [r7, #10]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d8c0      	bhi.n	8006b04 <CAN_SendData+0x44>
	}
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40006400 	.word	0x40006400

08006b90 <System_DeInit>:




void System_DeInit(void);
void System_DeInit(void){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
	RCC->CFGR &= ~(RCC_CFGR_SW);
 8006b94:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <System_DeInit+0x70>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <System_DeInit+0x70>)
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != 0);
 8006ba0:	bf00      	nop
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <System_DeInit+0x70>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f9      	bne.n	8006ba2 <System_DeInit+0x12>
	RCC->CR &= ~(RCC_CR_PLLON);
 8006bae:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <System_DeInit+0x70>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a13      	ldr	r2, [pc, #76]	; (8006c00 <System_DeInit+0x70>)
 8006bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bb8:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~(RCC_CR_HSEON);
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <System_DeInit+0x70>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <System_DeInit+0x70>)
 8006bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
	SysTick->CTRL = 0;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <System_DeInit+0x74>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <System_DeInit+0x74>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <System_DeInit+0x74>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	609a      	str	r2, [r3, #8]
	RCC_DisablePeripheral(RCC_AFIOCLK);
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7ff fb6f 	bl	80062bc <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_GPIOCCLK);
 8006bde:	2004      	movs	r0, #4
 8006be0:	f7ff fb6c 	bl	80062bc <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_GPIOACLK);
 8006be4:	2002      	movs	r0, #2
 8006be6:	f7ff fb69 	bl	80062bc <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_CANCLK);
 8006bea:	2039      	movs	r0, #57	; 0x39
 8006bec:	f7ff fb66 	bl	80062bc <RCC_DisablePeripheral>
	RCC_DisablePeripheral(RCC_TIM1CLK);
 8006bf0:	200b      	movs	r0, #11
 8006bf2:	f7ff fb63 	bl	80062bc <RCC_DisablePeripheral>
	Disable_irq();
 8006bf6:	f7ff fa6c 	bl	80060d2 <Disable_irq>
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40021000 	.word	0x40021000
 8006c04:	e000e010 	.word	0xe000e010

08006c08 <JumpToApplication>:

void JumpToApplication( uint32_t appAddress);
void JumpToApplication( uint32_t appAddress){
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(appAddress + 4U)));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = appAddress - FLASH_BASE;
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <JumpToApplication+0x30>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006c20:	6093      	str	r3, [r2, #8]

	__asm volatile ("MSR msp, %0" : : "r" (*(volatile uint32_t*)appAddress) : );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f383 8808 	msr	MSP, r3

	app_reset_handler();
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4798      	blx	r3
	//SCB_SystemReset();
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed00 	.word	0xe000ed00

08006c3c <jumpToBoot>:


void jumpToBoot(void){
 8006c3c:	b5b0      	push	{r4, r5, r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	//GPIO_Write_Pin(GPIOC, GPIO_PIN_13, HIGH);
	if(RX_msg.data[0] == 0x4){
 8006c40:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <jumpToBoot+0x44>)
 8006c42:	791b      	ldrb	r3, [r3, #4]
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d018      	beq.n	8006c7a <jumpToBoot+0x3e>
		return;
	}
	System_DeInit();
 8006c48:	f7ff ffa2 	bl	8006b90 <System_DeInit>
	FLASH_Unlock();
 8006c4c:	f7ff f92e 	bl	8005eac <FLASH_Unlock>
	FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_MODE_ADDRESS, BOOTLOADER_REQUEST | (RX_msg.data[0] << 8));
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <jumpToBoot+0x44>)
 8006c52:	791b      	ldrb	r3, [r3, #4]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	461c      	mov	r4, r3
 8006c5e:	4615      	mov	r5, r2
 8006c60:	4622      	mov	r2, r4
 8006c62:	462b      	mov	r3, r5
 8006c64:	4907      	ldr	r1, [pc, #28]	; (8006c84 <jumpToBoot+0x48>)
 8006c66:	2002      	movs	r0, #2
 8006c68:	f7ff f940 	bl	8005eec <FLASH_Program>
	FLASH_Lock();
 8006c6c:	f7ff f930 	bl	8005ed0 <FLASH_Lock>
	JumpToApplication(FLASH_BASE);
 8006c70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006c74:	f7ff ffc8 	bl	8006c08 <JumpToApplication>
 8006c78:	e000      	b.n	8006c7c <jumpToBoot+0x40>
		return;
 8006c7a:	bf00      	nop
}
 8006c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000110 	.word	0x20000110
 8006c84:	08004000 	.word	0x08004000

08006c88 <USB_LP_CAN1_RX0_IRQHandler>:
		SysTick_Delay(1000);
		GPIO_Write_Pin(GPIOC, GPIO_PIN_13, LOW);
		SysTick_Delay(1000);*/

//fifo0
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0

	if (CAN->RF0R & CAN_RF0R_FMP0) {
 8006c8c:	4b37      	ldr	r3, [pc, #220]	; (8006d6c <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <USB_LP_CAN1_RX0_IRQHandler+0x1a>
		CAN_Receive(CAN, CAN_FIFO0, &RX_msg);
 8006c98:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4833      	ldr	r0, [pc, #204]	; (8006d6c <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8006c9e:	f7fe ffd0 	bl	8005c42 <CAN_Receive>
	}
	if((RX_msg.id == CAN_CURRENTVERSION_ID) && (RX_msg.ActiveFlag == ENABLE)){
 8006ca2:	4b33      	ldr	r3, [pc, #204]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d135      	bne.n	8006d16 <USB_LP_CAN1_RX0_IRQHandler+0x8e>
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006cac:	7bdb      	ldrb	r3, [r3, #15]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d131      	bne.n	8006d16 <USB_LP_CAN1_RX0_IRQHandler+0x8e>
		GPIO_Write_Pin(GPIOA, GPIO_PIN_10, LOW);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	210a      	movs	r1, #10
 8006cb6:	482f      	ldr	r0, [pc, #188]	; (8006d74 <USB_LP_CAN1_RX0_IRQHandler+0xec>)
 8006cb8:	f7ff f9dd 	bl	8006076 <GPIO_Write_Pin>
		TX_msg.id = CAN_CURRENTVERSION_ID;
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cbe:	2207      	movs	r2, #7
 8006cc0:	601a      	str	r2, [r3, #0]
		TX_msg.format = STANDARD_FORMAT;
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	735a      	strb	r2, [r3, #13]
		TX_msg.type = DATA_FRAME;
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	739a      	strb	r2, [r3, #14]
		TX_msg.length = 2;
 8006cce:	4b2a      	ldr	r3, [pc, #168]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	731a      	strb	r2, [r3, #12]
		TX_msg.data[0] = 5;
 8006cd4:	4b28      	ldr	r3, [pc, #160]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	711a      	strb	r2, [r3, #4]
		TX_msg.data[1] = 0;
 8006cda:	4b27      	ldr	r3, [pc, #156]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	715a      	strb	r2, [r3, #5]
		CAN_Transmit(CAN, &TX_msg);
 8006ce0:	4925      	ldr	r1, [pc, #148]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006ce2:	4822      	ldr	r0, [pc, #136]	; (8006d6c <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8006ce4:	f7fe fed5 	bl	8005a92 <CAN_Transmit>
		TX_msg.length = 5;
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cea:	2205      	movs	r2, #5
 8006cec:	731a      	strb	r2, [r3, #12]
		TX_msg.data[0] = currentVersion[0];
 8006cee:	2231      	movs	r2, #49	; 0x31
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cf2:	711a      	strb	r2, [r3, #4]
		TX_msg.data[1] = currentVersion[1];
 8006cf4:	222e      	movs	r2, #46	; 0x2e
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cf8:	715a      	strb	r2, [r3, #5]
		TX_msg.data[2] = currentVersion[2];
 8006cfa:	2230      	movs	r2, #48	; 0x30
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006cfe:	719a      	strb	r2, [r3, #6]
		TX_msg.data[3] = currentVersion[3];
 8006d00:	222e      	movs	r2, #46	; 0x2e
 8006d02:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006d04:	71da      	strb	r2, [r3, #7]
		TX_msg.data[4] = currentVersion[4];
 8006d06:	2230      	movs	r2, #48	; 0x30
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006d0a:	721a      	strb	r2, [r3, #8]
		CAN_Transmit(CAN, &TX_msg);
 8006d0c:	491a      	ldr	r1, [pc, #104]	; (8006d78 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8006d0e:	4817      	ldr	r0, [pc, #92]	; (8006d6c <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8006d10:	f7fe febf 	bl	8005a92 <CAN_Transmit>
 8006d14:	e027      	b.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>

	}else if ((RX_msg.id == CAN_BOOTLOADER_RQ_ID) && (RX_msg.ActiveFlag == ENABLE)) {
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f240 1223 	movw	r2, #291	; 0x123
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d107      	bne.n	8006d32 <USB_LP_CAN1_RX0_IRQHandler+0xaa>
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d24:	7bdb      	ldrb	r3, [r3, #15]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d103      	bne.n	8006d32 <USB_LP_CAN1_RX0_IRQHandler+0xaa>
		isBootloaderRQ = 1;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e019      	b.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>

	}else if ((RX_msg.id == ECU_DIAGNOSTIC_LOG_ID) && (ecu_id == (RX_msg.data[0] | RX_msg.data[1] << 8)) && (RX_msg.ActiveFlag == ENABLE)){
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b16      	cmp	r3, #22
 8006d38:	d115      	bne.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	4619      	mov	r1, r3
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d46:	795b      	ldrb	r3, [r3, #5]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d10a      	bne.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d52:	7bdb      	ldrb	r3, [r3, #15]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d106      	bne.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>
		isdiagRequest = 1;
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <USB_LP_CAN1_RX0_IRQHandler+0xf8>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	701a      	strb	r2, [r3, #0]
		RX_msg.ActiveFlag = DISABLE;
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <USB_LP_CAN1_RX0_IRQHandler+0xe8>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	73da      	strb	r2, [r3, #15]
	}

}
 8006d64:	e7ff      	b.n	8006d66 <USB_LP_CAN1_RX0_IRQHandler+0xde>
 8006d66:	bf00      	nop
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40006400 	.word	0x40006400
 8006d70:	20000110 	.word	0x20000110
 8006d74:	40010800 	.word	0x40010800
 8006d78:	20000120 	.word	0x20000120
 8006d7c:	20000131 	.word	0x20000131
 8006d80:	20000130 	.word	0x20000130

08006d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d88:	e7fe      	b.n	8006d88 <NMI_Handler+0x4>

08006d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
		uint8_t cont = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	71fb      	strb	r3, [r7, #7]
	  /* USER CODE END MemoryManagement_IRQn 0 */
	  while (cont == 0)
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0fc      	beq.n	8006d94 <HardFault_Handler+0xa>
	  {
	    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	    /* USER CODE END W1_MemoryManagement_IRQn 0 */
	  }
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	uint8_t cont = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (cont == 0)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0fc      	beq.n	8006db0 <MemManage_Handler+0xa>
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dc6:	e7fe      	b.n	8006dc6 <BusFault_Handler+0x4>

08006dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006dcc:	e7fe      	b.n	8006dcc <UsageFault_Handler+0x4>

08006dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dd2:	bf00      	nop
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dde:	bf00      	nop
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006dea:	bf00      	nop
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
	...

08006df4 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
extern volatile uint32_t ticks;
void SysTick_Handler(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
	ticks++;
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <SysTick_Handler+0x18>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	4a03      	ldr	r2, [pc, #12]	; (8006e0c <SysTick_Handler+0x18>)
 8006e00:	6013      	str	r3, [r2, #0]

}
 8006e02:	bf00      	nop
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000108 	.word	0x20000108

08006e10 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
//EXTI
void EXTI0_IRQHandler(void){
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0

}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0


}
 8006e20:	bf00      	nop
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0

}
 8006e2c:	bf00      	nop
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0

}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0

}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <DMA1_Channel1_IRQHandler>:
//DMA
extern fptr DMA_fptr[7];
void DMA1_Channel1_IRQHandler(void){
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0

	if(DMA->ISR & DMA_ISR_TCIF1){
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <DMA1_Channel1_IRQHandler+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <DMA1_Channel1_IRQHandler+0x16>
		DMA_fptr[0]();
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <DMA1_Channel1_IRQHandler+0x30>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4798      	blx	r3
	}
	DMA->IFCR |= (DMA_IFCR_CTCIF1);
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <DMA1_Channel1_IRQHandler+0x2c>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <DMA1_Channel1_IRQHandler+0x2c>)
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	6053      	str	r3, [r2, #4]
	NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8006e6e:	200b      	movs	r0, #11
 8006e70:	f7ff f950 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40020000 	.word	0x40020000
 8006e7c:	200000ec 	.word	0x200000ec

08006e80 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void){
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF2){
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <DMA1_Channel2_IRQHandler+0x2c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <DMA1_Channel2_IRQHandler+0x16>
			DMA_fptr[1]();
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <DMA1_Channel2_IRQHandler+0x30>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF2);
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <DMA1_Channel2_IRQHandler+0x2c>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4a04      	ldr	r2, [pc, #16]	; (8006eac <DMA1_Channel2_IRQHandler+0x2c>)
 8006e9c:	f043 0320 	orr.w	r3, r3, #32
 8006ea0:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel2_IRQn);
 8006ea2:	200c      	movs	r0, #12
 8006ea4:	f7ff f936 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006ea8:	bf00      	nop
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40020000 	.word	0x40020000
 8006eb0:	200000ec 	.word	0x200000ec

08006eb4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void){
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF3){
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <DMA1_Channel3_IRQHandler+0x2c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <DMA1_Channel3_IRQHandler+0x16>
			DMA_fptr[2]();
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <DMA1_Channel3_IRQHandler+0x30>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF3);
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <DMA1_Channel3_IRQHandler+0x2c>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <DMA1_Channel3_IRQHandler+0x2c>)
 8006ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed4:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel3_IRQn);
 8006ed6:	200d      	movs	r0, #13
 8006ed8:	f7ff f91c 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40020000 	.word	0x40020000
 8006ee4:	200000ec 	.word	0x200000ec

08006ee8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void){
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF4){
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <DMA1_Channel4_IRQHandler+0x2c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <DMA1_Channel4_IRQHandler+0x16>
			DMA_fptr[3]();
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <DMA1_Channel4_IRQHandler+0x30>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF4);
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <DMA1_Channel4_IRQHandler+0x2c>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <DMA1_Channel4_IRQHandler+0x2c>)
 8006f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f08:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel4_IRQn);
 8006f0a:	200e      	movs	r0, #14
 8006f0c:	f7ff f902 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006f10:	bf00      	nop
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40020000 	.word	0x40020000
 8006f18:	200000ec 	.word	0x200000ec

08006f1c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void){
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF5){
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <DMA1_Channel5_IRQHandler+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <DMA1_Channel5_IRQHandler+0x16>
			DMA_fptr[4]();
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <DMA1_Channel5_IRQHandler+0x30>)
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF5);
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <DMA1_Channel5_IRQHandler+0x2c>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <DMA1_Channel5_IRQHandler+0x2c>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3c:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);
 8006f3e:	200f      	movs	r0, #15
 8006f40:	f7ff f8e8 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006f44:	bf00      	nop
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40020000 	.word	0x40020000
 8006f4c:	200000ec 	.word	0x200000ec

08006f50 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void){
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF6){
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <DMA1_Channel6_IRQHandler+0x2c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <DMA1_Channel6_IRQHandler+0x16>
			DMA_fptr[5]();
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <DMA1_Channel6_IRQHandler+0x30>)
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF6);
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <DMA1_Channel6_IRQHandler+0x2c>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <DMA1_Channel6_IRQHandler+0x2c>)
 8006f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f70:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel6_IRQn);
 8006f72:	2010      	movs	r0, #16
 8006f74:	f7ff f8ce 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006f78:	bf00      	nop
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40020000 	.word	0x40020000
 8006f80:	200000ec 	.word	0x200000ec

08006f84 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void){
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	if(DMA->ISR & DMA_ISR_TCIF7){
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <DMA1_Channel7_IRQHandler+0x2c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <DMA1_Channel7_IRQHandler+0x16>
			DMA_fptr[6]();
 8006f94:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <DMA1_Channel7_IRQHandler+0x30>)
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4798      	blx	r3
		}
	DMA->IFCR |= (DMA_IFCR_CTCIF7);
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <DMA1_Channel7_IRQHandler+0x2c>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <DMA1_Channel7_IRQHandler+0x2c>)
 8006fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	6053      	str	r3, [r2, #4]
		NVIC_ClearPendingIRQ(DMA1_Channel7_IRQn);
 8006fa6:	2011      	movs	r0, #17
 8006fa8:	f7ff f8b4 	bl	8006114 <NVIC_ClearPendingIRQ>
}
 8006fac:	bf00      	nop
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40020000 	.word	0x40020000
 8006fb4:	200000ec 	.word	0x200000ec

08006fb8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fb8:	480a      	ldr	r0, [pc, #40]	; (8006fe4 <LoopFillZerobss+0xa>)
  ldr r1, =_edata
 8006fba:	490b      	ldr	r1, [pc, #44]	; (8006fe8 <LoopFillZerobss+0xe>)
  ldr r2, =_sidata
 8006fbc:	4a0b      	ldr	r2, [pc, #44]	; (8006fec <LoopFillZerobss+0x12>)
  movs r3, #0
 8006fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fc0:	e002      	b.n	8006fc8 <LoopCopyDataInit>

08006fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fc6:	3304      	adds	r3, #4

08006fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fcc:	d3f9      	bcc.n	8006fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <LoopFillZerobss+0x16>)
  ldr r4, =_ebss
 8006fd0:	4c08      	ldr	r4, [pc, #32]	; (8006ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fd4:	e001      	b.n	8006fda <LoopFillZerobss>

08006fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fd8:	3204      	adds	r2, #4

08006fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fdc:	d3fb      	bcc.n	8006fd6 <FillZerobss>


/* Call the application's entry point.*/
  bl main
 8006fde:	f7ff fc2f 	bl	8006840 <main>
  bx lr
 8006fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8006fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fe8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8006fec:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 8006ff0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8006ff4:	20000134 	.word	0x20000134

08006ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ff8:	e7fe      	b.n	8006ff8 <ADC1_2_IRQHandler>
	...

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
