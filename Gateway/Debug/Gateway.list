
Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011108  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  080112d0  080112d0  000212d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142ac  080142ac  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  080142ac  080142ac  000242ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142b4  080142b4  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142b4  080142b4  000242b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142b8  080142b8  000242b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080142bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052e0  20000088  08014340  00030088  2**3
                  ALLOC
 10 ._user_heap_stack 0000f400  20005368  08014340  00035368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225c3  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c67  00000000  00000000  00052677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000572e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  000586c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c5  00000000  00000000  000599a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1f9  00000000  00000000  00072165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074798  00000000  00000000  0008c35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a7  00000000  00000000  00100af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c8  00000000  00000000  00100ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  00105e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080112b8 	.word	0x080112b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	080112b8 	.word	0x080112b8

08000208 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000208:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 800020a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800020e:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000298 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 8000212:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 8000216:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 800021a:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 800021c:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 800021e:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000220:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 8000222:	d332      	bcc.n	800028a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8000224:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 8000226:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000228:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 800022a:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 800022c:	d314      	bcc.n	8000258 <_CheckCase2>

0800022e <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 800022e:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000230:	19d0      	adds	r0, r2, r7
 8000232:	bf00      	nop

08000234 <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000238:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800023c:	3a01      	subs	r2, #1
        BEQ      _CSDone
 800023e:	d005      	beq.n	800024c <_CSDone>
        LDRB     R3,[R1], #+1
 8000240:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000244:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000248:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 800024a:	d1f3      	bne.n	8000234 <_LoopCopyStraight>

0800024c <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800024c:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000250:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000252:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000254:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000256:	4770      	bx	lr

08000258 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000258:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800025a:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 800025c:	d319      	bcc.n	8000292 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 800025e:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000260:	1b12      	subs	r2, r2, r4

08000262 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000262:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 8000266:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800026a:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 800026c:	d1f9      	bne.n	8000262 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 800026e:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000270:	d005      	beq.n	800027e <_No2ChunkNeeded>

08000272 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000272:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000276:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800027a:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 800027c:	d1f9      	bne.n	8000272 <_LoopCopyAfterWrapAround>

0800027e <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800027e:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000282:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000284:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000288:	4770      	bx	lr

0800028a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800028a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800028c:	3801      	subs	r0, #1
        CMP      R0,R2
 800028e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000290:	d2cd      	bcs.n	800022e <_Case4>

08000292 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000292:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000294:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000296:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000298:	200000a4 	.word	0x200000a4

0800029c <PendSV_Handler>:
 800029c:	484e      	ldr	r0, [pc, #312]	; (80003d8 <OS_SwitchFromInt+0x14>)
 800029e:	6881      	ldr	r1, [r0, #8]
 80002a0:	b959      	cbnz	r1, 80002ba <SaveRegs>
 80002a2:	f01e 0f10 	tst.w	lr, #16
 80002a6:	bf1c      	itt	ne
 80002a8:	b008      	addne	sp, #32
 80002aa:	e015      	bne.n	80002d8 <SaveCompletedCM4F>
 80002ac:	494b      	ldr	r1, [pc, #300]	; (80003dc <OS_SwitchFromInt+0x18>)
 80002ae:	680a      	ldr	r2, [r1, #0]
 80002b0:	f022 0201 	bic.w	r2, r2, #1
 80002b4:	600a      	str	r2, [r1, #0]
 80002b6:	b01a      	add	sp, #104	; 0x68
 80002b8:	e00e      	b.n	80002d8 <SaveCompletedCM4F>

080002ba <SaveRegs>:
 80002ba:	f3ef 8209 	mrs	r2, PSP
 80002be:	f01e 0f10 	tst.w	lr, #16
 80002c2:	d103      	bne.n	80002cc <Skip_VFPSave>
 80002c4:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 80002c8:	ec82 8a10 	vstmia	r2, {s16-s31}

080002cc <Skip_VFPSave>:
 80002cc:	f1a2 0228 	sub.w	r2, r2, #40	; 0x28
 80002d0:	604a      	str	r2, [r1, #4]
 80002d2:	6803      	ldr	r3, [r0, #0]
 80002d4:	e882 4ff8 	stmia.w	r2, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

080002d8 <SaveCompletedCM4F>:
 80002d8:	4941      	ldr	r1, [pc, #260]	; (80003e0 <OS_SwitchFromInt+0x1c>)
 80002da:	4788      	blx	r1
 80002dc:	6881      	ldr	r1, [r0, #8]
 80002de:	b1c1      	cbz	r1, 8000312 <StartIdleCM4F>
 80002e0:	684a      	ldr	r2, [r1, #4]
 80002e2:	e892 4ff8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e6:	6003      	str	r3, [r0, #0]
 80002e8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80002ec:	f01e 0f10 	tst.w	lr, #16
 80002f0:	d101      	bne.n	80002f6 <Skip_VFPRestore>
 80002f2:	ecb2 8a10 	vldmia	r2!, {s16-s31}

080002f6 <Skip_VFPRestore>:
 80002f6:	f382 8809 	msr	PSP, r2
 80002fa:	6990      	ldr	r0, [r2, #24]
 80002fc:	4939      	ldr	r1, [pc, #228]	; (80003e4 <OS_SwitchFromInt+0x20>)
 80002fe:	4288      	cmp	r0, r1
 8000300:	db02      	blt.n	8000308 <RestorePreemptive>
 8000302:	4a39      	ldr	r2, [pc, #228]	; (80003e8 <OS_SwitchFromInt+0x24>)
 8000304:	4290      	cmp	r0, r2
 8000306:	db03      	blt.n	8000310 <RestoreCooperative>

08000308 <RestorePreemptive>:
 8000308:	f04f 0100 	mov.w	r1, #0
 800030c:	f381 8811 	msr	BASEPRI, r1

08000310 <RestoreCooperative>:
 8000310:	4770      	bx	lr

08000312 <StartIdleCM4F>:
 8000312:	4836      	ldr	r0, [pc, #216]	; (80003ec <OS_SwitchFromInt+0x28>)
 8000314:	4936      	ldr	r1, [pc, #216]	; (80003f0 <OS_SwitchFromInt+0x2c>)
 8000316:	6809      	ldr	r1, [r1, #0]
 8000318:	1a40      	subs	r0, r0, r1
 800031a:	f380 8808 	msr	MSP, r0
 800031e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000322:	61c1      	str	r1, [r0, #28]
 8000324:	4933      	ldr	r1, [pc, #204]	; (80003f4 <OS_SwitchFromInt+0x30>)
 8000326:	6181      	str	r1, [r0, #24]
 8000328:	f07f 0e06 	mvns.w	lr, #6
 800032c:	4770      	bx	lr

0800032e <OS_StartTask>:
 800032e:	bc01      	pop	{r0}
 8000330:	4831      	ldr	r0, [pc, #196]	; (80003f8 <OS_SwitchFromInt+0x34>)
 8000332:	4780      	blx	r0
 8000334:	4620      	mov	r0, r4
 8000336:	bc02      	pop	{r1}
 8000338:	4788      	blx	r1
 800033a:	f85d eb04 	ldr.w	lr, [sp], #4
 800033e:	492f      	ldr	r1, [pc, #188]	; (80003fc <OS_SwitchFromInt+0x38>)
 8000340:	4708      	bx	r1

08000342 <OS_StartASM>:
 8000342:	2800      	cmp	r0, #0
 8000344:	d009      	beq.n	800035a <SkipSaveMainContext>
 8000346:	f3ef 8114 	mrs	r1, CONTROL
 800034a:	466a      	mov	r2, sp
 800034c:	4673      	mov	r3, lr
 800034e:	e8a0 0ffe 	stmia.w	r0!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000352:	ec80 8a10 	vstmia	r0, {s16-s31}
 8000356:	482a      	ldr	r0, [pc, #168]	; (8000400 <OS_SwitchFromInt+0x3c>)
 8000358:	4780      	blx	r0

0800035a <SkipSaveMainContext>:
 800035a:	482a      	ldr	r0, [pc, #168]	; (8000404 <OS_SwitchFromInt+0x40>)
 800035c:	4924      	ldr	r1, [pc, #144]	; (80003f0 <OS_SwitchFromInt+0x2c>)
 800035e:	6809      	ldr	r1, [r1, #0]
 8000360:	1a40      	subs	r0, r0, r1
 8000362:	f020 0007 	bic.w	r0, r0, #7
 8000366:	f380 8808 	msr	MSP, r0
 800036a:	f04f 0100 	mov.w	r1, #0
 800036e:	481a      	ldr	r0, [pc, #104]	; (80003d8 <OS_SwitchFromInt+0x14>)
 8000370:	7041      	strb	r1, [r0, #1]
 8000372:	f381 8811 	msr	BASEPRI, r1
 8000376:	b662      	cpsie	i
 8000378:	4923      	ldr	r1, [pc, #140]	; (8000408 <OS_SwitchFromInt+0x44>)
 800037a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800037e:	600a      	str	r2, [r1, #0]
 8000380:	f3bf 8f4f 	dsb	sy
 8000384:	f3bf 8f6f 	isb	sy

08000388 <Loop>:
 8000388:	e7fe      	b.n	8000388 <Loop>

0800038a <OS_StopASM>:
 800038a:	e8b0 0ffe 	ldmia.w	r0!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800038e:	f381 8814 	msr	CONTROL, r1
 8000392:	f3bf 8f6f 	isb	sy
 8000396:	4695      	mov	sp, r2
 8000398:	469e      	mov	lr, r3
 800039a:	ec90 8a10 	vldmia	r0, {s16-s31}
 800039e:	4770      	bx	lr

080003a0 <OS_Switch>:
 80003a0:	6803      	ldr	r3, [r0, #0]
 80003a2:	b40c      	push	{r2, r3}
 80003a4:	f04f 0100 	mov.w	r1, #0
 80003a8:	7041      	strb	r1, [r0, #1]
 80003aa:	f381 8811 	msr	BASEPRI, r1
 80003ae:	4916      	ldr	r1, [pc, #88]	; (8000408 <OS_SwitchFromInt+0x44>)
 80003b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b4:	600a      	str	r2, [r1, #0]
 80003b6:	f3bf 8f4f 	dsb	sy
 80003ba:	f3bf 8f6f 	isb	sy

080003be <OS_SwitchAfterISR_CortexM>:
 80003be:	bc0c      	pop	{r2, r3}
 80003c0:	6003      	str	r3, [r0, #0]

080003c2 <OS_Switch_End>:
 80003c2:	4770      	bx	lr

080003c4 <OS_SwitchFromInt>:
 80003c4:	4910      	ldr	r1, [pc, #64]	; (8000408 <OS_SwitchFromInt+0x44>)
 80003c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003ca:	600a      	str	r2, [r1, #0]
 80003cc:	f3bf 8f4f 	dsb	sy
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	4770      	bx	lr
 80003d6:	0000      	.short	0x0000
 80003d8:	200051a8 	.word	0x200051a8
 80003dc:	e000ef34 	.word	0xe000ef34
 80003e0:	080102dd 	.word	0x080102dd
 80003e4:	080003a1 	.word	0x080003a1
 80003e8:	080003c2 	.word	0x080003c2
 80003ec:	20014748 	.word	0x20014748
 80003f0:	080141f0 	.word	0x080141f0
 80003f4:	0800f3f9 	.word	0x0800f3f9
 80003f8:	080102ad 	.word	0x080102ad
 80003fc:	080102c9 	.word	0x080102c9
 8000400:	08010275 	.word	0x08010275
 8000404:	20014768 	.word	0x20014768
 8000408:	e000ed04 	.word	0xe000ed04

0800040c <__aeabi_dmul>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800041a:	bf1d      	ittte	ne
 800041c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000420:	ea94 0f0c 	teqne	r4, ip
 8000424:	ea95 0f0c 	teqne	r5, ip
 8000428:	f000 f8de 	bleq	80005e8 <__aeabi_dmul+0x1dc>
 800042c:	442c      	add	r4, r5
 800042e:	ea81 0603 	eor.w	r6, r1, r3
 8000432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800043a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800043e:	bf18      	it	ne
 8000440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800044c:	d038      	beq.n	80004c0 <__aeabi_dmul+0xb4>
 800044e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000452:	f04f 0500 	mov.w	r5, #0
 8000456:	fbe1 e502 	umlal	lr, r5, r1, r2
 800045a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800045e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000462:	f04f 0600 	mov.w	r6, #0
 8000466:	fbe1 5603 	umlal	r5, r6, r1, r3
 800046a:	f09c 0f00 	teq	ip, #0
 800046e:	bf18      	it	ne
 8000470:	f04e 0e01 	orrne.w	lr, lr, #1
 8000474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800047c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000480:	d204      	bcs.n	800048c <__aeabi_dmul+0x80>
 8000482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000486:	416d      	adcs	r5, r5
 8000488:	eb46 0606 	adc.w	r6, r6, r6
 800048c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800049c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80004a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80004a4:	bf88      	it	hi
 80004a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80004aa:	d81e      	bhi.n	80004ea <__aeabi_dmul+0xde>
 80004ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80004b0:	bf08      	it	eq
 80004b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80004b6:	f150 0000 	adcs.w	r0, r0, #0
 80004ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80004c4:	ea46 0101 	orr.w	r1, r6, r1
 80004c8:	ea40 0002 	orr.w	r0, r0, r2
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80004d4:	bfc2      	ittt	gt
 80004d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80004da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80004de:	bd70      	popgt	{r4, r5, r6, pc}
 80004e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004e4:	f04f 0e00 	mov.w	lr, #0
 80004e8:	3c01      	subs	r4, #1
 80004ea:	f300 80ab 	bgt.w	8000644 <__aeabi_dmul+0x238>
 80004ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80004f2:	bfde      	ittt	le
 80004f4:	2000      	movle	r0, #0
 80004f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd70      	pople	{r4, r5, r6, pc}
 80004fc:	f1c4 0400 	rsb	r4, r4, #0
 8000500:	3c20      	subs	r4, #32
 8000502:	da35      	bge.n	8000570 <__aeabi_dmul+0x164>
 8000504:	340c      	adds	r4, #12
 8000506:	dc1b      	bgt.n	8000540 <__aeabi_dmul+0x134>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0520 	rsb	r5, r4, #32
 8000510:	fa00 f305 	lsl.w	r3, r0, r5
 8000514:	fa20 f004 	lsr.w	r0, r0, r4
 8000518:	fa01 f205 	lsl.w	r2, r1, r5
 800051c:	ea40 0002 	orr.w	r0, r0, r2
 8000520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800052c:	fa21 f604 	lsr.w	r6, r1, r4
 8000530:	eb42 0106 	adc.w	r1, r2, r6
 8000534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000538:	bf08      	it	eq
 800053a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f1c4 040c 	rsb	r4, r4, #12
 8000544:	f1c4 0520 	rsb	r5, r4, #32
 8000548:	fa00 f304 	lsl.w	r3, r0, r4
 800054c:	fa20 f005 	lsr.w	r0, r0, r5
 8000550:	fa01 f204 	lsl.w	r2, r1, r4
 8000554:	ea40 0002 	orr.w	r0, r0, r2
 8000558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800055c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000560:	f141 0100 	adc.w	r1, r1, #0
 8000564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000568:	bf08      	it	eq
 800056a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f1c4 0520 	rsb	r5, r4, #32
 8000574:	fa00 f205 	lsl.w	r2, r0, r5
 8000578:	ea4e 0e02 	orr.w	lr, lr, r2
 800057c:	fa20 f304 	lsr.w	r3, r0, r4
 8000580:	fa01 f205 	lsl.w	r2, r1, r5
 8000584:	ea43 0302 	orr.w	r3, r3, r2
 8000588:	fa21 f004 	lsr.w	r0, r1, r4
 800058c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000590:	fa21 f204 	lsr.w	r2, r1, r4
 8000594:	ea20 0002 	bic.w	r0, r0, r2
 8000598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800059c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f094 0f00 	teq	r4, #0
 80005ac:	d10f      	bne.n	80005ce <__aeabi_dmul+0x1c2>
 80005ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80005b2:	0040      	lsls	r0, r0, #1
 80005b4:	eb41 0101 	adc.w	r1, r1, r1
 80005b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005bc:	bf08      	it	eq
 80005be:	3c01      	subeq	r4, #1
 80005c0:	d0f7      	beq.n	80005b2 <__aeabi_dmul+0x1a6>
 80005c2:	ea41 0106 	orr.w	r1, r1, r6
 80005c6:	f095 0f00 	teq	r5, #0
 80005ca:	bf18      	it	ne
 80005cc:	4770      	bxne	lr
 80005ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	eb43 0303 	adc.w	r3, r3, r3
 80005d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80005dc:	bf08      	it	eq
 80005de:	3d01      	subeq	r5, #1
 80005e0:	d0f7      	beq.n	80005d2 <__aeabi_dmul+0x1c6>
 80005e2:	ea43 0306 	orr.w	r3, r3, r6
 80005e6:	4770      	bx	lr
 80005e8:	ea94 0f0c 	teq	r4, ip
 80005ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005f0:	bf18      	it	ne
 80005f2:	ea95 0f0c 	teqne	r5, ip
 80005f6:	d00c      	beq.n	8000612 <__aeabi_dmul+0x206>
 80005f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005fc:	bf18      	it	ne
 80005fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000602:	d1d1      	bne.n	80005a8 <__aeabi_dmul+0x19c>
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd70      	pop	{r4, r5, r6, pc}
 8000612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000616:	bf06      	itte	eq
 8000618:	4610      	moveq	r0, r2
 800061a:	4619      	moveq	r1, r3
 800061c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000620:	d019      	beq.n	8000656 <__aeabi_dmul+0x24a>
 8000622:	ea94 0f0c 	teq	r4, ip
 8000626:	d102      	bne.n	800062e <__aeabi_dmul+0x222>
 8000628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800062c:	d113      	bne.n	8000656 <__aeabi_dmul+0x24a>
 800062e:	ea95 0f0c 	teq	r5, ip
 8000632:	d105      	bne.n	8000640 <__aeabi_dmul+0x234>
 8000634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000638:	bf1c      	itt	ne
 800063a:	4610      	movne	r0, r2
 800063c:	4619      	movne	r1, r3
 800063e:	d10a      	bne.n	8000656 <__aeabi_dmul+0x24a>
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800064c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800065a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800065e:	bd70      	pop	{r4, r5, r6, pc}

08000660 <__aeabi_drsub>:
 8000660:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__adddf3>
 8000666:	bf00      	nop

08000668 <__aeabi_dsub>:
 8000668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800066c <__adddf3>:
 800066c:	b530      	push	{r4, r5, lr}
 800066e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000672:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000676:	ea94 0f05 	teq	r4, r5
 800067a:	bf08      	it	eq
 800067c:	ea90 0f02 	teqeq	r0, r2
 8000680:	bf1f      	itttt	ne
 8000682:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000686:	ea55 0c02 	orrsne.w	ip, r5, r2
 800068a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800068e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000692:	f000 80e2 	beq.w	800085a <__adddf3+0x1ee>
 8000696:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800069a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800069e:	bfb8      	it	lt
 80006a0:	426d      	neglt	r5, r5
 80006a2:	dd0c      	ble.n	80006be <__adddf3+0x52>
 80006a4:	442c      	add	r4, r5
 80006a6:	ea80 0202 	eor.w	r2, r0, r2
 80006aa:	ea81 0303 	eor.w	r3, r1, r3
 80006ae:	ea82 0000 	eor.w	r0, r2, r0
 80006b2:	ea83 0101 	eor.w	r1, r3, r1
 80006b6:	ea80 0202 	eor.w	r2, r0, r2
 80006ba:	ea81 0303 	eor.w	r3, r1, r3
 80006be:	2d36      	cmp	r5, #54	; 0x36
 80006c0:	bf88      	it	hi
 80006c2:	bd30      	pophi	{r4, r5, pc}
 80006c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80006cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80006d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80006d4:	d002      	beq.n	80006dc <__adddf3+0x70>
 80006d6:	4240      	negs	r0, r0
 80006d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80006e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80006e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80006e8:	d002      	beq.n	80006f0 <__adddf3+0x84>
 80006ea:	4252      	negs	r2, r2
 80006ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f0:	ea94 0f05 	teq	r4, r5
 80006f4:	f000 80a7 	beq.w	8000846 <__adddf3+0x1da>
 80006f8:	f1a4 0401 	sub.w	r4, r4, #1
 80006fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000700:	db0d      	blt.n	800071e <__adddf3+0xb2>
 8000702:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000706:	fa22 f205 	lsr.w	r2, r2, r5
 800070a:	1880      	adds	r0, r0, r2
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	fa03 f20e 	lsl.w	r2, r3, lr
 8000714:	1880      	adds	r0, r0, r2
 8000716:	fa43 f305 	asr.w	r3, r3, r5
 800071a:	4159      	adcs	r1, r3
 800071c:	e00e      	b.n	800073c <__adddf3+0xd0>
 800071e:	f1a5 0520 	sub.w	r5, r5, #32
 8000722:	f10e 0e20 	add.w	lr, lr, #32
 8000726:	2a01      	cmp	r2, #1
 8000728:	fa03 fc0e 	lsl.w	ip, r3, lr
 800072c:	bf28      	it	cs
 800072e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000732:	fa43 f305 	asr.w	r3, r3, r5
 8000736:	18c0      	adds	r0, r0, r3
 8000738:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	d507      	bpl.n	8000752 <__adddf3+0xe6>
 8000742:	f04f 0e00 	mov.w	lr, #0
 8000746:	f1dc 0c00 	rsbs	ip, ip, #0
 800074a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800074e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000752:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000756:	d31b      	bcc.n	8000790 <__adddf3+0x124>
 8000758:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800075c:	d30c      	bcc.n	8000778 <__adddf3+0x10c>
 800075e:	0849      	lsrs	r1, r1, #1
 8000760:	ea5f 0030 	movs.w	r0, r0, rrx
 8000764:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000768:	f104 0401 	add.w	r4, r4, #1
 800076c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000770:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000774:	f080 809a 	bcs.w	80008ac <__adddf3+0x240>
 8000778:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	ea41 0105 	orr.w	r1, r1, r5
 800078e:	bd30      	pop	{r4, r5, pc}
 8000790:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000794:	4140      	adcs	r0, r0
 8000796:	eb41 0101 	adc.w	r1, r1, r1
 800079a:	3c01      	subs	r4, #1
 800079c:	bf28      	it	cs
 800079e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80007a2:	d2e9      	bcs.n	8000778 <__adddf3+0x10c>
 80007a4:	f091 0f00 	teq	r1, #0
 80007a8:	bf04      	itt	eq
 80007aa:	4601      	moveq	r1, r0
 80007ac:	2000      	moveq	r0, #0
 80007ae:	fab1 f381 	clz	r3, r1
 80007b2:	bf08      	it	eq
 80007b4:	3320      	addeq	r3, #32
 80007b6:	f1a3 030b 	sub.w	r3, r3, #11
 80007ba:	f1b3 0220 	subs.w	r2, r3, #32
 80007be:	da0c      	bge.n	80007da <__adddf3+0x16e>
 80007c0:	320c      	adds	r2, #12
 80007c2:	dd08      	ble.n	80007d6 <__adddf3+0x16a>
 80007c4:	f102 0c14 	add.w	ip, r2, #20
 80007c8:	f1c2 020c 	rsb	r2, r2, #12
 80007cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80007d0:	fa21 f102 	lsr.w	r1, r1, r2
 80007d4:	e00c      	b.n	80007f0 <__adddf3+0x184>
 80007d6:	f102 0214 	add.w	r2, r2, #20
 80007da:	bfd8      	it	le
 80007dc:	f1c2 0c20 	rsble	ip, r2, #32
 80007e0:	fa01 f102 	lsl.w	r1, r1, r2
 80007e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007e8:	bfdc      	itt	le
 80007ea:	ea41 010c 	orrle.w	r1, r1, ip
 80007ee:	4090      	lslle	r0, r2
 80007f0:	1ae4      	subs	r4, r4, r3
 80007f2:	bfa2      	ittt	ge
 80007f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007f8:	4329      	orrge	r1, r5
 80007fa:	bd30      	popge	{r4, r5, pc}
 80007fc:	ea6f 0404 	mvn.w	r4, r4
 8000800:	3c1f      	subs	r4, #31
 8000802:	da1c      	bge.n	800083e <__adddf3+0x1d2>
 8000804:	340c      	adds	r4, #12
 8000806:	dc0e      	bgt.n	8000826 <__adddf3+0x1ba>
 8000808:	f104 0414 	add.w	r4, r4, #20
 800080c:	f1c4 0220 	rsb	r2, r4, #32
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f302 	lsl.w	r3, r1, r2
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	fa21 f304 	lsr.w	r3, r1, r4
 8000820:	ea45 0103 	orr.w	r1, r5, r3
 8000824:	bd30      	pop	{r4, r5, pc}
 8000826:	f1c4 040c 	rsb	r4, r4, #12
 800082a:	f1c4 0220 	rsb	r2, r4, #32
 800082e:	fa20 f002 	lsr.w	r0, r0, r2
 8000832:	fa01 f304 	lsl.w	r3, r1, r4
 8000836:	ea40 0003 	orr.w	r0, r0, r3
 800083a:	4629      	mov	r1, r5
 800083c:	bd30      	pop	{r4, r5, pc}
 800083e:	fa21 f004 	lsr.w	r0, r1, r4
 8000842:	4629      	mov	r1, r5
 8000844:	bd30      	pop	{r4, r5, pc}
 8000846:	f094 0f00 	teq	r4, #0
 800084a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800084e:	bf06      	itte	eq
 8000850:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000854:	3401      	addeq	r4, #1
 8000856:	3d01      	subne	r5, #1
 8000858:	e74e      	b.n	80006f8 <__adddf3+0x8c>
 800085a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800085e:	bf18      	it	ne
 8000860:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000864:	d029      	beq.n	80008ba <__adddf3+0x24e>
 8000866:	ea94 0f05 	teq	r4, r5
 800086a:	bf08      	it	eq
 800086c:	ea90 0f02 	teqeq	r0, r2
 8000870:	d005      	beq.n	800087e <__adddf3+0x212>
 8000872:	ea54 0c00 	orrs.w	ip, r4, r0
 8000876:	bf04      	itt	eq
 8000878:	4619      	moveq	r1, r3
 800087a:	4610      	moveq	r0, r2
 800087c:	bd30      	pop	{r4, r5, pc}
 800087e:	ea91 0f03 	teq	r1, r3
 8000882:	bf1e      	ittt	ne
 8000884:	2100      	movne	r1, #0
 8000886:	2000      	movne	r0, #0
 8000888:	bd30      	popne	{r4, r5, pc}
 800088a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800088e:	d105      	bne.n	800089c <__adddf3+0x230>
 8000890:	0040      	lsls	r0, r0, #1
 8000892:	4149      	adcs	r1, r1
 8000894:	bf28      	it	cs
 8000896:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800089a:	bd30      	pop	{r4, r5, pc}
 800089c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80008a0:	bf3c      	itt	cc
 80008a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80008a6:	bd30      	popcc	{r4, r5, pc}
 80008a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd30      	pop	{r4, r5, pc}
 80008ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008be:	bf1a      	itte	ne
 80008c0:	4619      	movne	r1, r3
 80008c2:	4610      	movne	r0, r2
 80008c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80008c8:	bf1c      	itt	ne
 80008ca:	460b      	movne	r3, r1
 80008cc:	4602      	movne	r2, r0
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	bf06      	itte	eq
 80008d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80008d8:	ea91 0f03 	teqeq	r1, r3
 80008dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80008e0:	bd30      	pop	{r4, r5, pc}
 80008e2:	bf00      	nop

080008e4 <__aeabi_ui2d>:
 80008e4:	f090 0f00 	teq	r0, #0
 80008e8:	bf04      	itt	eq
 80008ea:	2100      	moveq	r1, #0
 80008ec:	4770      	bxeq	lr
 80008ee:	b530      	push	{r4, r5, lr}
 80008f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008f8:	f04f 0500 	mov.w	r5, #0
 80008fc:	f04f 0100 	mov.w	r1, #0
 8000900:	e750      	b.n	80007a4 <__adddf3+0x138>
 8000902:	bf00      	nop

08000904 <__aeabi_i2d>:
 8000904:	f090 0f00 	teq	r0, #0
 8000908:	bf04      	itt	eq
 800090a:	2100      	moveq	r1, #0
 800090c:	4770      	bxeq	lr
 800090e:	b530      	push	{r4, r5, lr}
 8000910:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000914:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000918:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800091c:	bf48      	it	mi
 800091e:	4240      	negmi	r0, r0
 8000920:	f04f 0100 	mov.w	r1, #0
 8000924:	e73e      	b.n	80007a4 <__adddf3+0x138>
 8000926:	bf00      	nop

08000928 <__aeabi_f2d>:
 8000928:	0042      	lsls	r2, r0, #1
 800092a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800092e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000932:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000936:	bf1f      	itttt	ne
 8000938:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800093c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000940:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000944:	4770      	bxne	lr
 8000946:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800094a:	bf08      	it	eq
 800094c:	4770      	bxeq	lr
 800094e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000952:	bf04      	itt	eq
 8000954:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000958:	4770      	bxeq	lr
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000968:	e71c      	b.n	80007a4 <__adddf3+0x138>
 800096a:	bf00      	nop

0800096c <__aeabi_ul2d>:
 800096c:	ea50 0201 	orrs.w	r2, r0, r1
 8000970:	bf08      	it	eq
 8000972:	4770      	bxeq	lr
 8000974:	b530      	push	{r4, r5, lr}
 8000976:	f04f 0500 	mov.w	r5, #0
 800097a:	e00a      	b.n	8000992 <__aeabi_l2d+0x16>

0800097c <__aeabi_l2d>:
 800097c:	ea50 0201 	orrs.w	r2, r0, r1
 8000980:	bf08      	it	eq
 8000982:	4770      	bxeq	lr
 8000984:	b530      	push	{r4, r5, lr}
 8000986:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800098a:	d502      	bpl.n	8000992 <__aeabi_l2d+0x16>
 800098c:	4240      	negs	r0, r0
 800098e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000992:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000996:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800099a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800099e:	f43f aed8 	beq.w	8000752 <__adddf3+0xe6>
 80009a2:	f04f 0203 	mov.w	r2, #3
 80009a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009aa:	bf18      	it	ne
 80009ac:	3203      	addne	r2, #3
 80009ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009b2:	bf18      	it	ne
 80009b4:	3203      	addne	r2, #3
 80009b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009ba:	f1c2 0320 	rsb	r3, r2, #32
 80009be:	fa00 fc03 	lsl.w	ip, r0, r3
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80009ca:	ea40 000e 	orr.w	r0, r0, lr
 80009ce:	fa21 f102 	lsr.w	r1, r1, r2
 80009d2:	4414      	add	r4, r2
 80009d4:	e6bd      	b.n	8000752 <__adddf3+0xe6>
 80009d6:	bf00      	nop

080009d8 <__aeabi_d2uiz>:
 80009d8:	004a      	lsls	r2, r1, #1
 80009da:	d211      	bcs.n	8000a00 <__aeabi_d2uiz+0x28>
 80009dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e0:	d211      	bcs.n	8000a06 <__aeabi_d2uiz+0x2e>
 80009e2:	d50d      	bpl.n	8000a00 <__aeabi_d2uiz+0x28>
 80009e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009ec:	d40e      	bmi.n	8000a0c <__aeabi_d2uiz+0x34>
 80009ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fa:	fa23 f002 	lsr.w	r0, r3, r2
 80009fe:	4770      	bx	lr
 8000a00:	f04f 0000 	mov.w	r0, #0
 8000a04:	4770      	bx	lr
 8000a06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0a:	d102      	bne.n	8000a12 <__aeabi_d2uiz+0x3a>
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	4770      	bx	lr
 8000a12:	f04f 0000 	mov.w	r0, #0
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_uldivmod>:
 8000a18:	b953      	cbnz	r3, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1a:	b94a      	cbnz	r2, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	bf08      	it	eq
 8000a20:	2800      	cmpeq	r0, #0
 8000a22:	bf1c      	itt	ne
 8000a24:	f04f 31ff 	movne.w	r1, #4294967295
 8000a28:	f04f 30ff 	movne.w	r0, #4294967295
 8000a2c:	f000 b974 	b.w	8000d18 <__aeabi_idiv0>
 8000a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a38:	f000 f806 	bl	8000a48 <__udivmoddi4>
 8000a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a44:	b004      	add	sp, #16
 8000a46:	4770      	bx	lr

08000a48 <__udivmoddi4>:
 8000a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a4c:	9d08      	ldr	r5, [sp, #32]
 8000a4e:	4604      	mov	r4, r0
 8000a50:	468e      	mov	lr, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d14d      	bne.n	8000af2 <__udivmoddi4+0xaa>
 8000a56:	428a      	cmp	r2, r1
 8000a58:	4694      	mov	ip, r2
 8000a5a:	d969      	bls.n	8000b30 <__udivmoddi4+0xe8>
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b152      	cbz	r2, 8000a78 <__udivmoddi4+0x30>
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	f1c2 0120 	rsb	r1, r2, #32
 8000a6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a72:	ea41 0e03 	orr.w	lr, r1, r3
 8000a76:	4094      	lsls	r4, r2
 8000a78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a7c:	0c21      	lsrs	r1, r4, #16
 8000a7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a82:	fa1f f78c 	uxth.w	r7, ip
 8000a86:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8e:	fb06 f107 	mul.w	r1, r6, r7
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x64>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9e:	f080 811f 	bcs.w	8000ce0 <__udivmoddi4+0x298>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 811c 	bls.w	8000ce0 <__udivmoddi4+0x298>
 8000aa8:	3e02      	subs	r6, #2
 8000aaa:	4463      	add	r3, ip
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 f707 	mul.w	r7, r0, r7
 8000ac0:	42a7      	cmp	r7, r4
 8000ac2:	d90a      	bls.n	8000ada <__udivmoddi4+0x92>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000acc:	f080 810a 	bcs.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad0:	42a7      	cmp	r7, r4
 8000ad2:	f240 8107 	bls.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ade:	1be4      	subs	r4, r4, r7
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	b11d      	cbz	r5, 8000aec <__udivmoddi4+0xa4>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c5 4300 	strd	r4, r3, [r5]
 8000aec:	4631      	mov	r1, r6
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xc2>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80ef 	beq.w	8000cda <__udivmoddi4+0x292>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x160>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd4>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80f9 	bhi.w	8000d0e <__udivmoddi4+0x2c6>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	469e      	mov	lr, r3
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa4>
 8000b2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa4>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xec>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 8092 	bne.w	8000c62 <__udivmoddi4+0x21a>
 8000b3e:	eba1 010c 	sub.w	r1, r1, ip
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f fe8c 	uxth.w	lr, ip
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	0c20      	lsrs	r0, r4, #16
 8000b4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b52:	fb07 1113 	mls	r1, r7, r3, r1
 8000b56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5a:	fb0e f003 	mul.w	r0, lr, r3
 8000b5e:	4288      	cmp	r0, r1
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x12c>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x12a>
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	f200 80cb 	bhi.w	8000d08 <__udivmoddi4+0x2c0>
 8000b72:	4643      	mov	r3, r8
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b84:	fb0e fe00 	mul.w	lr, lr, r0
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x156>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b94:	d202      	bcs.n	8000b9c <__udivmoddi4+0x154>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	f200 80bb 	bhi.w	8000d12 <__udivmoddi4+0x2ca>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ba2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba6:	e79c      	b.n	8000ae2 <__udivmoddi4+0x9a>
 8000ba8:	f1c6 0720 	rsb	r7, r6, #32
 8000bac:	40b3      	lsls	r3, r6
 8000bae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	40f9      	lsrs	r1, r7
 8000bc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000bca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bce:	0c20      	lsrs	r0, r4, #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000be0:	4288      	cmp	r0, r1
 8000be2:	fa02 f206 	lsl.w	r2, r2, r6
 8000be6:	d90b      	bls.n	8000c00 <__udivmoddi4+0x1b8>
 8000be8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf0:	f080 8088 	bcs.w	8000d04 <__udivmoddi4+0x2bc>
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	f240 8085 	bls.w	8000d04 <__udivmoddi4+0x2bc>
 8000bfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c08:	fb09 1110 	mls	r1, r9, r0, r1
 8000c0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c14:	458e      	cmp	lr, r1
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x1e2>
 8000c18:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c20:	d26c      	bcs.n	8000cfc <__udivmoddi4+0x2b4>
 8000c22:	458e      	cmp	lr, r1
 8000c24:	d96a      	bls.n	8000cfc <__udivmoddi4+0x2b4>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4461      	add	r1, ip
 8000c2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000c32:	eba1 010e 	sub.w	r1, r1, lr
 8000c36:	42a1      	cmp	r1, r4
 8000c38:	46c8      	mov	r8, r9
 8000c3a:	46a6      	mov	lr, r4
 8000c3c:	d356      	bcc.n	8000cec <__udivmoddi4+0x2a4>
 8000c3e:	d053      	beq.n	8000ce8 <__udivmoddi4+0x2a0>
 8000c40:	b15d      	cbz	r5, 8000c5a <__udivmoddi4+0x212>
 8000c42:	ebb3 0208 	subs.w	r2, r3, r8
 8000c46:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000c52:	40f1      	lsrs	r1, r6
 8000c54:	431f      	orrs	r7, r3
 8000c56:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	40d8      	lsrs	r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4301      	orrs	r1, r0
 8000c74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c78:	fa1f fe8c 	uxth.w	lr, ip
 8000c7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c80:	fb07 3610 	mls	r6, r7, r0, r3
 8000c84:	0c0b      	lsrs	r3, r1, #16
 8000c86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	fa04 f402 	lsl.w	r4, r4, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x260>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9e:	d22f      	bcs.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca0:	429e      	cmp	r6, r3
 8000ca2:	d92d      	bls.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	b289      	uxth	r1, r1
 8000cac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x28a>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc8:	d216      	bcs.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d914      	bls.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cce:	3e02      	subs	r6, #2
 8000cd0:	4461      	add	r1, ip
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd8:	e738      	b.n	8000b4c <__udivmoddi4+0x104>
 8000cda:	462e      	mov	r6, r5
 8000cdc:	4628      	mov	r0, r5
 8000cde:	e705      	b.n	8000aec <__udivmoddi4+0xa4>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	e6e3      	b.n	8000aac <__udivmoddi4+0x64>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6f8      	b.n	8000ada <__udivmoddi4+0x92>
 8000ce8:	454b      	cmp	r3, r9
 8000cea:	d2a9      	bcs.n	8000c40 <__udivmoddi4+0x1f8>
 8000cec:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	e7a3      	b.n	8000c40 <__udivmoddi4+0x1f8>
 8000cf8:	4646      	mov	r6, r8
 8000cfa:	e7ea      	b.n	8000cd2 <__udivmoddi4+0x28a>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	e794      	b.n	8000c2a <__udivmoddi4+0x1e2>
 8000d00:	4640      	mov	r0, r8
 8000d02:	e7d1      	b.n	8000ca8 <__udivmoddi4+0x260>
 8000d04:	46d0      	mov	r8, sl
 8000d06:	e77b      	b.n	8000c00 <__udivmoddi4+0x1b8>
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	e732      	b.n	8000b74 <__udivmoddi4+0x12c>
 8000d0e:	4630      	mov	r0, r6
 8000d10:	e709      	b.n	8000b26 <__udivmoddi4+0xde>
 8000d12:	4464      	add	r4, ip
 8000d14:	3802      	subs	r0, #2
 8000d16:	e742      	b.n	8000b9e <__udivmoddi4+0x156>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <_DoInit+0xa0>)
 8000d24:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000d26:	22a8      	movs	r2, #168	; 0xa8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	6838      	ldr	r0, [r7, #0]
 8000d2c:	f010 f9a8 	bl	8011080 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2203      	movs	r2, #3
 8000d34:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <_DoInit+0xa4>)
 8000d40:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <_DoInit+0xa8>)
 8000d46:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <_DoInit+0xa4>)
 8000d66:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <_DoInit+0xac>)
 8000d6c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2210      	movs	r2, #16
 8000d72:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000d86:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e00c      	b.n	8000daa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f1c3 030f 	rsb	r3, r3, #15
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <_DoInit+0xb0>)
 8000d98:	5cd1      	ldrb	r1, [r2, r3]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	460a      	mov	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d9ef      	bls.n	8000d90 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000db0:	f3bf 8f5f 	dmb	sy
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000a4 	.word	0x200000a4
 8000dc0:	080112d0 	.word	0x080112d0
 8000dc4:	2000014c 	.word	0x2000014c
 8000dc8:	2000054c 	.word	0x2000054c
 8000dcc:	080120c4 	.word	0x080120c4

08000dd0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <SEGGER_RTT_ReadNoLock+0x108>)
 8000dde:	623b      	str	r3, [r7, #32]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <SEGGER_RTT_ReadNoLock+0x1e>
 8000dea:	f7ff ff97 	bl	8000d1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	3360      	adds	r3, #96	; 0x60
 8000dfa:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <SEGGER_RTT_ReadNoLock+0x108>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d92b      	bls.n	8000e74 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	bf28      	it	cs
 8000e2e:	4613      	movcs	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	4413      	add	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e42:	f010 f90f 	bl	8011064 <memcpy>
    NumBytesRead += NumBytesRem;
 8000e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	4413      	add	r3, r2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4413      	add	r3, r2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d101      	bne.n	8000e74 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	bf28      	it	cs
 8000e84:	4613      	movcs	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d019      	beq.n	8000ec2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	4413      	add	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	6939      	ldr	r1, [r7, #16]
 8000e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e9e:	f010 f8e1 	bl	8011064 <memcpy>
    NumBytesRead += NumBytesRem;
 8000ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	4413      	add	r3, r2
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ecc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000a4 	.word	0x200000a4

08000edc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <SEGGER_RTT_AllocUpBuffer+0x20>
 8000ef8:	f7ff ff10 	bl	8000d1c <_DoInit>
  SEGGER_RTT_LOCK();
 8000efc:	f3ef 8311 	mrs	r3, BASEPRI
 8000f00:	f04f 0120 	mov.w	r1, #32
 8000f04:	f381 8811 	msr	BASEPRI, r1
 8000f08:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000f0c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	3304      	adds	r3, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d008      	beq.n	8000f3c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbeb      	blt.n	8000f12 <SEGGER_RTT_AllocUpBuffer+0x36>
 8000f3a:	e000      	b.n	8000f3e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8000f3c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	da3f      	bge.n	8000fc8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000f72:	6939      	ldr	r1, [r7, #16]
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3320      	adds	r3, #32
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3328      	adds	r3, #40	; 0x28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3324      	adds	r3, #36	; 0x24
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	332c      	adds	r3, #44	; 0x2c
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000fc2:	f3bf 8f5f 	dmb	sy
 8000fc6:	e002      	b.n	8000fce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000a4 	.word	0x200000a4

08000fe4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8001000:	f7ff fe8c 	bl	8000d1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8001006:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d82c      	bhi.n	8001068 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800100e:	f3ef 8311 	mrs	r3, BASEPRI
 8001012:	f04f 0120 	mov.w	r1, #32
 8001016:	f381 8811 	msr	BASEPRI, r1
 800101a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	3360      	adds	r3, #96	; 0x60
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00e      	beq.n	8001052 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001056:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001058:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	e002      	b.n	800106e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001070:	4618      	mov	r0, r3
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000a4 	.word	0x200000a4

0800107c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00f      	beq.n	80010b2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8001092:	e002      	b.n	800109a <_EncodeStr+0x1e>
      Len++;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f6      	bne.n	8001094 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d901      	bls.n	80010b2 <_EncodeStr+0x36>
      Len = Limit;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2bfe      	cmp	r3, #254	; 0xfe
 80010b6:	d806      	bhi.n	80010c6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e011      	b.n	80010ea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60fa      	str	r2, [r7, #12]
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60fa      	str	r2, [r7, #12]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	0a19      	lsrs	r1, r3, #8
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80010ee:	e00a      	b.n	8001106 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	1c53      	adds	r3, r2, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	60f9      	str	r1, [r7, #12]
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	701a      	strb	r2, [r3, #0]
    n++;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3f0      	bcc.n	80010f0 <_EncodeStr+0x74>
  }
  return pPayload;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3307      	adds	r3, #7
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <_HandleIncomingPacket+0xdc>)
 800113c:	7e1b      	ldrb	r3, [r3, #24]
 800113e:	4618      	mov	r0, r3
 8001140:	1cfb      	adds	r3, r7, #3
 8001142:	2201      	movs	r2, #1
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fe43 	bl	8000dd0 <SEGGER_RTT_ReadNoLock>
 800114a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d052      	beq.n	80011f8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b80      	cmp	r3, #128	; 0x80
 8001156:	d031      	beq.n	80011bc <_HandleIncomingPacket+0x88>
 8001158:	2b80      	cmp	r3, #128	; 0x80
 800115a:	dc40      	bgt.n	80011de <_HandleIncomingPacket+0xaa>
 800115c:	2b07      	cmp	r3, #7
 800115e:	dc15      	bgt.n	800118c <_HandleIncomingPacket+0x58>
 8001160:	2b00      	cmp	r3, #0
 8001162:	dd3c      	ble.n	80011de <_HandleIncomingPacket+0xaa>
 8001164:	3b01      	subs	r3, #1
 8001166:	2b06      	cmp	r3, #6
 8001168:	d839      	bhi.n	80011de <_HandleIncomingPacket+0xaa>
 800116a:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <_HandleIncomingPacket+0x3c>)
 800116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001170:	08001193 	.word	0x08001193
 8001174:	08001199 	.word	0x08001199
 8001178:	0800119f 	.word	0x0800119f
 800117c:	080011a5 	.word	0x080011a5
 8001180:	080011ab 	.word	0x080011ab
 8001184:	080011b1 	.word	0x080011b1
 8001188:	080011b7 	.word	0x080011b7
 800118c:	2b7f      	cmp	r3, #127	; 0x7f
 800118e:	d035      	beq.n	80011fc <_HandleIncomingPacket+0xc8>
 8001190:	e025      	b.n	80011de <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001192:	f000 fd8d 	bl	8001cb0 <SEGGER_SYSVIEW_Start>
      break;
 8001196:	e036      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001198:	f000 fe44 	bl	8001e24 <SEGGER_SYSVIEW_Stop>
      break;
 800119c:	e033      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800119e:	f001 f81d 	bl	80021dc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80011a2:	e030      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80011a4:	f000 ffe2 	bl	800216c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80011a8:	e02d      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80011aa:	f000 fe61 	bl	8001e70 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80011ae:	e02a      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80011b0:	f001 fc46 	bl	8002a40 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80011b4:	e027      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80011b6:	f001 fc25 	bl	8002a04 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80011ba:	e024      	b.n	8001206 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <_HandleIncomingPacket+0xdc>)
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	4618      	mov	r0, r3
 80011c2:	1cfb      	adds	r3, r7, #3
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fe02 	bl	8000dd0 <SEGGER_RTT_ReadNoLock>
 80011cc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d015      	beq.n	8001200 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fb94 	bl	8002904 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80011dc:	e010      	b.n	8001200 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da0e      	bge.n	8001204 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <_HandleIncomingPacket+0xdc>)
 80011e8:	7e1b      	ldrb	r3, [r3, #24]
 80011ea:	4618      	mov	r0, r3
 80011ec:	1cfb      	adds	r3, r7, #3
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fded 	bl	8000dd0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80011f6:	e005      	b.n	8001204 <_HandleIncomingPacket+0xd0>
    }
  }
 80011f8:	bf00      	nop
 80011fa:	e004      	b.n	8001206 <_HandleIncomingPacket+0xd2>
      break;
 80011fc:	bf00      	nop
 80011fe:	e002      	b.n	8001206 <_HandleIncomingPacket+0xd2>
      break;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <_HandleIncomingPacket+0xd2>
      break;
 8001204:	bf00      	nop
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000964 	.word	0x20000964

08001214 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800121a:	2301      	movs	r3, #1
 800121c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
 800122e:	e00b      	b.n	8001248 <_TrySendOverflowPacket+0x34>
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	b2da      	uxtb	r2, r3
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	62f9      	str	r1, [r7, #44]	; 0x2c
 800123a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	09db      	lsrs	r3, r3, #7
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d8f0      	bhi.n	8001230 <_TrySendOverflowPacket+0x1c>
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <_TrySendOverflowPacket+0xe0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	e00b      	b.n	8001290 <_TrySendOverflowPacket+0x7c>
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	6279      	str	r1, [r7, #36]	; 0x24
 8001282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	09db      	lsrs	r3, r3, #7
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	2b7f      	cmp	r3, #127	; 0x7f
 8001294:	d8f0      	bhi.n	8001278 <_TrySendOverflowPacket+0x64>
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	627a      	str	r2, [r7, #36]	; 0x24
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	4618      	mov	r0, r3
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7fe ffa6 	bl	8000208 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80012bc:	4603      	mov	r3, r0
 80012be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e004      	b.n	80012e4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <_TrySendOverflowPacket+0xdc>)
 80012e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80012e4:	693b      	ldr	r3, [r7, #16]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3730      	adds	r7, #48	; 0x30
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000964 	.word	0x20000964
 80012f4:	e0001004 	.word	0xe0001004

080012f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001304:	4b98      	ldr	r3, [pc, #608]	; (8001568 <_SendPacket+0x270>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d010      	beq.n	800132e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800130c:	4b96      	ldr	r3, [pc, #600]	; (8001568 <_SendPacket+0x270>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 812d 	beq.w	8001570 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001316:	4b94      	ldr	r3, [pc, #592]	; (8001568 <_SendPacket+0x270>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d109      	bne.n	8001332 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800131e:	f7ff ff79 	bl	8001214 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001322:	4b91      	ldr	r3, [pc, #580]	; (8001568 <_SendPacket+0x270>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	f040 8124 	bne.w	8001574 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800132c:	e001      	b.n	8001332 <_SendPacket+0x3a>
    goto Send;
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <_SendPacket+0x3c>
Send:
 8001332:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b1f      	cmp	r3, #31
 8001338:	d809      	bhi.n	800134e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800133a:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <_SendPacket+0x270>)
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 8115 	bne.w	8001578 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b17      	cmp	r3, #23
 8001352:	d807      	bhi.n	8001364 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e0c4      	b.n	80014ee <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b7f      	cmp	r3, #127	; 0x7f
 8001370:	d912      	bls.n	8001398 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	09da      	lsrs	r2, r3, #7
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	3a01      	subs	r2, #1
 800138a:	60fa      	str	r2, [r7, #12]
 800138c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001390:	b2da      	uxtb	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e006      	b.n	80013a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b7e      	cmp	r3, #126	; 0x7e
 80013aa:	d807      	bhi.n	80013bc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e098      	b.n	80014ee <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013c2:	d212      	bcs.n	80013ea <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	09da      	lsrs	r2, r3, #7
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	3a01      	subs	r2, #1
 80013dc:	60fa      	str	r2, [r7, #12]
 80013de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e081      	b.n	80014ee <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013f0:	d21d      	bcs.n	800142e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0b9a      	lsrs	r2, r3, #14
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	09db      	lsrs	r3, r3, #7
 8001406:	b2db      	uxtb	r3, r3
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	3a01      	subs	r2, #1
 800140c:	60fa      	str	r2, [r7, #12]
 800140e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	3a01      	subs	r2, #1
 8001420:	60fa      	str	r2, [r7, #12]
 8001422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001426:	b2da      	uxtb	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e05f      	b.n	80014ee <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001434:	d228      	bcs.n	8001488 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0d5a      	lsrs	r2, r3, #21
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3b01      	subs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0b9b      	lsrs	r3, r3, #14
 800144a:	b2db      	uxtb	r3, r3
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	3a01      	subs	r2, #1
 8001450:	60fa      	str	r2, [r7, #12]
 8001452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001456:	b2da      	uxtb	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	09db      	lsrs	r3, r3, #7
 8001460:	b2db      	uxtb	r3, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	3a01      	subs	r2, #1
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800146c:	b2da      	uxtb	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	3a01      	subs	r2, #1
 800147a:	60fa      	str	r2, [r7, #12]
 800147c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001480:	b2da      	uxtb	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e032      	b.n	80014ee <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0f1a      	lsrs	r2, r3, #28
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3b01      	subs	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0d5b      	lsrs	r3, r3, #21
 800149c:	b2db      	uxtb	r3, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	60fa      	str	r2, [r7, #12]
 80014a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0b9b      	lsrs	r3, r3, #14
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	3a01      	subs	r2, #1
 80014b8:	60fa      	str	r2, [r7, #12]
 80014ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	09db      	lsrs	r3, r3, #7
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	3a01      	subs	r2, #1
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	3a01      	subs	r2, #1
 80014e2:	60fa      	str	r2, [r7, #12]
 80014e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <_SendPacket+0x274>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <_SendPacket+0x270>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	e00b      	b.n	8001520 <_SendPacket+0x228>
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	1c59      	adds	r1, r3, #1
 8001510:	6279      	str	r1, [r7, #36]	; 0x24
 8001512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	09db      	lsrs	r3, r3, #7
 800151e:	623b      	str	r3, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	2b7f      	cmp	r3, #127	; 0x7f
 8001524:	d8f0      	bhi.n	8001508 <_SendPacket+0x210>
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	627a      	str	r2, [r7, #36]	; 0x24
 800152c:	6a3a      	ldr	r2, [r7, #32]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <_SendPacket+0x270>)
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	4618      	mov	r0, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	461a      	mov	r2, r3
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	f7fe fe5f 	bl	8000208 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800154a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <_SendPacket+0x270>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	60d3      	str	r3, [r2, #12]
 8001558:	e00f      	b.n	800157a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800155a:	4b03      	ldr	r3, [pc, #12]	; (8001568 <_SendPacket+0x270>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b01      	ldr	r3, [pc, #4]	; (8001568 <_SendPacket+0x270>)
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e008      	b.n	800157a <_SendPacket+0x282>
 8001568:	20000964 	.word	0x20000964
 800156c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8001570:	bf00      	nop
 8001572:	e002      	b.n	800157a <_SendPacket+0x282>
      goto SendDone;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <_SendPacket+0x282>
      goto SendDone;
 8001578:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <_SendPacket+0x2d4>)
 800157c:	7e1b      	ldrb	r3, [r3, #24]
 800157e:	4619      	mov	r1, r3
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <_SendPacket+0x2d8>)
 8001582:	460b      	mov	r3, r1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	336c      	adds	r3, #108	; 0x6c
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <_SendPacket+0x2d4>)
 8001592:	7e1b      	ldrb	r3, [r3, #24]
 8001594:	4618      	mov	r0, r3
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <_SendPacket+0x2d8>)
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4403      	add	r3, r0
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	3370      	adds	r3, #112	; 0x70
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d00b      	beq.n	80015c2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_SendPacket+0x2d4>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <_SendPacket+0x2d4>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80015b8:	f7ff fdbc 	bl	8001134 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <_SendPacket+0x2d4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000964 	.word	0x20000964
 80015d0:	200000a4 	.word	0x200000a4

080015d4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0a2      	sub	sp, #136	; 0x88
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80015ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80015f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01d      	beq.n	800163a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 80015fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001602:	2b25      	cmp	r3, #37	; 0x25
 8001604:	d1f1      	bne.n	80015ea <_VPrintHost+0x16>
      c = *p;
 8001606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1d19      	adds	r1, r3, #4
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6011      	str	r1, [r2, #0]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001624:	460a      	mov	r2, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	3388      	adds	r3, #136	; 0x88
 800162a:	443b      	add	r3, r7
 800162c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8001630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001634:	2b10      	cmp	r3, #16
 8001636:	d002      	beq.n	800163e <_VPrintHost+0x6a>
    c = *p++;
 8001638:	e7d7      	b.n	80015ea <_VPrintHost+0x16>
      break;
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <_VPrintHost+0x6c>
        break;
 800163e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8001640:	f3ef 8311 	mrs	r3, BASEPRI
 8001644:	f04f 0120 	mov.w	r1, #32
 8001648:	f381 8811 	msr	BASEPRI, r1
 800164c:	65bb      	str	r3, [r7, #88]	; 0x58
 800164e:	483f      	ldr	r0, [pc, #252]	; (800174c <_VPrintHost+0x178>)
 8001650:	f7ff fd64 	bl	800111c <_PreparePacket>
 8001654:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800165c:	f7ff fd0e 	bl	800107c <_EncodeStr>
 8001660:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8001662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001664:	677b      	str	r3, [r7, #116]	; 0x74
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	673b      	str	r3, [r7, #112]	; 0x70
 800166a:	e00b      	b.n	8001684 <_VPrintHost+0xb0>
 800166c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800166e:	b2da      	uxtb	r2, r3
 8001670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	6779      	str	r1, [r7, #116]	; 0x74
 8001676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001680:	09db      	lsrs	r3, r3, #7
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
 8001684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001686:	2b7f      	cmp	r3, #127	; 0x7f
 8001688:	d8f0      	bhi.n	800166c <_VPrintHost+0x98>
 800168a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	677a      	str	r2, [r7, #116]	; 0x74
 8001690:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001698:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800169a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800169e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80016a4:	e00b      	b.n	80016be <_VPrintHost+0xea>
 80016a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	66f9      	str	r1, [r7, #108]	; 0x6c
 80016b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	09db      	lsrs	r3, r3, #7
 80016bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c0:	2b7f      	cmp	r3, #127	; 0x7f
 80016c2:	d8f0      	bhi.n	80016a6 <_VPrintHost+0xd2>
 80016c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80016dc:	e022      	b.n	8001724 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 80016de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016e0:	667b      	str	r3, [r7, #100]	; 0x64
 80016e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	663b      	str	r3, [r7, #96]	; 0x60
 80016ea:	e00b      	b.n	8001704 <_VPrintHost+0x130>
 80016ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	6679      	str	r1, [r7, #100]	; 0x64
 80016f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001700:	09db      	lsrs	r3, r3, #7
 8001702:	663b      	str	r3, [r7, #96]	; 0x60
 8001704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001706:	2b7f      	cmp	r3, #127	; 0x7f
 8001708:	d8f0      	bhi.n	80016ec <_VPrintHost+0x118>
 800170a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	667a      	str	r2, [r7, #100]	; 0x64
 8001710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001718:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800171a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171e:	3304      	adds	r3, #4
 8001720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8001724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1d5      	bne.n	80016de <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001732:	221a      	movs	r2, #26
 8001734:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001736:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001738:	f7ff fdde 	bl	80012f8 <_SendPacket>
    RECORD_END();
 800173c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800173e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3788      	adds	r7, #136	; 0x88
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000994 	.word	0x20000994

08001750 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800175e:	2300      	movs	r3, #0
 8001760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001764:	4918      	ldr	r1, [pc, #96]	; (80017c8 <SEGGER_SYSVIEW_Init+0x78>)
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <SEGGER_SYSVIEW_Init+0x7c>)
 8001768:	f7ff fbb8 	bl	8000edc <SEGGER_RTT_AllocUpBuffer>
 800176c:	4603      	mov	r3, r0
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 8001772:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 8001776:	785a      	ldrb	r2, [r3, #1]
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 800177a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	4618      	mov	r0, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2308      	movs	r3, #8
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <SEGGER_SYSVIEW_Init+0x84>)
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <SEGGER_SYSVIEW_Init+0x7c>)
 800178c:	f7ff fc2a 	bl	8000fe4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 8001792:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001796:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <SEGGER_SYSVIEW_Init+0x88>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 800179e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SEGGER_SYSVIEW_Init+0x80>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000055c 	.word	0x2000055c
 80017cc:	080112dc 	.word	0x080112dc
 80017d0:	20000964 	.word	0x20000964
 80017d4:	2000095c 	.word	0x2000095c
 80017d8:	e0001004 	.word	0xe0001004

080017dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017e4:	f3ef 8311 	mrs	r3, BASEPRI
 80017e8:	f04f 0120 	mov.w	r1, #32
 80017ec:	f381 8811 	msr	BASEPRI, r1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80017f4:	f7ff fc92 	bl	800111c <_PreparePacket>
 80017f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68b8      	ldr	r0, [r7, #8]
 8001800:	f7ff fd7a 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f383 8811 	msr	BASEPRI, r3
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000994 	.word	0x20000994

08001818 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001822:	f3ef 8311 	mrs	r3, BASEPRI
 8001826:	f04f 0120 	mov.w	r1, #32
 800182a:	f381 8811 	msr	BASEPRI, r1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001832:	f7ff fc73 	bl	800111c <_PreparePacket>
 8001836:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	e00b      	b.n	800185e <SEGGER_SYSVIEW_RecordU32+0x46>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	61f9      	str	r1, [r7, #28]
 8001850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	09db      	lsrs	r3, r3, #7
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b7f      	cmp	r3, #127	; 0x7f
 8001862:	d8f0      	bhi.n	8001846 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	61fa      	str	r2, [r7, #28]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6938      	ldr	r0, [r7, #16]
 800187a:	f7ff fd3d 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f383 8811 	msr	BASEPRI, r3
}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000994 	.word	0x20000994

08001890 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800189c:	f3ef 8311 	mrs	r3, BASEPRI
 80018a0:	f04f 0120 	mov.w	r1, #32
 80018a4:	f381 8811 	msr	BASEPRI, r1
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80018ac:	f7ff fc36 	bl	800111c <_PreparePacket>
 80018b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018be:	e00b      	b.n	80018d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80018ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	09db      	lsrs	r3, r3, #7
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d8f0      	bhi.n	80018c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	e00b      	b.n	8001910 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	6279      	str	r1, [r7, #36]	; 0x24
 8001902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	09db      	lsrs	r3, r3, #7
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2b7f      	cmp	r3, #127	; 0x7f
 8001914:	d8f0      	bhi.n	80018f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	627a      	str	r2, [r7, #36]	; 0x24
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	f7ff fce4 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f383 8811 	msr	BASEPRI, r3
}
 8001936:	bf00      	nop
 8001938:	3730      	adds	r7, #48	; 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000994 	.word	0x20000994

08001944 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8001952:	f3ef 8311 	mrs	r3, BASEPRI
 8001956:	f04f 0120 	mov.w	r1, #32
 800195a:	f381 8811 	msr	BASEPRI, r1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8001962:	f7ff fbdb 	bl	800111c <_PreparePacket>
 8001966:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
 8001974:	e00b      	b.n	800198e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	b2da      	uxtb	r2, r3
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	1c59      	adds	r1, r3, #1
 800197e:	6379      	str	r1, [r7, #52]	; 0x34
 8001980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	09db      	lsrs	r3, r3, #7
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	2b7f      	cmp	r3, #127	; 0x7f
 8001992:	d8f0      	bhi.n	8001976 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	637a      	str	r2, [r7, #52]	; 0x34
 800199a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ac:	e00b      	b.n	80019c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80019b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	09db      	lsrs	r3, r3, #7
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	2b7f      	cmp	r3, #127	; 0x7f
 80019ca:	d8f0      	bhi.n	80019ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	e00b      	b.n	80019fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	6279      	str	r1, [r7, #36]	; 0x24
 80019f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	09db      	lsrs	r3, r3, #7
 80019fc:	623b      	str	r3, [r7, #32]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b7f      	cmp	r3, #127	; 0x7f
 8001a02:	d8f0      	bhi.n	80019e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	6979      	ldr	r1, [r7, #20]
 8001a18:	69b8      	ldr	r0, [r7, #24]
 8001a1a:	f7ff fc6d 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f383 8811 	msr	BASEPRI, r3
}
 8001a24:	bf00      	nop
 8001a26:	3738      	adds	r7, #56	; 0x38
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000994 	.word	0x20000994

08001a30 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b090      	sub	sp, #64	; 0x40
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a42:	f04f 0120 	mov.w	r1, #32
 8001a46:	f381 8811 	msr	BASEPRI, r1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	4840      	ldr	r0, [pc, #256]	; (8001b50 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8001a4e:	f7ff fb65 	bl	800111c <_PreparePacket>
 8001a52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a60:	e00b      	b.n	8001a7a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a76:	09db      	lsrs	r3, r3, #7
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7e:	d8f0      	bhi.n	8001a62 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	e00b      	b.n	8001ab2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	1c59      	adds	r1, r3, #1
 8001aa2:	6379      	str	r1, [r7, #52]	; 0x34
 8001aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	09db      	lsrs	r3, r3, #7
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab6:	d8f0      	bhi.n	8001a9a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	637a      	str	r2, [r7, #52]	; 0x34
 8001abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad0:	e00b      	b.n	8001aea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	1c59      	adds	r1, r3, #1
 8001ada:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	09db      	lsrs	r3, r3, #7
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	2b7f      	cmp	r3, #127	; 0x7f
 8001aee:	d8f0      	bhi.n	8001ad2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	e00b      	b.n	8001b22 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	6279      	str	r1, [r7, #36]	; 0x24
 8001b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	09db      	lsrs	r3, r3, #7
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2b7f      	cmp	r3, #127	; 0x7f
 8001b26:	d8f0      	bhi.n	8001b0a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b2e:	6a3a      	ldr	r2, [r7, #32]
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	69b8      	ldr	r0, [r7, #24]
 8001b3e:	f7ff fbdb 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f383 8811 	msr	BASEPRI, r3
}
 8001b48:	bf00      	nop
 8001b4a:	3740      	adds	r7, #64	; 0x40
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000994 	.word	0x20000994

08001b54 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b092      	sub	sp, #72	; 0x48
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8001b62:	f3ef 8311 	mrs	r3, BASEPRI
 8001b66:	f04f 0120 	mov.w	r1, #32
 8001b6a:	f381 8811 	msr	BASEPRI, r1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	484e      	ldr	r0, [pc, #312]	; (8001cac <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8001b72:	f7ff fad3 	bl	800111c <_PreparePacket>
 8001b76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
 8001b84:	e00b      	b.n	8001b9e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8001b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8c:	1c59      	adds	r1, r3, #1
 8001b8e:	6479      	str	r1, [r7, #68]	; 0x44
 8001b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9a:	09db      	lsrs	r3, r3, #7
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba2:	d8f0      	bhi.n	8001b86 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	647a      	str	r2, [r7, #68]	; 0x44
 8001baa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bbc:	e00b      	b.n	8001bd6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc4:	1c59      	adds	r1, r3, #1
 8001bc6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd2:	09db      	lsrs	r3, r3, #7
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bda:	d8f0      	bhi.n	8001bbe <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf4:	e00b      	b.n	8001c0e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	1c59      	adds	r1, r3, #1
 8001bfe:	6379      	str	r1, [r7, #52]	; 0x34
 8001c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	09db      	lsrs	r3, r3, #7
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	2b7f      	cmp	r3, #127	; 0x7f
 8001c12:	d8f0      	bhi.n	8001bf6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	637a      	str	r2, [r7, #52]	; 0x34
 8001c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	e00b      	b.n	8001c46 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	09db      	lsrs	r3, r3, #7
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4a:	d8f0      	bhi.n	8001c2e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	623b      	str	r3, [r7, #32]
 8001c64:	e00b      	b.n	8001c7e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	1c59      	adds	r1, r3, #1
 8001c6e:	6279      	str	r1, [r7, #36]	; 0x24
 8001c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	09db      	lsrs	r3, r3, #7
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b7f      	cmp	r3, #127	; 0x7f
 8001c82:	d8f0      	bhi.n	8001c66 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	627a      	str	r2, [r7, #36]	; 0x24
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6979      	ldr	r1, [r7, #20]
 8001c98:	69b8      	ldr	r0, [r7, #24]
 8001c9a:	f7ff fb2d 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f383 8811 	msr	BASEPRI, r3
}
 8001ca4:	bf00      	nop
 8001ca6:	3748      	adds	r7, #72	; 0x48
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000994 	.word	0x20000994

08001cb0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8001cc0:	f04f 0120 	mov.w	r1, #32
 8001cc4:	f381 8811 	msr	BASEPRI, r1
 8001cc8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	220a      	movs	r2, #10
 8001cd0:	4952      	ldr	r1, [pc, #328]	; (8001e1c <SEGGER_SYSVIEW_Start+0x16c>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fa98 	bl	8000208 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f7ff fd7c 	bl	80017dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ce8:	f04f 0120 	mov.w	r1, #32
 8001cec:	f381 8811 	msr	BASEPRI, r1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	484b      	ldr	r0, [pc, #300]	; (8001e20 <SEGGER_SYSVIEW_Start+0x170>)
 8001cf4:	f7ff fa12 	bl	800111c <_PreparePacket>
 8001cf8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d08:	e00b      	b.n	8001d22 <SEGGER_SYSVIEW_Start+0x72>
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	09db      	lsrs	r3, r3, #7
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	2b7f      	cmp	r3, #127	; 0x7f
 8001d26:	d8f0      	bhi.n	8001d0a <SEGGER_SYSVIEW_Start+0x5a>
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	e00b      	b.n	8001d5c <SEGGER_SYSVIEW_Start+0xac>
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	1c59      	adds	r1, r3, #1
 8001d4c:	6279      	str	r1, [r7, #36]	; 0x24
 8001d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	09db      	lsrs	r3, r3, #7
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d60:	d8f0      	bhi.n	8001d44 <SEGGER_SYSVIEW_Start+0x94>
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	627a      	str	r2, [r7, #36]	; 0x24
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e00b      	b.n	8001d96 <SEGGER_SYSVIEW_Start+0xe6>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	61f9      	str	r1, [r7, #28]
 8001d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	09db      	lsrs	r3, r3, #7
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	d8f0      	bhi.n	8001d7e <SEGGER_SYSVIEW_Start+0xce>
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	61fa      	str	r2, [r7, #28]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e00b      	b.n	8001dce <SEGGER_SYSVIEW_Start+0x11e>
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1c59      	adds	r1, r3, #1
 8001dbe:	6179      	str	r1, [r7, #20]
 8001dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	09db      	lsrs	r3, r3, #7
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd2:	d8f0      	bhi.n	8001db6 <SEGGER_SYSVIEW_Start+0x106>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	617a      	str	r2, [r7, #20]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001de4:	2218      	movs	r2, #24
 8001de6:	6839      	ldr	r1, [r7, #0]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fa85 	bl	80012f8 <_SendPacket>
      RECORD_END();
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SEGGER_SYSVIEW_Start+0x168>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001e02:	f000 f9eb 	bl	80021dc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001e06:	f000 f9b1 	bl	800216c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001e0a:	f000 fe19 	bl	8002a40 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000964 	.word	0x20000964
 8001e1c:	080120d8 	.word	0x080120d8
 8001e20:	20000994 	.word	0x20000994

08001e24 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e2e:	f04f 0120 	mov.w	r1, #32
 8001e32:	f381 8811 	msr	BASEPRI, r1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <SEGGER_SYSVIEW_Stop+0x44>)
 8001e3a:	f7ff f96f 	bl	800111c <_PreparePacket>
 8001e3e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <SEGGER_SYSVIEW_Stop+0x48>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001e48:	220b      	movs	r2, #11
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f7ff fa53 	bl	80012f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SEGGER_SYSVIEW_Stop+0x48>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f383 8811 	msr	BASEPRI, r3
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000994 	.word	0x20000994
 8001e6c:	20000964 	.word	0x20000964

08001e70 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e76:	f3ef 8311 	mrs	r3, BASEPRI
 8001e7a:	f04f 0120 	mov.w	r1, #32
 8001e7e:	f381 8811 	msr	BASEPRI, r1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4845      	ldr	r0, [pc, #276]	; (8001f9c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001e86:	f7ff f949 	bl	800111c <_PreparePacket>
 8001e8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	e00b      	b.n	8001eb4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	09db      	lsrs	r3, r3, #7
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb8:	d8f0      	bhi.n	8001e9c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	e00b      	b.n	8001eee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	6279      	str	r1, [r7, #36]	; 0x24
 8001ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	09db      	lsrs	r3, r3, #7
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef2:	d8f0      	bhi.n	8001ed6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8001efa:	6a3a      	ldr	r2, [r7, #32]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e00b      	b.n	8001f28 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	1c59      	adds	r1, r3, #1
 8001f18:	61f9      	str	r1, [r7, #28]
 8001f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	09db      	lsrs	r3, r3, #7
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f2c:	d8f0      	bhi.n	8001f10 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	61fa      	str	r2, [r7, #28]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e00b      	b.n	8001f60 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	6179      	str	r1, [r7, #20]
 8001f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	09db      	lsrs	r3, r3, #7
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b7f      	cmp	r3, #127	; 0x7f
 8001f64:	d8f0      	bhi.n	8001f48 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	617a      	str	r2, [r7, #20]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f76:	2218      	movs	r2, #24
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	68b8      	ldr	r0, [r7, #8]
 8001f7c:	f7ff f9bc 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	4798      	blx	r3
  }
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000994 	.word	0x20000994
 8001fa0:	20000964 	.word	0x20000964

08001fa4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b092      	sub	sp, #72	; 0x48
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8001fac:	f3ef 8311 	mrs	r3, BASEPRI
 8001fb0:	f04f 0120 	mov.w	r1, #32
 8001fb4:	f381 8811 	msr	BASEPRI, r1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	486a      	ldr	r0, [pc, #424]	; (8002164 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8001fbc:	f7ff f8ae 	bl	800111c <_PreparePacket>
 8001fc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b66      	ldr	r3, [pc, #408]	; (8002168 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd6:	e00b      	b.n	8001ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	6479      	str	r1, [r7, #68]	; 0x44
 8001fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fec:	09db      	lsrs	r3, r3, #7
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff4:	d8f0      	bhi.n	8001fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	647a      	str	r2, [r7, #68]	; 0x44
 8001ffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002004:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002010:	e00b      	b.n	800202a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	b2da      	uxtb	r2, r3
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	1c59      	adds	r1, r3, #1
 800201a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800201c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	09db      	lsrs	r3, r3, #7
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202c:	2b7f      	cmp	r3, #127	; 0x7f
 800202e:	d8f0      	bhi.n	8002012 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	4619      	mov	r1, r3
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff f817 	bl	800107c <_EncodeStr>
 800204e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002050:	2209      	movs	r2, #9
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	6938      	ldr	r0, [r7, #16]
 8002056:	f7ff f94f 	bl	80012f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b40      	ldr	r3, [pc, #256]	; (8002168 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	e00b      	b.n	8002088 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	b2da      	uxtb	r2, r3
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	6379      	str	r1, [r7, #52]	; 0x34
 800207a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	09db      	lsrs	r3, r3, #7
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	2b7f      	cmp	r3, #127	; 0x7f
 800208c:	d8f0      	bhi.n	8002070 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	637a      	str	r2, [r7, #52]	; 0x34
 8002094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	e00b      	b.n	80020c2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80020b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	09db      	lsrs	r3, r3, #7
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	2b7f      	cmp	r3, #127	; 0x7f
 80020c6:	d8f0      	bhi.n	80020aa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	e00b      	b.n	80020fc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	6279      	str	r1, [r7, #36]	; 0x24
 80020ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	09db      	lsrs	r3, r3, #7
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002100:	d8f0      	bhi.n	80020e4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	627a      	str	r2, [r7, #36]	; 0x24
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e00b      	b.n	8002134 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	61f9      	str	r1, [r7, #28]
 8002126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	09db      	lsrs	r3, r3, #7
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b7f      	cmp	r3, #127	; 0x7f
 8002138:	d8f0      	bhi.n	800211c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	61fa      	str	r2, [r7, #28]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800214a:	2215      	movs	r2, #21
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	6938      	ldr	r0, [r7, #16]
 8002150:	f7ff f8d2 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f383 8811 	msr	BASEPRI, r3
}
 800215a:	bf00      	nop
 800215c:	3748      	adds	r7, #72	; 0x48
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000994 	.word	0x20000994
 8002168:	20000964 	.word	0x20000964

0800216c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4798      	blx	r3
  }
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000964 	.word	0x20000964

08002194 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800219c:	f3ef 8311 	mrs	r3, BASEPRI
 80021a0:	f04f 0120 	mov.w	r1, #32
 80021a4:	f381 8811 	msr	BASEPRI, r1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	480b      	ldr	r0, [pc, #44]	; (80021d8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80021ac:	f7fe ffb6 	bl	800111c <_PreparePacket>
 80021b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6938      	ldr	r0, [r7, #16]
 80021b8:	f7fe ff60 	bl	800107c <_EncodeStr>
 80021bc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80021be:	220e      	movs	r2, #14
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	6938      	ldr	r0, [r7, #16]
 80021c4:	f7ff f898 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f383 8811 	msr	BASEPRI, r3
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000994 	.word	0x20000994

080021dc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01a      	beq.n	8002220 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4798      	blx	r3
 80021fc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002200:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	000a      	movs	r2, r1
 8002210:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002212:	4613      	mov	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4621      	mov	r1, r4
 8002218:	200d      	movs	r0, #13
 800221a:	f7ff fb39 	bl	8001890 <SEGGER_SYSVIEW_RecordU32x2>
 800221e:	e006      	b.n	800222e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	200c      	movs	r0, #12
 8002228:	f7ff faf6 	bl	8001818 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}
 8002236:	bf00      	nop
 8002238:	20000964 	.word	0x20000964
 800223c:	e0001004 	.word	0xe0001004

08002240 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002246:	f3ef 8311 	mrs	r3, BASEPRI
 800224a:	f04f 0120 	mov.w	r1, #32
 800224e:	f381 8811 	msr	BASEPRI, r1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4819      	ldr	r0, [pc, #100]	; (80022bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002256:	f7fe ff61 	bl	800111c <_PreparePacket>
 800225a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002268:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e00b      	b.n	800228c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	6179      	str	r1, [r7, #20]
 800227e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	09db      	lsrs	r3, r3, #7
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b7f      	cmp	r3, #127	; 0x7f
 8002290:	d8f0      	bhi.n	8002274 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	617a      	str	r2, [r7, #20]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80022a2:	2202      	movs	r2, #2
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f7ff f826 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f383 8811 	msr	BASEPRI, r3
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000994 	.word	0x20000994
 80022c0:	e000ed04 	.word	0xe000ed04

080022c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80022ca:	f3ef 8311 	mrs	r3, BASEPRI
 80022ce:	f04f 0120 	mov.w	r1, #32
 80022d2:	f381 8811 	msr	BASEPRI, r1
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80022da:	f7fe ff1f 	bl	800111c <_PreparePacket>
 80022de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80022e0:	2203      	movs	r2, #3
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f7ff f807 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f383 8811 	msr	BASEPRI, r3
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000994 	.word	0x20000994

080022fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002302:	f3ef 8311 	mrs	r3, BASEPRI
 8002306:	f04f 0120 	mov.w	r1, #32
 800230a:	f381 8811 	msr	BASEPRI, r1
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002312:	f7fe ff03 	bl	800111c <_PreparePacket>
 8002316:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002318:	2212      	movs	r2, #18
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f7fe ffeb 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f383 8811 	msr	BASEPRI, r3
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000994 	.word	0x20000994

08002334 <SEGGER_SYSVIEW_RecordEnterTimer>:
*    Format and send a Timer entry event.
*
*  Parameters
*    TimerId - Id of the timer which starts.
*/
void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800233c:	f3ef 8311 	mrs	r3, BASEPRI
 8002340:	f04f 0120 	mov.w	r1, #32
 8002344:	f381 8811 	msr	BASEPRI, r1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	4818      	ldr	r0, [pc, #96]	; (80023ac <SEGGER_SYSVIEW_RecordEnterTimer+0x78>)
 800234c:	f7fe fee6 	bl	800111c <_PreparePacket>
 8002350:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(TimerId));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <SEGGER_SYSVIEW_RecordEnterTimer+0x7c>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e00b      	b.n	800237e <SEGGER_SYSVIEW_RecordEnterTimer+0x4a>
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	61f9      	str	r1, [r7, #28]
 8002370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	09db      	lsrs	r3, r3, #7
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b7f      	cmp	r3, #127	; 0x7f
 8002382:	d8f0      	bhi.n	8002366 <SEGGER_SYSVIEW_RecordEnterTimer+0x32>
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	61fa      	str	r2, [r7, #28]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
 8002394:	2213      	movs	r2, #19
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	6938      	ldr	r0, [r7, #16]
 800239a:	f7fe ffad 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f383 8811 	msr	BASEPRI, r3
}
 80023a4:	bf00      	nop
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000994 	.word	0x20000994
 80023b0:	20000964 	.word	0x20000964

080023b4 <SEGGER_SYSVIEW_RecordExitTimer>:
*       SEGGER_SYSVIEW_RecordExitTimer()
*
*  Function description
*    Format and send a Timer exit event.
*/
void SEGGER_SYSVIEW_RecordExitTimer(void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80023ba:	f3ef 8311 	mrs	r3, BASEPRI
 80023be:	f04f 0120 	mov.w	r1, #32
 80023c2:	f381 8811 	msr	BASEPRI, r1
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <SEGGER_SYSVIEW_RecordExitTimer+0x34>)
 80023ca:	f7fe fea7 	bl	800111c <_PreparePacket>
 80023ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
 80023d0:	2214      	movs	r2, #20
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f7fe ff8f 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f383 8811 	msr	BASEPRI, r3
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000994 	.word	0x20000994

080023ec <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80023f4:	f3ef 8311 	mrs	r3, BASEPRI
 80023f8:	f04f 0120 	mov.w	r1, #32
 80023fc:	f381 8811 	msr	BASEPRI, r1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	4817      	ldr	r0, [pc, #92]	; (8002460 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8002404:	f7fe fe8a 	bl	800111c <_PreparePacket>
 8002408:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e00b      	b.n	8002430 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	61f9      	str	r1, [r7, #28]
 8002422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	09db      	lsrs	r3, r3, #7
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b7f      	cmp	r3, #127	; 0x7f
 8002434:	d8f0      	bhi.n	8002418 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	61fa      	str	r2, [r7, #28]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8002446:	221c      	movs	r2, #28
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	6938      	ldr	r0, [r7, #16]
 800244c:	f7fe ff54 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f383 8811 	msr	BASEPRI, r3
}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000994 	.word	0x20000994

08002464 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800246e:	f3ef 8311 	mrs	r3, BASEPRI
 8002472:	f04f 0120 	mov.w	r1, #32
 8002476:	f381 8811 	msr	BASEPRI, r1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	4824      	ldr	r0, [pc, #144]	; (8002510 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800247e:	f7fe fe4d 	bl	800111c <_PreparePacket>
 8002482:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	e00b      	b.n	80024aa <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1c59      	adds	r1, r3, #1
 800249a:	6279      	str	r1, [r7, #36]	; 0x24
 800249c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	09db      	lsrs	r3, r3, #7
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b7f      	cmp	r3, #127	; 0x7f
 80024ae:	d8f0      	bhi.n	8002492 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	627a      	str	r2, [r7, #36]	; 0x24
 80024b6:	6a3a      	ldr	r2, [r7, #32]
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e00b      	b.n	80024e2 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	61f9      	str	r1, [r7, #28]
 80024d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b7f      	cmp	r3, #127	; 0x7f
 80024e6:	d8f0      	bhi.n	80024ca <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80024f8:	221c      	movs	r2, #28
 80024fa:	68f9      	ldr	r1, [r7, #12]
 80024fc:	6938      	ldr	r0, [r7, #16]
 80024fe:	f7fe fefb 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f383 8811 	msr	BASEPRI, r3
}
 8002508:	bf00      	nop
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000994 	.word	0x20000994

08002514 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800251a:	f3ef 8311 	mrs	r3, BASEPRI
 800251e:	f04f 0120 	mov.w	r1, #32
 8002522:	f381 8811 	msr	BASEPRI, r1
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800252a:	f7fe fdf7 	bl	800111c <_PreparePacket>
 800252e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002530:	2211      	movs	r2, #17
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f7fe fedf 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f383 8811 	msr	BASEPRI, r3
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000994 	.word	0x20000994

0800254c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002554:	f3ef 8311 	mrs	r3, BASEPRI
 8002558:	f04f 0120 	mov.w	r1, #32
 800255c:	f381 8811 	msr	BASEPRI, r1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4819      	ldr	r0, [pc, #100]	; (80025c8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002564:	f7fe fdda 	bl	800111c <_PreparePacket>
 8002568:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e00b      	b.n	800259a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	1c59      	adds	r1, r3, #1
 800258a:	61f9      	str	r1, [r7, #28]
 800258c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	09db      	lsrs	r3, r3, #7
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b7f      	cmp	r3, #127	; 0x7f
 800259e:	d8f0      	bhi.n	8002582 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	61fa      	str	r2, [r7, #28]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80025b0:	2208      	movs	r2, #8
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	6938      	ldr	r0, [r7, #16]
 80025b6:	f7fe fe9f 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f383 8811 	msr	BASEPRI, r3
}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000994 	.word	0x20000994
 80025cc:	20000964 	.word	0x20000964

080025d0 <SEGGER_SYSVIEW_OnTaskTerminate>:
*    SEGGER_SYSVIEW_OnTaskStopExec may be used, either.
*
*  Parameters
*    TaskId        - Task ID of terminated task.
*/
void SEGGER_SYSVIEW_OnTaskTerminate(U32 TaskId) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80025d8:	f3ef 8311 	mrs	r3, BASEPRI
 80025dc:	f04f 0120 	mov.w	r1, #32
 80025e0:	f381 8811 	msr	BASEPRI, r1
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	4819      	ldr	r0, [pc, #100]	; (800264c <SEGGER_SYSVIEW_OnTaskTerminate+0x7c>)
 80025e8:	f7fe fd98 	bl	800111c <_PreparePacket>
 80025ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <SEGGER_SYSVIEW_OnTaskTerminate+0x80>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	e00b      	b.n	800261e <SEGGER_SYSVIEW_OnTaskTerminate+0x4e>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	61f9      	str	r1, [r7, #28]
 8002610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	09db      	lsrs	r3, r3, #7
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b7f      	cmp	r3, #127	; 0x7f
 8002622:	d8f0      	bhi.n	8002606 <SEGGER_SYSVIEW_OnTaskTerminate+0x36>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	61fa      	str	r2, [r7, #28]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_TERMINATE);
 8002634:	221d      	movs	r2, #29
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	6938      	ldr	r0, [r7, #16]
 800263a:	f7fe fe5d 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f383 8811 	msr	BASEPRI, r3
}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000994 	.word	0x20000994
 8002650:	20000964 	.word	0x20000964

08002654 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800265c:	f3ef 8311 	mrs	r3, BASEPRI
 8002660:	f04f 0120 	mov.w	r1, #32
 8002664:	f381 8811 	msr	BASEPRI, r1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4819      	ldr	r0, [pc, #100]	; (80026d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800266c:	f7fe fd56 	bl	800111c <_PreparePacket>
 8002670:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e00b      	b.n	80026a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	61f9      	str	r1, [r7, #28]
 8002694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	09db      	lsrs	r3, r3, #7
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b7f      	cmp	r3, #127	; 0x7f
 80026a6:	d8f0      	bhi.n	800268a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	61fa      	str	r2, [r7, #28]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80026b8:	2204      	movs	r2, #4
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f7fe fe1b 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f383 8811 	msr	BASEPRI, r3
}
 80026c8:	bf00      	nop
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000994 	.word	0x20000994
 80026d4:	20000964 	.word	0x20000964

080026d8 <SEGGER_SYSVIEW_OnTaskStopExec>:
*
*  Function description
*    Record a Task Stop Execution event.  The Task Stop event
*    corresponds to when a task stops executing and terminates.
*/
void SEGGER_SYSVIEW_OnTaskStopExec(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80026de:	f3ef 8311 	mrs	r3, BASEPRI
 80026e2:	f04f 0120 	mov.w	r1, #32
 80026e6:	f381 8811 	msr	BASEPRI, r1
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	4807      	ldr	r0, [pc, #28]	; (800270c <SEGGER_SYSVIEW_OnTaskStopExec+0x34>)
 80026ee:	f7fe fd15 	bl	800111c <_PreparePacket>
 80026f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TASK_STOP_EXEC);
 80026f4:	2205      	movs	r2, #5
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f7fe fdfd 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f383 8811 	msr	BASEPRI, r3
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000994 	.word	0x20000994

08002710 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002718:	f3ef 8311 	mrs	r3, BASEPRI
 800271c:	f04f 0120 	mov.w	r1, #32
 8002720:	f381 8811 	msr	BASEPRI, r1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4819      	ldr	r0, [pc, #100]	; (800278c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002728:	f7fe fcf8 	bl	800111c <_PreparePacket>
 800272c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e00b      	b.n	800275e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	1c59      	adds	r1, r3, #1
 800274e:	61f9      	str	r1, [r7, #28]
 8002750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	09db      	lsrs	r3, r3, #7
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b7f      	cmp	r3, #127	; 0x7f
 8002762:	d8f0      	bhi.n	8002746 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002774:	2206      	movs	r2, #6
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	6938      	ldr	r0, [r7, #16]
 800277a:	f7fe fdbd 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f383 8811 	msr	BASEPRI, r3
}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000994 	.word	0x20000994
 8002790:	20000964 	.word	0x20000964

08002794 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800279e:	f3ef 8311 	mrs	r3, BASEPRI
 80027a2:	f04f 0120 	mov.w	r1, #32
 80027a6:	f381 8811 	msr	BASEPRI, r1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	4827      	ldr	r0, [pc, #156]	; (800284c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80027ae:	f7fe fcb5 	bl	800111c <_PreparePacket>
 80027b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	e00b      	b.n	80027e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	6279      	str	r1, [r7, #36]	; 0x24
 80027d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	09db      	lsrs	r3, r3, #7
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	2b7f      	cmp	r3, #127	; 0x7f
 80027e8:	d8f0      	bhi.n	80027cc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	627a      	str	r2, [r7, #36]	; 0x24
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e00b      	b.n	800281c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1c59      	adds	r1, r3, #1
 800280c:	61f9      	str	r1, [r7, #28]
 800280e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	09db      	lsrs	r3, r3, #7
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b7f      	cmp	r3, #127	; 0x7f
 8002820:	d8f0      	bhi.n	8002804 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002832:	2207      	movs	r2, #7
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	6938      	ldr	r0, [r7, #16]
 8002838:	f7fe fd5e 	bl	80012f8 <_SendPacket>
  RECORD_END();
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f383 8811 	msr	BASEPRI, r3
}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000994 	.word	0x20000994
 8002850:	20000964 	.word	0x20000964

08002854 <SEGGER_SYSVIEW_NameResource>:
*
*  Parameters
*    ResourceId - Id of the resource to be named. i.e. its address.
*    sName      - Pointer to the resource name. (Max. SEGGER_SYSVIEW_MAX_STRING_LEN Bytes)
*/
void SEGGER_SYSVIEW_NameResource(U32 ResourceId, const char* sName) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800285e:	f3ef 8311 	mrs	r3, BASEPRI
 8002862:	f04f 0120 	mov.w	r1, #32
 8002866:	f381 8811 	msr	BASEPRI, r1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	481b      	ldr	r0, [pc, #108]	; (80028dc <SEGGER_SYSVIEW_NameResource+0x88>)
 800286e:	f7fe fc55 	bl	800111c <_PreparePacket>
 8002872:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(ResourceId));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <SEGGER_SYSVIEW_NameResource+0x8c>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e00b      	b.n	80028a0 <SEGGER_SYSVIEW_NameResource+0x4c>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	61f9      	str	r1, [r7, #28]
 8002892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	09db      	lsrs	r3, r3, #7
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b7f      	cmp	r3, #127	; 0x7f
 80028a4:	d8f0      	bhi.n	8002888 <SEGGER_SYSVIEW_NameResource+0x34>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	61fa      	str	r2, [r7, #28]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, sName, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	6839      	ldr	r1, [r7, #0]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7fe fbde 	bl	800107c <_EncodeStr>
 80028c0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NAME_RESOURCE);
 80028c2:	2219      	movs	r2, #25
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	6938      	ldr	r0, [r7, #16]
 80028c8:	f7fe fd16 	bl	80012f8 <_SendPacket>
  RECORD_END();
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f383 8811 	msr	BASEPRI, r3
}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000994 	.word	0x20000994
 80028e0:	20000964 	.word	0x20000964

080028e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	20000964 	.word	0x20000964

08002904 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d06d      	beq.n	80029f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002920:	e008      	b.n	8002934 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	3301      	adds	r3, #1
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002938:	429a      	cmp	r2, r3
 800293a:	d3f2      	bcc.n	8002922 <SEGGER_SYSVIEW_SendModule+0x1e>
 800293c:	e000      	b.n	8002940 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800293e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d055      	beq.n	80029f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002946:	f3ef 8311 	mrs	r3, BASEPRI
 800294a:	f04f 0120 	mov.w	r1, #32
 800294e:	f381 8811 	msr	BASEPRI, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	482a      	ldr	r0, [pc, #168]	; (8002a00 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002956:	f7fe fbe1 	bl	800111c <_PreparePacket>
 800295a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e00b      	b.n	8002982 <SEGGER_SYSVIEW_SendModule+0x7e>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	6279      	str	r1, [r7, #36]	; 0x24
 8002974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	09db      	lsrs	r3, r3, #7
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b7f      	cmp	r3, #127	; 0x7f
 8002986:	d8f0      	bhi.n	800296a <SEGGER_SYSVIEW_SendModule+0x66>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	627a      	str	r2, [r7, #36]	; 0x24
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e00b      	b.n	80029bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	61f9      	str	r1, [r7, #28]
 80029ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	09db      	lsrs	r3, r3, #7
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b7f      	cmp	r3, #127	; 0x7f
 80029c0:	d8f0      	bhi.n	80029a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	61fa      	str	r2, [r7, #28]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4619      	mov	r1, r3
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7fe fb4e 	bl	800107c <_EncodeStr>
 80029e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80029e2:	2216      	movs	r2, #22
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6938      	ldr	r0, [r7, #16]
 80029e8:	f7fe fc86 	bl	80012f8 <_SendPacket>
      RECORD_END();
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	; 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000098c 	.word	0x2000098c
 8002a00:	20000994 	.word	0x20000994

08002a04 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00f      	beq.n	8002a32 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000098c 	.word	0x2000098c

08002a40 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002a46:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4a:	f04f 0120 	mov.w	r1, #32
 8002a4e:	f381 8811 	msr	BASEPRI, r1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002a56:	f7fe fb61 	bl	800111c <_PreparePacket>
 8002a5a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e00b      	b.n	8002a84 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	6179      	str	r1, [r7, #20]
 8002a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	09db      	lsrs	r3, r3, #7
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b7f      	cmp	r3, #127	; 0x7f
 8002a88:	d8f0      	bhi.n	8002a6c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	617a      	str	r2, [r7, #20]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002a9a:	221b      	movs	r2, #27
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68b8      	ldr	r0, [r7, #8]
 8002aa0:	f7fe fc2a 	bl	80012f8 <_SendPacket>
  RECORD_END();
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f383 8811 	msr	BASEPRI, r3
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000994 	.word	0x20000994
 8002ab8:	20000990 	.word	0x20000990

08002abc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8002abc:	b40f      	push	{r0, r1, r2, r3}
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	461a      	mov	r2, r3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6938      	ldr	r0, [r7, #16]
 8002ad2:	f7fe fd7f 	bl	80015d4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ae0:	b004      	add	sp, #16
 8002ae2:	4770      	bx	lr

08002ae4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N=" SEGGER_SYSVIEW_APP_NAME ",O=embOS,D=" SEGGER_SYSVIEW_DEVICE_NAME );
 8002ae8:	4803      	ldr	r0, [pc, #12]	; (8002af8 <_cbSendSystemDesc+0x14>)
 8002aea:	f7ff fb53 	bl	8002194 <SEGGER_SYSVIEW_SendSysDesc>
#ifdef SEGGER_SYSVIEW_SYSDESC0
  SEGGER_SYSVIEW_SendSysDesc(SEGGER_SYSVIEW_SYSDESC0);
 8002aee:	4803      	ldr	r0, [pc, #12]	; (8002afc <_cbSendSystemDesc+0x18>)
 8002af0:	f7ff fb50 	bl	8002194 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc(SEGGER_SYSVIEW_SYSDESC1);
#endif
#ifdef SEGGER_SYSVIEW_SYSDESC2
  SEGGER_SYSVIEW_SendSysDesc(SEGGER_SYSVIEW_SYSDESC2);
#endif
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	080112e4 	.word	0x080112e4
 8002afc:	08011310 	.word	0x08011310

08002b00 <SEGGER_SYSVIEW_Conf>:
*
* Additional information
*   If enabled, SEGGER_SYSVIEW_Conf() will also immediately start
*   recording events with SystemView.
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
#endif
  //
  //  The cycle counter must be activated in order
  //  to use time related functions.
  //
  if ((DWT_CTRL & NOCYCCNT_BIT) == 0) {       // Cycle counter supported?
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <SEGGER_SYSVIEW_Conf+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10b      	bne.n	8002b28 <SEGGER_SYSVIEW_Conf+0x28>
    if ((DWT_CTRL & CYCCNTENA_BIT) == 0) {    // Cycle counter not enabled?
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <SEGGER_SYSVIEW_Conf+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <SEGGER_SYSVIEW_Conf+0x28>
      DWT_CTRL |= CYCCNTENA_BIT;              // Enable Cycle counter
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <SEGGER_SYSVIEW_Conf+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <SEGGER_SYSVIEW_Conf+0x40>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6013      	str	r3, [r2, #0]
    }
  }
  SEGGER_SYSVIEW_Init(SEGGER_SYSVIEW_TIMESTAMP_FREQ, SEGGER_SYSVIEW_CPU_FREQ,
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <SEGGER_SYSVIEW_Conf+0x44>)
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <SEGGER_SYSVIEW_Conf+0x48>)
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <SEGGER_SYSVIEW_Conf+0x4c>)
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <SEGGER_SYSVIEW_Conf+0x4c>)
 8002b30:	f7fe fe0e 	bl	8001750 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  OS_SetTraceAPI(&embOS_TraceAPI_SYSVIEW);   // Configure embOS to use SYSVIEW.
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <SEGGER_SYSVIEW_Conf+0x50>)
 8002b36:	f00c fd27 	bl	800f588 <OS_TRACE_SetAPI>
#if SEGGER_SYSVIEW_START_ON_INIT
  SEGGER_SYSVIEW_Start();                    // Start recording to catch system initialization.
#endif
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e0001000 	.word	0xe0001000
 8002b44:	08002ae5 	.word	0x08002ae5
 8002b48:	08012140 	.word	0x08012140
 8002b4c:	0aba9500 	.word	0x0aba9500
 8002b50:	080120e4 	.word	0x080120e4

08002b54 <_cbSendTaskInfo>:
*       _cbSendTaskInfo()
*
*  Function description
*    Sends task information to SystemView
*/
static void _cbSendTaskInfo(const OS_TASK* pTask) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  SEGGER_SYSVIEW_TASKINFO Info;

  OS_EnterRegion();                // No scheduling to make sure the task list does not change while we are transmitting it
 8002b5c:	f00d fac4 	bl	80100e8 <OS_EnterRegionFunc>
  memset(&Info, 0, sizeof(Info));  // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2214      	movs	r2, #20
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00e fa89 	bl	8011080 <memset>
  Info.TaskID = (U32)pTask;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
#if OS_TRACKNAME
  Info.sName = OS_GetTaskName(pTask);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f00c ffcc 	bl	800fb10 <OS_TASK_GetName>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	613b      	str	r3, [r7, #16]
#endif
  Info.Prio = pTask->Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	617b      	str	r3, [r7, #20]
#if OS_CHECKSTACK
  Info.StackBase = (U32)OS_GetStackBase(pTask);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f00d fe6c 	bl	8010860 <OS_STACK_GetTaskStackBase>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	61bb      	str	r3, [r7, #24]
  Info.StackSize = pTask->StackSize;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	61fb      	str	r3, [r7, #28]
#endif
  SEGGER_SYSVIEW_SendTaskInfo(&Info);
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fa04 	bl	8001fa4 <SEGGER_SYSVIEW_SendTaskInfo>
  OS_LeaveRegion();                // No scheduling to make sure the task list does not change while we are transmitting it
 8002b9c:	f00d f820 	bl	800fbe0 <OS_TASK_LeaveRegion>
}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between embOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  OS_TASK*    pTask;

  OS_EnterRegion();         // No scheduling to make sure the task list does not change while we are transmitting it
 8002bae:	f00d fa9b 	bl	80100e8 <OS_EnterRegionFunc>
  for (pTask = OS_Global.pTask; pTask; pTask = pTask->pNext) {
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <_cbSendTaskList+0x58>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	e005      	b.n	8002bc6 <_cbSendTaskList+0x1e>
    _cbSendTaskInfo(pTask);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffca 	bl	8002b54 <_cbSendTaskInfo>
  for (pTask = OS_Global.pTask; pTask; pTask = pTask->pNext) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f6      	bne.n	8002bba <_cbSendTaskList+0x12>
  }
#if ((OS_VERSION >= 43800) && (OS_TRACKNAME != 0))  // Human readable object identifiers supported since embOS V4.38
  {
    OS_OBJNAME* p;
#if (OS_VERSION >= 51600)
    for (p = OS_Global.pObjNameRoot; p != NULL; p = p->pNext) {
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <_cbSendTaskList+0x58>)
 8002bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	e00b      	b.n	8002bec <_cbSendTaskList+0x44>
#else
    for (p = OS_pObjNameRoot; p != NULL; p = p->pNext) {
#endif
      SEGGER_SYSVIEW_NameResource((OS_U32)p->pOSObjID, p->sName);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7ff fe37 	bl	8002854 <SEGGER_SYSVIEW_NameResource>
    for (p = OS_Global.pObjNameRoot; p != NULL; p = p->pNext) {
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <_cbSendTaskList+0x2c>
    }
  }
#endif
  OS_LeaveRegion();         // No scheduling to make sure the task list does not change while we are transmitting it
 8002bf2:	f00c fff5 	bl	800fbe0 <OS_TASK_LeaveRegion>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200051a8 	.word	0x200051a8

08002c04 <Authentication_TSK>:
uint8_t *firmwareBase64File; // encoded file
uint16_t firmwareBase64Size = 0;
uint8_t *firmwareFile; //The binary it self
size_t firmwareFileSize = 0;

void Authentication_TSK(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0bc      	sub	sp, #240	; 0xf0
 8002c08:	af00      	add	r7, sp, #0
	OS_TASKEVENT AuthenticationEvents;
	uint8_t url[50] = { 0 };
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c10:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c14:	222e      	movs	r2, #46	; 0x2e
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f00e fa31 	bl	8011080 <memset>
	uint16_t GSM_State = GSM_NOK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	uint8_t *gsm_InternalBuffer;
	uint16_t gsm_RxDataSize = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	GSM_TxType gsm_Tx;
	uint8_t *gsm_RxData;

	while (1) {
		AuthenticationEvents = OS_TASKEVENT_GetSingleBlocked(
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f00c fdc2 	bl	800f7b4 <OS_TASKEVENT_GetSingleBlocked>
 8002c30:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
		TSK_ENENT_LOGIN | TSK_ENENT_SIGNUP);
		SEGGER_SYSVIEW_PrintfHost("Authentication TSK Starts ...");
 8002c34:	48a3      	ldr	r0, [pc, #652]	; (8002ec4 <Authentication_TSK+0x2c0>)
 8002c36:	f7ff ff41 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
		CAN_msg TX_msg = { 0 };
 8002c3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
		uint32_t userDataSize = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		uint8_t *pUserData;
		uint8_t header[100] = { 0 };
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	2260      	movs	r2, #96	; 0x60
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00e fa10 	bl	8011080 <memset>

		userDataSize = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8002c60:	4b99      	ldr	r3, [pc, #612]	; (8002ec8 <Authentication_TSK+0x2c4>)
 8002c62:	791b      	ldrb	r3, [r3, #4]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <Authentication_TSK+0x2c4>)
 8002c68:	795b      	ldrb	r3, [r3, #5]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		CAN_RXMsg.ActiveFlag = DISABLE;
 8002c72:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <Authentication_TSK+0x2c4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	73da      	strb	r2, [r3, #15]
		//Note the data from GUI in Content-Type: application/x-www-form-urlencoded for login but application/json for signup
		SEGGER_SYSVIEW_PrintfHost("User Data Size = %d", userDataSize);
 8002c78:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002c7c:	4893      	ldr	r0, [pc, #588]	; (8002ecc <Authentication_TSK+0x2c8>)
 8002c7e:	f7ff ff1d 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
		//Allocate user data buffer
		OS_ThreadSafe_Lock();
 8002c82:	f00c fbc9 	bl	800f418 <OS_ThreadSafe_Lock>
		pUserData = (uint8_t*) OS_HEAP_malloc(
				(userDataSize + 1) * sizeof(uint8_t));
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	3301      	adds	r3, #1
		pUserData = (uint8_t*) OS_HEAP_malloc(
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f00e f937 	bl	8010f00 <OS_HEAP_malloc>
 8002c92:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		OS_ThreadSafe_Unlock();
 8002c96:	f00c fbfd 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (pUserData == NULL) {
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <Authentication_TSK+0xa6>
			SEGGER_SYSVIEW_PrintfHost("user data Buffer not Allocated");
 8002ca2:	488b      	ldr	r0, [pc, #556]	; (8002ed0 <Authentication_TSK+0x2cc>)
 8002ca4:	f7ff ff0a 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			continue;
 8002ca8:	e10a      	b.n	8002ec0 <Authentication_TSK+0x2bc>
		}
		SEGGER_SYSVIEW_PrintfHost("user data Buffer Allocated!");
 8002caa:	488a      	ldr	r0, [pc, #552]	; (8002ed4 <Authentication_TSK+0x2d0>)
 8002cac:	f7ff ff06 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
		//receive user data from GUI
		CAN_ReceiveStr(pUserData, GUI_DATA_ID, userDataSize);
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2106      	movs	r1, #6
 8002cba:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002cbe:	f000 ffd5 	bl	8003c6c <CAN_ReceiveStr>

		SEGGER_SYSVIEW_PrintfHost("User Data Received!");
 8002cc2:	4885      	ldr	r0, [pc, #532]	; (8002ed8 <Authentication_TSK+0x2d4>)
 8002cc4:	f7ff fefa 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
		gsm_Tx.payload = pUserData;
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		gsm_Tx.payloadSize = userDataSize;
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		gsm_Tx.header = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		//Allocate GSM Internal Buffer
		OS_ThreadSafe_Lock();
 8002cde:	f00c fb9b 	bl	800f418 <OS_ThreadSafe_Lock>
		gsm_InternalBuffer = (uint8_t*) OS_HEAP_malloc(300 * sizeof(uint8_t));
 8002ce2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ce6:	f00e f90b 	bl	8010f00 <OS_HEAP_malloc>
 8002cea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		OS_ThreadSafe_Unlock();
 8002cee:	f00c fbd1 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (gsm_InternalBuffer == NULL) {
 8002cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <Authentication_TSK+0xfe>
			SEGGER_SYSVIEW_PrintfHost("gsm Buffer not Allocated");
 8002cfa:	4878      	ldr	r0, [pc, #480]	; (8002edc <Authentication_TSK+0x2d8>)
 8002cfc:	f7ff fede 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			continue;
 8002d00:	e0de      	b.n	8002ec0 <Authentication_TSK+0x2bc>
		}
		GSM_SetInternalBuffer(gsm_InternalBuffer, 300);
 8002d02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d06:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002d0a:	f001 fedd 	bl	8004ac8 <GSM_SetInternalBuffer>

		/*---------------------------TSK_LOGIN-----------------------------------------*/
		if (AuthenticationEvents & TSK_ENENT_LOGIN) {
 8002d0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <Authentication_TSK+0x12c>

			gsm_Tx.contentType = (uint8_t*) "application/x-www-form-urlencoded";
 8002d1a:	4b71      	ldr	r3, [pc, #452]	; (8002ee0 <Authentication_TSK+0x2dc>)
 8002d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			//request the token
			StrCat(url, (uint8_t*) BASE_URL, (uint8_t*) LOGIN_ENDNODE);
 8002d20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d24:	4a6f      	ldr	r2, [pc, #444]	; (8002ee4 <Authentication_TSK+0x2e0>)
 8002d26:	4970      	ldr	r1, [pc, #448]	; (8002ee8 <Authentication_TSK+0x2e4>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 f89e 	bl	8003e6a <StrCat>
 8002d2e:	e027      	b.n	8002d80 <Authentication_TSK+0x17c>

			/*---------------------------TSK_SIGNUP-----------------------------------------*/
		} else if (AuthenticationEvents & TSK_ENENT_SIGNUP) {
 8002d30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d021      	beq.n	8002d80 <Authentication_TSK+0x17c>

			uint8_t dataSizeStr[10] = { 0 };
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	809a      	strh	r2, [r3, #4]
			NumToSting(userDataSize, dataSizeStr);
 8002d4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002d54:	f001 f8d4 	bl	8003f00 <NumToSting>
			StrCat(header, (uint8_t*) "Connection: keep-alive;"
 8002d58:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	4963      	ldr	r1, [pc, #396]	; (8002eec <Authentication_TSK+0x2e8>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f882 	bl	8003e6a <StrCat>
					"Accept-Encoding: gzip, deflate, br;Accept: */*;"
					"Content-Length: ", dataSizeStr);
			gsm_Tx.header = header;
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gsm_Tx.contentType = (uint8_t*) "application/json";
 8002d6c:	4b60      	ldr	r3, [pc, #384]	; (8002ef0 <Authentication_TSK+0x2ec>)
 8002d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			StrCat(url, (uint8_t*) BASE_URL, (uint8_t*) SIGNUP_ENDNODE);
 8002d72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d76:	4a5f      	ldr	r2, [pc, #380]	; (8002ef4 <Authentication_TSK+0x2f0>)
 8002d78:	495b      	ldr	r1, [pc, #364]	; (8002ee8 <Authentication_TSK+0x2e4>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f875 	bl	8003e6a <StrCat>

		} else {
			//NOP
		}
		GSM_State = GSM_HTTPRequest(GSM_POST, url, &gsm_Tx, &gsm_RxDataSize);
 8002d80:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 8002d84:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002d88:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f001 ffab 	bl	8004ce8 <GSM_HTTPRequest>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		//Send the State to GUI
		TX_msg.format = CAN_STANDARD_FORMAT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		TX_msg.type = CAN_DATA_FRAME;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		TX_msg.id = GUI_LOGIN_ID;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		TX_msg.length = 2;
 8002daa:	2302      	movs	r3, #2
 8002dac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		TX_msg.data[0] = (0xFF) & GSM_State;
 8002db0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		TX_msg.data[1] = ((0xFF00) & GSM_State) >> 8;
 8002dba:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

		if (GSM_State != 200) {
 8002dc8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002dcc:	2bc8      	cmp	r3, #200	; 0xc8
 8002dce:	d002      	beq.n	8002dd6 <Authentication_TSK+0x1d2>
			SEGGER_SYSVIEW_PrintfHost(
 8002dd0:	4849      	ldr	r0, [pc, #292]	; (8002ef8 <Authentication_TSK+0x2f4>)
 8002dd2:	f7ff fe73 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Token is not Received or Signup failed!");

		}
		uint8_t date[11] = { 0 };
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	677b      	str	r3, [r7, #116]	; 0x74
 8002dda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f8c3 2003 	str.w	r2, [r3, #3]
		if ((AuthenticationEvents & TSK_ENENT_LOGIN) && (GSM_State == 200)) {
 8002de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d051      	beq.n	8002e96 <Authentication_TSK+0x292>
 8002df2:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002df6:	2bc8      	cmp	r3, #200	; 0xc8
 8002df8:	d14d      	bne.n	8002e96 <Authentication_TSK+0x292>
			//Allocate received data buffer
			OS_ThreadSafe_Lock();
 8002dfa:	f00c fb0d 	bl	800f418 <OS_ThreadSafe_Lock>
			gsm_RxData = (uint8_t*) OS_HEAP_malloc(gsm_RxDataSize);
 8002dfe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00e f87c 	bl	8010f00 <OS_HEAP_malloc>
 8002e08:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			OS_ThreadSafe_Unlock();
 8002e0c:	f00c fb42 	bl	800f494 <OS_ThreadSafe_Unlock>
			if (gsm_RxData == NULL) {
 8002e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <Authentication_TSK+0x21c>
				SEGGER_SYSVIEW_PrintfHost("received data Buffer not Allocated");
 8002e18:	4838      	ldr	r0, [pc, #224]	; (8002efc <Authentication_TSK+0x2f8>)
 8002e1a:	f7ff fe4f 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
				continue;
 8002e1e:	e04f      	b.n	8002ec0 <Authentication_TSK+0x2bc>
			}
			GSM_DownloadData(gsm_RxData, NULL);
 8002e20:	2100      	movs	r1, #0
 8002e22:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002e26:	f002 f913 	bl	8005050 <GSM_DownloadData>
			OS_MUTEX_LockBlocked(&AuthToken_Mutex);
 8002e2a:	4835      	ldr	r0, [pc, #212]	; (8002f00 <Authentication_TSK+0x2fc>)
 8002e2c:	f00d f82a 	bl	800fe84 <OS_MUTEX_LockBlocked>
			parse_json(gsm_RxData, (uint8_t*) "access_token", AuthToken);
 8002e30:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <Authentication_TSK+0x300>)
 8002e32:	4935      	ldr	r1, [pc, #212]	; (8002f08 <Authentication_TSK+0x304>)
 8002e34:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002e38:	f002 fa24 	bl	8005284 <parse_json>
			OS_MUTEX_Unlock(&AuthToken_Mutex);
 8002e3c:	4830      	ldr	r0, [pc, #192]	; (8002f00 <Authentication_TSK+0x2fc>)
 8002e3e:	f00d f86f 	bl	800ff20 <OS_MUTEX_Unlock>
			parse_json(gsm_RxData, (uint8_t*) "date", date);
 8002e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e46:	461a      	mov	r2, r3
 8002e48:	4930      	ldr	r1, [pc, #192]	; (8002f0c <Authentication_TSK+0x308>)
 8002e4a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002e4e:	f002 fa19 	bl	8005284 <parse_json>
			OS_HEAP_free(gsm_RxData);
 8002e52:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002e56:	f00e f821 	bl	8010e9c <OS_HEAP_free>
			SEGGER_SYSVIEW_PrintfHost("Token is Received!");
 8002e5a:	482d      	ldr	r0, [pc, #180]	; (8002f10 <Authentication_TSK+0x30c>)
 8002e5c:	f7ff fe2e 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			TX_msg.length = 8;
 8002e60:	2308      	movs	r3, #8
 8002e62:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			//dd-mm-yyyy
			//days
			TX_msg.data[2] = date[0];
 8002e66:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002e6a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			TX_msg.data[3] = date[1];
 8002e6e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002e72:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//months
			TX_msg.data[4] = date[3];
 8002e76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002e7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			TX_msg.data[5] = date[4];
 8002e7e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002e82:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			//years
			TX_msg.data[6] = date[8];
 8002e86:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002e8a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			TX_msg.data[7] = date[9];
 8002e8e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002e92:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		}
		CAN_Transmit(CAN1, &TX_msg);
 8002e96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	481d      	ldr	r0, [pc, #116]	; (8002f14 <Authentication_TSK+0x310>)
 8002e9e:	f001 fa07 	bl	80042b0 <CAN_Transmit>
		OS_ThreadSafe_Lock();
 8002ea2:	f00c fab9 	bl	800f418 <OS_ThreadSafe_Lock>
		OS_HEAP_free(pUserData);
 8002ea6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002eaa:	f00d fff7 	bl	8010e9c <OS_HEAP_free>
		OS_HEAP_free(gsm_InternalBuffer);
 8002eae:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002eb2:	f00d fff3 	bl	8010e9c <OS_HEAP_free>
		OS_ThreadSafe_Unlock();
 8002eb6:	f00c faed 	bl	800f494 <OS_ThreadSafe_Unlock>
		GSM_State = GSM_NOK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	while (1) {
 8002ec0:	e6b3      	b.n	8002c2a <Authentication_TSK+0x26>
 8002ec2:	bf00      	nop
 8002ec4:	08011320 	.word	0x08011320
 8002ec8:	20002e3c 	.word	0x20002e3c
 8002ecc:	08011340 	.word	0x08011340
 8002ed0:	08011354 	.word	0x08011354
 8002ed4:	08011374 	.word	0x08011374
 8002ed8:	08011390 	.word	0x08011390
 8002edc:	080113a4 	.word	0x080113a4
 8002ee0:	080113c0 	.word	0x080113c0
 8002ee4:	080113e4 	.word	0x080113e4
 8002ee8:	080113ec 	.word	0x080113ec
 8002eec:	08011418 	.word	0x08011418
 8002ef0:	08011470 	.word	0x08011470
 8002ef4:	08011484 	.word	0x08011484
 8002ef8:	0801148c 	.word	0x0801148c
 8002efc:	080114b4 	.word	0x080114b4
 8002f00:	20002e2c 	.word	0x20002e2c
 8002f04:	20002e50 	.word	0x20002e50
 8002f08:	080114d8 	.word	0x080114d8
 8002f0c:	080114e8 	.word	0x080114e8
 8002f10:	080114f0 	.word	0x080114f0
 8002f14:	40006400 	.word	0x40006400

08002f18 <Update_TSK>:

	}
}

void Update_TSK(void) {
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8002f1e:	af06      	add	r7, sp, #24
	OS_TASKEVENT UpdateEvents;
	CAN_msg TX_msg = { 0 };
 8002f20:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
	//uint16_t ecuId = 0;
	uint8_t updateState = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	uint8_t url[100] = { 0 };
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f3a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8002f3e:	2260      	movs	r2, #96	; 0x60
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00e f89c 	bl	8011080 <memset>
	uint16_t GSM_State = GSM_NOK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
	uint8_t *TxHeader;
	uint8_t *firmwareInfo;
	uint16_t firmwareInfoSize = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
	size_t decodedFileSize = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8


	while (1) {
		GSM_TxType TxData = { NULL, 0, NULL, NULL };
 8002f5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
		UpdateEvents = OS_TASKEVENT_GetSingleBlocked(
 8002f68:	2003      	movs	r0, #3
 8002f6a:	f00c fc23 	bl	800f7b4 <OS_TASKEVENT_GetSingleBlocked>
 8002f6e:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		TSK_EVENT_UPDATE | TSK_EVENT_CHECKUPDATE);

		/*------authorize----------*/
		OS_ThreadSafe_Lock();
 8002f72:	f00c fa51 	bl	800f418 <OS_ThreadSafe_Lock>
		TxHeader = (uint8_t*) OS_HEAP_malloc(200);
 8002f76:	20c8      	movs	r0, #200	; 0xc8
 8002f78:	f00d ffc2 	bl	8010f00 <OS_HEAP_malloc>
 8002f7c:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
		OS_ThreadSafe_Unlock();
 8002f80:	f00c fa88 	bl	800f494 <OS_ThreadSafe_Unlock>
		OS_MUTEX_LockBlocked(&AuthToken_Mutex);
 8002f84:	489f      	ldr	r0, [pc, #636]	; (8003204 <Update_TSK+0x2ec>)
 8002f86:	f00c ff7d 	bl	800fe84 <OS_MUTEX_LockBlocked>
		StrCat(TxHeader, (uint8_t*) "Authorization: Bearer ", AuthToken);
 8002f8a:	4a9f      	ldr	r2, [pc, #636]	; (8003208 <Update_TSK+0x2f0>)
 8002f8c:	499f      	ldr	r1, [pc, #636]	; (800320c <Update_TSK+0x2f4>)
 8002f8e:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8002f92:	f000 ff6a 	bl	8003e6a <StrCat>
		OS_MUTEX_Unlock(&AuthToken_Mutex);
 8002f96:	489b      	ldr	r0, [pc, #620]	; (8003204 <Update_TSK+0x2ec>)
 8002f98:	f00c ffc2 	bl	800ff20 <OS_MUTEX_Unlock>
		TxData.header = TxHeader;
 8002f9c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002fa0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		//Allocate GSM Internal Buffer
		OS_ThreadSafe_Lock();
 8002fa4:	f00c fa38 	bl	800f418 <OS_ThreadSafe_Lock>
		gsm_InternalBuffer = (uint8_t*) OS_HEAP_malloc(
				((UpdateEvents & TSK_EVENT_UPDATE) ? 30000 : 1000)
 8002fa8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002fac:	f003 0301 	and.w	r3, r3, #1
		gsm_InternalBuffer = (uint8_t*) OS_HEAP_malloc(
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <Update_TSK+0xa2>
 8002fb4:	f247 5330 	movw	r3, #30000	; 0x7530
 8002fb8:	e001      	b.n	8002fbe <Update_TSK+0xa6>
 8002fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f00d ff9e 	bl	8010f00 <OS_HEAP_malloc>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a92      	ldr	r2, [pc, #584]	; (8003210 <Update_TSK+0x2f8>)
 8002fc8:	6013      	str	r3, [r2, #0]
						* sizeof(uint8_t));
		OS_ThreadSafe_Unlock();
 8002fca:	f00c fa63 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (gsm_InternalBuffer == NULL) {
 8002fce:	4b90      	ldr	r3, [pc, #576]	; (8003210 <Update_TSK+0x2f8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <Update_TSK+0xc4>
			SEGGER_SYSVIEW_PrintfHost("gsm Buffer not Allocated");
 8002fd6:	488f      	ldr	r0, [pc, #572]	; (8003214 <Update_TSK+0x2fc>)
 8002fd8:	f7ff fd70 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
		}
		GSM_SetInternalBuffer(gsm_InternalBuffer,
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	; (8003210 <Update_TSK+0x2f8>)
 8002fde:	681a      	ldr	r2, [r3, #0]
				((UpdateEvents & TSK_EVENT_UPDATE) ? 30000 : 1000));
 8002fe0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002fe4:	f003 0301 	and.w	r3, r3, #1
		GSM_SetInternalBuffer(gsm_InternalBuffer,
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <Update_TSK+0xda>
 8002fec:	f247 5330 	movw	r3, #30000	; 0x7530
 8002ff0:	e001      	b.n	8002ff6 <Update_TSK+0xde>
 8002ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f001 fd65 	bl	8004ac8 <GSM_SetInternalBuffer>

		/*---------------------------------------TSK_UPDATE-----------------------------------------*/

		if (UpdateEvents & TSK_EVENT_UPDATE) {
 8002ffe:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8286 	beq.w	8003518 <Update_TSK+0x600>

			//firmware_id in ASCII
			uint8_t firmware_id[9] = { 0 };
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003012:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	711a      	strb	r2, [r3, #4]
			for (uint8_t counter = 0; counter <= CAN_RXMsg.length - 1;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8003022:	e010      	b.n	8003046 <Update_TSK+0x12e>
					counter++) {
				firmware_id[counter] = CAN_RXMsg.data[counter];
 8003024:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8003028:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800302c:	497a      	ldr	r1, [pc, #488]	; (8003218 <Update_TSK+0x300>)
 800302e:	440a      	add	r2, r1
 8003030:	7912      	ldrb	r2, [r2, #4]
 8003032:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003036:	443b      	add	r3, r7
 8003038:	f803 2cc4 	strb.w	r2, [r3, #-196]
					counter++) {
 800303c:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8003040:	3301      	adds	r3, #1
 8003042:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
			for (uint8_t counter = 0; counter <= CAN_RXMsg.length - 1;
 8003046:	4b74      	ldr	r3, [pc, #464]	; (8003218 <Update_TSK+0x300>)
 8003048:	7b1b      	ldrb	r3, [r3, #12]
 800304a:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 800304e:	429a      	cmp	r2, r3
 8003050:	d3e8      	bcc.n	8003024 <Update_TSK+0x10c>
			}
			CAN_RXMsg.ActiveFlag = DISABLE;
 8003052:	4b71      	ldr	r3, [pc, #452]	; (8003218 <Update_TSK+0x300>)
 8003054:	2200      	movs	r2, #0
 8003056:	73da      	strb	r2, [r3, #15]

			/*----------------URL----------------*/
			StrCat(url, (uint8_t*) BASE_URL, (uint8_t*) GETFIRMWARE_ENDNODE);
 8003058:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800305c:	4a6f      	ldr	r2, [pc, #444]	; (800321c <Update_TSK+0x304>)
 800305e:	4970      	ldr	r1, [pc, #448]	; (8003220 <Update_TSK+0x308>)
 8003060:	4618      	mov	r0, r3
 8003062:	f000 ff02 	bl	8003e6a <StrCat>
			StrCat(url, url, (uint8_t*) firmware_id);
 8003066:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 800306a:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800306e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fef9 	bl	8003e6a <StrCat>
			StrCat(url, url, (uint8_t*) ".fota");
 8003078:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800307c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003080:	4a68      	ldr	r2, [pc, #416]	; (8003224 <Update_TSK+0x30c>)
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fef1 	bl	8003e6a <StrCat>

			GSM_State = GSM_HTTPRequest(GSM_GET, url, &TxData,
 8003088:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800308c:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8003090:	4b65      	ldr	r3, [pc, #404]	; (8003228 <Update_TSK+0x310>)
 8003092:	2000      	movs	r0, #0
 8003094:	f001 fe28 	bl	8004ce8 <GSM_HTTPRequest>
 8003098:	4603      	mov	r3, r0
 800309a:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
					&firmwareBase64Size);
			//send state to GUI
			TX_msg.id = GUI_UPDATE_RQ_ID;
 800309e:	2304      	movs	r3, #4
 80030a0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			TX_msg.format = CAN_STANDARD_FORMAT;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			TX_msg.length = 4;
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = (uint8_t) (0xFF & GSM_State);
 80030b6:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			TX_msg.data[1] = (uint8_t) ((0xFF00 & GSM_State) >> 8);
 80030c0:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
			TX_msg.data[2] = (uint8_t) (0xFF & firmwareBase64Size);
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <Update_TSK+0x310>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
			TX_msg.data[3] = (uint8_t) ((0xFF00 & firmwareBase64Size) >> 8);
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <Update_TSK+0x310>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

			CAN_Transmit(CAN1, &TX_msg);
 80030e6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80030ea:	4619      	mov	r1, r3
 80030ec:	484f      	ldr	r0, [pc, #316]	; (800322c <Update_TSK+0x314>)
 80030ee:	f001 f8df 	bl	80042b0 <CAN_Transmit>
			if (GSM_State == 200) {
 80030f2:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80030f6:	2bc8      	cmp	r3, #200	; 0xc8
 80030f8:	d137      	bne.n	800316a <Update_TSK+0x252>
				OS_ThreadSafe_Lock();
 80030fa:	f00c f98d 	bl	800f418 <OS_ThreadSafe_Lock>
				firmwareBase64File = (uint8_t*) OS_HEAP_malloc(
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <Update_TSK+0x310>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f00d fefc 	bl	8010f00 <OS_HEAP_malloc>
 8003108:	4603      	mov	r3, r0
 800310a:	4a49      	ldr	r2, [pc, #292]	; (8003230 <Update_TSK+0x318>)
 800310c:	6013      	str	r3, [r2, #0]
						firmwareBase64Size);
				if (firmwareBase64File == NULL) {
 800310e:	4b48      	ldr	r3, [pc, #288]	; (8003230 <Update_TSK+0x318>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <Update_TSK+0x218>
					SEGGER_SYSVIEW_PrintfHost("Firmware is not Received!");
 8003116:	4847      	ldr	r0, [pc, #284]	; (8003234 <Update_TSK+0x31c>)
 8003118:	f7ff fcd0 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					OS_HEAP_free(TxHeader);
 800311c:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8003120:	f00d febc 	bl	8010e9c <OS_HEAP_free>
					OS_HEAP_free(gsm_InternalBuffer);
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <Update_TSK+0x2f8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f00d feb7 	bl	8010e9c <OS_HEAP_free>
					continue;
 800312e:	e341      	b.n	80037b4 <Update_TSK+0x89c>
				}
				OS_ThreadSafe_Unlock();
 8003130:	f00c f9b0 	bl	800f494 <OS_ThreadSafe_Unlock>
				OS_TASKEVENT_Set(&CB_SendDownloadProgress_TSK,
 8003134:	2101      	movs	r1, #1
 8003136:	4840      	ldr	r0, [pc, #256]	; (8003238 <Update_TSK+0x320>)
 8003138:	f00c fb9a 	bl	800f870 <OS_TASKEVENT_Set>
				TSK_ENENT_SENDPROGRESS);
				GSM_DownloadData(firmwareBase64File, NULL);
 800313c:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <Update_TSK+0x318>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 ff84 	bl	8005050 <GSM_DownloadData>
				continue;
			}


			//get firmware Size
			mbedtls_base64_decode(NULL, 0, &decodedFileSize, firmwareBase64File,
 8003148:	4b39      	ldr	r3, [pc, #228]	; (8003230 <Update_TSK+0x318>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a36      	ldr	r2, [pc, #216]	; (8003228 <Update_TSK+0x310>)
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	4611      	mov	r1, r2
 8003152:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8003156:	9100      	str	r1, [sp, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	2000      	movs	r0, #0
 800315c:	f005 fb8c 	bl	8008878 <mbedtls_base64_decode>
					firmwareBase64Size);

			if (decodedFileSize == 0) {
 8003160:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <Update_TSK+0x27e>
 8003168:	e00c      	b.n	8003184 <Update_TSK+0x26c>
				SEGGER_SYSVIEW_PrintfHost("Firmware is not Received!");
 800316a:	4832      	ldr	r0, [pc, #200]	; (8003234 <Update_TSK+0x31c>)
 800316c:	f7ff fca6 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
				OS_HEAP_free(TxHeader);
 8003170:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8003174:	f00d fe92 	bl	8010e9c <OS_HEAP_free>
				OS_HEAP_free(gsm_InternalBuffer);
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <Update_TSK+0x2f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f00d fe8d 	bl	8010e9c <OS_HEAP_free>
				continue;
 8003182:	e317      	b.n	80037b4 <Update_TSK+0x89c>
				SEGGER_SYSVIEW_PrintfHost("Base64 decoding Error!");
 8003184:	482d      	ldr	r0, [pc, #180]	; (800323c <Update_TSK+0x324>)
 8003186:	f7ff fc99 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
				OS_HEAP_free(firmwareBase64File);
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <Update_TSK+0x318>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f00d fe84 	bl	8010e9c <OS_HEAP_free>
				continue;
 8003194:	e30e      	b.n	80037b4 <Update_TSK+0x89c>
			}
			OS_ThreadSafe_Lock();
 8003196:	f00c f93f 	bl	800f418 <OS_ThreadSafe_Lock>
			firmwareFile = (uint8_t*) OS_HEAP_malloc(decodedFileSize + 5);
 800319a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800319e:	3305      	adds	r3, #5
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00d fead 	bl	8010f00 <OS_HEAP_malloc>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <Update_TSK+0x328>)
 80031aa:	6013      	str	r3, [r2, #0]
			OS_ThreadSafe_Unlock();
 80031ac:	f00c f972 	bl	800f494 <OS_ThreadSafe_Unlock>

			int32_t decodingStatus = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			decodingStatus = mbedtls_base64_decode(firmwareFile,
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <Update_TSK+0x328>)
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <Update_TSK+0x318>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a19      	ldr	r2, [pc, #100]	; (8003228 <Update_TSK+0x310>)
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	9200      	str	r2, [sp, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f005 fb55 	bl	8008878 <mbedtls_base64_decode>
 80031ce:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
					decodedFileSize, NULL, firmwareBase64File,
					firmwareBase64Size);
			if ((decodingStatus == MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL)
 80031d2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80031d6:	f113 0f2a 	cmn.w	r3, #42	; 0x2a
 80031da:	d004      	beq.n	80031e6 <Update_TSK+0x2ce>
					|| (decodingStatus == MBEDTLS_ERR_BASE64_INVALID_CHARACTER)) {
 80031dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80031e0:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 80031e4:	d12e      	bne.n	8003244 <Update_TSK+0x32c>
				SEGGER_SYSVIEW_PrintfHost("Base64 decoding Error!");
 80031e6:	4815      	ldr	r0, [pc, #84]	; (800323c <Update_TSK+0x324>)
 80031e8:	f7ff fc68 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
				OS_HEAP_free(firmwareBase64File);
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <Update_TSK+0x318>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f00d fe53 	bl	8010e9c <OS_HEAP_free>
				OS_HEAP_free(firmwareFile);
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <Update_TSK+0x328>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f00d fe4e 	bl	8010e9c <OS_HEAP_free>
				continue;
 8003200:	e2d8      	b.n	80037b4 <Update_TSK+0x89c>
 8003202:	bf00      	nop
 8003204:	20002e2c 	.word	0x20002e2c
 8003208:	20002e50 	.word	0x20002e50
 800320c:	08011504 	.word	0x08011504
 8003210:	20002e4c 	.word	0x20002e4c
 8003214:	080113a4 	.word	0x080113a4
 8003218:	20002e3c 	.word	0x20002e3c
 800321c:	0801151c 	.word	0x0801151c
 8003220:	080113ec 	.word	0x080113ec
 8003224:	08011530 	.word	0x08011530
 8003228:	20002eec 	.word	0x20002eec
 800322c:	40006400 	.word	0x40006400
 8003230:	20002ee8 	.word	0x20002ee8
 8003234:	08011538 	.word	0x08011538
 8003238:	20002720 	.word	0x20002720
 800323c:	08011554 	.word	0x08011554
 8003240:	20002ef0 	.word	0x20002ef0
			}
			OS_HEAP_free(firmwareBase64File);
 8003244:	4baa      	ldr	r3, [pc, #680]	; (80034f0 <Update_TSK+0x5d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f00d fe27 	bl	8010e9c <OS_HEAP_free>

			firmwareFileSize = decodedFileSize - (IV_LENGTH + TAG_LENGTH);
 800324e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003252:	3b1c      	subs	r3, #28
 8003254:	4aa7      	ldr	r2, [pc, #668]	; (80034f4 <Update_TSK+0x5dc>)
 8003256:	6013      	str	r3, [r2, #0]

			mbedtls_gcm_context ctx = { 0 };
 8003258:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800325c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003260:	4618      	mov	r0, r3
 8003262:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003266:	461a      	mov	r2, r3
 8003268:	2100      	movs	r1, #0
 800326a:	f00d ff09 	bl	8011080 <memset>
			int32_t decryptionStatus = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

			mbedtls_gcm_init(&ctx);
 8003274:	463b      	mov	r3, r7
 8003276:	4618      	mov	r0, r3
 8003278:	f00a f856 	bl	800d328 <mbedtls_gcm_init>
			mbedtls_gcm_setkey(&ctx, MBEDTLS_CIPHER_ID_AES, decryptionKey, 128);
 800327c:	4638      	mov	r0, r7
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	4a9d      	ldr	r2, [pc, #628]	; (80034f8 <Update_TSK+0x5e0>)
 8003282:	2102      	movs	r1, #2
 8003284:	f00a f9bf 	bl	800d606 <mbedtls_gcm_setkey>

			decryptionStatus = mbedtls_gcm_auth_decrypt(&ctx, firmwareFileSize,
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <Update_TSK+0x5dc>)
 800328a:	681c      	ldr	r4, [r3, #0]
 800328c:	4b9b      	ldr	r3, [pc, #620]	; (80034fc <Update_TSK+0x5e4>)
 800328e:	681d      	ldr	r5, [r3, #0]
 8003290:	4b9a      	ldr	r3, [pc, #616]	; (80034fc <Update_TSK+0x5e4>)
 8003292:	681a      	ldr	r2, [r3, #0]
					firmwareFile,
					IV_LENGTH,
					NULL, 0, (firmwareFile + decodedFileSize - TAG_LENGTH),
 8003294:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003298:	3b10      	subs	r3, #16
 800329a:	4413      	add	r3, r2
			decryptionStatus = mbedtls_gcm_auth_decrypt(&ctx, firmwareFileSize,
 800329c:	4a97      	ldr	r2, [pc, #604]	; (80034fc <Update_TSK+0x5e4>)
 800329e:	6812      	ldr	r2, [r2, #0]
					TAG_LENGTH, (firmwareFile + IV_LENGTH), firmwareFile);
 80032a0:	320c      	adds	r2, #12
			decryptionStatus = mbedtls_gcm_auth_decrypt(&ctx, firmwareFileSize,
 80032a2:	4996      	ldr	r1, [pc, #600]	; (80034fc <Update_TSK+0x5e4>)
 80032a4:	6809      	ldr	r1, [r1, #0]
 80032a6:	4638      	mov	r0, r7
 80032a8:	9105      	str	r1, [sp, #20]
 80032aa:	9204      	str	r2, [sp, #16]
 80032ac:	2210      	movs	r2, #16
 80032ae:	9203      	str	r2, [sp, #12]
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	230c      	movs	r3, #12
 80032bc:	462a      	mov	r2, r5
 80032be:	4621      	mov	r1, r4
 80032c0:	f00a ff67 	bl	800e192 <mbedtls_gcm_auth_decrypt>
 80032c4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
			if ((decryptionStatus == MBEDTLS_ERR_GCM_AUTH_FAILED)
 80032c8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80032cc:	f113 0f12 	cmn.w	r3, #18
 80032d0:	d009      	beq.n	80032e6 <Update_TSK+0x3ce>
					|| (decryptionStatus == MBEDTLS_ERR_GCM_BAD_INPUT)
 80032d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80032d6:	f113 0f14 	cmn.w	r3, #20
 80032da:	d004      	beq.n	80032e6 <Update_TSK+0x3ce>
					|| (decryptionStatus == MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL)) {
 80032dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80032e0:	f113 0f16 	cmn.w	r3, #22
 80032e4:	d10a      	bne.n	80032fc <Update_TSK+0x3e4>
				SEGGER_SYSVIEW_PrintfHost("decryption failed code : %d !",
 80032e6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80032ea:	4885      	ldr	r0, [pc, #532]	; (8003500 <Update_TSK+0x5e8>)
 80032ec:	f7ff fbe6 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
						decryptionStatus);
				OS_HEAP_free(firmwareFile);
 80032f0:	4b82      	ldr	r3, [pc, #520]	; (80034fc <Update_TSK+0x5e4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00d fdd1 	bl	8010e9c <OS_HEAP_free>
				continue;
 80032fa:	e25b      	b.n	80037b4 <Update_TSK+0x89c>
			}
			mbedtls_gcm_free(&ctx);
 80032fc:	463b      	mov	r3, r7
 80032fe:	4618      	mov	r0, r3
 8003300:	f00a ff96 	bl	800e230 <mbedtls_gcm_free>

			// So, i have now the firmware in 'firmwareFile' buffer and its size is 'firmwareFileSize'
			// The next step is to request bootloader from the ECU then send and flash it
			/*----------------BL----------------*/
			//BL Request
			TX_msg.id = ECU_BOOTLAODER_RQ_ID;
 8003304:	f240 1323 	movw	r3, #291	; 0x123
 8003308:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			TX_msg.format = CAN_STANDARD_FORMAT;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			TX_msg.length = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = updateState;
 800331e:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8003322:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			CAN_Transmit(CAN1, &TX_msg);
 8003326:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800332a:	4619      	mov	r1, r3
 800332c:	4875      	ldr	r0, [pc, #468]	; (8003504 <Update_TSK+0x5ec>)
 800332e:	f000 ffbf 	bl	80042b0 <CAN_Transmit>

			//Wait for BL ACK
			while ((CAN_RXMsg.ActiveFlag != ENABLE)
 8003332:	bf00      	nop
 8003334:	4b74      	ldr	r3, [pc, #464]	; (8003508 <Update_TSK+0x5f0>)
 8003336:	7bdb      	ldrb	r3, [r3, #15]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d1fb      	bne.n	8003334 <Update_TSK+0x41c>
					|| (CAN_RXMsg.id != ECU_BOOTLAODER_RQ_ID))
 800333c:	4b72      	ldr	r3, [pc, #456]	; (8003508 <Update_TSK+0x5f0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f240 1223 	movw	r2, #291	; 0x123
 8003344:	4293      	cmp	r3, r2
 8003346:	d1f5      	bne.n	8003334 <Update_TSK+0x41c>
				;
			CAN_RXMsg.ActiveFlag = DISABLE;
 8003348:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <Update_TSK+0x5f0>)
 800334a:	2200      	movs	r2, #0
 800334c:	73da      	strb	r2, [r3, #15]
			SEGGER_SYSVIEW_PrintfHost("BootLoader ACK received!");
 800334e:	486f      	ldr	r0, [pc, #444]	; (800350c <Update_TSK+0x5f4>)
 8003350:	f7ff fbb4 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>

			//image size
			TX_msg.format = CAN_STANDARD_FORMAT;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			TX_msg.length = 2;
 8003360:	2302      	movs	r3, #2
 8003362:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = (uint8_t) (0xFF & firmwareFileSize);
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <Update_TSK+0x5dc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			TX_msg.data[1] = (uint8_t) ((0xFF00 & firmwareFileSize) >> 8);
 8003370:	4b60      	ldr	r3, [pc, #384]	; (80034f4 <Update_TSK+0x5dc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
			SEGGER_SYSVIEW_PrintfHost("Sending image to ECU");
 800337c:	4864      	ldr	r0, [pc, #400]	; (8003510 <Update_TSK+0x5f8>)
 800337e:	f7ff fb9d 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			CAN_Transmit(CAN1, &TX_msg);
 8003382:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003386:	4619      	mov	r1, r3
 8003388:	485e      	ldr	r0, [pc, #376]	; (8003504 <Update_TSK+0x5ec>)
 800338a:	f000 ff91 	bl	80042b0 <CAN_Transmit>
			TX_msg.length = 8;
 800338e:	2308      	movs	r3, #8
 8003390:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			//image
			uint16_t DWCounter = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	f8a7 327c 	strh.w	r3, [r7, #636]	; 0x27c
			while (DWCounter <= firmwareFileSize) {
 800339a:	e04e      	b.n	800343a <Update_TSK+0x522>
				for (int16_t datacounter = 0; datacounter < 8; datacounter++) {
 800339c:	2300      	movs	r3, #0
 800339e:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
 80033a2:	e016      	b.n	80033d2 <Update_TSK+0x4ba>
					TX_msg.data[datacounter] = (firmwareFile[DWCounter
 80033a4:	4b55      	ldr	r3, [pc, #340]	; (80034fc <Update_TSK+0x5e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
							+ datacounter]);
 80033a8:	f8b7 127c 	ldrh.w	r1, [r7, #636]	; 0x27c
 80033ac:	f9b7 227a 	ldrsh.w	r2, [r7, #634]	; 0x27a
 80033b0:	440a      	add	r2, r1
					TX_msg.data[datacounter] = (firmwareFile[DWCounter
 80033b2:	441a      	add	r2, r3
 80033b4:	f9b7 327a 	ldrsh.w	r3, [r7, #634]	; 0x27a
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033be:	443b      	add	r3, r7
 80033c0:	f803 2c38 	strb.w	r2, [r3, #-56]
				for (int16_t datacounter = 0; datacounter < 8; datacounter++) {
 80033c4:	f9b7 327a 	ldrsh.w	r3, [r7, #634]	; 0x27a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
 80033d2:	f9b7 327a 	ldrsh.w	r3, [r7, #634]	; 0x27a
 80033d6:	2b07      	cmp	r3, #7
 80033d8:	dde4      	ble.n	80033a4 <Update_TSK+0x48c>
				}
				if(firmwareFileSize - DWCounter < 8){
 80033da:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <Update_TSK+0x5dc>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f8b7 327c 	ldrh.w	r3, [r7, #636]	; 0x27c
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b07      	cmp	r3, #7
 80033e6:	d809      	bhi.n	80033fc <Update_TSK+0x4e4>
					TX_msg.length = firmwareFileSize - DWCounter;
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <Update_TSK+0x5dc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	f8b7 327c 	ldrh.w	r3, [r7, #636]	; 0x27c
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
				}
				CAN_Transmit(CAN1, &TX_msg);
 80033fc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003400:	4619      	mov	r1, r3
 8003402:	4840      	ldr	r0, [pc, #256]	; (8003504 <Update_TSK+0x5ec>)
 8003404:	f000 ff54 	bl	80042b0 <CAN_Transmit>
				while ((CAN_RXMsg.ActiveFlag != ENABLE)
 8003408:	bf00      	nop
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <Update_TSK+0x5f0>)
 800340c:	7bdb      	ldrb	r3, [r3, #15]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d1fb      	bne.n	800340a <Update_TSK+0x4f2>
						|| (CAN_RXMsg.id != ECU_BOOTLAODER_RQ_ID))
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <Update_TSK+0x5f0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f240 1223 	movw	r2, #291	; 0x123
 800341a:	4293      	cmp	r3, r2
 800341c:	d1f5      	bne.n	800340a <Update_TSK+0x4f2>
					;
				CAN_RXMsg.ActiveFlag = DISABLE;
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <Update_TSK+0x5f0>)
 8003420:	2200      	movs	r2, #0
 8003422:	73da      	strb	r2, [r3, #15]
				DWCounter = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8003424:	4b38      	ldr	r3, [pc, #224]	; (8003508 <Update_TSK+0x5f0>)
 8003426:	791b      	ldrb	r3, [r3, #4]
 8003428:	b21a      	sxth	r2, r3
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <Update_TSK+0x5f0>)
 800342c:	795b      	ldrb	r3, [r3, #5]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	b21b      	sxth	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	b21b      	sxth	r3, r3
 8003436:	f8a7 327c 	strh.w	r3, [r7, #636]	; 0x27c
			while (DWCounter <= firmwareFileSize) {
 800343a:	f8b7 227c 	ldrh.w	r2, [r7, #636]	; 0x27c
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <Update_TSK+0x5dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d9aa      	bls.n	800339c <Update_TSK+0x484>
			}
			OS_HEAP_free(firmwareFile);
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <Update_TSK+0x5e4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f00d fd26 	bl	8010e9c <OS_HEAP_free>
			SEGGER_SYSVIEW_PrintfHost("Image received! in ECU!");
 8003450:	4830      	ldr	r0, [pc, #192]	; (8003514 <Update_TSK+0x5fc>)
 8003452:	f7ff fb33 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>

			//Wait for BL ACK
			OS_TIME Time = OS_TIME_GetTicks();
 8003456:	f00c f999 	bl	800f78c <OS_TIME_GetTicks>
 800345a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
			while ((CAN_RXMsg.ActiveFlag != ENABLE)
 800345e:	e01f      	b.n	80034a0 <Update_TSK+0x588>
					|| (CAN_RXMsg.id != ECU_BOOTLAODER_RQ_ID)){
				if((OS_TIME_GetTicks()- Time) > 3000){
 8003460:	f00c f994 	bl	800f78c <OS_TIME_GetTicks>
 8003464:	4602      	mov	r2, r0
 8003466:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003470:	4293      	cmp	r3, r2
 8003472:	dd15      	ble.n	80034a0 <Update_TSK+0x588>
					TX_msg.id = GUI_UPDATE_RQ_ID;
 8003474:	2304      	movs	r3, #4
 8003476:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					TX_msg.format = CAN_STANDARD_FORMAT;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					TX_msg.type = CAN_DATA_FRAME;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
					TX_msg.length = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
					TX_msg.data[0] = BL_TIMEOUT;
 800348c:	2366      	movs	r3, #102	; 0x66
 800348e:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
					CAN_Transmit(CAN1, &TX_msg);
 8003492:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003496:	4619      	mov	r1, r3
 8003498:	481a      	ldr	r0, [pc, #104]	; (8003504 <Update_TSK+0x5ec>)
 800349a:	f000 ff09 	bl	80042b0 <CAN_Transmit>
					break;
 800349e:	e009      	b.n	80034b4 <Update_TSK+0x59c>
			while ((CAN_RXMsg.ActiveFlag != ENABLE)
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <Update_TSK+0x5f0>)
 80034a2:	7bdb      	ldrb	r3, [r3, #15]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d1db      	bne.n	8003460 <Update_TSK+0x548>
					|| (CAN_RXMsg.id != ECU_BOOTLAODER_RQ_ID)){
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <Update_TSK+0x5f0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f240 1223 	movw	r2, #291	; 0x123
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d1d5      	bne.n	8003460 <Update_TSK+0x548>
				}
			}
			if(CAN_RXMsg.ActiveFlag != DISABLE){
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <Update_TSK+0x5f0>)
 80034b6:	7bdb      	ldrb	r3, [r3, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <Update_TSK+0x5d0>
				TX_msg.id = GUI_UPDATE_RQ_ID;
 80034bc:	2304      	movs	r3, #4
 80034be:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				TX_msg.format = CAN_STANDARD_FORMAT;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
				TX_msg.type = CAN_DATA_FRAME;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
				TX_msg.length = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
				TX_msg.data[0] = CAN_RXMsg.data[0];
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <Update_TSK+0x5f0>)
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
				CAN_Transmit(CAN1, &TX_msg);
 80034dc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80034e0:	4619      	mov	r1, r3
 80034e2:	4808      	ldr	r0, [pc, #32]	; (8003504 <Update_TSK+0x5ec>)
 80034e4:	f000 fee4 	bl	80042b0 <CAN_Transmit>
			}
			CAN_RXMsg.ActiveFlag = DISABLE;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <Update_TSK+0x5f0>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	73da      	strb	r2, [r3, #15]
 80034ee:	e158      	b.n	80037a2 <Update_TSK+0x88a>
 80034f0:	20002ee8 	.word	0x20002ee8
 80034f4:	20002ef4 	.word	0x20002ef4
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20002ef0 	.word	0x20002ef0
 8003500:	0801156c 	.word	0x0801156c
 8003504:	40006400 	.word	0x40006400
 8003508:	20002e3c 	.word	0x20002e3c
 800350c:	0801158c 	.word	0x0801158c
 8003510:	080115a8 	.word	0x080115a8
 8003514:	080115c0 	.word	0x080115c0



			/*-----------------------------------TSK_CHECKUPDATE--------------------------------------*/

		} else if (UpdateEvents & TSK_EVENT_CHECKUPDATE) {
 8003518:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 813e 	beq.w	80037a2 <Update_TSK+0x88a>
			uint8_t metaDataSize = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
			uint8_t *pmetaData;
			uint8_t firmware_version[20] = { 0 };
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003532:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]


			metaDataSize = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8003540:	4b9d      	ldr	r3, [pc, #628]	; (80037b8 <Update_TSK+0x8a0>)
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	b25a      	sxtb	r2, r3
 8003546:	4b9c      	ldr	r3, [pc, #624]	; (80037b8 <Update_TSK+0x8a0>)
 8003548:	795b      	ldrb	r3, [r3, #5]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	b25b      	sxtb	r3, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	b25b      	sxtb	r3, r3
 8003552:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
			CAN_RXMsg.ActiveFlag = DISABLE;
 8003556:	4b98      	ldr	r3, [pc, #608]	; (80037b8 <Update_TSK+0x8a0>)
 8003558:	2200      	movs	r2, #0
 800355a:	73da      	strb	r2, [r3, #15]
			SEGGER_SYSVIEW_PrintfHost("Meta Data Size = %d", metaDataSize);
 800355c:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8003560:	4619      	mov	r1, r3
 8003562:	4896      	ldr	r0, [pc, #600]	; (80037bc <Update_TSK+0x8a4>)
 8003564:	f7ff faaa 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			OS_ThreadSafe_Lock();
 8003568:	f00b ff56 	bl	800f418 <OS_ThreadSafe_Lock>
			pmetaData = (uint8_t*) OS_HEAP_malloc(
 800356c:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8003570:	4618      	mov	r0, r3
 8003572:	f00d fcc5 	bl	8010f00 <OS_HEAP_malloc>
 8003576:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
					metaDataSize * sizeof(uint8_t));
			OS_ThreadSafe_Unlock();
 800357a:	f00b ff8b 	bl	800f494 <OS_ThreadSafe_Unlock>
			if (pmetaData == NULL) {
 800357e:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <Update_TSK+0x674>
				SEGGER_SYSVIEW_PrintfHost("meta data Buffer not Allocated");
 8003586:	488e      	ldr	r0, [pc, #568]	; (80037c0 <Update_TSK+0x8a8>)
 8003588:	f7ff fa98 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			}
			SEGGER_SYSVIEW_PrintfHost("meta data Buffer Allocated");
 800358c:	488d      	ldr	r0, [pc, #564]	; (80037c4 <Update_TSK+0x8ac>)
 800358e:	f7ff fa95 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			//receive meta data from GUI
			CAN_ReceiveStr(pmetaData, GUI_DATA_ID, metaDataSize);
 8003592:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	2106      	movs	r1, #6
 800359c:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80035a0:	f000 fb64 	bl	8003c6c <CAN_ReceiveStr>

			SEGGER_SYSVIEW_PrintfHost("meta Data Received!");
 80035a4:	4888      	ldr	r0, [pc, #544]	; (80037c8 <Update_TSK+0x8b0>)
 80035a6:	f7ff fa89 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>

			//car_id=22&ecu_id=22
			StrCat(url, (uint8_t*) BASE_URL,
 80035aa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035ae:	4a87      	ldr	r2, [pc, #540]	; (80037cc <Update_TSK+0x8b4>)
 80035b0:	4987      	ldr	r1, [pc, #540]	; (80037d0 <Update_TSK+0x8b8>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc59 	bl	8003e6a <StrCat>
					(uint8_t*) GETLAST_FIRMWARE_INFO_ENDNODE);
			StrCat(url, url, (uint8_t*) pmetaData);
 80035b8:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 80035bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035c0:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fc50 	bl	8003e6a <StrCat>

			GSM_State = GSM_HTTPRequest(GSM_GET, url, &TxData,
 80035ca:	f507 73ef 	add.w	r3, r7, #478	; 0x1de
 80035ce:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80035d2:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 80035d6:	2000      	movs	r0, #0
 80035d8:	f001 fb86 	bl	8004ce8 <GSM_HTTPRequest>
 80035dc:	4603      	mov	r3, r0
 80035de:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
					&firmwareInfoSize);
			//send state to GUI
			TX_msg.id = GUI_CHECKUPDATE_RQ_ID;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			TX_msg.format = CAN_STANDARD_FORMAT;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			TX_msg.length = 2;
 80035f4:	2302      	movs	r3, #2
 80035f6:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = (uint8_t) (0xFF & GSM_State);
 80035fa:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			TX_msg.data[1] = (uint8_t) ((0xFF00 & GSM_State) >> 8);
 8003604:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	b29b      	uxth	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
			CAN_Transmit(CAN1, &TX_msg);
 8003612:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003616:	4619      	mov	r1, r3
 8003618:	486e      	ldr	r0, [pc, #440]	; (80037d4 <Update_TSK+0x8bc>)
 800361a:	f000 fe49 	bl	80042b0 <CAN_Transmit>

			if (GSM_State != 200) {
 800361e:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 8003622:	2bc8      	cmp	r3, #200	; 0xc8
 8003624:	d00f      	beq.n	8003646 <Update_TSK+0x72e>
				SEGGER_SYSVIEW_PrintfHost("Request Error State = %d",
 8003626:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 800362a:	4619      	mov	r1, r3
 800362c:	486a      	ldr	r0, [pc, #424]	; (80037d8 <Update_TSK+0x8c0>)
 800362e:	f7ff fa45 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
						GSM_State);
				OS_HEAP_free(TxHeader);
 8003632:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8003636:	f00d fc31 	bl	8010e9c <OS_HEAP_free>
				OS_HEAP_free(gsm_InternalBuffer);
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <Update_TSK+0x8c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f00d fc2c 	bl	8010e9c <OS_HEAP_free>
				continue;
 8003644:	e0b6      	b.n	80037b4 <Update_TSK+0x89c>
			}

			TX_msg.id = ECU_FIRMWAREVERSION_ID;
 8003646:	2307      	movs	r3, #7
 8003648:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			TX_msg.format = CAN_STANDARD_FORMAT;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			CAN_Transmit(CAN1, &TX_msg);
 8003658:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800365c:	4619      	mov	r1, r3
 800365e:	485d      	ldr	r0, [pc, #372]	; (80037d4 <Update_TSK+0x8bc>)
 8003660:	f000 fe26 	bl	80042b0 <CAN_Transmit>
			uint8_t currentVersion[20] = { 0 };
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800366a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	60da      	str	r2, [r3, #12]
			uint8_t currentVersionSize = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			//wait for current version size
			while ((CAN_RXMsg.id != ECU_FIRMWAREVERSION_ID)
 800367e:	bf00      	nop
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <Update_TSK+0x8a0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d1fb      	bne.n	8003680 <Update_TSK+0x768>
					|| (CAN_RXMsg.ActiveFlag == DISABLE))
 8003688:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <Update_TSK+0x8a0>)
 800368a:	7bdb      	ldrb	r3, [r3, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f7      	beq.n	8003680 <Update_TSK+0x768>
				;
			currentVersionSize = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <Update_TSK+0x8a0>)
 8003692:	791b      	ldrb	r3, [r3, #4]
 8003694:	b25a      	sxtb	r2, r3
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <Update_TSK+0x8a0>)
 8003698:	795b      	ldrb	r3, [r3, #5]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b25b      	sxtb	r3, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			CAN_RXMsg.ActiveFlag = DISABLE;
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <Update_TSK+0x8a0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	73da      	strb	r2, [r3, #15]
			//receive current version from ECU
			CAN_ReceiveStr(currentVersion, ECU_FIRMWAREVERSION_ID, currentVersionSize);
 80036ac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80036b6:	2107      	movs	r1, #7
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fad7 	bl	8003c6c <CAN_ReceiveStr>

			OS_ThreadSafe_Lock();
 80036be:	f00b feab 	bl	800f418 <OS_ThreadSafe_Lock>
			firmwareInfo = (uint8_t*) OS_HEAP_malloc(firmwareInfoSize);
 80036c2:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 80036c6:	4618      	mov	r0, r3
 80036c8:	f00d fc1a 	bl	8010f00 <OS_HEAP_malloc>
 80036cc:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
			OS_ThreadSafe_Unlock();
 80036d0:	f00b fee0 	bl	800f494 <OS_ThreadSafe_Unlock>
			GSM_DownloadData(firmwareInfo, NULL);
 80036d4:	2100      	movs	r1, #0
 80036d6:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 80036da:	f001 fcb9 	bl	8005050 <GSM_DownloadData>
			parse_json(firmwareInfo, (uint8_t*) "firmware_version",
 80036de:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80036e2:	461a      	mov	r2, r3
 80036e4:	493e      	ldr	r1, [pc, #248]	; (80037e0 <Update_TSK+0x8c8>)
 80036e6:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 80036ea:	f001 fdcb 	bl	8005284 <parse_json>
					firmware_version);

			updateState = CompareVersions((const uint8_t*) currentVersion,
 80036ee:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80036f2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fb6a 	bl	8003dd2 <CompareVersions>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
					firmware_version);
			//send state to GUI
			TX_msg.id = GUI_CHECKUPDATE_RQ_ID;
 8003704:	2303      	movs	r3, #3
 8003706:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			TX_msg.format = CAN_STANDARD_FORMAT;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
			TX_msg.type = CAN_DATA_FRAME;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
			TX_msg.length = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = updateState;
 800371c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8003720:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			CAN_Transmit(CAN1, &TX_msg);
 8003724:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003728:	4619      	mov	r1, r3
 800372a:	482a      	ldr	r0, [pc, #168]	; (80037d4 <Update_TSK+0x8bc>)
 800372c:	f000 fdc0 	bl	80042b0 <CAN_Transmit>
			if (updateState == VERSION_NOCHANGE) {
 8003730:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8003734:	2b04      	cmp	r3, #4
 8003736:	d110      	bne.n	800375a <Update_TSK+0x842>
				SEGGER_SYSVIEW_PrintfHost("VERSION is up to date");
 8003738:	482a      	ldr	r0, [pc, #168]	; (80037e4 <Update_TSK+0x8cc>)
 800373a:	f7ff f9bf 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
				OS_HEAP_free(TxHeader);
 800373e:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8003742:	f00d fbab 	bl	8010e9c <OS_HEAP_free>
				OS_HEAP_free(gsm_InternalBuffer);
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <Update_TSK+0x8c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f00d fba6 	bl	8010e9c <OS_HEAP_free>
				OS_HEAP_free(firmwareInfo);
 8003750:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 8003754:	f00d fba2 	bl	8010e9c <OS_HEAP_free>
				continue;
 8003758:	e02c      	b.n	80037b4 <Update_TSK+0x89c>
			}
			SEGGER_SYSVIEW_PrintfHost("sending update info to GUI!");
 800375a:	4823      	ldr	r0, [pc, #140]	; (80037e8 <Update_TSK+0x8d0>)
 800375c:	f7ff f9ae 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			TX_msg.length = 2;
 8003760:	2302      	movs	r3, #2
 8003762:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
			TX_msg.data[0] = (uint8_t) (0xFF & firmwareInfoSize);
 8003766:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
			TX_msg.data[1] = (uint8_t) ((0xFF00 & firmwareInfoSize) >> 8);
 8003770:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	b29b      	uxth	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
			//OS_TASK_Delay(100);
			CAN_Transmit(CAN1, &TX_msg);
 800377e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003782:	4619      	mov	r1, r3
 8003784:	4813      	ldr	r0, [pc, #76]	; (80037d4 <Update_TSK+0x8bc>)
 8003786:	f000 fd93 	bl	80042b0 <CAN_Transmit>
			CAN_SendData(firmwareInfo, firmwareInfoSize, GUI_CHECKUPDATE_RQ_ID);
 800378a:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 800378e:	2203      	movs	r2, #3
 8003790:	4619      	mov	r1, r3
 8003792:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 8003796:	f000 fa01 	bl	8003b9c <CAN_SendData>
			OS_HEAP_free(firmwareInfo);
 800379a:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 800379e:	f00d fb7d 	bl	8010e9c <OS_HEAP_free>

		} else {
			//NOP
		}
		OS_HEAP_free(TxHeader);
 80037a2:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 80037a6:	f00d fb79 	bl	8010e9c <OS_HEAP_free>
		OS_HEAP_free(gsm_InternalBuffer);
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <Update_TSK+0x8c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00d fb74 	bl	8010e9c <OS_HEAP_free>
	while (1) {
 80037b4:	f7ff bbd1 	b.w	8002f5a <Update_TSK+0x42>
 80037b8:	20002e3c 	.word	0x20002e3c
 80037bc:	080115d8 	.word	0x080115d8
 80037c0:	080115ec 	.word	0x080115ec
 80037c4:	0801160c 	.word	0x0801160c
 80037c8:	08011628 	.word	0x08011628
 80037cc:	0801163c 	.word	0x0801163c
 80037d0:	080113ec 	.word	0x080113ec
 80037d4:	40006400 	.word	0x40006400
 80037d8:	08011648 	.word	0x08011648
 80037dc:	20002e4c 	.word	0x20002e4c
 80037e0:	08011664 	.word	0x08011664
 80037e4:	08011678 	.word	0x08011678
 80037e8:	08011690 	.word	0x08011690

080037ec <SendDownloadProgress_TSK>:
	}
}



void SendDownloadProgress_TSK(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
	CAN_msg TX_msg = { 0 };
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
	uint16_t progress = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	82fb      	strh	r3, [r7, #22]
	uint32_t dataStart = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]

	TX_msg.id = GUI_UPDATE_RQ_ID;
 8003806:	2304      	movs	r3, #4
 8003808:	607b      	str	r3, [r7, #4]
	TX_msg.format = CAN_STANDARD_FORMAT;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]
	TX_msg.type = CAN_DATA_FRAME;
 800380e:	2300      	movs	r3, #0
 8003810:	74bb      	strb	r3, [r7, #18]
	TX_msg.length = 2;
 8003812:	2302      	movs	r3, #2
 8003814:	743b      	strb	r3, [r7, #16]

	while (1) {
		OS_TASKEVENT_GetSingleBlocked(TSK_ENENT_SENDPROGRESS);
 8003816:	2001      	movs	r0, #1
 8003818:	f00b ffcc 	bl	800f7b4 <OS_TASKEVENT_GetSingleBlocked>
		while (strSearch(gsm_InternalBuffer, (const uint8_t*) "\n", 2,
 800381c:	e002      	b.n	8003824 <SendDownloadProgress_TSK+0x38>
				&dataStart) != GSM_OK) {
			OS_Delay(100);
 800381e:	2064      	movs	r0, #100	; 0x64
 8003820:	f00c f94a 	bl	800fab8 <OS_TASK_Delay>
		while (strSearch(gsm_InternalBuffer, (const uint8_t*) "\n", 2,
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <SendDownloadProgress_TSK+0xa0>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	463b      	mov	r3, r7
 800382a:	2202      	movs	r2, #2
 800382c:	4918      	ldr	r1, [pc, #96]	; (8003890 <SendDownloadProgress_TSK+0xa4>)
 800382e:	f001 fdb7 	bl	80053a0 <strSearch>
 8003832:	4603      	mov	r3, r0
 8003834:	2b01      	cmp	r3, #1
 8003836:	d1f2      	bne.n	800381e <SendDownloadProgress_TSK+0x32>
		}
		do {

			progress = DMA_NDTR_MAX - (dataStart + (GSM_RX_DMA_STREAM->NDTR));
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <SendDownloadProgress_TSK+0xa8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b29a      	uxth	r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	4413      	add	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	82fb      	strh	r3, [r7, #22]
			if(progress > firmwareBase64Size){
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <SendDownloadProgress_TSK+0xac>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	8afa      	ldrh	r2, [r7, #22]
 8003850:	429a      	cmp	r2, r3
 8003852:	d902      	bls.n	800385a <SendDownloadProgress_TSK+0x6e>
				progress = firmwareBase64Size;
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <SendDownloadProgress_TSK+0xac>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	82fb      	strh	r3, [r7, #22]
			}
			if (progress != 0) {
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <SendDownloadProgress_TSK+0x8e>

				TX_msg.data[0] = (uint8_t) (0xFF & progress);
 8003860:	8afb      	ldrh	r3, [r7, #22]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	723b      	strb	r3, [r7, #8]
				TX_msg.data[1] = (uint8_t) ((0xFF00 & progress) >> 8);
 8003866:	8afb      	ldrh	r3, [r7, #22]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	b29b      	uxth	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	727b      	strb	r3, [r7, #9]
				CAN_Transmit(CAN1, &TX_msg);
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4809      	ldr	r0, [pc, #36]	; (800389c <SendDownloadProgress_TSK+0xb0>)
 8003876:	f000 fd1b 	bl	80042b0 <CAN_Transmit>
			}
			OS_Delay(100);
 800387a:	2064      	movs	r0, #100	; 0x64
 800387c:	f00c f91c 	bl	800fab8 <OS_TASK_Delay>
		} while (progress < firmwareBase64Size);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SendDownloadProgress_TSK+0xac>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	8afa      	ldrh	r2, [r7, #22]
 8003886:	429a      	cmp	r2, r3
 8003888:	d3d6      	bcc.n	8003838 <SendDownloadProgress_TSK+0x4c>
		OS_TASKEVENT_GetSingleBlocked(TSK_ENENT_SENDPROGRESS);
 800388a:	e7c4      	b.n	8003816 <SendDownloadProgress_TSK+0x2a>
 800388c:	20002e4c 	.word	0x20002e4c
 8003890:	080116ac 	.word	0x080116ac
 8003894:	40026040 	.word	0x40026040
 8003898:	20002eec 	.word	0x20002eec
 800389c:	40006400 	.word	0x40006400

080038a0 <Diagnostic_TSK>:


	}
}

void Diagnostic_TSK(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0fe      	sub	sp, #504	; 0x1f8
 80038a4:	af00      	add	r7, sp, #0
	CAN_msg CAN_Tx = { 0 };
 80038a6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
	uint8_t *diagData;
	uint16_t diagDataSize = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
	uint8_t *jsonfile;
	uint16_t metaDataSize = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
	uint16_t GSM_Status = GSM_NOK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
	while (1) {
		GSM_TxType gsm_Tx = { NULL, 0, NULL, NULL };
 80038c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
		uint8_t metaData[40] = { 0 };
 80038d4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80038d8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f00d fbca 	bl	8011080 <memset>
		uint8_t url[100] = { 0 };
 80038ec:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80038f0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2260      	movs	r2, #96	; 0x60
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f00d fbbe 	bl	8011080 <memset>
		uint8_t TxHeader[300] = { 0 };
 8003904:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003908:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	3304      	adds	r3, #4
 8003912:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f00d fbb1 	bl	8011080 <memset>
		OS_TASKEVENT_GetSingleBlocked(TSK_ENENT_SENDDIAGNOSTICS);
 800391e:	2001      	movs	r0, #1
 8003920:	f00b ff48 	bl	800f7b4 <OS_TASKEVENT_GetSingleBlocked>
		diagDataSize = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8003924:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <Diagnostic_TSK+0x298>)
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	b21a      	sxth	r2, r3
 800392a:	4b83      	ldr	r3, [pc, #524]	; (8003b38 <Diagnostic_TSK+0x298>)
 800392c:	795b      	ldrb	r3, [r3, #5]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	b21b      	sxth	r3, r3
 8003932:	4313      	orrs	r3, r2
 8003934:	b21b      	sxth	r3, r3
 8003936:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
		CAN_RXMsg.ActiveFlag = DISABLE;
 800393a:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <Diagnostic_TSK+0x298>)
 800393c:	2200      	movs	r2, #0
 800393e:	73da      	strb	r2, [r3, #15]

		OS_ThreadSafe_Lock();
 8003940:	f00b fd6a 	bl	800f418 <OS_ThreadSafe_Lock>
		diagData = (uint8_t*) OS_HEAP_malloc(diagDataSize + 15);
 8003944:	f8b7 31f6 	ldrh.w	r3, [r7, #502]	; 0x1f6
 8003948:	330f      	adds	r3, #15
 800394a:	4618      	mov	r0, r3
 800394c:	f00d fad8 	bl	8010f00 <OS_HEAP_malloc>
 8003950:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
		OS_ThreadSafe_Unlock();
 8003954:	f00b fd9e 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (diagData == NULL) {
 8003958:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <Diagnostic_TSK+0xc8>
			SEGGER_SYSVIEW_PrintfHost(
 8003960:	4876      	ldr	r0, [pc, #472]	; (8003b3c <Diagnostic_TSK+0x29c>)
 8003962:	f7ff f8ab 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Failed to allocate Diagnostics buffer !");
			continue;
 8003966:	e0e5      	b.n	8003b34 <Diagnostic_TSK+0x294>
		}

		//receive diag data from GUI
		CAN_ReceiveStr(diagData, GUI_DATA_ID, diagDataSize);
 8003968:	f8b7 31f6 	ldrh.w	r3, [r7, #502]	; 0x1f6
 800396c:	461a      	mov	r2, r3
 800396e:	2106      	movs	r1, #6
 8003970:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003974:	f000 f97a 	bl	8003c6c <CAN_ReceiveStr>
		//car_id=--&ecu_id=--
		while ((CAN_RXMsg.id != GUI_DATA_ID) || (CAN_RXMsg.ActiveFlag == DISABLE));
 8003978:	bf00      	nop
 800397a:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <Diagnostic_TSK+0x298>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d1fb      	bne.n	800397a <Diagnostic_TSK+0xda>
 8003982:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <Diagnostic_TSK+0x298>)
 8003984:	7bdb      	ldrb	r3, [r3, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f7      	beq.n	800397a <Diagnostic_TSK+0xda>
		CAN_RXMsg.ActiveFlag = DISABLE;
 800398a:	4b6b      	ldr	r3, [pc, #428]	; (8003b38 <Diagnostic_TSK+0x298>)
 800398c:	2200      	movs	r2, #0
 800398e:	73da      	strb	r2, [r3, #15]
		metaDataSize = CAN_RXMsg.data[0] | CAN_RXMsg.data[1] << 8;
 8003990:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <Diagnostic_TSK+0x298>)
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	b21a      	sxth	r2, r3
 8003996:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <Diagnostic_TSK+0x298>)
 8003998:	795b      	ldrb	r3, [r3, #5]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	b21b      	sxth	r3, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
		CAN_ReceiveStr(metaData, GUI_DATA_ID, metaDataSize);
 80039a6:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	2106      	movs	r1, #6
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f95c 	bl	8003c6c <CAN_ReceiveStr>

		OS_ThreadSafe_Lock();
 80039b4:	f00b fd30 	bl	800f418 <OS_ThreadSafe_Lock>
		jsonfile = (uint8_t*) OS_HEAP_malloc(diagDataSize + 20);
 80039b8:	f8b7 31f6 	ldrh.w	r3, [r7, #502]	; 0x1f6
 80039bc:	3314      	adds	r3, #20
 80039be:	4618      	mov	r0, r3
 80039c0:	f00d fa9e 	bl	8010f00 <OS_HEAP_malloc>
 80039c4:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		OS_ThreadSafe_Unlock();
 80039c8:	f00b fd64 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (diagData == NULL) {
 80039cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <Diagnostic_TSK+0x144>
			SEGGER_SYSVIEW_PrintfHost(
 80039d4:	485a      	ldr	r0, [pc, #360]	; (8003b40 <Diagnostic_TSK+0x2a0>)
 80039d6:	f7ff f871 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Failed to allocate Diagnostics json buffer !");
			OS_HEAP_free(diagData);
 80039da:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80039de:	f00d fa5d 	bl	8010e9c <OS_HEAP_free>
			continue;
 80039e2:	e0a7      	b.n	8003b34 <Diagnostic_TSK+0x294>
		}
		StrCat(jsonfile, (uint8_t*) "{\"file\":\"", diagData);
 80039e4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80039e8:	4956      	ldr	r1, [pc, #344]	; (8003b44 <Diagnostic_TSK+0x2a4>)
 80039ea:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80039ee:	f000 fa3c 	bl	8003e6a <StrCat>
		StrCat(jsonfile, jsonfile, (uint8_t*) "\"}");
 80039f2:	4a55      	ldr	r2, [pc, #340]	; (8003b48 <Diagnostic_TSK+0x2a8>)
 80039f4:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 80039f8:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80039fc:	f000 fa35 	bl	8003e6a <StrCat>
		gsm_Tx.payload = jsonfile;
 8003a00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a04:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		gsm_Tx.payloadSize = diagDataSize + 11;
 8003a08:	f8b7 31f6 	ldrh.w	r3, [r7, #502]	; 0x1f6
 8003a0c:	330b      	adds	r3, #11
 8003a0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		gsm_Tx.contentType = (uint8_t*) "application/json";
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <Diagnostic_TSK+0x2ac>)
 8003a14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

		uint8_t dataSizeStr[10] = { 0 };
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a1e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	809a      	strh	r2, [r3, #4]
		NumToSting(diagDataSize + 11, dataSizeStr);
 8003a28:	f8b7 31f6 	ldrh.w	r3, [r7, #502]	; 0x1f6
 8003a2c:	330b      	adds	r3, #11
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fa62 	bl	8003f00 <NumToSting>
		StrCat(TxHeader, (uint8_t*) "Connection: keep-alive;"
 8003a3c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8003a40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a44:	4942      	ldr	r1, [pc, #264]	; (8003b50 <Diagnostic_TSK+0x2b0>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fa0f 	bl	8003e6a <StrCat>
				"Accept-Encoding: gzip, deflate, br;Accept: */*;"
				"Content-Length: ", dataSizeStr);
		StrCat(TxHeader, TxHeader, (uint8_t*) ";");
 8003a4c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003a50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a54:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <Diagnostic_TSK+0x2b4>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fa07 	bl	8003e6a <StrCat>
		gsm_Tx.header = TxHeader;
 8003a5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		gsm_Tx.contentType = (uint8_t*) "application/json";
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <Diagnostic_TSK+0x2ac>)
 8003a66:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		StrCat(url, (uint8_t*) BASE_URL, (uint8_t*) DIAGNOSTIC_ENDNODE);
 8003a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <Diagnostic_TSK+0x2b8>)
 8003a70:	493a      	ldr	r1, [pc, #232]	; (8003b5c <Diagnostic_TSK+0x2bc>)
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f9f9 	bl	8003e6a <StrCat>
		StrCat(url, url, metaData);
 8003a78:	1d3a      	adds	r2, r7, #4
 8003a7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f9f1 	bl	8003e6a <StrCat>
		//Allocate GSM Internal Buffer
		OS_ThreadSafe_Lock();
 8003a88:	f00b fcc6 	bl	800f418 <OS_ThreadSafe_Lock>
		gsm_InternalBuffer = (uint8_t*) OS_HEAP_malloc(100);
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	f00d fa37 	bl	8010f00 <OS_HEAP_malloc>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <Diagnostic_TSK+0x2c0>)
 8003a96:	6013      	str	r3, [r2, #0]
		OS_ThreadSafe_Unlock();
 8003a98:	f00b fcfc 	bl	800f494 <OS_ThreadSafe_Unlock>
		if (gsm_InternalBuffer == NULL) {
 8003a9c:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <Diagnostic_TSK+0x2c0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <Diagnostic_TSK+0x21c>
			SEGGER_SYSVIEW_PrintfHost("gsm Buffer not Allocated");
 8003aa4:	482f      	ldr	r0, [pc, #188]	; (8003b64 <Diagnostic_TSK+0x2c4>)
 8003aa6:	f7ff f809 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
			OS_HEAP_free(jsonfile);
 8003aaa:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003aae:	f00d f9f5 	bl	8010e9c <OS_HEAP_free>
			OS_HEAP_free(diagData);
 8003ab2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003ab6:	f00d f9f1 	bl	8010e9c <OS_HEAP_free>
			continue;
 8003aba:	e03b      	b.n	8003b34 <Diagnostic_TSK+0x294>
		}
		GSM_SetInternalBuffer(gsm_InternalBuffer, 100);
 8003abc:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <Diagnostic_TSK+0x2c0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 f800 	bl	8004ac8 <GSM_SetInternalBuffer>
		GSM_Status = GSM_HTTPRequest(GSM_POST, url, &gsm_Tx, NULL);
 8003ac8:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003acc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f001 f908 	bl	8004ce8 <GSM_HTTPRequest>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
		CAN_Tx.id = GUI_DIAGNOSTIC_RQ_ID;
 8003ade:	2305      	movs	r3, #5
 8003ae0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		CAN_Tx.format = CAN_STANDARD_FORMAT;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
		CAN_Tx.type = CAN_DATA_FRAME;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
		CAN_Tx.length = 2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 31e4 	strb.w	r3, [r7, #484]	; 0x1e4
		CAN_Tx.data[0] = (uint8_t) (0xFF & GSM_Status);
 8003af6:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	; 0x1f2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f887 31dc 	strb.w	r3, [r7, #476]	; 0x1dc
		CAN_Tx.data[1] = (uint8_t) ((0xFF00 & GSM_Status) >> 8);
 8003b00:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	; 0x1f2
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
		CAN_Transmit(CAN1, &CAN_Tx);
 8003b0e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003b12:	4619      	mov	r1, r3
 8003b14:	4814      	ldr	r0, [pc, #80]	; (8003b68 <Diagnostic_TSK+0x2c8>)
 8003b16:	f000 fbcb 	bl	80042b0 <CAN_Transmit>
		OS_HEAP_free(gsm_InternalBuffer);
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <Diagnostic_TSK+0x2c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f00d f9bc 	bl	8010e9c <OS_HEAP_free>
		OS_HEAP_free(jsonfile);
 8003b24:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003b28:	f00d f9b8 	bl	8010e9c <OS_HEAP_free>
		OS_HEAP_free(diagData);
 8003b2c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003b30:	f00d f9b4 	bl	8010e9c <OS_HEAP_free>
	while (1) {
 8003b34:	e6c7      	b.n	80038c6 <Diagnostic_TSK+0x26>
 8003b36:	bf00      	nop
 8003b38:	20002e3c 	.word	0x20002e3c
 8003b3c:	080116b0 	.word	0x080116b0
 8003b40:	080116d8 	.word	0x080116d8
 8003b44:	08011708 	.word	0x08011708
 8003b48:	08011714 	.word	0x08011714
 8003b4c:	08011470 	.word	0x08011470
 8003b50:	08011418 	.word	0x08011418
 8003b54:	08011718 	.word	0x08011718
 8003b58:	0801171c 	.word	0x0801171c
 8003b5c:	080113ec 	.word	0x080113ec
 8003b60:	20002e4c 	.word	0x20002e4c
 8003b64:	080113a4 	.word	0x080113a4
 8003b68:	40006400 	.word	0x40006400

08003b6c <Teset_TSK>:

	}
}

void Teset_TSK(void) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
	while (1) {
		GPIO_Write_Pin(GPIOA, GPIO_PIN_5, HIGH);
 8003b70:	2201      	movs	r2, #1
 8003b72:	2105      	movs	r1, #5
 8003b74:	4808      	ldr	r0, [pc, #32]	; (8003b98 <Teset_TSK+0x2c>)
 8003b76:	f000 ff7e 	bl	8004a76 <GPIO_Write_Pin>
		OS_Delay(1000);
 8003b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b7e:	f00b ff9b 	bl	800fab8 <OS_TASK_Delay>
		GPIO_Write_Pin(GPIOA, GPIO_PIN_5, LOW);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2105      	movs	r1, #5
 8003b86:	4804      	ldr	r0, [pc, #16]	; (8003b98 <Teset_TSK+0x2c>)
 8003b88:	f000 ff75 	bl	8004a76 <GPIO_Write_Pin>
		OS_Delay(1000);
 8003b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b90:	f00b ff92 	bl	800fab8 <OS_TASK_Delay>
		GPIO_Write_Pin(GPIOA, GPIO_PIN_5, HIGH);
 8003b94:	e7ec      	b.n	8003b70 <Teset_TSK+0x4>
 8003b96:	bf00      	nop
 8003b98:	40020000 	.word	0x40020000

08003b9c <CAN_SendData>:

	}
}


void CAN_SendData(uint8_t* buffer, uint16_t length, uint32_t CAN_id){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	817b      	strh	r3, [r7, #10]
	CAN_msg msg = {0};
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	60da      	str	r2, [r3, #12]
	msg.id = CAN_id;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	617b      	str	r3, [r7, #20]
	msg.format = CAN_STANDARD_FORMAT;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	msg.type = CAN_DATA_FRAME;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	msg.length = length < 8 ? length : 8;
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	bf28      	it	cs
 8003bce:	2308      	movcs	r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f887 3020 	strb.w	r3, [r7, #32]
	for (uint8_t datacounter = 0; datacounter < length;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bde:	e038      	b.n	8003c52 <CAN_SendData+0xb6>
			datacounter += 8) {
		for (uint8_t msgcounter = 0; msgcounter < 8; msgcounter++) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003be6:	e013      	b.n	8003c10 <CAN_SendData+0x74>
			msg.data[msgcounter] = buffer[datacounter
					+ msgcounter];
 8003be8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bf0:	4413      	add	r3, r2
 8003bf2:	461a      	mov	r2, r3
			msg.data[msgcounter] = buffer[datacounter
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	441a      	add	r2, r3
 8003bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	3328      	adds	r3, #40	; 0x28
 8003c00:	443b      	add	r3, r7
 8003c02:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t msgcounter = 0; msgcounter < 8; msgcounter++) {
 8003c06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d9e7      	bls.n	8003be8 <CAN_SendData+0x4c>
		}
		if((length - datacounter) >= 8){
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b07      	cmp	r3, #7
 8003c22:	dd03      	ble.n	8003c2c <CAN_SendData+0x90>
			msg.length = 8;
 8003c24:	2308      	movs	r3, #8
 8003c26:	f887 3020 	strb.w	r3, [r7, #32]
 8003c2a:	e007      	b.n	8003c3c <CAN_SendData+0xa0>
		}else{
			msg.length = length - datacounter;
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f887 3020 	strb.w	r3, [r7, #32]
		}
		CAN_Transmit(CAN1, &msg);
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	4619      	mov	r1, r3
 8003c42:	4809      	ldr	r0, [pc, #36]	; (8003c68 <CAN_SendData+0xcc>)
 8003c44:	f000 fb34 	bl	80042b0 <CAN_Transmit>
			datacounter += 8) {
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t datacounter = 0; datacounter < length;
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	897a      	ldrh	r2, [r7, #10]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d8c0      	bhi.n	8003be0 <CAN_SendData+0x44>
	}
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40006400 	.word	0x40006400

08003c6c <CAN_ReceiveStr>:

void CAN_ReceiveStr(uint8_t *buffer, uint32_t msg_ID, uint16_t dataSize) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
	uint16_t currentDataSize = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	82fb      	strh	r3, [r7, #22]
	while (currentDataSize < dataSize) {
 8003c7e:	e022      	b.n	8003cc6 <CAN_ReceiveStr+0x5a>
		//wait for User Data
		while ((CAN_RXMsg.id != msg_ID) || (CAN_RXMsg.ActiveFlag == DISABLE))
 8003c80:	bf00      	nop
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <CAN_ReceiveStr+0x78>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1fa      	bne.n	8003c82 <CAN_ReceiveStr+0x16>
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <CAN_ReceiveStr+0x78>)
 8003c8e:	7bdb      	ldrb	r3, [r3, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f6      	beq.n	8003c82 <CAN_ReceiveStr+0x16>
			;
		CAN_RXMsg.ActiveFlag = DISABLE;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <CAN_ReceiveStr+0x78>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	73da      	strb	r2, [r3, #15]
		for (uint8_t counter = 0; counter < CAN_RXMsg.length; counter++) {
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	757b      	strb	r3, [r7, #21]
 8003c9e:	e00d      	b.n	8003cbc <CAN_ReceiveStr+0x50>
			buffer[currentDataSize++] = CAN_RXMsg.data[counter];
 8003ca0:	7d7a      	ldrb	r2, [r7, #21]
 8003ca2:	8afb      	ldrh	r3, [r7, #22]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	82f9      	strh	r1, [r7, #22]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	440b      	add	r3, r1
 8003cae:	490d      	ldr	r1, [pc, #52]	; (8003ce4 <CAN_ReceiveStr+0x78>)
 8003cb0:	440a      	add	r2, r1
 8003cb2:	7912      	ldrb	r2, [r2, #4]
 8003cb4:	701a      	strb	r2, [r3, #0]
		for (uint8_t counter = 0; counter < CAN_RXMsg.length; counter++) {
 8003cb6:	7d7b      	ldrb	r3, [r7, #21]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	757b      	strb	r3, [r7, #21]
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <CAN_ReceiveStr+0x78>)
 8003cbe:	7b1b      	ldrb	r3, [r3, #12]
 8003cc0:	7d7a      	ldrb	r2, [r7, #21]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3ec      	bcc.n	8003ca0 <CAN_ReceiveStr+0x34>
	while (currentDataSize < dataSize) {
 8003cc6:	8afa      	ldrh	r2, [r7, #22]
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3d8      	bcc.n	8003c80 <CAN_ReceiveStr+0x14>
		}
	}
	buffer[currentDataSize] = '\0';
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20002e3c 	.word	0x20002e3c

08003ce8 <ParseVersion>:
 0  1  2  3  4
 "Major.Minor.Patch"
 */

void ParseVersion(const uint8_t *version, uint8_t *major, uint8_t *minor,
		uint8_t *patch) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
	uint8_t versionCounter = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
	// Parse the current version components
	while (version[versionCounter] != '\0') {
 8003cfa:	e01d      	b.n	8003d38 <ParseVersion+0x50>
		if (version[versionCounter] == '.') {
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b2e      	cmp	r3, #46	; 0x2e
 8003d06:	d103      	bne.n	8003d10 <ParseVersion+0x28>
			versionCounter++;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
			break;
 8003d0e:	e019      	b.n	8003d44 <ParseVersion+0x5c>
		}
		*major = *major * 10 + (version[versionCounter] - '0');
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	440b      	add	r3, r1
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	3b30      	subs	r3, #48	; 0x30
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	701a      	strb	r2, [r3, #0]
		versionCounter++;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	3301      	adds	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
	while (version[versionCounter] != '\0') {
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1db      	bne.n	8003cfc <ParseVersion+0x14>
	}
	while (version[versionCounter] != '\0') {
 8003d44:	e01d      	b.n	8003d82 <ParseVersion+0x9a>
		if (version[versionCounter] == '.') {
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d50:	d103      	bne.n	8003d5a <ParseVersion+0x72>
			versionCounter++;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	3301      	adds	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
			break;
 8003d58:	e019      	b.n	8003d8e <ParseVersion+0xa6>
		}
		*minor = *minor * 10 + (version[versionCounter] - '0');
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	0092      	lsls	r2, r2, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4413      	add	r3, r2
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3b30      	subs	r3, #48	; 0x30
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	701a      	strb	r2, [r3, #0]
		versionCounter++;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
	while (version[versionCounter] != '\0') {
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1db      	bne.n	8003d46 <ParseVersion+0x5e>
	}
	while (version[versionCounter] != '\0') {
 8003d8e:	e013      	b.n	8003db8 <ParseVersion+0xd0>
		*patch = *patch * 10 + (version[versionCounter] - '0');
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	68f9      	ldr	r1, [r7, #12]
 8003da2:	440b      	add	r3, r1
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	4413      	add	r3, r2
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	3b30      	subs	r3, #48	; 0x30
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	701a      	strb	r2, [r3, #0]
		versionCounter++;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	3301      	adds	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
	while (version[versionCounter] != '\0') {
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <ParseVersion+0xa8>
	}
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <CompareVersions>:

uint8_t CompareVersions(const uint8_t *currentVersion,
		const uint8_t *targetVersion) {
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
	uint8_t currentMajor = 0, currentMinor = 0, currentPatch = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	2300      	movs	r3, #0
 8003de2:	73bb      	strb	r3, [r7, #14]
 8003de4:	2300      	movs	r3, #0
 8003de6:	737b      	strb	r3, [r7, #13]
	uint8_t targetMajor = 0, targetMinor = 0, targetPatch = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	733b      	strb	r3, [r7, #12]
 8003dec:	2300      	movs	r3, #0
 8003dee:	72fb      	strb	r3, [r7, #11]
 8003df0:	2300      	movs	r3, #0
 8003df2:	72bb      	strb	r3, [r7, #10]

	ParseVersion(currentVersion, &currentMajor, &currentMinor, &currentPatch);
 8003df4:	f107 030d 	add.w	r3, r7, #13
 8003df8:	f107 020e 	add.w	r2, r7, #14
 8003dfc:	f107 010f 	add.w	r1, r7, #15
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff71 	bl	8003ce8 <ParseVersion>
	ParseVersion(targetVersion, &targetMajor, &targetMinor, &targetPatch);
 8003e06:	f107 030a 	add.w	r3, r7, #10
 8003e0a:	f107 020b 	add.w	r2, r7, #11
 8003e0e:	f107 010c 	add.w	r1, r7, #12
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f7ff ff68 	bl	8003ce8 <ParseVersion>

	if (currentMajor < targetMajor) {
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	7b3b      	ldrb	r3, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d201      	bcs.n	8003e24 <CompareVersions+0x52>
		// Current version major component is smaller
		return VERSION_FULLUPDATE; // Update needed
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01e      	b.n	8003e62 <CompareVersions+0x90>
	} else if (currentMajor > targetMajor) {
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d901      	bls.n	8003e30 <CompareVersions+0x5e>
		// Current version major component is larger
		return VERSION_ROLLBACK; // No update needed
 8003e2c:	2305      	movs	r3, #5
 8003e2e:	e018      	b.n	8003e62 <CompareVersions+0x90>
	} else {
		// Major components are the same, compare minor components
		if (currentMinor < targetMinor) {
 8003e30:	7bba      	ldrb	r2, [r7, #14]
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d201      	bcs.n	8003e3c <CompareVersions+0x6a>
			// Current version minor component is smaller
			return VERSION_NEWFEATURES; // Update needed
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e012      	b.n	8003e62 <CompareVersions+0x90>
		} else if (currentMinor > targetMinor) {
 8003e3c:	7bba      	ldrb	r2, [r7, #14]
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d901      	bls.n	8003e48 <CompareVersions+0x76>
			// Current version minor component is larger
			return VERSION_ROLLBACK; // No update needed
 8003e44:	2305      	movs	r3, #5
 8003e46:	e00c      	b.n	8003e62 <CompareVersions+0x90>
		} else {
			// Minor components are the same, compare patch components
			if (currentPatch < targetPatch) {
 8003e48:	7b7a      	ldrb	r2, [r7, #13]
 8003e4a:	7abb      	ldrb	r3, [r7, #10]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d201      	bcs.n	8003e54 <CompareVersions+0x82>
				// Current version patch component is smaller
				return VERSION_PATCH; // Update needed
 8003e50:	2303      	movs	r3, #3
 8003e52:	e006      	b.n	8003e62 <CompareVersions+0x90>
			} else if (currentPatch > targetPatch) {
 8003e54:	7b7a      	ldrb	r2, [r7, #13]
 8003e56:	7abb      	ldrb	r3, [r7, #10]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d901      	bls.n	8003e60 <CompareVersions+0x8e>
				// Current version patch component is larger
				return VERSION_ROLLBACK; // No update needed
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	e000      	b.n	8003e62 <CompareVersions+0x90>
			} else {
				// Versions are identical
				return VERSION_NOCHANGE; // No update needed
 8003e60:	2304      	movs	r3, #4
			}
		}
	}
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <StrCat>:

void StrCat(uint8_t *buffer, uint8_t *str1, uint8_t *str2) {
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
	uint16_t str1Size = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	82fb      	strh	r3, [r7, #22]
	while (str1[++str1Size] != '\0')
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	82fb      	strh	r3, [r7, #22]
 8003e80:	8afb      	ldrh	r3, [r7, #22]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4413      	add	r3, r2
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f6      	bne.n	8003e7a <StrCat+0x10>
		;
	uint16_t str2Size = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	82bb      	strh	r3, [r7, #20]
	while (str2[++str2Size] != '\0')
 8003e90:	8abb      	ldrh	r3, [r7, #20]
 8003e92:	3301      	adds	r3, #1
 8003e94:	82bb      	strh	r3, [r7, #20]
 8003e96:	8abb      	ldrh	r3, [r7, #20]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f6      	bne.n	8003e90 <StrCat+0x26>
		;
	uint16_t counter;
	for (counter = 0; counter <= str1Size + str2Size; counter++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	827b      	strh	r3, [r7, #18]
 8003ea6:	e01a      	b.n	8003ede <StrCat+0x74>
		if (counter < str1Size) {
 8003ea8:	8a7a      	ldrh	r2, [r7, #18]
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d208      	bcs.n	8003ec2 <StrCat+0x58>
			buffer[counter] = str1[counter];
 8003eb0:	8a7b      	ldrh	r3, [r7, #18]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	8a7b      	ldrh	r3, [r7, #18]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	440b      	add	r3, r1
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e00a      	b.n	8003ed8 <StrCat+0x6e>
		} else {
			buffer[counter] = str2[counter - str1Size];
 8003ec2:	8a7a      	ldrh	r2, [r7, #18]
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	441a      	add	r2, r3
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	68f9      	ldr	r1, [r7, #12]
 8003ed2:	440b      	add	r3, r1
 8003ed4:	7812      	ldrb	r2, [r2, #0]
 8003ed6:	701a      	strb	r2, [r3, #0]
	for (counter = 0; counter <= str1Size + str2Size; counter++) {
 8003ed8:	8a7b      	ldrh	r3, [r7, #18]
 8003eda:	3301      	adds	r3, #1
 8003edc:	827b      	strh	r3, [r7, #18]
 8003ede:	8a7a      	ldrh	r2, [r7, #18]
 8003ee0:	8af9      	ldrh	r1, [r7, #22]
 8003ee2:	8abb      	ldrh	r3, [r7, #20]
 8003ee4:	440b      	add	r3, r1
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	ddde      	ble.n	8003ea8 <StrCat+0x3e>
		}
	}
	buffer[counter] = '\0';
 8003eea:	8a7b      	ldrh	r3, [r7, #18]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]

}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <NumToSting>:

uint8_t NumToSting(uint32_t num, uint8_t *buffer) {
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	int counter = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
	do {
		buffer[counter++] = (num % 10) + '0';
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <NumToSting+0xa8>)
 8003f12:	fba3 2301 	umull	r2, r3, r3, r1
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	1aca      	subs	r2, r1, r3
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	6179      	str	r1, [r7, #20]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	440b      	add	r3, r1
 8003f30:	3230      	adds	r2, #48	; 0x30
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
		num /= 10;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <NumToSting+0xa8>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	08db      	lsrs	r3, r3, #3
 8003f40:	607b      	str	r3, [r7, #4]
	} while (num != 0);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e2      	bne.n	8003f0e <NumToSting+0xe>
	buffer[counter] = '\0';
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
	// Reverse the string in-place
	int j = 0, k = counter - 1;
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
	while (j < k) {
 8003f5c:	e017      	b.n	8003f8e <NumToSting+0x8e>
		char temp = buffer[j];
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	72fb      	strb	r3, [r7, #11]
		buffer[j++] = buffer[k];
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1c59      	adds	r1, r3, #1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4619      	mov	r1, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	440b      	add	r3, r1
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	701a      	strb	r2, [r3, #0]
		buffer[k--] = temp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	461a      	mov	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	7afa      	ldrb	r2, [r7, #11]
 8003f8c:	701a      	strb	r2, [r3, #0]
	while (j < k) {
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	dbe3      	blt.n	8003f5e <NumToSting+0x5e>
	}
	return counter;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	b2db      	uxtb	r3, r3
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	cccccccd 	.word	0xcccccccd

08003fac <CAN1_RX0_IRQHandler>:
 * FIFO0
 * TODO: Write the logic and IM (Set events, ...)
 */


void CAN1_RX0_IRQHandler(void) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	OS_INT_Enter()
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fb2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <CAN1_RX0_IRQHandler+0x14>
 8003fba:	20a5      	movs	r0, #165	; 0xa5
 8003fbc:	f00b f90a 	bl	800f1d4 <OS_Error>
 8003fc0:	4b60      	ldr	r3, [pc, #384]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fc2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b5e      	ldr	r3, [pc, #376]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fcc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003fd0:	f00b ffee 	bl	800ffb0 <OS_AssertCPUInISRMode>
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	4b5a      	ldr	r3, [pc, #360]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	4b57      	ldr	r3, [pc, #348]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	4b56      	ldr	r3, [pc, #344]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003ff4:	705a      	strb	r2, [r3, #1]
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <CAN1_RX0_IRQHandler+0x5a>
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4798      	blx	r3
	if (CAN1->RF0R & CAN_RF0R_FMP0) {
 8004006:	4b50      	ldr	r3, [pc, #320]	; (8004148 <CAN1_RX0_IRQHandler+0x19c>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03f      	beq.n	8004092 <CAN1_RX0_IRQHandler+0xe6>
		CAN_Receive(CAN1, CAN_FIFO0, &CAN_RXMsg);
 8004012:	4a4e      	ldr	r2, [pc, #312]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 8004014:	2100      	movs	r1, #0
 8004016:	484c      	ldr	r0, [pc, #304]	; (8004148 <CAN1_RX0_IRQHandler+0x19c>)
 8004018:	f000 fa23 	bl	8004462 <CAN_Receive>
		//Authenticatation
		if (CAN_RXMsg.id == GUI_LOGIN_ID) {
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <CAN1_RX0_IRQHandler+0x88>
			SEGGER_SYSVIEW_PrintfHost(
 8004024:	484a      	ldr	r0, [pc, #296]	; (8004150 <CAN1_RX0_IRQHandler+0x1a4>)
 8004026:	f7fe fd49 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Authentication LOGIN TASKEVENT Setted from CAN1_RX0_IRQHandler ...");
			OS_TASKEVENT_Set(&CB_Authentication_TSK, TSK_ENENT_LOGIN);
 800402a:	2101      	movs	r1, #1
 800402c:	4849      	ldr	r0, [pc, #292]	; (8004154 <CAN1_RX0_IRQHandler+0x1a8>)
 800402e:	f00b fc1f 	bl	800f870 <OS_TASKEVENT_Set>
 8004032:	e02e      	b.n	8004092 <CAN1_RX0_IRQHandler+0xe6>

		} else if (CAN_RXMsg.id == GUI_SIGNUP_RQ_ID) {
 8004034:	4b45      	ldr	r3, [pc, #276]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d107      	bne.n	800404c <CAN1_RX0_IRQHandler+0xa0>
			OS_TASKEVENT_Set(&CB_Authentication_TSK, TSK_ENENT_SIGNUP);
 800403c:	2102      	movs	r1, #2
 800403e:	4845      	ldr	r0, [pc, #276]	; (8004154 <CAN1_RX0_IRQHandler+0x1a8>)
 8004040:	f00b fc16 	bl	800f870 <OS_TASKEVENT_Set>
			SEGGER_SYSVIEW_PrintfHost(
 8004044:	4844      	ldr	r0, [pc, #272]	; (8004158 <CAN1_RX0_IRQHandler+0x1ac>)
 8004046:	f7fe fd39 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
 800404a:	e022      	b.n	8004092 <CAN1_RX0_IRQHandler+0xe6>
					"Authentication SIGNUP TASKEVENT Setted from CAN1_RX0_IRQHandler ...");
		}
		//Update
		else if (CAN_RXMsg.id == GUI_UPDATE_RQ_ID) {
 800404c:	4b3f      	ldr	r3, [pc, #252]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d107      	bne.n	8004064 <CAN1_RX0_IRQHandler+0xb8>
			OS_TASKEVENT_Set(&CB_Update_TSK, TSK_EVENT_UPDATE);
 8004054:	2101      	movs	r1, #1
 8004056:	4841      	ldr	r0, [pc, #260]	; (800415c <CAN1_RX0_IRQHandler+0x1b0>)
 8004058:	f00b fc0a 	bl	800f870 <OS_TASKEVENT_Set>
			SEGGER_SYSVIEW_PrintfHost(
 800405c:	4840      	ldr	r0, [pc, #256]	; (8004160 <CAN1_RX0_IRQHandler+0x1b4>)
 800405e:	f7fe fd2d 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
 8004062:	e016      	b.n	8004092 <CAN1_RX0_IRQHandler+0xe6>
					"Update TASKEVENT Setted from CAN1_RX0_IRQHandler ...");
		} else if (CAN_RXMsg.id == GUI_CHECKUPDATE_RQ_ID) {
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d107      	bne.n	800407c <CAN1_RX0_IRQHandler+0xd0>
			SEGGER_SYSVIEW_PrintfHost(
 800406c:	483c      	ldr	r0, [pc, #240]	; (8004160 <CAN1_RX0_IRQHandler+0x1b4>)
 800406e:	f7fe fd25 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Update TASKEVENT Setted from CAN1_RX0_IRQHandler ...");
			OS_TASKEVENT_Set(&CB_Update_TSK, TSK_EVENT_CHECKUPDATE);
 8004072:	2102      	movs	r1, #2
 8004074:	4839      	ldr	r0, [pc, #228]	; (800415c <CAN1_RX0_IRQHandler+0x1b0>)
 8004076:	f00b fbfb 	bl	800f870 <OS_TASKEVENT_Set>
 800407a:	e00a      	b.n	8004092 <CAN1_RX0_IRQHandler+0xe6>
		}
		//Diagnostics
		else if (CAN_RXMsg.id == GUI_DIAGNOSTIC_RQ_ID) {
 800407c:	4b33      	ldr	r3, [pc, #204]	; (800414c <CAN1_RX0_IRQHandler+0x1a0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d106      	bne.n	8004092 <CAN1_RX0_IRQHandler+0xe6>
			SEGGER_SYSVIEW_PrintfHost(
 8004084:	4837      	ldr	r0, [pc, #220]	; (8004164 <CAN1_RX0_IRQHandler+0x1b8>)
 8004086:	f7fe fd19 	bl	8002abc <SEGGER_SYSVIEW_PrintfHost>
					"Diagnostic TASKEVENT Setted from CAN1_RX0_IRQHandler ...");
			OS_TASKEVENT_Set(&CB_Diagnostic_TSK, TSK_ENENT_SENDDIAGNOSTICS);
 800408a:	2101      	movs	r1, #1
 800408c:	4836      	ldr	r0, [pc, #216]	; (8004168 <CAN1_RX0_IRQHandler+0x1bc>)
 800408e:	f00b fbef 	bl	800f870 <OS_TASKEVENT_Set>
		}
	}
	OS_INT_Leave();
 8004092:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10c      	bne.n	80040b6 <CAN1_RX0_IRQHandler+0x10a>
 800409c:	4b29      	ldr	r3, [pc, #164]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <CAN1_RX0_IRQHandler+0x10a>
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <CAN1_RX0_IRQHandler+0x11a>
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4798      	blx	r3
 80040b4:	e007      	b.n	80040c6 <CAN1_RX0_IRQHandler+0x11a>
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <CAN1_RX0_IRQHandler+0x11a>
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4798      	blx	r3
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040d2:	705a      	strb	r2, [r3, #1]
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d116      	bne.n	800410c <CAN1_RX0_IRQHandler+0x160>
 80040de:	4b19      	ldr	r3, [pc, #100]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <CAN1_RX0_IRQHandler+0x160>
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040e8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <CAN1_RX0_IRQHandler+0x14a>
 80040f0:	2098      	movs	r0, #152	; 0x98
 80040f2:	f00b f86f 	bl	800f1d4 <OS_Error>
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 80040f8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8004102:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004106:	f7fc f95d 	bl	80003c4 <OS_SwitchFromInt>
 800410a:	e00f      	b.n	800412c <CAN1_RX0_IRQHandler+0x180>
 800410c:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 800410e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <CAN1_RX0_IRQHandler+0x170>
 8004116:	2098      	movs	r0, #152	; 0x98
 8004118:	f00b f85c 	bl	800f1d4 <OS_Error>
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 800411e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004122:	3b01      	subs	r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8004128:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b03      	ldr	r3, [pc, #12]	; (8004144 <CAN1_RX0_IRQHandler+0x198>)
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	f383 8811 	msr	BASEPRI, r3

}
 8004140:	bf00      	nop
 8004142:	bd80      	pop	{r7, pc}
 8004144:	200051a8 	.word	0x200051a8
 8004148:	40006400 	.word	0x40006400
 800414c:	20002e3c 	.word	0x20002e3c
 8004150:	08011728 	.word	0x08011728
 8004154:	200022cc 	.word	0x200022cc
 8004158:	0801176c 	.word	0x0801176c
 800415c:	20001e78 	.word	0x20001e78
 8004160:	080117b0 	.word	0x080117b0
 8004164:	080117e8 	.word	0x080117e8
 8004168:	20002b74 	.word	0x20002b74

0800416c <CAN_Config>:

/* ------------------------------- Configuration for CAN ---------------------------------*/
/*
 * */

void CAN_Config(CAN_TypeDef *CANx, CAN_setupTypeDef *CANsetupStruct) {
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	/* Initialization request */
	CANx->MCR |= CAN_MCR_INRQ;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]

	/*Request to exit Sleep mode */
	CANx->MCR &= ~CAN_MCR_SLEEP_Msk;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 0202 	bic.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]

	/* Wait for initialization mode */
	while (!(CAN_MSR_INAK & CANx->MSR))
 800418e:	bf00      	nop
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f9      	beq.n	8004190 <CAN_Config+0x24>
		;

	/******************* SET MCR register configuration**************************/

	/* Set the time triggered communication mode */
	if (CANsetupStruct->TTCM == ENABLE) {
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <CAN_Config+0x46>
		CANx->MCR |= CAN_MCR_TTCM;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e005      	b.n	80041be <CAN_Config+0x52>
	} else {
		CANx->MCR &= ~(CAN_MCR_TTCM_Msk);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
	}
	/* Set the automatic bus-off management */
	if (CANsetupStruct->ABOM == ENABLE) {
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d106      	bne.n	80041d4 <CAN_Config+0x68>
		CANx->MCR |= CAN_MCR_ABOM;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e005      	b.n	80041e0 <CAN_Config+0x74>
	} else {
		CANx->MCR &= ~(CAN_MCR_ABOM_Msk);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (CANsetupStruct->AWUM == ENABLE) {
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <CAN_Config+0x8a>
		CANx->MCR |= CAN_MCR_AWUM;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e005      	b.n	8004202 <CAN_Config+0x96>
	} else {
		CANx->MCR &= ~(CAN_MCR_AWUM_Msk);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0220 	bic.w	r2, r3, #32
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
	}

	/* Set the no automatic retransmission */
	if (CANsetupStruct->NART == ENABLE) {
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	78db      	ldrb	r3, [r3, #3]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <CAN_Config+0xac>
		CANx->MCR |= CAN_MCR_NART;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f043 0210 	orr.w	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e005      	b.n	8004224 <CAN_Config+0xb8>
	} else {
		CANx->MCR &= ~(CAN_MCR_NART_Msk);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0210 	bic.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (CANsetupStruct->TXFP == ENABLE) {
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	795b      	ldrb	r3, [r3, #5]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <CAN_Config+0xce>
		CANx->MCR &= ~(CAN_MCR_TXFP_Msk);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 0204 	bic.w	r2, r3, #4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e005      	b.n	8004246 <CAN_Config+0xda>
	} else {
		CANx->MCR |= CAN_MCR_TXFP;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f043 0204 	orr.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
	}
	if (CANsetupStruct->RFLM == ENABLE) {
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <CAN_Config+0xf0>
		//FIFO Overload Lock Mode
		CANx->MCR |= CAN_MCR_RFLM;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f043 0208 	orr.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e005      	b.n	8004268 <CAN_Config+0xfc>
	} else {
		CANx->MCR &= ~(CAN_MCR_RFLM_Msk);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 0208 	bic.w	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]
	 * tBS2 = tq * (TS2[2:0] + 1)  = 0.111 * (0+1)  = 0.111 micro sec
	 * NominalBitTime = 1 * tq + tBS1 + tBS2 = 0.111 + 0.777 + 0.111 = 0.999 micro sec
	 * Boudrate = 1 / NominalBitTime = 1 Mbps
	 *
	 * */
	CANx->BTR = CAN_BTR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <CAN_Config+0x110>)
 800426c:	61da      	str	r2, [r3, #28]
	//set all filters to our can (other can must deactivate)
	//CANx->FMR &= ~(CAN_FMR_CAN2SB_Msk);

}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	001e0013 	.word	0x001e0013

08004280 <CAN_Normal>:
}

/*
 * ---------------------------------- CAN set normal mode ---------------------------------
 */
void CAN_Normal(CAN_TypeDef *CANx) {
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

	CANx->MCR &= ~(CAN_MCR_INRQ_Msk | CAN_MCR_SLEEP_Msk); //normal operating mode, reset(INRQ,SLEEP)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 0203 	bic.w	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]

	while (CANx->MSR & CAN_MSR_INAK)
 8004294:	bf00      	nop
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f9      	bne.n	8004296 <CAN_Normal+0x16>
		;

}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <CAN_Transmit>:

/*
 * note : para MailboxNumber Can be :TX_MAILBOX_0, TX_MAILBOX_1, TX_MAILBOX_2
 *------------------------------------ CAN Transmission ----------------------------------
 */
void CAN_Transmit(CAN_TypeDef *CANx, CAN_msg *msg) {
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	/* check if transmission mailbox is empty */
	uint8_t mailBoxIndex = 10;
 80042ba:	230a      	movs	r3, #10
 80042bc:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 80042be:	e019      	b.n	80042f4 <CAN_Transmit+0x44>
		if(CANx->TSR & CAN_TSR_TME0){
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <CAN_Transmit+0x22>
			mailBoxIndex = CAN_TSR_TME0 >> 27;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e010      	b.n	80042f4 <CAN_Transmit+0x44>
		}else if(CANx->TSR & CAN_TSR_TME1){
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <CAN_Transmit+0x34>
			mailBoxIndex = CAN_TSR_TME1 >> 27;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	e007      	b.n	80042f4 <CAN_Transmit+0x44>
		}else if (CANx->TSR & CAN_TSR_TME2) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <CAN_Transmit+0x44>
			mailBoxIndex = CAN_TSR_TME2 >> 27;
 80042f0:	2302      	movs	r3, #2
 80042f2:	73fb      	strb	r3, [r7, #15]
	while (mailBoxIndex == 10){
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d0e2      	beq.n	80042c0 <CAN_Transmit+0x10>
		}
	}
	 // ------ check if transmission mailbox  is empty ------------------------------------

	CANx->sTxMailBox[mailBoxIndex].TIR = (uint32_t) 0; // Reset TIR register
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	3318      	adds	r3, #24
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

	// Setup identifier information   ?<==================
	if (msg->format == CAN_STANDARD_FORMAT) {
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	7b5b      	ldrb	r3, [r3, #13]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d110      	bne.n	8004332 <CAN_Transmit+0x82>
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 21);
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	3318      	adds	r3, #24
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	055a      	lsls	r2, r3, #21
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	430a      	orrs	r2, r1
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	3318      	adds	r3, #24
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	440b      	add	r3, r1
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e011      	b.n	8004356 <CAN_Transmit+0xa6>
	} else {
		// Extended ID
		CANx->sTxMailBox[mailBoxIndex].TIR |= (uint32_t) (msg->id << 3)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	3318      	adds	r3, #24
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	431a      	orrs	r2, r3
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	3318      	adds	r3, #24
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	440b      	add	r3, r1
 8004354:	601a      	str	r2, [r3, #0]
				| CAN_TI0R_IDE;
	}

	// Setup type information
	if (msg->type == CAN_DATA_FRAME) {
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7b9b      	ldrb	r3, [r3, #14]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d13c      	bne.n	80043d8 <CAN_Transmit+0x128>
		// DATA FRAME
		/*reset transmit data registers*/
		CANx->sTxMailBox[mailBoxIndex].TDLR = 0;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
		CANx->sTxMailBox[mailBoxIndex].TDHR = 0;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4413      	add	r3, r2
 8004376:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	79db      	ldrb	r3, [r3, #7]
 8004382:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[2] << 16)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	799b      	ldrb	r3, [r3, #6]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	795b      	ldrb	r3, [r3, #5]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	431a      	orrs	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[1] << 8) | ((uint32_t) msg->data[0]));
 800439c:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDLR = (((uint32_t) msg->data[3] << 24)
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043a8:	601a      	str	r2, [r3, #0]

		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	7adb      	ldrb	r3, [r3, #11]
 80043ae:	061a      	lsls	r2, r3, #24
				| ((uint32_t) msg->data[6] << 16)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	7a9b      	ldrb	r3, [r3, #10]
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	7a5b      	ldrb	r3, [r3, #9]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	431a      	orrs	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	7a1b      	ldrb	r3, [r3, #8]
 80043c4:	4619      	mov	r1, r3
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
				| ((uint32_t) msg->data[5] << 8) | ((uint32_t) msg->data[4]));
 80043c8:	430a      	orrs	r2, r1
		CANx->sTxMailBox[mailBoxIndex].TDHR = (((uint32_t) msg->data[7] << 24)
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	440b      	add	r3, r1
 80043d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e00d      	b.n	80043f4 <CAN_Transmit+0x144>
	} else {
		// REMOTE FRAME
		CANx->sTxMailBox[mailBoxIndex].TIR |= (CAN_TI0R_RTR);
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	3318      	adds	r3, #24
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	f042 0202 	orr.w	r2, r2, #2
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	3318      	adds	r3, #24
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	440b      	add	r3, r1
 80043f2:	601a      	str	r2, [r3, #0]
	}

	// Setup Can frame Data length Code
	CANx->sTxMailBox[mailBoxIndex].TDTR &= ~CAN_TDT0R_DLC;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	3318      	adds	r3, #24
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	f022 020f 	bic.w	r2, r2, #15
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	3318      	adds	r3, #24
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	440b      	add	r3, r1
 8004410:	3304      	adds	r3, #4
 8004412:	601a      	str	r2, [r3, #0]
	CANx->sTxMailBox[mailBoxIndex].TDTR |= (msg->length & CAN_TDT0R_DLC);
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	3318      	adds	r3, #24
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	4413      	add	r3, r2
 800441e:	3304      	adds	r3, #4
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	7b1b      	ldrb	r3, [r3, #12]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	430a      	orrs	r2, r1
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	3318      	adds	r3, #24
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	440b      	add	r3, r1
 8004436:	3304      	adds	r3, #4
 8004438:	601a      	str	r2, [r3, #0]

	/* Transmit Mailbox Request */
	CANx->sTxMailBox[mailBoxIndex].TIR |= CAN_TI0R_TXRQ;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	3318      	adds	r3, #24
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	3318      	adds	r3, #24
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	440b      	add	r3, r1
 8004454:	601a      	str	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <CAN_Receive>:
	return id;
}

/* -------------------------------      CAN Receiving     ------------------------------- */
// note para FifoNumber can be CAN_FIFO0, CAN_FIFO1
void CAN_Receive(CAN_TypeDef *CANx, uint8_t FifoNumber, CAN_msg *msg) {
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	460b      	mov	r3, r1
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	72fb      	strb	r3, [r7, #11]

	// Read identifier information
	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_IDE) == 0) {
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	331b      	adds	r3, #27
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4413      	add	r3, r2
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10e      	bne.n	80044a2 <CAN_Receive+0x40>
		// Standard ID

		msg->format = CAN_STANDARD_FORMAT;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x000007FF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 21);
 800448a:	7afb      	ldrb	r3, [r7, #11]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	331b      	adds	r3, #27
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0d5b      	lsrs	r3, r3, #21
 8004498:	f3c3 020a 	ubfx	r2, r3, #0, #11
		msg->id = (uint32_t) 0x000007FF
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e00d      	b.n	80044be <CAN_Receive+0x5c>
	} else {
		// Extended ID
		msg->format = CAN_EXTENDED_FORMAT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	735a      	strb	r2, [r3, #13]

		msg->id = (uint32_t) 0x0003FFFF
				& (CANx->sFIFOMailBox[FifoNumber].RIR >> 3);
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	331b      	adds	r3, #27
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4413      	add	r3, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	08db      	lsrs	r3, r3, #3
 80044b6:	f3c3 0211 	ubfx	r2, r3, #0, #18
		msg->id = (uint32_t) 0x0003FFFF
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
	}

	// Read type information

	if ((CANx->sFIFOMailBox[FifoNumber].RIR & CAN_TI0R_RTR) == 0) {
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	331b      	adds	r3, #27
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <CAN_Receive+0x78>

		msg->type = CAN_DATA_FRAME;                     // DATA   FRAME
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	739a      	strb	r2, [r3, #14]
 80044d8:	e002      	b.n	80044e0 <CAN_Receive+0x7e>

	} else {
		msg->type = CAN_REMOTE_FRAME;                   // REMOTE FRAME
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	739a      	strb	r2, [r3, #14]
	}

	// Read length (number of received bytes)
	msg->length = (uint8_t) 0x0000000F & CANx->sFIFOMailBox[FifoNumber].RDTR;
 80044e0:	7afb      	ldrb	r3, [r7, #11]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	331b      	adds	r3, #27
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	731a      	strb	r2, [r3, #12]

	// Read data bytes
	uint8_t ReceivDataCounter;

	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
 80044fe:	e027      	b.n	8004550 <CAN_Receive+0xee>
			ReceivDataCounter++)

			{
		if (ReceivDataCounter < 4) /*get Data from low register*/
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d810      	bhi.n	8004528 <CAN_Receive+0xc6>
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004512:	681a      	ldr	r2, [r3, #0]
					>> (ReceivDataCounter * 8)) & 0xFF; //get Data from low register byte by byte
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDLR
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	b2d1      	uxtb	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	460a      	mov	r2, r1
 8004524:	711a      	strb	r2, [r3, #4]
 8004526:	e010      	b.n	800454a <CAN_Receive+0xe8>
		} else /*get Data from high register*/
		{
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 8004528:	7afb      	ldrb	r3, [r7, #11]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004534:	681a      	ldr	r2, [r3, #0]
					>> ((ReceivDataCounter - 4) * 8)) & 0xFF; //get Data from high register byte by byte
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	3b04      	subs	r3, #4
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	40da      	lsrs	r2, r3
			msg->data[ReceivDataCounter] = (CANx->sFIFOMailBox[FifoNumber].RDHR
 800453e:	7dfb      	ldrb	r3, [r7, #23]
 8004540:	b2d1      	uxtb	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	460a      	mov	r2, r1
 8004548:	711a      	strb	r2, [r3, #4]
			ReceivDataCounter++)
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	3301      	adds	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
	for (ReceivDataCounter = 0; ReceivDataCounter < msg->length;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7b1b      	ldrb	r3, [r3, #12]
 8004554:	7dfa      	ldrb	r2, [r7, #23]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3d2      	bcc.n	8004500 <CAN_Receive+0x9e>
		}

	}

	if (FifoNumber == CAN_FIFO0) //check for input FIFO to release
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <CAN_Receive+0x10c>
	{

		CANx->RF0R |= CAN_RF0R_RFOM0;  //release FIFO 0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	e008      	b.n	8004580 <CAN_Receive+0x11e>
	}

	else if (FifoNumber == CAN_FIFO1) {
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <CAN_Receive+0x11e>

		CANx->RF1R |= CAN_RF1R_RFOM1;  //release FIFO 1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	611a      	str	r2, [r3, #16]

	else {

		/*wrong FIFO number input*/
	}
	msg->ActiveFlag = ENABLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	73da      	strb	r2, [r3, #15]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <CAN_Interrupt_Enable>:
/*
 * ------------------------------------ CAN interrupt ------------------------------------
 */

void CAN_Interrupt_Enable(CAN_TypeDef *CANx, uint32_t CanInterruptType,
		FunctionalState InterruptNewState) {
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]

	if (InterruptNewState == ENABLE) //check for input new state of input interrupt
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <CAN_Interrupt_Enable+0x22>
			{

		CANx->IER |= CanInterruptType; // Enable the selected CANx interrupt
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	615a      	str	r2, [r3, #20]
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt

	} else {
		/*WRONG STATE */
	}
}
 80045b2:	e009      	b.n	80045c8 <CAN_Interrupt_Enable+0x36>
	} else if (InterruptNewState == DISABLE) {
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <CAN_Interrupt_Enable+0x36>
		CANx->IER &= ~CanInterruptType; // Disable the selected CANx interrupt
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	401a      	ands	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	615a      	str	r2, [r3, #20]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <CAN_ConfigFilter>:
	ErrorcodeType = (((uint8_t) CANx->ESR) & (uint8_t) CAN_ESR_LEC); // Get the last error code

	return ErrorcodeType; //Return the error code
}

void CAN_ConfigFilter(CAN_TypeDef *CANx, CAN_FilterTypeDef *sFilterConfig) {
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;

	/* Initialization mode for the filter */
	CANx->FMR |= CAN_FMR_FINIT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Convert filter number into bit position */
	filternbrbitpos = (uint32_t) 1 << (sFilterConfig->FilterBank & 0x1FU);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2201      	movs	r2, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CANx->FA1R &= ~(filternbrbitpos);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	43db      	mvns	r3, r3
 8004608:	401a      	ands	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	/* Filter Scale */

	/* 32-bit scale for the filter */
	CANx->FS1R |= filternbrbitpos;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Filter Mode */
	if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <CAN_ConfigFilter+0x68>
		/* Id/Mask mode for the filter*/
		CANx->FM1R &= ~(filternbrbitpos);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43db      	mvns	r3, r3
 8004632:	401a      	ands	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800463a:	e007      	b.n	800464c <CAN_ConfigFilter+0x78>

	} else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
	{
		/* Identifier list mode for the filter*/
		CANx->FM1R |= (filternbrbitpos);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}
	/* 32-bit identifier  */
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR1 =
				((uint32_t) sFilterConfig->FilterId) << 21;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68d2      	ldr	r2, [r2, #12]
				((uint32_t) sFilterConfig->FilterId) << 21;
 8004654:	0559      	lsls	r1, r3, #21
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3248      	adds	r2, #72	; 0x48
 800465a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR2 =
				((uint32_t) sFilterConfig->FilterMaskId) << 21;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
				((uint32_t) sFilterConfig->FilterMaskId) << 21;
 8004666:	0552      	lsls	r2, r2, #21
	CANx->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	3348      	adds	r3, #72	; 0x48
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	605a      	str	r2, [r3, #4]

	/* Filter FIFO assignment */
	if (sFilterConfig->FilterFIFOAssignment == CAN_FIFO0) {
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <CAN_ConfigFilter+0xba>
		/* FIFO 0 assignation for the filter */
		CANx->FFA1R &= ~(filternbrbitpos);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43db      	mvns	r3, r3
 8004684:	401a      	ands	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800468c:	e007      	b.n	800469e <CAN_ConfigFilter+0xca>
	} else {
		/* FIFO 1 assignation for the filter */
		CANx->FFA1R |= (filternbrbitpos);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	}

	/* Filter activation */
	if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE) {
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <CAN_ConfigFilter+0xe2>
		CANx->FA1R |= filternbrbitpos;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	}

	/* Leave the initialization mode for the filter */
	CANx->FMR &= ~(CAN_FMR_FINIT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046bc:	f023 0201 	bic.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <DMA_StreamConfig>:



fptr DMA_fptr[8] = {NULL};

void DMA_StreamConfig(DMA_Stream_TypeDef *DMA_Stream, DMA_Stream_Config StreamConfig){
 80046d2:	b084      	sub	sp, #16
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	f107 0014 	add.w	r0, r7, #20
 80046e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DMA_Stream->CR = 0x0;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.TransferType;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.ChannelPriority;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.MDataSize;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.PDataSize;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.MemIncrement;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.PerIncrement;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.CirularMode;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= StreamConfig.ChannelNumber;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]
	//enable transfer complete interrupt
	DMA_Stream->CR |= DMA_SxCR_TCIE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	b004      	add	sp, #16
 8004762:	4770      	bx	lr

08004764 <DMA_Enable>:

void DMA_Enable(DMA_Stream_TypeDef *DMA_Stream, uint32_t PerpheralAddress, uint32_t MemoryAddress, uint16_t amountOfData){
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	807b      	strh	r3, [r7, #2]
	DMA_Stream->NDTR = amountOfData;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	605a      	str	r2, [r3, #4]
	DMA_Stream->PAR  = PerpheralAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	609a      	str	r2, [r3, #8]
	DMA_Stream->M0AR = MemoryAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]
	DMA_Stream->M1AR = PerpheralAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	611a      	str	r2, [r3, #16]
	DMA_Stream->CR  |= DMA_SxCR_EN;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <DMA_Disable>:
void DMA_Disable(DMA_Stream_TypeDef *DMA_Stream){
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
	DMA_Stream->CR &= ~(DMA_SxCR_EN_Msk);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <DMA_Interrput_SelectCallBack>:
void DMA_Interrput_SelectCallBack(uint8_t DMA_StreamNumber, fptr ptr){
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	71fb      	strb	r3, [r7, #7]
	 if(DMA_StreamNumber == DMA_Stream0){
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <DMA_Interrput_SelectCallBack+0x1a>
		DMA_fptr[0] = ptr;
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6013      	str	r3, [r2, #0]
	}else if (DMA_StreamNumber == DMA_Stream6) {
		DMA_fptr[6] = ptr;
	}else if (DMA_StreamNumber == DMA_Stream7) {
		DMA_fptr[7] = ptr;
	}
}
 80047dc:	e02f      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream1) {
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d103      	bne.n	80047ec <DMA_Interrput_SelectCallBack+0x28>
		DMA_fptr[1] = ptr;
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6053      	str	r3, [r2, #4]
}
 80047ea:	e028      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream2) {
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <DMA_Interrput_SelectCallBack+0x36>
		DMA_fptr[2] = ptr;
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6093      	str	r3, [r2, #8]
}
 80047f8:	e021      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream3) {
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d103      	bne.n	8004808 <DMA_Interrput_SelectCallBack+0x44>
		DMA_fptr[3] = ptr;
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	60d3      	str	r3, [r2, #12]
}
 8004806:	e01a      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream4) {
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d103      	bne.n	8004816 <DMA_Interrput_SelectCallBack+0x52>
		DMA_fptr[4] = ptr;
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6113      	str	r3, [r2, #16]
}
 8004814:	e013      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream5) {
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	2b05      	cmp	r3, #5
 800481a:	d103      	bne.n	8004824 <DMA_Interrput_SelectCallBack+0x60>
		DMA_fptr[5] = ptr;
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6153      	str	r3, [r2, #20]
}
 8004822:	e00c      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream6) {
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d103      	bne.n	8004832 <DMA_Interrput_SelectCallBack+0x6e>
		DMA_fptr[6] = ptr;
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6193      	str	r3, [r2, #24]
}
 8004830:	e005      	b.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
	}else if (DMA_StreamNumber == DMA_Stream7) {
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b07      	cmp	r3, #7
 8004836:	d102      	bne.n	800483e <DMA_Interrput_SelectCallBack+0x7a>
		DMA_fptr[7] = ptr;
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <DMA_Interrput_SelectCallBack+0x88>)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	61d3      	str	r3, [r2, #28]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20002ef8 	.word	0x20002ef8

08004850 <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void) {
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF0) {
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <DMA1_Stream0_IRQHandler+0x28>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <DMA1_Stream0_IRQHandler+0x22>
		DMA_fptr[0]();
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <DMA1_Stream0_IRQHandler+0x2c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4798      	blx	r3
		DMA1->LIFCR |= DMA_LIFCR_CTCIF0;
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <DMA1_Stream0_IRQHandler+0x28>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4a03      	ldr	r2, [pc, #12]	; (8004878 <DMA1_Stream0_IRQHandler+0x28>)
 800486c:	f043 0320 	orr.w	r3, r3, #32
 8004870:	6093      	str	r3, [r2, #8]
	}

}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40026000 	.word	0x40026000
 800487c:	20002ef8 	.word	0x20002ef8

08004880 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF1) {
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <DMA1_Stream1_IRQHandler+0x28>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <DMA1_Stream1_IRQHandler+0x22>
		DMA_fptr[1]();
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <DMA1_Stream1_IRQHandler+0x2c>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4798      	blx	r3
		DMA1->LIFCR |= DMA_LIFCR_CTCIF1;
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <DMA1_Stream1_IRQHandler+0x28>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <DMA1_Stream1_IRQHandler+0x28>)
 800489c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048a0:	6093      	str	r3, [r2, #8]
	}

}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40026000 	.word	0x40026000
 80048ac:	20002ef8 	.word	0x20002ef8

080048b0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void) {
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
	if (DMA1->LISR & DMA_LISR_TCIF2) {
 80048b4:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <DMA1_Stream2_IRQHandler+0x28>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <DMA1_Stream2_IRQHandler+0x1c>
		//DMA_fptr[2]();
		DMA1->LIFCR |= DMA_LIFCR_CTCIF2;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <DMA1_Stream2_IRQHandler+0x28>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <DMA1_Stream2_IRQHandler+0x28>)
 80048c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ca:	6093      	str	r3, [r2, #8]
	}

}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40026000 	.word	0x40026000

080048dc <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF3) {
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <DMA1_Stream3_IRQHandler+0x28>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <DMA1_Stream3_IRQHandler+0x22>
		DMA_fptr[3]();
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <DMA1_Stream3_IRQHandler+0x2c>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4798      	blx	r3
		DMA1->LIFCR |= DMA_LIFCR_CTCIF3;
 80048f2:	4b04      	ldr	r3, [pc, #16]	; (8004904 <DMA1_Stream3_IRQHandler+0x28>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4a03      	ldr	r2, [pc, #12]	; (8004904 <DMA1_Stream3_IRQHandler+0x28>)
 80048f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048fc:	6093      	str	r3, [r2, #8]
	}

}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40026000 	.word	0x40026000
 8004908:	20002ef8 	.word	0x20002ef8

0800490c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void) {
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
	if (DMA1->HISR & DMA_HISR_TCIF4) {
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <DMA1_Stream4_IRQHandler+0x28>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <DMA1_Stream4_IRQHandler+0x22>
		DMA_fptr[4]();
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <DMA1_Stream4_IRQHandler+0x2c>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	4798      	blx	r3
		DMA1->HIFCR |= DMA_HIFCR_CTCIF4;
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <DMA1_Stream4_IRQHandler+0x28>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4a03      	ldr	r2, [pc, #12]	; (8004934 <DMA1_Stream4_IRQHandler+0x28>)
 8004928:	f043 0320 	orr.w	r3, r3, #32
 800492c:	60d3      	str	r3, [r2, #12]

	}

}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40026000 	.word	0x40026000
 8004938:	20002ef8 	.word	0x20002ef8

0800493c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void) {
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0

	if (DMA1->HISR & DMA_HISR_TCIF5) {
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <DMA1_Stream5_IRQHandler+0x28>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <DMA1_Stream5_IRQHandler+0x22>
		DMA_fptr[5]();
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <DMA1_Stream5_IRQHandler+0x2c>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	4798      	blx	r3
		DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <DMA1_Stream5_IRQHandler+0x28>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a03      	ldr	r2, [pc, #12]	; (8004964 <DMA1_Stream5_IRQHandler+0x28>)
 8004958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800495c:	60d3      	str	r3, [r2, #12]
	}

}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40026000 	.word	0x40026000
 8004968:	20002ef8 	.word	0x20002ef8

0800496c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void) {
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0

	if (DMA1->HISR & DMA_HISR_TCIF6) {
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <DMA1_Stream6_IRQHandler+0x28>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <DMA1_Stream6_IRQHandler+0x22>
		DMA_fptr[6]();
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <DMA1_Stream6_IRQHandler+0x2c>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4798      	blx	r3
		DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <DMA1_Stream6_IRQHandler+0x28>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4a03      	ldr	r2, [pc, #12]	; (8004994 <DMA1_Stream6_IRQHandler+0x28>)
 8004988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800498c:	60d3      	str	r3, [r2, #12]
	}

}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40026000 	.word	0x40026000
 8004998:	20002ef8 	.word	0x20002ef8

0800499c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void) {
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0

	if (DMA1->HISR & DMA_HISR_TCIF7) {
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <DMA1_Stream7_IRQHandler+0x28>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <DMA1_Stream7_IRQHandler+0x22>
		DMA_fptr[7]();
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <DMA1_Stream7_IRQHandler+0x2c>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4798      	blx	r3
		DMA1->HIFCR |= DMA_HIFCR_CTCIF7;
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <DMA1_Stream7_IRQHandler+0x28>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4a03      	ldr	r2, [pc, #12]	; (80049c4 <DMA1_Stream7_IRQHandler+0x28>)
 80049b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049bc:	60d3      	str	r3, [r2, #12]
	}

}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40026000 	.word	0x40026000
 80049c8:	20002ef8 	.word	0x20002ef8

080049cc <GPIO_Config_Pin>:
}
void GPIO_Write_Port(GPIO_TypeDef *GPIOx,uint16_t Port_Value){
	GPIOx->ODR = Port_Value;
}

void GPIO_Config_Pin(GPIO_TypeDef *GPIOx, uint8_t pinNumber, GPIO_Config pinConfig){
 80049cc:	b082      	sub	sp, #8
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	f107 0010 	add.w	r0, r7, #16
 80049da:	e880 000c 	stmia.w	r0, {r2, r3}
 80049de:	460b      	mov	r3, r1
 80049e0:	70fb      	strb	r3, [r7, #3]
	GPIOx->MODER |= (uint32_t)((pinConfig.Mode & 0x0F) << (pinNumber*2));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 010f 	and.w	r1, r3, #15
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
	GPIOx->OSPEEDR |= (uint32_t)(pinConfig.Speed << (pinNumber*2));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
	GPIOx->PUPDR |= (uint32_t)(pinConfig.PullupPullDown << (pinNumber*2));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]
	if((pinConfig.Mode & 0x0F) == 0x02){
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11d      	bne.n	8004a68 <GPIO_Config_Pin+0x9c>
		if(pinNumber <= GPIO_PIN_7){
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	2b07      	cmp	r3, #7
 8004a30:	d80b      	bhi.n	8004a4a <GPIO_Config_Pin+0x7e>
			GPIOx->AFR[0] |= (uint32_t)((pinConfig.Mode >> 4) << pinNumber*4);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1a      	ldr	r2, [r3, #32]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	0919      	lsrs	r1, r3, #4
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]
		}else {
			//NOP
		}
	}

}
 8004a48:	e00e      	b.n	8004a68 <GPIO_Config_Pin+0x9c>
		}else if (pinNumber <= GPIO_PIN_15) {
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	2b0f      	cmp	r3, #15
 8004a4e:	d80b      	bhi.n	8004a68 <GPIO_Config_Pin+0x9c>
			GPIOx->AFR[1] |= (uint32_t)((pinConfig.Mode >> 4) << (pinNumber - 8)*4);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	0919      	lsrs	r1, r3, #4
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	3b08      	subs	r3, #8
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	b002      	add	sp, #8
 8004a74:	4770      	bx	lr

08004a76 <GPIO_Write_Pin>:

uint8_t GPIO_Read_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number){
	return (((GPIOx->IDR) >> Pin_Number) & 0x1);
}
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint8_t Pin_Number, uint8_t Value){
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
 8004a82:	4613      	mov	r3, r2
 8004a84:	70bb      	strb	r3, [r7, #2]
	if(Value == HIGH){
 8004a86:	78bb      	ldrb	r3, [r7, #2]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d109      	bne.n	8004aa0 <GPIO_Write_Pin+0x2a>
		GPIOx->BSRR |= (0x1 << Pin_Number);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	2101      	movs	r1, #1
 8004a94:	fa01 f202 	lsl.w	r2, r1, r2
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	619a      	str	r2, [r3, #24]
	}else if(Value == LOW){
		GPIOx->BSRR |= (0x1 << (Pin_Number + 16));
	}
}
 8004a9e:	e00c      	b.n	8004aba <GPIO_Write_Pin+0x44>
	}else if(Value == LOW){
 8004aa0:	78bb      	ldrb	r3, [r7, #2]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <GPIO_Write_Pin+0x44>
		GPIOx->BSRR |= (0x1 << (Pin_Number + 16));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	3210      	adds	r2, #16
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	619a      	str	r2, [r3, #24]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <GSM_SetInternalBuffer>:
uint8_t* GSM_InternalBuffer = NULL;
volatile uint8_t GSM_TX_Completeflag = 0;



void GSM_SetInternalBuffer(uint8_t* internalBuffer, uint16_t internalBufferSize){
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
	uint32_t counter = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
	GSM_InternalBuffer = internalBuffer;
 8004ad8:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <GSM_SetInternalBuffer+0x40>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6013      	str	r3, [r2, #0]
	while(counter < internalBufferSize){
 8004ade:	e007      	b.n	8004af0 <GSM_SetInternalBuffer+0x28>
		GSM_InternalBuffer[counter++] = '\0';
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <GSM_SetInternalBuffer+0x40>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	60f9      	str	r1, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
	while(counter < internalBufferSize){
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d3f3      	bcc.n	8004ae0 <GSM_SetInternalBuffer+0x18>
	}
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20002f18 	.word	0x20002f18

08004b0c <GSM_INIT>:

uint8_t GSM_INIT(void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b0cc      	sub	sp, #304	; 0x130
 8004b10:	af00      	add	r7, sp, #0
	uint8_t response = GSM_NOK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint8_t GSM_Buffer[300];
	uint16_t counter = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	while(counter < 300){
 8004b1e:	e00b      	b.n	8004b38 <GSM_INIT+0x2c>
		GSM_Buffer[counter++] = '\0';
 8004b20:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	f8a7 212c 	strh.w	r2, [r7, #300]	; 0x12c
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]
	while(counter < 300){
 8004b38:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8004b3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b40:	d3ee      	bcc.n	8004b20 <GSM_INIT+0x14>
	}
	DMA_Interrput_SelectCallBack(DMA_Stream4, GSM_DMATx_InterruptFun);
 8004b42:	493e      	ldr	r1, [pc, #248]	; (8004c3c <GSM_INIT+0x130>)
 8004b44:	2004      	movs	r0, #4
 8004b46:	f7ff fe3d 	bl	80047c4 <DMA_Interrput_SelectCallBack>
	//COMMAND ECHO MODE OFF
	while (response != GSM_OK) {
 8004b4a:	e011      	b.n	8004b70 <GSM_INIT+0x64>
		GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT\n", 2);
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	2202      	movs	r2, #2
 8004b50:	493b      	ldr	r1, [pc, #236]	; (8004c40 <GSM_INIT+0x134>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f888 	bl	8004c68 <GSM_DMA_SendCommand>
		response = strSearch(GSM_Buffer, (const uint8_t*) "OK", 1, NULL);
 8004b58:	4638      	mov	r0, r7
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4939      	ldr	r1, [pc, #228]	; (8004c44 <GSM_INIT+0x138>)
 8004b60:	f000 fc1e 	bl	80053a0 <strSearch>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		TIM_Delay(200);
 8004b6a:	20c8      	movs	r0, #200	; 0xc8
 8004b6c:	f000 fe56 	bl	800581c <TIM_Delay>
	while (response != GSM_OK) {
 8004b70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1e9      	bne.n	8004b4c <GSM_INIT+0x40>
	}
	response = GSM_NOK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	GSM_DMA_SendCommand(GSM_Buffer,
 8004b7e:	463b      	mov	r3, r7
 8004b80:	2202      	movs	r2, #2
 8004b82:	4931      	ldr	r1, [pc, #196]	; (8004c48 <GSM_INIT+0x13c>)
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f86f 	bl	8004c68 <GSM_DMA_SendCommand>
			(const uint8_t*) "AT+SAPBR=3,1,\"Contype\",\"GPRS\"\n", 2);
	GSM_DMA_SendCommand(GSM_Buffer,(const uint8_t*) "AT+CSTT=\"internet.vodafone.net\",\"internet\",\"internet\"\n",2); //vodafone
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	492f      	ldr	r1, [pc, #188]	; (8004c4c <GSM_INIT+0x140>)
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f869 	bl	8004c68 <GSM_DMA_SendCommand>
	//GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+CSTT=\"internet.te.eg\"\n", 2);//WE
	//GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+CSTT=\"mobinilweb\"\n", 2);//Orange
	GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+SAPBR=1,1\n", 2);
 8004b96:	463b      	mov	r3, r7
 8004b98:	2202      	movs	r2, #2
 8004b9a:	492d      	ldr	r1, [pc, #180]	; (8004c50 <GSM_INIT+0x144>)
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f863 	bl	8004c68 <GSM_DMA_SendCommand>
	response = strSearch(GSM_Buffer, (const uint8_t*) "OK", 1, NULL);
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4926      	ldr	r1, [pc, #152]	; (8004c44 <GSM_INIT+0x138>)
 8004baa:	f000 fbf9 	bl	80053a0 <strSearch>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	while (response != GSM_OK) {
 8004bb4:	e017      	b.n	8004be6 <GSM_INIT+0xda>
		GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+SAPBR=0,1\n", 2);
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4926      	ldr	r1, [pc, #152]	; (8004c54 <GSM_INIT+0x148>)
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f853 	bl	8004c68 <GSM_DMA_SendCommand>
		TIM_Delay(100);
 8004bc2:	2064      	movs	r0, #100	; 0x64
 8004bc4:	f000 fe2a 	bl	800581c <TIM_Delay>
		GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+SAPBR=1,1\n", 2);
 8004bc8:	463b      	mov	r3, r7
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4920      	ldr	r1, [pc, #128]	; (8004c50 <GSM_INIT+0x144>)
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f84a 	bl	8004c68 <GSM_DMA_SendCommand>
		response = strSearch(GSM_Buffer, (const uint8_t*) "OK", 1, NULL);
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2201      	movs	r2, #1
 8004bda:	491a      	ldr	r1, [pc, #104]	; (8004c44 <GSM_INIT+0x138>)
 8004bdc:	f000 fbe0 	bl	80053a0 <strSearch>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	while (response != GSM_OK) {
 8004be6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d1e3      	bne.n	8004bb6 <GSM_INIT+0xaa>
	}
	response = GSM_NOK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	//setup HTTP Protocol
	GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+HTTPINIT\n", 2);
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4917      	ldr	r1, [pc, #92]	; (8004c58 <GSM_INIT+0x14c>)
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f834 	bl	8004c68 <GSM_DMA_SendCommand>
	GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+HTTPSSL=1\n", 2);
 8004c00:	463b      	mov	r3, r7
 8004c02:	2202      	movs	r2, #2
 8004c04:	4915      	ldr	r1, [pc, #84]	; (8004c5c <GSM_INIT+0x150>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f82e 	bl	8004c68 <GSM_DMA_SendCommand>
	GSM_DMA_SendCommand(GSM_Buffer, (const uint8_t*) "AT+HTTPPARA=\"CID\",1\n",
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	2202      	movs	r2, #2
 8004c10:	4913      	ldr	r1, [pc, #76]	; (8004c60 <GSM_INIT+0x154>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f828 	bl	8004c68 <GSM_DMA_SendCommand>
			2);
	GSM_DMA_SendCommand(GSM_Buffer,
 8004c18:	463b      	mov	r3, r7
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4911      	ldr	r1, [pc, #68]	; (8004c64 <GSM_INIT+0x158>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f822 	bl	8004c68 <GSM_DMA_SendCommand>
			(const uint8_t*) "AT+HTTPPARA=\"REDIR\",1\n", 2);
	GSM_FlushBuffer(GSM_Buffer);
 8004c24:	463b      	mov	r3, r7
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fc72 	bl	8005510 <GSM_FlushBuffer>
	return response;
 8004c2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08005549 	.word	0x08005549
 8004c40:	08011824 	.word	0x08011824
 8004c44:	08011828 	.word	0x08011828
 8004c48:	0801182c 	.word	0x0801182c
 8004c4c:	0801184c 	.word	0x0801184c
 8004c50:	08011884 	.word	0x08011884
 8004c54:	08011894 	.word	0x08011894
 8004c58:	080118a4 	.word	0x080118a4
 8004c5c:	080118b4 	.word	0x080118b4
 8004c60:	080118c4 	.word	0x080118c4
 8004c64:	080118dc 	.word	0x080118dc

08004c68 <GSM_DMA_SendCommand>:
 * CR = Carriage Return (\r, 0x0D in hexadecimal, 13 in decimal) — moves the cursor to the beginning of the line without advancing to the next line.
 LF = Line Feed (\n, 0x0A in hexadecimal, 10 in decimal) — moves the cursor down to the next line without returning to the beginning of the line.
 * as the Crfl depends on the command
 */
void GSM_DMA_SendCommand(uint8_t *buffer, const uint8_t *command,
		uint8_t crlfToWait) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
	uint16_t datasize = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	82fb      	strh	r3, [r7, #22]
	GSM_FlushBuffer(buffer);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fc48 	bl	8005510 <GSM_FlushBuffer>
	DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c86:	4914      	ldr	r1, [pc, #80]	; (8004cd8 <GSM_DMA_SendCommand+0x70>)
 8004c88:	4814      	ldr	r0, [pc, #80]	; (8004cdc <GSM_DMA_SendCommand+0x74>)
 8004c8a:	f7ff fd6b 	bl	8004764 <DMA_Enable>
			(uint32_t) buffer, DMA_NDTR_MAX);
	while (command[++datasize] != '\0')
 8004c8e:	8afb      	ldrh	r3, [r7, #22]
 8004c90:	3301      	adds	r3, #1
 8004c92:	82fb      	strh	r3, [r7, #22]
 8004c94:	8afb      	ldrh	r3, [r7, #22]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f6      	bne.n	8004c8e <GSM_DMA_SendCommand+0x26>
		;
	DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	8afb      	ldrh	r3, [r7, #22]
 8004ca4:	490c      	ldr	r1, [pc, #48]	; (8004cd8 <GSM_DMA_SendCommand+0x70>)
 8004ca6:	480e      	ldr	r0, [pc, #56]	; (8004ce0 <GSM_DMA_SendCommand+0x78>)
 8004ca8:	f7ff fd5c 	bl	8004764 <DMA_Enable>
			(uint32_t) command, datasize);
	TIM_Delay(10); //just for debugging (-_-) , GSM_TX_Completeflag is not updating while debugging
 8004cac:	200a      	movs	r0, #10
 8004cae:	f000 fdb5 	bl	800581c <TIM_Delay>
	while (GSM_TX_Completeflag != 1)
 8004cb2:	bf00      	nop
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <GSM_DMA_SendCommand+0x7c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d1fa      	bne.n	8004cb4 <GSM_DMA_SendCommand+0x4c>
			;
	GSM_TX_Completeflag = 0;
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <GSM_DMA_SendCommand+0x7c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
	GSM_GSMWait(buffer, crlfToWait);
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fa23 	bl	8005114 <GSM_GSMWait>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40004c04 	.word	0x40004c04
 8004cdc:	40026040 	.word	0x40026040
 8004ce0:	40026070 	.word	0x40026070
 8004ce4:	20002f1c 	.word	0x20002f1c

08004ce8 <GSM_HTTPRequest>:
/*
 * @State: Done
 */

uint16_t GSM_HTTPRequest(uint8_t RequestType, const uint8_t *url,
		GSM_TxType* TxData, uint16_t *RxPayloadSize) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
	uint16_t urlSize = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t contentTypeSize = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t headerSize = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t TxPayloadSize[16];
	uint8_t TxPayloadSizeStringSize = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GSM_FlushBuffer(GSM_InternalBuffer);
 8004d0a:	4b96      	ldr	r3, [pc, #600]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fbfe 	bl	8005510 <GSM_FlushBuffer>
	if (TxData->contentType != NULL) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03a      	beq.n	8004d92 <GSM_HTTPRequest+0xaa>
		DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004d1c:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d26:	4990      	ldr	r1, [pc, #576]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004d28:	4890      	ldr	r0, [pc, #576]	; (8004f6c <GSM_HTTPRequest+0x284>)
 8004d2a:	f7ff fd1b 	bl	8004764 <DMA_Enable>
				(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
		UART_Send_String(UART4, (uint8_t*)"AT+HTTPPARA=\"CONTENT\",\"");
 8004d2e:	4990      	ldr	r1, [pc, #576]	; (8004f70 <GSM_HTTPRequest+0x288>)
 8004d30:	4890      	ldr	r0, [pc, #576]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004d32:	f000 fe31 	bl	8005998 <UART_Send_String>

		while (TxData->contentType[++contentTypeSize] != '\0')
 8004d36:	bf00      	nop
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d3e:	3301      	adds	r3, #1
 8004d40:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f5      	bne.n	8004d38 <GSM_HTTPRequest+0x50>
			;
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
				(uint32_t) TxData->contentType, contentTypeSize);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004d50:	461a      	mov	r2, r3
 8004d52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d54:	4984      	ldr	r1, [pc, #528]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004d56:	4888      	ldr	r0, [pc, #544]	; (8004f78 <GSM_HTTPRequest+0x290>)
 8004d58:	f7ff fd04 	bl	8004764 <DMA_Enable>
		TIM_Delay(10);
 8004d5c:	200a      	movs	r0, #10
 8004d5e:	f000 fd5d 	bl	800581c <TIM_Delay>
		while (GSM_TX_Completeflag != 1)
 8004d62:	bf00      	nop
 8004d64:	4b85      	ldr	r3, [pc, #532]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d1fa      	bne.n	8004d64 <GSM_HTTPRequest+0x7c>
			;
		GSM_TX_Completeflag = 0;
 8004d6e:	4b83      	ldr	r3, [pc, #524]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
		UART_Send_String(UART4, (uint8_t*)"\"\n");
 8004d74:	4982      	ldr	r1, [pc, #520]	; (8004f80 <GSM_HTTPRequest+0x298>)
 8004d76:	487f      	ldr	r0, [pc, #508]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004d78:	f000 fe0e 	bl	8005998 <UART_Send_String>
		GSM_GSMWait(GSM_InternalBuffer, 2);
 8004d7c:	4b79      	ldr	r3, [pc, #484]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2102      	movs	r1, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f9c6 	bl	8005114 <GSM_GSMWait>
		GSM_FlushBuffer(GSM_InternalBuffer);
 8004d88:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fbbf 	bl	8005510 <GSM_FlushBuffer>
	}

	if (TxData->header != NULL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03a      	beq.n	8004e10 <GSM_HTTPRequest+0x128>
		DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004d9a:	4b72      	ldr	r3, [pc, #456]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004da4:	4970      	ldr	r1, [pc, #448]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004da6:	4871      	ldr	r0, [pc, #452]	; (8004f6c <GSM_HTTPRequest+0x284>)
 8004da8:	f7ff fcdc 	bl	8004764 <DMA_Enable>
				(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
		UART_Send_String(UART4, (uint8_t*)"AT+HTTPPARA=\"USERDATA\",\"");
 8004dac:	4975      	ldr	r1, [pc, #468]	; (8004f84 <GSM_HTTPRequest+0x29c>)
 8004dae:	4871      	ldr	r0, [pc, #452]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004db0:	f000 fdf2 	bl	8005998 <UART_Send_String>

		while (TxData->header[++headerSize] != '\0')
 8004db4:	bf00      	nop
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f5      	bne.n	8004db6 <GSM_HTTPRequest+0xce>
			;
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
				(uint32_t) TxData->header, headerSize);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004dce:	461a      	mov	r2, r3
 8004dd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dd2:	4965      	ldr	r1, [pc, #404]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004dd4:	4868      	ldr	r0, [pc, #416]	; (8004f78 <GSM_HTTPRequest+0x290>)
 8004dd6:	f7ff fcc5 	bl	8004764 <DMA_Enable>
		TIM_Delay(10);
 8004dda:	200a      	movs	r0, #10
 8004ddc:	f000 fd1e 	bl	800581c <TIM_Delay>
		while (GSM_TX_Completeflag != 1)
 8004de0:	bf00      	nop
 8004de2:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d1fa      	bne.n	8004de2 <GSM_HTTPRequest+0xfa>
			;
		GSM_TX_Completeflag = 0;
 8004dec:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
		UART_Send_String(UART4, (uint8_t*)"\"\n");
 8004df2:	4963      	ldr	r1, [pc, #396]	; (8004f80 <GSM_HTTPRequest+0x298>)
 8004df4:	485f      	ldr	r0, [pc, #380]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004df6:	f000 fdcf 	bl	8005998 <UART_Send_String>
		GSM_GSMWait(GSM_InternalBuffer, 2);
 8004dfa:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2102      	movs	r1, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f987 	bl	8005114 <GSM_GSMWait>
		GSM_FlushBuffer(GSM_InternalBuffer);
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fb80 	bl	8005510 <GSM_FlushBuffer>
	}

	//adding Tx payload -----------
	if (TxData->payload != NULL) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d068      	beq.n	8004eea <GSM_HTTPRequest+0x202>
		DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004e18:	4b52      	ldr	r3, [pc, #328]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e22:	4951      	ldr	r1, [pc, #324]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004e24:	4851      	ldr	r0, [pc, #324]	; (8004f6c <GSM_HTTPRequest+0x284>)
 8004e26:	f7ff fc9d 	bl	8004764 <DMA_Enable>
				(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
		UART_Send_String(UART4, (uint8_t*)"AT+HTTPDATA=");
 8004e2a:	4957      	ldr	r1, [pc, #348]	; (8004f88 <GSM_HTTPRequest+0x2a0>)
 8004e2c:	4851      	ldr	r0, [pc, #324]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004e2e:	f000 fdb3 	bl	8005998 <UART_Send_String>

		TxPayloadSizeStringSize = NumToSting(TxData->payloadSize, TxPayloadSize);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f107 0214 	add.w	r2, r7, #20
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb11 	bl	8005464 <NumToSting>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004e48:	f107 0214 	add.w	r2, r7, #20
 8004e4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4945      	ldr	r1, [pc, #276]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004e54:	4848      	ldr	r0, [pc, #288]	; (8004f78 <GSM_HTTPRequest+0x290>)
 8004e56:	f7ff fc85 	bl	8004764 <DMA_Enable>
				(uint32_t) TxPayloadSize, TxPayloadSizeStringSize);
		TIM_Delay(10);
 8004e5a:	200a      	movs	r0, #10
 8004e5c:	f000 fcde 	bl	800581c <TIM_Delay>
		while (GSM_TX_Completeflag != 1)
 8004e60:	bf00      	nop
 8004e62:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d1fa      	bne.n	8004e62 <GSM_HTTPRequest+0x17a>
			;
		GSM_TX_Completeflag = 0;
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
		UART_Send_String(UART4, (uint8_t*)",50000\n");
 8004e72:	4946      	ldr	r1, [pc, #280]	; (8004f8c <GSM_HTTPRequest+0x2a4>)
 8004e74:	483f      	ldr	r0, [pc, #252]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004e76:	f000 fd8f 	bl	8005998 <UART_Send_String>

		TIM_Delay(10);
 8004e7a:	200a      	movs	r0, #10
 8004e7c:	f000 fcce 	bl	800581c <TIM_Delay>
		GSM_GSMWait(GSM_InternalBuffer, 2);
 8004e80:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f944 	bl	8005114 <GSM_GSMWait>
		GSM_FlushBuffer(GSM_InternalBuffer);
 8004e8c:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fb3d 	bl	8005510 <GSM_FlushBuffer>
		DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004e96:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ea0:	4931      	ldr	r1, [pc, #196]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004ea2:	4832      	ldr	r0, [pc, #200]	; (8004f6c <GSM_HTTPRequest+0x284>)
 8004ea4:	f7ff fc5e 	bl	8004764 <DMA_Enable>
				(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
				(uint32_t) TxData->payload, TxData->payloadSize);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004eac:	461a      	mov	r2, r3
				(uint32_t) TxData->payload, TxData->payloadSize);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	492c      	ldr	r1, [pc, #176]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004eb6:	4830      	ldr	r0, [pc, #192]	; (8004f78 <GSM_HTTPRequest+0x290>)
 8004eb8:	f7ff fc54 	bl	8004764 <DMA_Enable>
		TIM_Delay(10);
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	f000 fcad 	bl	800581c <TIM_Delay>
		while (GSM_TX_Completeflag != 1)
 8004ec2:	bf00      	nop
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d1fa      	bne.n	8004ec4 <GSM_HTTPRequest+0x1dc>
					;
		GSM_TX_Completeflag = 0;
 8004ece:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
		GSM_GSMWait(GSM_InternalBuffer, 2);
 8004ed4:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f91a 	bl	8005114 <GSM_GSMWait>
		GSM_FlushBuffer(GSM_InternalBuffer);
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb13 	bl	8005510 <GSM_FlushBuffer>
	}

	//------

	DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ef4:	491c      	ldr	r1, [pc, #112]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004ef6:	481d      	ldr	r0, [pc, #116]	; (8004f6c <GSM_HTTPRequest+0x284>)
 8004ef8:	f7ff fc34 	bl	8004764 <DMA_Enable>
			(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
	UART_Send_String(UART4, (uint8_t*)"AT+HTTPPARA=\"URL\",\"");
 8004efc:	4924      	ldr	r1, [pc, #144]	; (8004f90 <GSM_HTTPRequest+0x2a8>)
 8004efe:	481d      	ldr	r0, [pc, #116]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004f00:	f000 fd4a 	bl	8005998 <UART_Send_String>

	while (url[++urlSize] != '\0')
 8004f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f06:	3301      	adds	r3, #1
 8004f08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f6      	bne.n	8004f04 <GSM_HTTPRequest+0x21c>
		;
	DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR), (uint32_t) url,
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f1a:	4913      	ldr	r1, [pc, #76]	; (8004f68 <GSM_HTTPRequest+0x280>)
 8004f1c:	4816      	ldr	r0, [pc, #88]	; (8004f78 <GSM_HTTPRequest+0x290>)
 8004f1e:	f7ff fc21 	bl	8004764 <DMA_Enable>
			urlSize);
	TIM_Delay(10);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f000 fc7a 	bl	800581c <TIM_Delay>
	while (GSM_TX_Completeflag != 1)
 8004f28:	bf00      	nop
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d1fa      	bne.n	8004f2a <GSM_HTTPRequest+0x242>
		;
	GSM_TX_Completeflag = 0;
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <GSM_HTTPRequest+0x294>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
	UART_Send_String(UART4, (uint8_t*)"\"\n");
 8004f3a:	4911      	ldr	r1, [pc, #68]	; (8004f80 <GSM_HTTPRequest+0x298>)
 8004f3c:	480d      	ldr	r0, [pc, #52]	; (8004f74 <GSM_HTTPRequest+0x28c>)
 8004f3e:	f000 fd2b 	bl	8005998 <UART_Send_String>
	GSM_GSMWait(GSM_InternalBuffer, 2);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f8e3 	bl	8005114 <GSM_GSMWait>
	if (RequestType == GSM_GET) {
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d121      	bne.n	8004f98 <GSM_HTTPRequest+0x2b0>
		GSM_DMA_SendCommand(GSM_InternalBuffer,
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <GSM_HTTPRequest+0x27c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	490e      	ldr	r1, [pc, #56]	; (8004f94 <GSM_HTTPRequest+0x2ac>)
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff fe83 	bl	8004c68 <GSM_DMA_SendCommand>
 8004f62:	e023      	b.n	8004fac <GSM_HTTPRequest+0x2c4>
 8004f64:	20002f18 	.word	0x20002f18
 8004f68:	40004c04 	.word	0x40004c04
 8004f6c:	40026040 	.word	0x40026040
 8004f70:	08011904 	.word	0x08011904
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40026070 	.word	0x40026070
 8004f7c:	20002f1c 	.word	0x20002f1c
 8004f80:	0801191c 	.word	0x0801191c
 8004f84:	08011920 	.word	0x08011920
 8004f88:	0801193c 	.word	0x0801193c
 8004f8c:	0801194c 	.word	0x0801194c
 8004f90:	08011954 	.word	0x08011954
 8004f94:	08011968 	.word	0x08011968
				(const uint8_t*) "AT+HTTPACTION=0\n", 4);
	} else if (RequestType == GSM_POST) {
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d106      	bne.n	8004fac <GSM_HTTPRequest+0x2c4>
		GSM_DMA_SendCommand(GSM_InternalBuffer,
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4928      	ldr	r1, [pc, #160]	; (8005048 <GSM_HTTPRequest+0x360>)
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe5e 	bl	8004c68 <GSM_DMA_SendCommand>
				(const uint8_t*) "AT+HTTPACTION=1\n", 4);
	} else {
		//NOP
	}
	if(RxPayloadSize != NULL){
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <GSM_HTTPRequest+0x2d6>
		*RxPayloadSize = GSM_GetReceivedDataSize();
 8004fb2:	f000 f8cb 	bl	800514c <GSM_GetReceivedDataSize>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	801a      	strh	r2, [r3, #0]
	}

	uint32_t stateCodeStart = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
	uint16_t stateCode;
	strSearch(GSM_InternalBuffer, (const uint8_t*) ",", 1, &stateCodeStart);
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	2201      	movs	r2, #1
 8004fcc:	491f      	ldr	r1, [pc, #124]	; (800504c <GSM_HTTPRequest+0x364>)
 8004fce:	f000 f9e7 	bl	80053a0 <strSearch>
	stateCode = (GSM_InternalBuffer[stateCodeStart + 1] - 48) * 100;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3b30      	subs	r3, #48	; 0x30
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	0092      	lsls	r2, r2, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	0091      	lsls	r1, r2, #2
 8004fec:	461a      	mov	r2, r3
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	84fb      	strh	r3, [r7, #38]	; 0x26
	stateCode += (GSM_InternalBuffer[stateCodeStart + 2] - 48) * 10;
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	3b30      	subs	r3, #48	; 0x30
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	0092      	lsls	r2, r2, #2
 800500a:	4413      	add	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005012:	4413      	add	r3, r2
 8005014:	84fb      	strh	r3, [r7, #38]	; 0x26
	stateCode += GSM_InternalBuffer[stateCodeStart + 3] - 48;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3303      	adds	r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b29a      	uxth	r2, r3
 8005024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005026:	4413      	add	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b30      	subs	r3, #48	; 0x30
 800502c:	84fb      	strh	r3, [r7, #38]	; 0x26
	GSM_FlushBuffer(GSM_InternalBuffer);
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <GSM_HTTPRequest+0x35c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa6c 	bl	8005510 <GSM_FlushBuffer>
	return stateCode;
 8005038:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800503a:	4618      	mov	r0, r3
 800503c:	3730      	adds	r7, #48	; 0x30
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20002f18 	.word	0x20002f18
 8005048:	0801197c 	.word	0x0801197c
 800504c:	08011990 	.word	0x08011990

08005050 <GSM_DownloadData>:

void GSM_DownloadData( uint8_t *RxPayload, uint8_t *RxHeader){
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

	GSM_DMA_SendCommand(GSM_InternalBuffer, (const uint8_t*)"AT+HTTPREAD\n", 4);
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <GSM_DownloadData+0xa0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2204      	movs	r2, #4
 8005060:	4924      	ldr	r1, [pc, #144]	; (80050f4 <GSM_DownloadData+0xa4>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fe00 	bl	8004c68 <GSM_DMA_SendCommand>

	GSM_ExtractData(GSM_InternalBuffer, (const uint8_t*) "\r\n",
 8005068:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <GSM_DownloadData+0xa0>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <GSM_DownloadData+0xa8>)
 8005070:	4922      	ldr	r1, [pc, #136]	; (80050fc <GSM_DownloadData+0xac>)
 8005072:	f000 f8ab 	bl	80051cc <GSM_ExtractData>
			(const uint8_t*) "\r\nOK\r\n", RxPayload);
	if (RxHeader != NULL) {
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d034      	beq.n	80050e6 <GSM_DownloadData+0x96>
		GSM_FlushBuffer(GSM_InternalBuffer);
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <GSM_DownloadData+0xa0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa45 	bl	8005510 <GSM_FlushBuffer>
		DMA_Enable(GSM_RX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <GSM_DownloadData+0xa0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005090:	491b      	ldr	r1, [pc, #108]	; (8005100 <GSM_DownloadData+0xb0>)
 8005092:	481c      	ldr	r0, [pc, #112]	; (8005104 <GSM_DownloadData+0xb4>)
 8005094:	f7ff fb66 	bl	8004764 <DMA_Enable>
				(uint32_t) GSM_InternalBuffer, DMA_NDTR_MAX);
		DMA_Enable(GSM_TX_DMA_STREAM, (uint32_t) &(GSM_UART->DR),
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <GSM_DownloadData+0xb8>)
 800509a:	230c      	movs	r3, #12
 800509c:	4918      	ldr	r1, [pc, #96]	; (8005100 <GSM_DownloadData+0xb0>)
 800509e:	481b      	ldr	r0, [pc, #108]	; (800510c <GSM_DownloadData+0xbc>)
 80050a0:	f7ff fb60 	bl	8004764 <DMA_Enable>
				(uint32_t) "AT+HTTPHEAD\n", 12);
		TIM_Delay(10);
 80050a4:	200a      	movs	r0, #10
 80050a6:	f000 fbb9 	bl	800581c <TIM_Delay>
		while (GSM_TX_Completeflag != 1);
 80050aa:	bf00      	nop
 80050ac:	4b18      	ldr	r3, [pc, #96]	; (8005110 <GSM_DownloadData+0xc0>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d1fa      	bne.n	80050ac <GSM_DownloadData+0x5c>
		GSM_TX_Completeflag = 0;
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <GSM_DownloadData+0xc0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
		while (strSearch(GSM_InternalBuffer, (const uint8_t*) "\r\nOK\r\n", 1,
 80050bc:	bf00      	nop
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <GSM_DownloadData+0xa0>)
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	2300      	movs	r3, #0
 80050c4:	2201      	movs	r2, #1
 80050c6:	490c      	ldr	r1, [pc, #48]	; (80050f8 <GSM_DownloadData+0xa8>)
 80050c8:	f000 f96a 	bl	80053a0 <strSearch>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d1f5      	bne.n	80050be <GSM_DownloadData+0x6e>
				NULL) != GSM_OK);
		DMA_Disable(GSM_RX_DMA_STREAM);
 80050d2:	480c      	ldr	r0, [pc, #48]	; (8005104 <GSM_DownloadData+0xb4>)
 80050d4:	f7ff fb65 	bl	80047a2 <DMA_Disable>
		GSM_ExtractData(GSM_InternalBuffer, (const uint8_t*) "\r\n",
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <GSM_DownloadData+0xa0>)
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4a06      	ldr	r2, [pc, #24]	; (80050f8 <GSM_DownloadData+0xa8>)
 80050e0:	4906      	ldr	r1, [pc, #24]	; (80050fc <GSM_DownloadData+0xac>)
 80050e2:	f000 f873 	bl	80051cc <GSM_ExtractData>
				(const uint8_t*) "\r\nOK\r\n", RxHeader);
	}
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20002f18 	.word	0x20002f18
 80050f4:	08011994 	.word	0x08011994
 80050f8:	080119a4 	.word	0x080119a4
 80050fc:	080119ac 	.word	0x080119ac
 8005100:	40004c04 	.word	0x40004c04
 8005104:	40026040 	.word	0x40026040
 8005108:	080119b0 	.word	0x080119b0
 800510c:	40026070 	.word	0x40026070
 8005110:	20002f1c 	.word	0x20002f1c

08005114 <GSM_GSMWait>:

/*
 * wait till  number of specified CRLF is received
 */

static void GSM_GSMWait(uint8_t *buffer, uint8_t crlfToWait) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]

	while (strSearch(buffer, (const uint8_t*) "\r\n", crlfToWait, NULL)
 8005120:	bf00      	nop
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	2300      	movs	r3, #0
 8005126:	4907      	ldr	r1, [pc, #28]	; (8005144 <GSM_GSMWait+0x30>)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f939 	bl	80053a0 <strSearch>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d1f6      	bne.n	8005122 <GSM_GSMWait+0xe>
			!= GSM_OK)
		;
	DMA_Disable(GSM_RX_DMA_STREAM);
 8005134:	4804      	ldr	r0, [pc, #16]	; (8005148 <GSM_GSMWait+0x34>)
 8005136:	f7ff fb34 	bl	80047a2 <DMA_Disable>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	080119ac 	.word	0x080119ac
 8005148:	40026040 	.word	0x40026040

0800514c <GSM_GetReceivedDataSize>:

/*
 * used after HTTPACTION Command to get ReceivedDataSize
 */
uint32_t GSM_GetReceivedDataSize(void) {
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
	for (uint8_t counter = 0; GSM_InternalBuffer[counter] != '\0'; counter++) {
 8005156:	2300      	movs	r3, #0
 8005158:	70fb      	strb	r3, [r7, #3]
 800515a:	e027      	b.n	80051ac <GSM_GetReceivedDataSize+0x60>
		if (GSM_InternalBuffer[counter] >= '0'
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <GSM_GetReceivedDataSize+0x7c>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	4413      	add	r3, r2
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b2f      	cmp	r3, #47	; 0x2f
 8005168:	d914      	bls.n	8005194 <GSM_GetReceivedDataSize+0x48>
				&& GSM_InternalBuffer[counter] <= '9') {
 800516a:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <GSM_GetReceivedDataSize+0x7c>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b39      	cmp	r3, #57	; 0x39
 8005176:	d80d      	bhi.n	8005194 <GSM_GetReceivedDataSize+0x48>
			sum = sum * 10 + GSM_InternalBuffer[counter] - '0';
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4619      	mov	r1, r3
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <GSM_GetReceivedDataSize+0x7c>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	440b      	add	r3, r1
 8005190:	3b30      	subs	r3, #48	; 0x30
 8005192:	607b      	str	r3, [r7, #4]
		}
		if (GSM_InternalBuffer[counter] == ',') {
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <GSM_GetReceivedDataSize+0x7c>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	4413      	add	r3, r2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b2c      	cmp	r3, #44	; 0x2c
 80051a0:	d101      	bne.n	80051a6 <GSM_GetReceivedDataSize+0x5a>
			sum = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
	for (uint8_t counter = 0; GSM_InternalBuffer[counter] != '\0'; counter++) {
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	3301      	adds	r3, #1
 80051aa:	70fb      	strb	r3, [r7, #3]
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <GSM_GetReceivedDataSize+0x7c>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	4413      	add	r3, r2
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1d0      	bne.n	800515c <GSM_GetReceivedDataSize+0x10>
		}
	}
	return sum;
 80051ba:	687b      	ldr	r3, [r7, #4]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	20002f18 	.word	0x20002f18

080051cc <GSM_ExtractData>:
 * 		  endIdentifier   ==> end of our data,
 * 		  extractedData   ==> output data buffer
 */
static uint8_t GSM_ExtractData(uint8_t *inputString,
		const uint8_t *startIdentifier, const uint8_t *endIdentifier,
		uint8_t *extractedData) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	uint32_t startOfData = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
	uint32_t endOfData = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]

	if (strSearch(inputString, startIdentifier, 2, &startOfData) != GSM_OK) {
 80051e2:	f107 0314 	add.w	r3, r7, #20
 80051e6:	2202      	movs	r2, #2
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f8d8 	bl	80053a0 <strSearch>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d001      	beq.n	80051fa <GSM_ExtractData+0x2e>
		return GSM_NOK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e040      	b.n	800527c <GSM_ExtractData+0xb0>
	}
	if ((strSearch(inputString, endIdentifier, 1, &endOfData) != GSM_OK)) {
 80051fa:	f107 0310 	add.w	r3, r7, #16
 80051fe:	2201      	movs	r2, #1
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f8cc 	bl	80053a0 <strSearch>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d001      	beq.n	8005212 <GSM_ExtractData+0x46>
		return GSM_NOK;
 800520e:	2300      	movs	r3, #0
 8005210:	e034      	b.n	800527c <GSM_ExtractData+0xb0>
	}

	uint16_t startIdentifierSize = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	84fb      	strh	r3, [r7, #38]	; 0x26
	while (startIdentifier[++startIdentifierSize] != '\0')
 8005216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005218:	3301      	adds	r3, #1
 800521a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800521c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f6      	bne.n	8005216 <GSM_ExtractData+0x4a>
		;
	uint16_t endIdentifierSize = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (endIdentifier[++endIdentifierSize] != '\0')
 800522c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f6      	bne.n	800522c <GSM_ExtractData+0x60>
		;

	uint32_t strCounter = startOfData + startIdentifierSize;
 800523e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
	uint32_t dataSize = endOfData - startOfData - startIdentifierSize;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	61bb      	str	r3, [r7, #24]
	for (uint32_t dataCounter = 0; dataCounter < dataSize; dataCounter++) {
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e00c      	b.n	8005272 <GSM_ExtractData+0xa6>
		extractedData[dataCounter] = inputString[strCounter++];
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	623a      	str	r2, [r7, #32]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	441a      	add	r2, r3
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	440b      	add	r3, r1
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
	for (uint32_t dataCounter = 0; dataCounter < dataSize; dataCounter++) {
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3ee      	bcc.n	8005258 <GSM_ExtractData+0x8c>
	}
	return GSM_OK;
 800527a:	2301      	movs	r3, #1
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <parse_json>:




uint8_t parse_json(uint8_t* json, uint8_t* pKey, uint8_t* pValue) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
    uint8_t keySize = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	77fb      	strb	r3, [r7, #31]
    uint8_t keycounter = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	77bb      	strb	r3, [r7, #30]
    uint16_t qottNum = 1;
 8005298:	2301      	movs	r3, #1
 800529a:	83bb      	strh	r3, [r7, #28]
    uint16_t nextQottPosition = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	82bb      	strh	r3, [r7, #20]
    uint8_t matchingFlag = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	76fb      	strb	r3, [r7, #27]
    if(strSearch(json, pKey, 1, NULL) != 1){
 80052a4:	2300      	movs	r3, #0
 80052a6:	2201      	movs	r2, #1
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f878 	bl	80053a0 <strSearch>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <parse_json+0x36>
        return 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e06b      	b.n	8005392 <parse_json+0x10e>
    }
    while(pKey[++keySize] != '\0');
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	3301      	adds	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f6      	bne.n	80052ba <parse_json+0x36>
    if(json[0] == '{') {
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b7b      	cmp	r3, #123	; 0x7b
 80052d2:	d15d      	bne.n	8005390 <parse_json+0x10c>
        while(1) {
            strSearch(json, (const uint8_t *)"\"", qottNum+=2, (uint32_t*)&nextQottPosition);
 80052d4:	8bbb      	ldrh	r3, [r7, #28]
 80052d6:	3302      	adds	r3, #2
 80052d8:	83bb      	strh	r3, [r7, #28]
 80052da:	8bbb      	ldrh	r3, [r7, #28]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	492e      	ldr	r1, [pc, #184]	; (800539c <parse_json+0x118>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f85b 	bl	80053a0 <strSearch>
            for(keycounter = 0;keycounter <keySize;keycounter++){
 80052ea:	2300      	movs	r3, #0
 80052ec:	77bb      	strb	r3, [r7, #30]
 80052ee:	e016      	b.n	800531e <parse_json+0x9a>
                if(json[nextQottPosition + 1 + keycounter] == pKey[keycounter]){
 80052f0:	8abb      	ldrh	r3, [r7, #20]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	7fbb      	ldrb	r3, [r7, #30]
 80052f6:	4413      	add	r3, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	781a      	ldrb	r2, [r3, #0]
 8005300:	7fbb      	ldrb	r3, [r7, #30]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	440b      	add	r3, r1
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d102      	bne.n	8005312 <parse_json+0x8e>
                    matchingFlag = 1;
 800530c:	2301      	movs	r3, #1
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e002      	b.n	8005318 <parse_json+0x94>
                }else{
                    matchingFlag = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	76fb      	strb	r3, [r7, #27]
                    break;
 8005316:	e006      	b.n	8005326 <parse_json+0xa2>
            for(keycounter = 0;keycounter <keySize;keycounter++){
 8005318:	7fbb      	ldrb	r3, [r7, #30]
 800531a:	3301      	adds	r3, #1
 800531c:	77bb      	strb	r3, [r7, #30]
 800531e:	7fba      	ldrb	r2, [r7, #30]
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	429a      	cmp	r2, r3
 8005324:	d3e4      	bcc.n	80052f0 <parse_json+0x6c>
                }
            }
            if(matchingFlag == 1){
 8005326:	7efb      	ldrb	r3, [r7, #27]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d1d3      	bne.n	80052d4 <parse_json+0x50>
                uint16_t counter = nextQottPosition + keySize + 2;
 800532c:	7ffb      	ldrb	r3, [r7, #31]
 800532e:	b29a      	uxth	r2, r3
 8005330:	8abb      	ldrh	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	3302      	adds	r3, #2
 8005338:	833b      	strh	r3, [r7, #24]
                uint16_t valueCounter = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	82fb      	strh	r3, [r7, #22]
                while(json[counter++] != '\"');
 800533e:	bf00      	nop
 8005340:	8b3b      	ldrh	r3, [r7, #24]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	833a      	strh	r2, [r7, #24]
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b22      	cmp	r3, #34	; 0x22
 8005350:	d1f6      	bne.n	8005340 <parse_json+0xbc>
                while(json[counter] != '\"'){
 8005352:	e00d      	b.n	8005370 <parse_json+0xec>
                    pValue[valueCounter++] = json[counter++];
 8005354:	8b3b      	ldrh	r3, [r7, #24]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	833a      	strh	r2, [r7, #24]
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	441a      	add	r2, r3
 8005360:	8afb      	ldrh	r3, [r7, #22]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	82f9      	strh	r1, [r7, #22]
 8005366:	4619      	mov	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	440b      	add	r3, r1
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	701a      	strb	r2, [r3, #0]
                while(json[counter] != '\"'){
 8005370:	8b3b      	ldrh	r3, [r7, #24]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	d1eb      	bne.n	8005354 <parse_json+0xd0>
                }
                pValue[valueCounter++] = '\0';
 800537c:	8afb      	ldrh	r3, [r7, #22]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	82fa      	strh	r2, [r7, #22]
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
                return 1;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <parse_json+0x10e>

            }

        }
    } else {
        return 0;
 8005390:	2300      	movs	r3, #0
    }
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	080119c0 	.word	0x080119c0

080053a0 <strSearch>:

 uint8_t strSearch(uint8_t *string, const uint8_t *subString,
		uint8_t numberOfSubstring, uint32_t *lastSubstringIndex) {
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
	uint8_t matchingFlag = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	75fb      	strb	r3, [r7, #23]
	uint8_t foundSubStringCounter = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	75bb      	strb	r3, [r7, #22]
	uint16_t strStart = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	82bb      	strh	r3, [r7, #20]
	for (uint16_t strCounter = 0; string[strCounter] != '\0'; strCounter++) {
 80053bc:	2300      	movs	r3, #0
 80053be:	827b      	strh	r3, [r7, #18]
 80053c0:	e043      	b.n	800544a <strSearch+0xaa>
		strStart = strCounter;
 80053c2:	8a7b      	ldrh	r3, [r7, #18]
 80053c4:	82bb      	strh	r3, [r7, #20]
		for (uint16_t subCounter = 0; subString[subCounter] != '\0';
 80053c6:	2300      	movs	r3, #0
 80053c8:	823b      	strh	r3, [r7, #16]
 80053ca:	e025      	b.n	8005418 <strSearch+0x78>
				subCounter++) {
			if (string[strStart] == subString[subCounter]
 80053cc:	8abb      	ldrh	r3, [r7, #20]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	8a3b      	ldrh	r3, [r7, #16]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	440b      	add	r3, r1
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10b      	bne.n	80053f8 <strSearch+0x58>
					&& string[strCounter] != '\0') {
 80053e0:	8a7b      	ldrh	r3, [r7, #18]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <strSearch+0x58>
				matchingFlag = 1;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
				strStart++;
 80053f0:	8abb      	ldrh	r3, [r7, #20]
 80053f2:	3301      	adds	r3, #1
 80053f4:	82bb      	strh	r3, [r7, #20]
 80053f6:	e00c      	b.n	8005412 <strSearch+0x72>
			} else if (string[strStart] != subString[subCounter]) {
 80053f8:	8abb      	ldrh	r3, [r7, #20]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	8a3b      	ldrh	r3, [r7, #16]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	440b      	add	r3, r1
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d002      	beq.n	8005412 <strSearch+0x72>
				matchingFlag = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	75fb      	strb	r3, [r7, #23]
				break;
 8005410:	e008      	b.n	8005424 <strSearch+0x84>
				subCounter++) {
 8005412:	8a3b      	ldrh	r3, [r7, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	823b      	strh	r3, [r7, #16]
		for (uint16_t subCounter = 0; subString[subCounter] != '\0';
 8005418:	8a3b      	ldrh	r3, [r7, #16]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1d3      	bne.n	80053cc <strSearch+0x2c>
			}
		}
		foundSubStringCounter += matchingFlag;
 8005424:	7dba      	ldrb	r2, [r7, #22]
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	4413      	add	r3, r2
 800542a:	75bb      	strb	r3, [r7, #22]
		if (foundSubStringCounter == numberOfSubstring) {
 800542c:	7dba      	ldrb	r2, [r7, #22]
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	429a      	cmp	r2, r3
 8005432:	d107      	bne.n	8005444 <strSearch+0xa4>
			if (lastSubstringIndex != NULL) {
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <strSearch+0xa0>
				*lastSubstringIndex = strCounter;
 800543a:	8a7a      	ldrh	r2, [r7, #18]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	601a      	str	r2, [r3, #0]
			}
			return GSM_OK;
 8005440:	2301      	movs	r3, #1
 8005442:	e009      	b.n	8005458 <strSearch+0xb8>
	for (uint16_t strCounter = 0; string[strCounter] != '\0'; strCounter++) {
 8005444:	8a7b      	ldrh	r3, [r7, #18]
 8005446:	3301      	adds	r3, #1
 8005448:	827b      	strh	r3, [r7, #18]
 800544a:	8a7b      	ldrh	r3, [r7, #18]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1b5      	bne.n	80053c2 <strSearch+0x22>
		}
	}
	return GSM_NOK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <NumToSting>:

static uint8_t NumToSting(uint32_t num, uint8_t *buffer) {
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	int counter = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
	do {
		buffer[counter++] = (num % 10) + '0';
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <NumToSting+0xa8>)
 8005476:	fba3 2301 	umull	r2, r3, r3, r1
 800547a:	08da      	lsrs	r2, r3, #3
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	1aca      	subs	r2, r1, r3
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6179      	str	r1, [r7, #20]
 800548e:	4619      	mov	r1, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	440b      	add	r3, r1
 8005494:	3230      	adds	r2, #48	; 0x30
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
		num /= 10;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1b      	ldr	r2, [pc, #108]	; (800550c <NumToSting+0xa8>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	08db      	lsrs	r3, r3, #3
 80054a4:	607b      	str	r3, [r7, #4]
	} while (num != 0);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e2      	bne.n	8005472 <NumToSting+0xe>
	buffer[counter] = '\0';
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
	// Reverse the string in-place
	int j = 0, k = counter - 1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
	while (j < k) {
 80054c0:	e017      	b.n	80054f2 <NumToSting+0x8e>
		char temp = buffer[j];
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	72fb      	strb	r3, [r7, #11]
		buffer[j++] = buffer[k];
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	441a      	add	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	6139      	str	r1, [r7, #16]
 80054d8:	4619      	mov	r1, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	440b      	add	r3, r1
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	701a      	strb	r2, [r3, #0]
		buffer[k--] = temp;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	60fa      	str	r2, [r7, #12]
 80054e8:	461a      	mov	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	4413      	add	r3, r2
 80054ee:	7afa      	ldrb	r2, [r7, #11]
 80054f0:	701a      	strb	r2, [r3, #0]
	while (j < k) {
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dbe3      	blt.n	80054c2 <NumToSting+0x5e>
	}
	return counter;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	b2db      	uxtb	r3, r3
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	cccccccd 	.word	0xcccccccd

08005510 <GSM_FlushBuffer>:

static void GSM_FlushBuffer(uint8_t *buffer) {
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	uint16_t counter = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	81fb      	strh	r3, [r7, #14]
	while (buffer[counter] != '\0') {
 800551c:	e007      	b.n	800552e <GSM_FlushBuffer+0x1e>
		buffer[counter++] = '\0';
 800551e:	89fb      	ldrh	r3, [r7, #14]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	81fa      	strh	r2, [r7, #14]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
	while (buffer[counter] != '\0') {
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f1      	bne.n	800551e <GSM_FlushBuffer+0xe>
	}
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <GSM_DMATx_InterruptFun>:

static void GSM_DMATx_InterruptFun(void) {
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
	GSM_TX_Completeflag = 1;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <GSM_DMATx_InterruptFun+0x14>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20002f1c 	.word	0x20002f1c

08005560 <Enable_irq>:
  \brief   Enable IRQ Interrupts
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
void Enable_irq(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
	__asm volatile ("cpsie i" : : : "memory");
 8005564:	b662      	cpsie	i
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
void NVIC_EnableIRQ(NVIC_IRQn_Type IRQn)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
   NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	4907      	ldr	r1, [pc, #28]	; (80055a0 <NVIC_EnableIRQ+0x30>)
 8005582:	79fa      	ldrb	r2, [r7, #7]
 8005584:	0952      	lsrs	r2, r2, #5
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	4610      	mov	r0, r2
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000e100 	.word	0xe000e100

080055a4 <NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
void NVIC_SetPriority(NVIC_IRQn_Type IRQn, uint32_t priority)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
    NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	4906      	ldr	r1, [pc, #24]	; (80055d0 <NVIC_SetPriority+0x2c>)
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	440b      	add	r3, r1
 80055be:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e100 	.word	0xe000e100

080055d4 <RCC_Config>:
 *  Created on: Jan 29, 2023
 *      Author: moham
 */
#include "RCC.h"

void RCC_Config(void) {
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80055d8:	4b3a      	ldr	r3, [pc, #232]	; (80056c4 <RCC_Config+0xf0>)
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	4a39      	ldr	r2, [pc, #228]	; (80056c4 <RCC_Config+0xf0>)
 80055de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e2:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80055e4:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <RCC_Config+0xf0>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	4a36      	ldr	r2, [pc, #216]	; (80056c4 <RCC_Config+0xf0>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable Coprocessor CP10, CP11
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <RCC_Config+0xf4>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <RCC_Config+0xf4>)
 80055f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Clear CR, CFGR reg
	RCC->CR = 0x01;
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <RCC_Config+0xf0>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0x0;
 8005606:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <RCC_Config+0xf0>)
 8005608:	2200      	movs	r2, #0
 800560a:	609a      	str	r2, [r3, #8]
	//reset HSEON, CSSON, PLLON
	RCC->CFGR &= 0xFEF6FFFF;
 800560c:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <RCC_Config+0xf0>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <RCC_Config+0xf0>)
 8005612:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561a:	6093      	str	r3, [r2, #8]
	//RESET PLLCFGR
	RCC->PLLCFGR = 0x24003010;
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <RCC_Config+0xf0>)
 800561e:	4a2b      	ldr	r2, [pc, #172]	; (80056cc <RCC_Config+0xf8>)
 8005620:	605a      	str	r2, [r3, #4]
	//reset HSEBYP
	RCC->CR &= 0xFFFBFFFF;
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <RCC_Config+0xf0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <RCC_Config+0xf0>)
 8005628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562c:	6013      	str	r3, [r2, #0]
	//reset all interrupts
	RCC->CIR = 0x0;
 800562e:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <RCC_Config+0xf0>)
 8005630:	2200      	movs	r2, #0
 8005632:	60da      	str	r2, [r3, #12]
#ifdef RCC_HSE_NO
	//enable HSE
	RCC->CR |= RCC_CR_HSEON;
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <RCC_Config+0xf0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a22      	ldr	r2, [pc, #136]	; (80056c4 <RCC_Config+0xf0>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8005640:	bf00      	nop
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <RCC_Config+0xf0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f9      	beq.n	8005642 <RCC_Config+0x6e>

#endif
	//HCLK /1
	RCC->CFGR |= RCC_AHB_PRESCALE;
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <RCC_Config+0xf0>)
 8005650:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <RCC_Config+0xf0>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	6093      	str	r3, [r2, #8]
	//PCLK2 /2
	RCC->CFGR |= RCC_APB2_PRESCALE;
 8005656:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <RCC_Config+0xf0>)
 8005658:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <RCC_Config+0xf0>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	6093      	str	r3, [r2, #8]
	//PCLK1 / 4
	RCC->CFGR |= RCC_APB1_PRESCALE;
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <RCC_Config+0xf0>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <RCC_Config+0xf0>)
 8005664:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005668:	6093      	str	r3, [r2, #8]
#if RCC_SYSCLK == RCC_SYSClk_PLL
	//config main PLL
		RCC->PLLCFGR = ((RCC_PLLCFGR_PLLSRC_HSE) | M | (N << 6) | (((P >> 1) - 1) << 16) | (Q << 24));
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <RCC_Config+0xf0>)
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <RCC_Config+0xfc>)
 800566e:	605a      	str	r2, [r3, #4]
	//PLL ON
	RCC->CR |= RCC_CR_PLLON;
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <RCC_Config+0xf0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <RCC_Config+0xf0>)
 8005676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 800567c:	bf00      	nop
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <RCC_Config+0xf0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f9      	beq.n	800567e <RCC_Config+0xaa>
		;
#endif
	//config prefetch, inst cache, data cache, wait state
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <RCC_Config+0x100>)
 800568c:	f240 7205 	movw	r2, #1797	; 0x705
 8005690:	601a      	str	r2, [r3, #0]
			| FLASH_ACR_LATENCY_5WS;
#ifdef RCC_SYSCLK
	//config sysclck
	RCC->CFGR &= ~(RCC_CFGR_SW);
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <RCC_Config+0xf0>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <RCC_Config+0xf0>)
 8005698:	f023 0303 	bic.w	r3, r3, #3
 800569c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_SYSCLK;
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <RCC_Config+0xf0>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <RCC_Config+0xf0>)
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_SYSCLK_WAIT))
 80056aa:	bf00      	nop
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <RCC_Config+0xf0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f9      	beq.n	80056ac <RCC_Config+0xd8>
		;
#endif
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40023800 	.word	0x40023800
 80056c8:	e000ed00 	.word	0xe000ed00
 80056cc:	24003010 	.word	0x24003010
 80056d0:	07402d04 	.word	0x07402d04
 80056d4:	40023c00 	.word	0x40023c00

080056d8 <RCC_EnablePeripheral>:



 void RCC_EnablePeripheral(uint32_t peripheral) {
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	if((peripheral >> 8) == 0x00){
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <RCC_EnablePeripheral+0x28>
		RCC->AHB1ENR |= (uint32_t)(1 << (peripheral & 0xFF));
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <RCC_EnablePeripheral+0x74>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f202 	lsl.w	r2, r1, r2
 80056f6:	4611      	mov	r1, r2
 80056f8:	4a14      	ldr	r2, [pc, #80]	; (800574c <RCC_EnablePeripheral+0x74>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6313      	str	r3, [r2, #48]	; 0x30
	}else if ((peripheral >> 8) == 0x02) {
		RCC->APB2ENR |= (uint32_t)(1 << (peripheral & 0xFF));
	}else {
		//NOP
	}
}
 80056fe:	e01e      	b.n	800573e <RCC_EnablePeripheral+0x66>
	}else if ((peripheral >> 8) == 0x01) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10b      	bne.n	8005720 <RCC_EnablePeripheral+0x48>
		RCC->APB1ENR |= (uint32_t)(1 << (peripheral & 0xFF));
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <RCC_EnablePeripheral+0x74>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f202 	lsl.w	r2, r1, r2
 8005716:	4611      	mov	r1, r2
 8005718:	4a0c      	ldr	r2, [pc, #48]	; (800574c <RCC_EnablePeripheral+0x74>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800571e:	e00e      	b.n	800573e <RCC_EnablePeripheral+0x66>
	}else if ((peripheral >> 8) == 0x02) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	2b02      	cmp	r3, #2
 8005726:	d10a      	bne.n	800573e <RCC_EnablePeripheral+0x66>
		RCC->APB2ENR |= (uint32_t)(1 << (peripheral & 0xFF));
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <RCC_EnablePeripheral+0x74>)
 800572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f202 	lsl.w	r2, r1, r2
 8005736:	4611      	mov	r1, r2
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <RCC_EnablePeripheral+0x74>)
 800573a:	430b      	orrs	r3, r1
 800573c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800

08005750 <SCB_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
void SCB_SetPriority(SCB_IRQn_Type IRQn, uint32_t priority)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	6039      	str	r1, [r7, #0]
 800575a:	71fb      	strb	r3, [r7, #7]

    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - SCB_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4907      	ldr	r1, [pc, #28]	; (8005780 <SCB_SetPriority+0x30>)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	3b04      	subs	r3, #4
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	440b      	add	r3, r1
 8005770:	761a      	strb	r2, [r3, #24]

}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <SysTick_INIT>:
 \brief   System Tick Configuration
 \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 Counter is in free running mode to generate periodic interrupts.
 */
volatile uint32_t SysTicks;
void SysTick_INIT(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0

	SysTick->LOAD = (uint32_t) (SYSTEMCLOCK / 1000 - 1UL); /* set reload register */
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <SysTick_INIT+0x24>)
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <SysTick_INIT+0x28>)
 800578c:	605a      	str	r2, [r3, #4]
	SCB_SetPriority(SysTick_IRQn, (1UL << SCB_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800578e:	210f      	movs	r1, #15
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	f7ff ffdc 	bl	8005750 <SCB_SetPriority>
	SysTick->VAL = 0UL; /* Load the SysTick Counter Value */
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <SysTick_INIT+0x24>)
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer *//* Function successful */
 800579e:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <SysTick_INIT+0x24>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000e010 	.word	0xe000e010
 80057ac:	0002bf1f 	.word	0x0002bf1f

080057b0 <TIM_INIT>:
 *  Created on: Apr 23, 2023
 *      Author: moham
 */
#include "TIM.h"

void TIM_INIT(TIM_TypeDef* TIMx) {
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	 + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (APB1CLK/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	uint32_t Period = (1000000U / 1000U) - 1U;
 80057b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80057bc:	60fb      	str	r3, [r7, #12]
	uint32_t Prescaler = (uint32_t) ((90000000 / 1000000U) - 1U);
 80057be:	2359      	movs	r3, #89	; 0x59
 80057c0:	60bb      	str	r3, [r7, #8]

	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
	TIMx->CR1 &= ~TIM_CR1_CKD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
	TIMx->CR1 &= ~TIM_CR1_ARPE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
	TIMx->ARR = (uint32_t)Period ;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->PSC = Prescaler;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->EGR = TIM_EGR_UG;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	615a      	str	r2, [r3, #20]
	TIMx->DIER |= TIM_DIER_UIE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]

	TIMx->CR1 |= TIM_CR1_CEN;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]

}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_Delay>:

volatile uint32_t TIM2_Ticks = 0;
void TIM_Delay(uint32_t time){
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	uint32_t startTick = TIM2_Ticks;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <TIM_Delay+0x34>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
	time++ ;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3301      	adds	r3, #1
 800582e:	607b      	str	r3, [r7, #4]
	while(TIM2_Ticks - startTick < time);
 8005830:	bf00      	nop
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <TIM_Delay+0x34>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d8f8      	bhi.n	8005832 <TIM_Delay+0x16>
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20002f20 	.word	0x20002f20

08005854 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0

	TIM2_Ticks++;
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <TIM2_IRQHandler+0x24>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a06      	ldr	r2, [pc, #24]	; (8005878 <TIM2_IRQHandler+0x24>)
 8005860:	6013      	str	r3, [r2, #0]
	TIM2->SR = ~TIM_DIER_UIE;
 8005862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005866:	f06f 0201 	mvn.w	r2, #1
 800586a:	611a      	str	r2, [r3, #16]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20002f20 	.word	0x20002f20
 800587c:	00000000 	.word	0x00000000

08005880 <UART_INIT>:

#include "UART.h"



void UART_INIT(USART_TypeDef *UARTx){
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	//Clear All
	UARTx->CR1 = 0x00;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	60da      	str	r2, [r3, #12]
	UARTx->CR2 = 0x00;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	611a      	str	r2, [r3, #16]
	//UARTx->CR3 = 0x00;
	// Enable the USART by writing the UE bit in USART_CR1 register to 1.
	UARTx->CR1 |= USART_CR1_UE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]
	//One sample method
	UARTx->CR3 |= USART_CR3_ONEBIT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	615a      	str	r2, [r3, #20]
	//enable TX ,RX
#ifdef UART_ENABLE_TX
	UARTx->CR1 |= UART_ENABLE_TX;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f043 0208 	orr.w	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60da      	str	r2, [r3, #12]
#endif

#ifdef UART_ENABLE_RX
	UARTx->CR1 |= UART_ENABLE_RX;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f043 0204 	orr.w	r2, r3, #4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]
#endif
#if UAST_OVERSAMPLING == UAST_OVERSAMPLING_8
	UARTx->CR1 |= UAST_OVERSAMPLING << 15;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60da      	str	r2, [r3, #12]
	UARTx->CR2 |= UART_STOPBITS;
#endif
	/*Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to take
	place.Configure the DMA register as explained in multibuffer communication. */
#ifdef UART_DMA_TX_Enable
	UARTx->CR3 |= UART_DMA_TX_Enable;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	615a      	str	r2, [r3, #20]
#endif
#ifdef UART_DMA_RX_Enable
	UARTx->CR3 |= UART_DMA_RX_Enable;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	615a      	str	r2, [r3, #20]
#endif

	//Select the desired baud rate using the USART_BRR register.fclk for PCLK1 or 2 (as config in RCC)
	uint16_t Mantissa = FCLK / (8 * (2 - UAST_OVERSAMPLING) * BAUDRATE);
 80058e8:	f240 2349 	movw	r3, #585	; 0x249
 80058ec:	81fb      	strh	r3, [r7, #14]
	uint16_t Farction = (8.00 * (2.00 - UAST_OVERSAMPLING)) * (FCLK / (8.00 * (2.00 - UAST_OVERSAMPLING) * BAUDRATE) - Mantissa);
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fb f807 	bl	8000904 <__aeabi_i2d>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	a116      	add	r1, pc, #88	; (adr r1, 8005954 <UART_INIT+0xd4>)
 80058fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005900:	f7fa feb2 	bl	8000668 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4610      	mov	r0, r2
 800590a:	4619      	mov	r1, r3
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <UART_INIT+0xd0>)
 8005912:	f7fa fd7b 	bl	800040c <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	f7fb f85b 	bl	80009d8 <__aeabi_d2uiz>
 8005922:	4603      	mov	r3, r0
 8005924:	81bb      	strh	r3, [r7, #12]
	if(Farction >= 0xF){
 8005926:	89bb      	ldrh	r3, [r7, #12]
 8005928:	2b0e      	cmp	r3, #14
 800592a:	d905      	bls.n	8005938 <UART_INIT+0xb8>
		Mantissa += Farction;
 800592c:	89fa      	ldrh	r2, [r7, #14]
 800592e:	89bb      	ldrh	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	81fb      	strh	r3, [r7, #14]
		Farction = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	81bb      	strh	r3, [r7, #12]
	}
	UARTx->BRR = Mantissa << 4 | Farction;
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	89bb      	ldrh	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	461a      	mov	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
#endif
#ifdef UART_TX_INTERRUPT
	UARTx->CR1 |= UART_TX_INTERRUPT;
#endif

}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40200000 	.word	0x40200000
 8005954:	00000000 	.word	0x00000000
 8005958:	40824f80 	.word	0x40824f80

0800595c <UART_Send>:
void UART_Send(USART_TypeDef *UARTx, uint8_t data){
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
	//Avoid overwriting the previous data
	while(!(UARTx->SR & USART_SR_TXE));
 8005968:	bf00      	nop
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f9      	beq.n	800596a <UART_Send+0xe>
	UARTx->DR = data;
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]
	//Wait for transfer complete
	while(!(UARTx->SR & USART_SR_TC));
 800597c:	bf00      	nop
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f9      	beq.n	800597e <UART_Send+0x22>
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_Send_String>:
void UART_Send_String(USART_TypeDef *UARTx, uint8_t *data){
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
	while(data[counter]!= '\0')
 80059a6:	e00a      	b.n	80059be <UART_Send_String+0x26>
		UART_Send(UARTx, data[counter++]);
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	73fa      	strb	r2, [r7, #15]
 80059ae:	461a      	mov	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4413      	add	r3, r2
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ffcf 	bl	800595c <UART_Send>
	while(data[counter]!= '\0')
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1ee      	bne.n	80059a8 <UART_Send_String+0x10>
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <main>:

/*************************** End of file ****************************/



int main() {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af04      	add	r7, sp, #16
	RCC_Setup();
 80059da:	f000 f893 	bl	8005b04 <RCC_Setup>
	Interrupt_Setup();
 80059de:	f000 f8ac 	bl	8005b3a <Interrupt_Setup>
	TIM_INIT(TIM2);
 80059e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80059e6:	f7ff fee3 	bl	80057b0 <TIM_INIT>
	GPIO_Setup();
 80059ea:	f000 f8c9 	bl	8005b80 <GPIO_Setup>
	UART_Setup();
 80059ee:	f000 f921 	bl	8005c34 <UART_Setup>
	GSM_INIT();
 80059f2:	f7ff f88b 	bl	8004b0c <GSM_INIT>
	CAN_Setup();
 80059f6:	f000 f95d 	bl	8005cb4 <CAN_Setup>


	OS_Init();
 80059fa:	f00a fdd9 	bl	80105b0 <OS_Init_VFP>
	OS_InitHW();
 80059fe:	f009 fca5 	bl	800f34c <OS_InitHW>
	OS_TASK_CREATE(&CB_Update_TSK, "Update Task", 50, Update_TSK,
 8005a02:	2302      	movs	r3, #2
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <main+0xd8>)
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <main+0xdc>)
 8005a12:	2232      	movs	r2, #50	; 0x32
 8005a14:	4927      	ldr	r1, [pc, #156]	; (8005ab4 <main+0xe0>)
 8005a16:	4828      	ldr	r0, [pc, #160]	; (8005ab8 <main+0xe4>)
 8005a18:	f009 ff9c 	bl	800f954 <OS_TASK_Create_DP>
			StackUpdate_TSK);
	OS_TASK_CREATE(&CB_SendDownloadProgress_TSK, "SendDownloadProgress Task", 60, SendDownloadProgress_TSK, StackSendDownloadProgress_TSK);
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	4b25      	ldr	r3, [pc, #148]	; (8005abc <main+0xe8>)
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <main+0xec>)
 8005a2c:	223c      	movs	r2, #60	; 0x3c
 8005a2e:	4925      	ldr	r1, [pc, #148]	; (8005ac4 <main+0xf0>)
 8005a30:	4825      	ldr	r0, [pc, #148]	; (8005ac8 <main+0xf4>)
 8005a32:	f009 ff8f 	bl	800f954 <OS_TASK_Create_DP>

	OS_TASK_CREATE(&CB_Authentication_TSK, "Authentication Task", 100,
 8005a36:	2302      	movs	r3, #2
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <main+0xf8>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <main+0xfc>)
 8005a46:	2264      	movs	r2, #100	; 0x64
 8005a48:	4922      	ldr	r1, [pc, #136]	; (8005ad4 <main+0x100>)
 8005a4a:	4823      	ldr	r0, [pc, #140]	; (8005ad8 <main+0x104>)
 8005a4c:	f009 ff82 	bl	800f954 <OS_TASK_Create_DP>
			Authentication_TSK, StackAuthentication_TSK);
	OS_TASK_CREATE(&CB_Diagnostic_TSK, "Diagnostic Task", 60, Diagnostic_TSK, StackDiagnostic_TSK);
 8005a50:	2302      	movs	r3, #2
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <main+0x108>)
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <main+0x10c>)
 8005a60:	223c      	movs	r2, #60	; 0x3c
 8005a62:	4920      	ldr	r1, [pc, #128]	; (8005ae4 <main+0x110>)
 8005a64:	4820      	ldr	r0, [pc, #128]	; (8005ae8 <main+0x114>)
 8005a66:	f009 ff75 	bl	800f954 <OS_TASK_Create_DP>
	OS_TASK_CREATE(&CB_Test_TSK, "Test Task", 150, Teset_TSK, StackTest_TSK);
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	9302      	str	r3, [sp, #8]
 8005a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <main+0x118>)
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <main+0x11c>)
 8005a7a:	2296      	movs	r2, #150	; 0x96
 8005a7c:	491d      	ldr	r1, [pc, #116]	; (8005af4 <main+0x120>)
 8005a7e:	481e      	ldr	r0, [pc, #120]	; (8005af8 <main+0x124>)
 8005a80:	f009 ff68 	bl	800f954 <OS_TASK_Create_DP>

	OS_MUTEX_Create(&CAN_RxMsg_Mutex);
 8005a84:	481d      	ldr	r0, [pc, #116]	; (8005afc <main+0x128>)
 8005a86:	f00a f9a3 	bl	800fdd0 <OS_MUTEX_Create>
	OS_MUTEX_Create(&AuthToken_Mutex);
 8005a8a:	481d      	ldr	r0, [pc, #116]	; (8005b00 <main+0x12c>)
 8005a8c:	f00a f9a0 	bl	800fdd0 <OS_MUTEX_Create>

	OS_Start();
 8005a90:	f00a fec4 	bl	801081c <OS_INFO_GetVersion>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f64c 2271 	movw	r2, #51825	; 0xca71
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d002      	beq.n	8005aa4 <main+0xd0>
 8005a9e:	20fd      	movs	r0, #253	; 0xfd
 8005aa0:	f009 fb98 	bl	800f1d4 <OS_Error>
 8005aa4:	f00a fe04 	bl	80106b0 <OS__Start>


	while (1) {
 8005aa8:	e7fe      	b.n	8005aa8 <main+0xd4>
 8005aaa:	bf00      	nop
 8005aac:	20000a78 	.word	0x20000a78
 8005ab0:	08002f19 	.word	0x08002f19
 8005ab4:	080119c4 	.word	0x080119c4
 8005ab8:	20001e78 	.word	0x20001e78
 8005abc:	20002320 	.word	0x20002320
 8005ac0:	080037ed 	.word	0x080037ed
 8005ac4:	080119d0 	.word	0x080119d0
 8005ac8:	20002720 	.word	0x20002720
 8005acc:	20001ecc 	.word	0x20001ecc
 8005ad0:	08002c05 	.word	0x08002c05
 8005ad4:	080119ec 	.word	0x080119ec
 8005ad8:	200022cc 	.word	0x200022cc
 8005adc:	20002774 	.word	0x20002774
 8005ae0:	080038a1 	.word	0x080038a1
 8005ae4:	08011a00 	.word	0x08011a00
 8005ae8:	20002b74 	.word	0x20002b74
 8005aec:	20002bc8 	.word	0x20002bc8
 8005af0:	08003b6d 	.word	0x08003b6d
 8005af4:	08011a10 	.word	0x08011a10
 8005af8:	20002dc8 	.word	0x20002dc8
 8005afc:	20002e1c 	.word	0x20002e1c
 8005b00:	20002e2c 	.word	0x20002e2c

08005b04 <RCC_Setup>:

	}

}

void RCC_Setup(void) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	RCC_Config();
 8005b08:	f7ff fd64 	bl	80055d4 <RCC_Config>
	RCC_EnablePeripheral(RCC_GPIOACLK);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7ff fde3 	bl	80056d8 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_TIM2CLK);
 8005b12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b16:	f7ff fddf 	bl	80056d8 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_UART4CLK);
 8005b1a:	f240 1013 	movw	r0, #275	; 0x113
 8005b1e:	f7ff fddb 	bl	80056d8 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_DMA1CLK);
 8005b22:	2015      	movs	r0, #21
 8005b24:	f7ff fdd8 	bl	80056d8 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_CAN1CLK);
 8005b28:	f240 1019 	movw	r0, #281	; 0x119
 8005b2c:	f7ff fdd4 	bl	80056d8 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(RCC_GPIOBCLK);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7ff fdd1 	bl	80056d8 <RCC_EnablePeripheral>
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <Interrupt_Setup>:

void Interrupt_Setup(void) {
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	af00      	add	r7, sp, #0
	Enable_irq();
 8005b3e:	f7ff fd0f 	bl	8005560 <Enable_irq>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005b42:	2014      	movs	r0, #20
 8005b44:	f7ff fd14 	bl	8005570 <NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_RX1_IRQn);
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005b48:	200f      	movs	r0, #15
 8005b4a:	f7ff fd11 	bl	8005570 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005b4e:	200d      	movs	r0, #13
 8005b50:	f7ff fd0e 	bl	8005570 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 8005b54:	201c      	movs	r0, #28
 8005b56:	f7ff fd0b 	bl	8005570 <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 4);
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	201c      	movs	r0, #28
 8005b5e:	f7ff fd21 	bl	80055a4 <NVIC_SetPriority>
	NVIC_SetPriority(CAN1_RX0_IRQn, 13);
 8005b62:	210d      	movs	r1, #13
 8005b64:	2014      	movs	r0, #20
 8005b66:	f7ff fd1d 	bl	80055a4 <NVIC_SetPriority>
	NVIC_SetPriority(DMA1_Stream4_IRQn, 14);
 8005b6a:	210e      	movs	r1, #14
 8005b6c:	200f      	movs	r0, #15
 8005b6e:	f7ff fd19 	bl	80055a4 <NVIC_SetPriority>
	NVIC_SetPriority(DMA1_Stream2_IRQn, 14);
 8005b72:	210e      	movs	r1, #14
 8005b74:	200d      	movs	r0, #13
 8005b76:	f7ff fd15 	bl	80055a4 <NVIC_SetPriority>

}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <GPIO_Setup>:

void GPIO_Setup(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b092      	sub	sp, #72	; 0x48
 8005b84:	af02      	add	r7, sp, #8
	GPIO_Config PA5 = {
 8005b86:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <GPIO_Setup+0xa0>)
 8005b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_PINMODE_OUTPUT,
	GPIO_PINSPEED_HIGH,
	GPIO_PINPULL_UP };
	GPIO_Config_Pin(GPIOA, GPIO_PIN_5, PA5);
 8005b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b9a:	cb0c      	ldmia	r3, {r2, r3}
 8005b9c:	2105      	movs	r1, #5
 8005b9e:	4821      	ldr	r0, [pc, #132]	; (8005c24 <GPIO_Setup+0xa4>)
 8005ba0:	f7fe ff14 	bl	80049cc <GPIO_Config_Pin>

	GPIO_Config PA0 = {
 8005ba4:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <GPIO_Setup+0xa8>)
 8005ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_PINMODE_AF8,
	GPIO_PINSPEED_HIGH,
	GPIO_PINPULL_UP };
	GPIO_Config_Pin(GPIOA, GPIO_PIN_0, PA0);
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bb8:	cb0c      	ldmia	r3, {r2, r3}
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4819      	ldr	r0, [pc, #100]	; (8005c24 <GPIO_Setup+0xa4>)
 8005bbe:	f7fe ff05 	bl	80049cc <GPIO_Config_Pin>
	GPIO_Config PA1 = {
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <GPIO_Setup+0xa8>)
 8005bc4:	f107 031c 	add.w	r3, r7, #28
 8005bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_PINMODE_AF8,
	GPIO_PINSPEED_HIGH,
	GPIO_PINPULL_UP };
	GPIO_Config_Pin(GPIOA, GPIO_PIN_1, PA1);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	f107 031c 	add.w	r3, r7, #28
 8005bd6:	cb0c      	ldmia	r3, {r2, r3}
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4812      	ldr	r0, [pc, #72]	; (8005c24 <GPIO_Setup+0xa4>)
 8005bdc:	f7fe fef6 	bl	80049cc <GPIO_Config_Pin>
	GPIO_Config PB9 = {
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <GPIO_Setup+0xac>)
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_PINMODE_AF9,
	GPIO_PINSPEED_HIGH,
	GPIO_PINPULL_UP };
	GPIO_Config_Pin(GPIOB, GPIO_PIN_9, PB9);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	cb0c      	ldmia	r3, {r2, r3}
 8005bf6:	2109      	movs	r1, #9
 8005bf8:	480d      	ldr	r0, [pc, #52]	; (8005c30 <GPIO_Setup+0xb0>)
 8005bfa:	f7fe fee7 	bl	80049cc <GPIO_Config_Pin>
	GPIO_Config PB8 = {
 8005bfe:	4a0b      	ldr	r2, [pc, #44]	; (8005c2c <GPIO_Setup+0xac>)
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_PINMODE_AF9,
	GPIO_PINSPEED_HIGH,
	GPIO_PINPULL_UP };
	GPIO_Config_Pin(GPIOB, GPIO_PIN_8, PB8);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	cb0c      	ldmia	r3, {r2, r3}
 8005c10:	2108      	movs	r1, #8
 8005c12:	4807      	ldr	r0, [pc, #28]	; (8005c30 <GPIO_Setup+0xb0>)
 8005c14:	f7fe feda 	bl	80049cc <GPIO_Config_Pin>
}
 8005c18:	bf00      	nop
 8005c1a:	3740      	adds	r7, #64	; 0x40
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08011a1c 	.word	0x08011a1c
 8005c24:	40020000 	.word	0x40020000
 8005c28:	08011a28 	.word	0x08011a28
 8005c2c:	08011a34 	.word	0x08011a34
 8005c30:	40020400 	.word	0x40020400

08005c34 <UART_Setup>:

void UART_Setup(void) {
 8005c34:	b5b0      	push	{r4, r5, r7, lr}
 8005c36:	b096      	sub	sp, #88	; 0x58
 8005c38:	af06      	add	r7, sp, #24
	UART_INIT(UART4);
 8005c3a:	4819      	ldr	r0, [pc, #100]	; (8005ca0 <UART_Setup+0x6c>)
 8005c3c:	f7ff fe20 	bl	8005880 <UART_INIT>
	DMA_Stream_Config Stream2 = {
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <UART_Setup+0x70>)
 8005c42:	f107 0420 	add.w	r4, r7, #32
 8005c46:	461d      	mov	r5, r3
 8005c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DMA_CHANNEL_PERIPHERAL_INC_DIABLE,
	DMA_CHANNEL_CIRCULAR_OFF,
	DMA_Channel4,

	};
	DMA_Stream_Config Stream4 = {
 8005c54:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <UART_Setup+0x74>)
 8005c56:	463c      	mov	r4, r7
 8005c58:	461d      	mov	r5, r3
 8005c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DMA_CHANNEL_PERIPHERAL_INC_DIABLE,
	DMA_CHANNEL_CIRCULAR_OFF,
	DMA_Channel4,

	};
	DMA_StreamConfig(DMA1_Stream2, Stream2);
 8005c66:	466d      	mov	r5, sp
 8005c68:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f107 0320 	add.w	r3, r7, #32
 8005c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c7a:	480c      	ldr	r0, [pc, #48]	; (8005cac <UART_Setup+0x78>)
 8005c7c:	f7fe fd29 	bl	80046d2 <DMA_StreamConfig>
	DMA_StreamConfig(DMA1_Stream4, Stream4);
 8005c80:	466d      	mov	r5, sp
 8005c82:	f107 040c 	add.w	r4, r7, #12
 8005c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	463b      	mov	r3, r7
 8005c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c92:	4807      	ldr	r0, [pc, #28]	; (8005cb0 <UART_Setup+0x7c>)
 8005c94:	f7fe fd1d 	bl	80046d2 <DMA_StreamConfig>
}
 8005c98:	bf00      	nop
 8005c9a:	3740      	adds	r7, #64	; 0x40
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca0:	40004c00 	.word	0x40004c00
 8005ca4:	08011a40 	.word	0x08011a40
 8005ca8:	08011a60 	.word	0x08011a60
 8005cac:	40026040 	.word	0x40026040
 8005cb0:	40026070 	.word	0x40026070

08005cb4 <CAN_Setup>:

void CAN_Setup(void) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
	CAN_setupTypeDef CANConfigs = { DISABLE, DISABLE, DISABLE, DISABLE, DISABLE,
 8005cba:	f107 0318 	add.w	r3, r7, #24
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	809a      	strh	r2, [r3, #4]
			DISABLE };
	CAN_Config(CAN1, &CANConfigs);
 8005cc4:	f107 0318 	add.w	r3, r7, #24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4810      	ldr	r0, [pc, #64]	; (8005d0c <CAN_Setup+0x58>)
 8005ccc:	f7fe fa4e 	bl	800416c <CAN_Config>
	CAN_Normal(CAN1);
 8005cd0:	480e      	ldr	r0, [pc, #56]	; (8005d0c <CAN_Setup+0x58>)
 8005cd2:	f7fe fad5 	bl	8004280 <CAN_Normal>
	//for Testing let it pass all message then
	CAN_FilterTypeDef filter0;
	filter0.FilterActivation = CAN_FILTER_ENABLE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
	filter0.FilterBank = 1;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
	filter0.FilterFIFOAssignment = CAN_FIFO0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
	filter0.FilterId = 0x0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
	filter0.FilterMaskId = 0x0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
	filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
	CAN_ConfigFilter(CAN1, &filter0);
 8005cee:	463b      	mov	r3, r7
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4806      	ldr	r0, [pc, #24]	; (8005d0c <CAN_Setup+0x58>)
 8005cf4:	f7fe fc6e 	bl	80045d4 <CAN_ConfigFilter>

	//CAN_Interrupt_Enable(CAN1, CAN_IER_FMPIE1, ENABLE);
	CAN_Interrupt_Enable(CAN1, CAN_IER_FMPIE0, ENABLE);
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4803      	ldr	r0, [pc, #12]	; (8005d0c <CAN_Setup+0x58>)
 8005cfe:	f7fe fc48 	bl	8004592 <CAN_Interrupt_Enable>
}
 8005d02:	bf00      	nop
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40006400 	.word	0x40006400

08005d10 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005d14:	e7fe      	b.n	8005d14 <NMI_Handler+0x4>
	...

08005d18 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	static uint8_t cont = 0;
	/* USER CODE END HardFault_IRQn 0 */
	while (cont == 0);
 8005d1c:	bf00      	nop
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HardFault_Handler+0x1c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0fb      	beq.n	8005d1e <HardFault_Handler+0x6>
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20002f24 	.word	0x20002f24

08005d38 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8005d3c:	e7fe      	b.n	8005d3c <MemManage_Handler+0x4>

08005d3e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8005d3e:	b480      	push	{r7}
 8005d40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8005d42:	e7fe      	b.n	8005d42 <BusFault_Handler+0x4>

08005d44 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8005d48:	e7fe      	b.n	8005d48 <UsageFault_Handler+0x4>

08005d4a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d68:	f8df d02c 	ldr.w	sp, [pc, #44]	; 8005d98 <LoopFillZerobss+0xa>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d6c:	480b      	ldr	r0, [pc, #44]	; (8005d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005d6e:	490c      	ldr	r1, [pc, #48]	; (8005da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d74:	e002      	b.n	8005d7c <LoopCopyDataInit>

08005d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d7a:	3304      	adds	r3, #4

08005d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d80:	d3f9      	bcc.n	8005d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005d84:	4c09      	ldr	r4, [pc, #36]	; (8005dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d88:	e001      	b.n	8005d8e <LoopFillZerobss>

08005d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d8c:	3204      	adds	r2, #4

08005d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d90:	d3fb      	bcc.n	8005d8a <FillZerobss>


/* Call the application's entry point.*/
  bl  main
 8005d92:	f7ff fe1f 	bl	80059d4 <main>
  bx  lr    
 8005d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005da0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8005da4:	080142bc 	.word	0x080142bc
  ldr r2, =_sbss
 8005da8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005dac:	20005368 	.word	0x20005368

08005db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005db0:	e7fe      	b.n	8005db0 <ADC_IRQHandler>
	...

08005db4 <aes_gen_tables>:
#define MUL(x, y) (((x) && (y)) ? pow[(log[(x)]+log[(y)]) % 255] : 0)

static int aes_init_done = 0;

static void aes_gen_tables(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8005dba:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for (i = 0, x = 1; i < 256; i++) {
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005dc8:	e02f      	b.n	8005e2a <aes_gen_tables+0x76>
        pow[i] = x;
 8005dca:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005dce:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005dd2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8005dd6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8005dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8005dde:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005de2:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005de6:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005dea:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8005dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0(x ^ XTIME(x));
 8005df2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005df6:	b25a      	sxtb	r2, r3
 8005df8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8005e04:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	d001      	beq.n	8005e10 <aes_gen_tables+0x5c>
 8005e0c:	211b      	movs	r1, #27
 8005e0e:	e000      	b.n	8005e12 <aes_gen_tables+0x5e>
 8005e10:	2100      	movs	r1, #0
 8005e12:	404b      	eors	r3, r1
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	4053      	eors	r3, r2
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for (i = 0, x = 1; i < 256; i++) {
 8005e20:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005e24:	3301      	adds	r3, #1
 8005e26:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005e2a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005e2e:	2bff      	cmp	r3, #255	; 0xff
 8005e30:	ddcb      	ble.n	8005dca <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for (i = 0, x = 1; i < 10; i++) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005e3e:	e01d      	b.n	8005e7c <aes_gen_tables+0xc8>
        RCON[i] = (uint32_t) x;
 8005e40:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005e44:	49d6      	ldr	r1, [pc, #856]	; (80061a0 <aes_gen_tables+0x3ec>)
 8005e46:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0(XTIME(x));
 8005e4e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005e5a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d001      	beq.n	8005e66 <aes_gen_tables+0xb2>
 8005e62:	221b      	movs	r2, #27
 8005e64:	e000      	b.n	8005e68 <aes_gen_tables+0xb4>
 8005e66:	2200      	movs	r2, #0
 8005e68:	4053      	eors	r3, r2
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for (i = 0, x = 1; i < 10; i++) {
 8005e72:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005e7c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005e80:	2b09      	cmp	r3, #9
 8005e82:	dddd      	ble.n	8005e40 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8005e84:	4bc7      	ldr	r3, [pc, #796]	; (80061a4 <aes_gen_tables+0x3f0>)
 8005e86:	2263      	movs	r2, #99	; 0x63
 8005e88:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8005e8a:	4bc7      	ldr	r3, [pc, #796]	; (80061a8 <aes_gen_tables+0x3f4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for (i = 1; i < 256; i++) {
 8005e92:	2301      	movs	r3, #1
 8005e94:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005e98:	e07e      	b.n	8005f98 <aes_gen_tables+0x1e4>
        x = pow[255 - log[i]];
 8005e9a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005e9e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005ea2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8005eae:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005eb2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = MBEDTLS_BYTE_0((y << 1) | (y >> 7));
 8005ebe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005ec2:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8005ec6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	b25a      	sxtb	r2, r3
 8005ece:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005ed2:	11db      	asrs	r3, r3, #7
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b25b      	sxtb	r3, r3
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0((y << 1) | (y >> 7));
 8005ee0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005ee4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005ee8:	4053      	eors	r3, r2
 8005eea:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005eee:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	b25a      	sxtb	r2, r3
 8005ef6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005efa:	11db      	asrs	r3, r3, #7
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0((y << 1) | (y >> 7));
 8005f08:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005f0c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f10:	4053      	eors	r3, r2
 8005f12:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005f16:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	b25a      	sxtb	r2, r3
 8005f1e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f22:	11db      	asrs	r3, r3, #7
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0((y << 1) | (y >> 7));
 8005f30:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005f34:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f38:	4053      	eors	r3, r2
 8005f3a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005f3e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	b25a      	sxtb	r2, r3
 8005f46:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f4a:	11db      	asrs	r3, r3, #7
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 8005f58:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005f5c:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8005f60:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005f64:	4053      	eors	r3, r2
 8005f66:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 8005f6a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005f6e:	b2d9      	uxtb	r1, r3
 8005f70:	4a8c      	ldr	r2, [pc, #560]	; (80061a4 <aes_gen_tables+0x3f0>)
 8005f72:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005f76:	4413      	add	r3, r2
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8005f7c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005f80:	b2d9      	uxtb	r1, r3
 8005f82:	4a89      	ldr	r2, [pc, #548]	; (80061a8 <aes_gen_tables+0x3f4>)
 8005f84:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005f88:	4413      	add	r3, r2
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < 256; i++) {
 8005f8e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005f92:	3301      	adds	r3, #1
 8005f94:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005f98:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005f9c:	2bff      	cmp	r3, #255	; 0xff
 8005f9e:	f77f af7c 	ble.w	8005e9a <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for (i = 0; i < 256; i++) {
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005fa8:	e13b      	b.n	8006222 <aes_gen_tables+0x46e>
        x = FSb[i];
 8005faa:	4a7e      	ldr	r2, [pc, #504]	; (80061a4 <aes_gen_tables+0x3f0>)
 8005fac:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005fb0:	4413      	add	r3, r2
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = MBEDTLS_BYTE_0(XTIME(x));
 8005fb8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005fc4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d001      	beq.n	8005fd0 <aes_gen_tables+0x21c>
 8005fcc:	221b      	movs	r2, #27
 8005fce:	e000      	b.n	8005fd2 <aes_gen_tables+0x21e>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4053      	eors	r3, r2
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z = MBEDTLS_BYTE_0(y ^ x);
 8005fdc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005fe0:	b25a      	sxtb	r2, r3
 8005fe2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	4053      	eors	r3, r2
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ((uint32_t) y) ^
                 ((uint32_t) x <<  8) ^
 8005ff2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005ff6:	021a      	lsls	r2, r3, #8
        FT0[i] = ((uint32_t) y) ^
 8005ff8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005ffc:	405a      	eors	r2, r3
                 ((uint32_t) x << 16) ^
 8005ffe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8006002:	041b      	lsls	r3, r3, #16
                 ((uint32_t) x <<  8) ^
 8006004:	405a      	eors	r2, r3
                 ((uint32_t) z << 24);
 8006006:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800600a:	061b      	lsls	r3, r3, #24
                 ((uint32_t) x << 16) ^
 800600c:	405a      	eors	r2, r3
        FT0[i] = ((uint32_t) y) ^
 800600e:	4967      	ldr	r1, [pc, #412]	; (80061ac <aes_gen_tables+0x3f8>)
 8006010:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8(FT0[i]);
 8006018:	4a64      	ldr	r2, [pc, #400]	; (80061ac <aes_gen_tables+0x3f8>)
 800601a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006026:	4962      	ldr	r1, [pc, #392]	; (80061b0 <aes_gen_tables+0x3fc>)
 8006028:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800602c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8(FT1[i]);
 8006030:	4a5f      	ldr	r2, [pc, #380]	; (80061b0 <aes_gen_tables+0x3fc>)
 8006032:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800603e:	495d      	ldr	r1, [pc, #372]	; (80061b4 <aes_gen_tables+0x400>)
 8006040:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8(FT2[i]);
 8006048:	4a5a      	ldr	r2, [pc, #360]	; (80061b4 <aes_gen_tables+0x400>)
 800604a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006056:	4958      	ldr	r1, [pc, #352]	; (80061b8 <aes_gen_tables+0x404>)
 8006058:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800605c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8006060:	4a51      	ldr	r2, [pc, #324]	; (80061a8 <aes_gen_tables+0x3f4>)
 8006062:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006066:	4413      	add	r3, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 800606e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <aes_gen_tables+0x304>
 8006076:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800607a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800607e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006080:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006084:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8006088:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800608c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006090:	441a      	add	r2, r3
 8006092:	4b4a      	ldr	r3, [pc, #296]	; (80061bc <aes_gen_tables+0x408>)
 8006094:	fb83 1302 	smull	r1, r3, r3, r2
 8006098:	4413      	add	r3, r2
 800609a:	11d9      	asrs	r1, r3, #7
 800609c:	17d3      	asrs	r3, r2, #31
 800609e:	1ac9      	subs	r1, r1, r3
 80060a0:	460b      	mov	r3, r1
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	1a5b      	subs	r3, r3, r1
 80060a6:	1ad1      	subs	r1, r2, r3
 80060a8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80060ac:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80060b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b4:	4618      	mov	r0, r3
 80060b6:	e000      	b.n	80060ba <aes_gen_tables+0x306>
 80060b8:	2000      	movs	r0, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 80060ba:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <aes_gen_tables+0x350>
 80060c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80060c6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80060ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060cc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80060d0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80060d4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80060d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060dc:	441a      	add	r2, r3
 80060de:	4b37      	ldr	r3, [pc, #220]	; (80061bc <aes_gen_tables+0x408>)
 80060e0:	fb83 1302 	smull	r1, r3, r3, r2
 80060e4:	4413      	add	r3, r2
 80060e6:	11d9      	asrs	r1, r3, #7
 80060e8:	17d3      	asrs	r3, r2, #31
 80060ea:	1ac9      	subs	r1, r1, r3
 80060ec:	460b      	mov	r3, r1
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	1a5b      	subs	r3, r3, r1
 80060f2:	1ad1      	subs	r1, r2, r3
 80060f4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80060f8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80060fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	e000      	b.n	8006106 <aes_gen_tables+0x352>
 8006104:	2300      	movs	r3, #0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8006106:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 8006108:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <aes_gen_tables+0x39e>
 8006110:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006114:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8006118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800611e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8006122:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8006126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800612a:	441a      	add	r2, r3
 800612c:	4b23      	ldr	r3, [pc, #140]	; (80061bc <aes_gen_tables+0x408>)
 800612e:	fb83 1302 	smull	r1, r3, r3, r2
 8006132:	4413      	add	r3, r2
 8006134:	11d9      	asrs	r1, r3, #7
 8006136:	17d3      	asrs	r3, r2, #31
 8006138:	1ac9      	subs	r1, r1, r3
 800613a:	460b      	mov	r3, r1
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	1a5b      	subs	r3, r3, r1
 8006140:	1ad1      	subs	r1, r2, r3
 8006142:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006146:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800614a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	e000      	b.n	8006154 <aes_gen_tables+0x3a0>
 8006152:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 8006154:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0B, x) << 24);
 8006156:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800615a:	2b00      	cmp	r3, #0
 800615c:	d030      	beq.n	80061c0 <aes_gen_tables+0x40c>
 800615e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006162:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8006166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006168:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800616c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8006170:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8006174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006178:	441a      	add	r2, r3
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <aes_gen_tables+0x408>)
 800617c:	fb83 1302 	smull	r1, r3, r3, r2
 8006180:	4413      	add	r3, r2
 8006182:	11d9      	asrs	r1, r3, #7
 8006184:	17d3      	asrs	r3, r2, #31
 8006186:	1ac9      	subs	r1, r1, r3
 8006188:	460b      	mov	r3, r1
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	1a5b      	subs	r3, r3, r1
 800618e:	1ad1      	subs	r1, r2, r3
 8006190:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006194:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800619c:	061b      	lsls	r3, r3, #24
 800619e:	e010      	b.n	80061c2 <aes_gen_tables+0x40e>
 80061a0:	20005128 	.word	0x20005128
 80061a4:	20002f28 	.word	0x20002f28
 80061a8:	20004028 	.word	0x20004028
 80061ac:	20003028 	.word	0x20003028
 80061b0:	20003428 	.word	0x20003428
 80061b4:	20003828 	.word	0x20003828
 80061b8:	20003c28 	.word	0x20003c28
 80061bc:	80808081 	.word	0x80808081
 80061c0:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 80061c2:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 80061c6:	491d      	ldr	r1, [pc, #116]	; (800623c <aes_gen_tables+0x488>)
 80061c8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80061cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8(RT0[i]);
 80061d0:	4a1a      	ldr	r2, [pc, #104]	; (800623c <aes_gen_tables+0x488>)
 80061d2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80061d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061da:	ea4f 6233 	mov.w	r2, r3, ror #24
 80061de:	4918      	ldr	r1, [pc, #96]	; (8006240 <aes_gen_tables+0x48c>)
 80061e0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80061e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8(RT1[i]);
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <aes_gen_tables+0x48c>)
 80061ea:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80061f6:	4913      	ldr	r1, [pc, #76]	; (8006244 <aes_gen_tables+0x490>)
 80061f8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80061fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8(RT2[i]);
 8006200:	4a10      	ldr	r2, [pc, #64]	; (8006244 <aes_gen_tables+0x490>)
 8006202:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800620e:	490e      	ldr	r1, [pc, #56]	; (8006248 <aes_gen_tables+0x494>)
 8006210:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 256; i++) {
 8006218:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800621c:	3301      	adds	r3, #1
 800621e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8006222:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006226:	2bff      	cmp	r3, #255	; 0xff
 8006228:	f77f aebf 	ble.w	8005faa <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20004128 	.word	0x20004128
 8006240:	20004528 	.word	0x20004528
 8006244:	20004928 	.word	0x20004928
 8006248:	20004d28 	.word	0x20004d28

0800624c <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init(mbedtls_aes_context *ctx)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aes_context));
 8006254:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f00a ff10 	bl	8011080 <memset>
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <mbedtls_aes_free>:

void mbedtls_aes_free(mbedtls_aes_context *ctx)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <mbedtls_aes_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aes_context));
 8006276:	f44f 718c 	mov.w	r1, #280	; 0x118
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f008 f8d8 	bl	800e430 <mbedtls_platform_zeroize>
 8006280:	e000      	b.n	8006284 <mbedtls_aes_free+0x1c>
        return;
 8006282:	bf00      	nop
}
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init(mbedtls_aes_xts_context *ctx)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
    mbedtls_aes_init(&ctx->crypt);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff ffd9 	bl	800624c <mbedtls_aes_init>
    mbedtls_aes_init(&ctx->tweak);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ffd3 	bl	800624c <mbedtls_aes_init>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free(mbedtls_aes_xts_context *ctx)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <mbedtls_aes_xts_free+0x24>
        return;
    }

    mbedtls_aes_free(&ctx->crypt);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff ffd2 	bl	8006268 <mbedtls_aes_free>
    mbedtls_aes_free(&ctx->tweak);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ffcc 	bl	8006268 <mbedtls_aes_free>
 80062d0:	e000      	b.n	80062d4 <mbedtls_aes_xts_free+0x26>
        return;
 80062d2:	bf00      	nop
}
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <mbedtls_aes_rk_offset>:
#if (defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)) ||        \
    (defined(MBEDTLS_AESNI_C) && MBEDTLS_AESNI_HAVE_CODE == 2)
#define MAY_NEED_TO_ALIGN
#endif
static unsigned mbedtls_aes_rk_offset(uint32_t *buf)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
    }
#else /* MAY_NEED_TO_ALIGN */
    (void) buf;
#endif /* MAY_NEED_TO_ALIGN */

    return 0;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
    unsigned int i;
    uint32_t *RK;

    switch (keybits) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d012      	beq.n	800632a <mbedtls_aes_setkey_enc+0x3a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630a:	d812      	bhi.n	8006332 <mbedtls_aes_setkey_enc+0x42>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d003      	beq.n	800631a <mbedtls_aes_setkey_enc+0x2a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2bc0      	cmp	r3, #192	; 0xc0
 8006316:	d004      	beq.n	8006322 <mbedtls_aes_setkey_enc+0x32>
 8006318:	e00b      	b.n	8006332 <mbedtls_aes_setkey_enc+0x42>
        case 128: ctx->nr = 10; break;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	220a      	movs	r2, #10
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e00a      	b.n	8006338 <mbedtls_aes_setkey_enc+0x48>
#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 192: ctx->nr = 12; break;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	220c      	movs	r2, #12
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e006      	b.n	8006338 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	220e      	movs	r2, #14
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e002      	b.n	8006338 <mbedtls_aes_setkey_enc+0x48>
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8006332:	f06f 031f 	mvn.w	r3, #31
 8006336:	e1b9      	b.n	80066ac <mbedtls_aes_setkey_enc+0x3bc>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if (aes_init_done == 0) {
 8006338:	4b86      	ldr	r3, [pc, #536]	; (8006554 <mbedtls_aes_setkey_enc+0x264>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <mbedtls_aes_setkey_enc+0x5a>
        aes_gen_tables();
 8006340:	f7ff fd38 	bl	8005db4 <aes_gen_tables>
        aes_init_done = 1;
 8006344:	4b83      	ldr	r3, [pc, #524]	; (8006554 <mbedtls_aes_setkey_enc+0x264>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
    }
#endif

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3308      	adds	r3, #8
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff ffc3 	bl	80062da <mbedtls_aes_rk_offset>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f103 0208 	add.w	r2, r3, #8
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
    if (mbedtls_aesce_has_support()) {
        return mbedtls_aesce_setkey_enc((unsigned char *) RK, key, keybits);
    }
#endif

    for (i = 0; i < (keybits >> 5); i++) {
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e00f      	b.n	8006390 <mbedtls_aes_setkey_enc+0xa0>
        RK[i] = MBEDTLS_GET_UINT32_LE(key, i << 2);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	18d1      	adds	r1, r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	18d4      	adds	r4, r2, r3
 8006380:	4608      	mov	r0, r1
 8006382:	f007 ffd3 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8006386:	4603      	mov	r3, r0
 8006388:	6023      	str	r3, [r4, #0]
    for (i = 0; i < (keybits >> 5); i++) {
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	3301      	adds	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	429a      	cmp	r2, r3
 8006398:	d3ea      	bcc.n	8006370 <mbedtls_aes_setkey_enc+0x80>
    }

    switch (ctx->nr) {
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b0e      	cmp	r3, #14
 80063a0:	f000 80d4 	beq.w	800654c <mbedtls_aes_setkey_enc+0x25c>
 80063a4:	2b0e      	cmp	r3, #14
 80063a6:	f300 8180 	bgt.w	80066aa <mbedtls_aes_setkey_enc+0x3ba>
 80063aa:	2b0a      	cmp	r3, #10
 80063ac:	d002      	beq.n	80063b4 <mbedtls_aes_setkey_enc+0xc4>
 80063ae:	2b0c      	cmp	r3, #12
 80063b0:	d05c      	beq.n	800646c <mbedtls_aes_setkey_enc+0x17c>
 80063b2:	e17a      	b.n	80066aa <mbedtls_aes_setkey_enc+0x3ba>
        case 10:

            for (i = 0; i < 10; i++, RK += 4) {
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e054      	b.n	8006464 <mbedtls_aes_setkey_enc+0x174>
                RK[4]  = RK[0] ^ RCON[i] ^
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4966      	ldr	r1, [pc, #408]	; (8006558 <mbedtls_aes_setkey_enc+0x268>)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063c6:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	320c      	adds	r2, #12
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	0a12      	lsrs	r2, r2, #8
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	4611      	mov	r1, r2
 80063d4:	4a61      	ldr	r2, [pc, #388]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80063d6:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 80063d8:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	330c      	adds	r3, #12
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	4619      	mov	r1, r3
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80063e8:	5c5b      	ldrb	r3, [r3, r1]
 80063ea:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 80063ec:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	330c      	adds	r3, #12
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	0e1b      	lsrs	r3, r3, #24
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	4b58      	ldr	r3, [pc, #352]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80063fc:	5c5b      	ldrb	r3, [r3, r1]
 80063fe:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 8006400:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	330c      	adds	r3, #12
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	4b53      	ldr	r3, [pc, #332]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 8006410:	5c9b      	ldrb	r3, [r3, r2]
 8006412:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3310      	adds	r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8006418:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 800641a:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3304      	adds	r3, #4
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3310      	adds	r3, #16
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3314      	adds	r3, #20
 800642c:	404a      	eors	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3308      	adds	r3, #8
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	3314      	adds	r3, #20
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3318      	adds	r3, #24
 8006440:	404a      	eors	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	330c      	adds	r3, #12
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3318      	adds	r3, #24
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	331c      	adds	r3, #28
 8006454:	404a      	eors	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
            for (i = 0; i < 10; i++, RK += 4) {
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3301      	adds	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3310      	adds	r3, #16
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b09      	cmp	r3, #9
 8006468:	d9a7      	bls.n	80063ba <mbedtls_aes_setkey_enc+0xca>
            }
            break;
 800646a:	e11e      	b.n	80066aa <mbedtls_aes_setkey_enc+0x3ba>

#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 12:

            for (i = 0; i < 8; i++, RK += 6) {
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e068      	b.n	8006544 <mbedtls_aes_setkey_enc+0x254>
                RK[6]  = RK[0] ^ RCON[i] ^
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4938      	ldr	r1, [pc, #224]	; (8006558 <mbedtls_aes_setkey_enc+0x268>)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800647e:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	3214      	adds	r2, #20
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	0a12      	lsrs	r2, r2, #8
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	4611      	mov	r1, r2
 800648c:	4a33      	ldr	r2, [pc, #204]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 800648e:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 8006490:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	3314      	adds	r3, #20
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4619      	mov	r1, r3
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80064a0:	5c5b      	ldrb	r3, [r3, r1]
 80064a2:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 80064a4:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	3314      	adds	r3, #20
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	0e1b      	lsrs	r3, r3, #24
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	4619      	mov	r1, r3
 80064b2:	4b2a      	ldr	r3, [pc, #168]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80064b4:	5c5b      	ldrb	r3, [r3, r1]
 80064b6:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 80064b8:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	3314      	adds	r3, #20
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b25      	ldr	r3, [pc, #148]	; (800655c <mbedtls_aes_setkey_enc+0x26c>)
 80064c8:	5c9b      	ldrb	r3, [r3, r2]
 80064ca:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3318      	adds	r3, #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80064d0:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80064d2:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3304      	adds	r3, #4
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3318      	adds	r3, #24
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	331c      	adds	r3, #28
 80064e4:	404a      	eors	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3308      	adds	r3, #8
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	331c      	adds	r3, #28
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3320      	adds	r3, #32
 80064f8:	404a      	eors	r2, r1
 80064fa:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	330c      	adds	r3, #12
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3320      	adds	r3, #32
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	404a      	eors	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	3310      	adds	r3, #16
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3324      	adds	r3, #36	; 0x24
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	3328      	adds	r3, #40	; 0x28
 8006520:	404a      	eors	r2, r1
 8006522:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3314      	adds	r3, #20
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3328      	adds	r3, #40	; 0x28
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	332c      	adds	r3, #44	; 0x2c
 8006534:	404a      	eors	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
            for (i = 0; i < 8; i++, RK += 6) {
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	3301      	adds	r3, #1
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3318      	adds	r3, #24
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b07      	cmp	r3, #7
 8006548:	d993      	bls.n	8006472 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 800654a:	e0ae      	b.n	80066aa <mbedtls_aes_setkey_enc+0x3ba>

        case 14:

            for (i = 0; i < 7; i++, RK += 8) {
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e0a6      	b.n	80066a0 <mbedtls_aes_setkey_enc+0x3b0>
 8006552:	bf00      	nop
 8006554:	20005150 	.word	0x20005150
 8006558:	20005128 	.word	0x20005128
 800655c:	20002f28 	.word	0x20002f28
                RK[8]  = RK[0] ^ RCON[i] ^
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4953      	ldr	r1, [pc, #332]	; (80066b4 <mbedtls_aes_setkey_enc+0x3c4>)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800656c:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	321c      	adds	r2, #28
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	0a12      	lsrs	r2, r2, #8
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	4611      	mov	r1, r2
 800657a:	4a4f      	ldr	r2, [pc, #316]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 800657c:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 800657e:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	331c      	adds	r3, #28
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 800658e:	5c5b      	ldrb	r3, [r3, r1]
 8006590:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8006592:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	331c      	adds	r3, #28
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	0e1b      	lsrs	r3, r3, #24
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4619      	mov	r1, r3
 80065a0:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 80065a2:	5c5b      	ldrb	r3, [r3, r1]
 80065a4:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 80065a6:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	331c      	adds	r3, #28
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b40      	ldr	r3, [pc, #256]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 80065b6:	5c9b      	ldrb	r3, [r3, r2]
 80065b8:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3320      	adds	r3, #32
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 80065be:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80065c0:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3304      	adds	r3, #4
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	3320      	adds	r3, #32
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	404a      	eors	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3308      	adds	r3, #8
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3324      	adds	r3, #36	; 0x24
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3328      	adds	r3, #40	; 0x28
 80065e6:	404a      	eors	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	330c      	adds	r3, #12
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3328      	adds	r3, #40	; 0x28
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	332c      	adds	r3, #44	; 0x2c
 80065fa:	404a      	eors	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3310      	adds	r3, #16
 8006602:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	322c      	adds	r2, #44	; 0x2c
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	4611      	mov	r1, r2
 800660e:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 8006610:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8006612:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	332c      	adds	r3, #44	; 0x2c
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	b2db      	uxtb	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 8006622:	5c5b      	ldrb	r3, [r3, r1]
 8006624:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8006626:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	332c      	adds	r3, #44	; 0x2c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	b2db      	uxtb	r3, r3
 8006632:	4619      	mov	r1, r3
 8006634:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 8006636:	5c5b      	ldrb	r3, [r3, r1]
 8006638:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 800663a:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	332c      	adds	r3, #44	; 0x2c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <mbedtls_aes_setkey_enc+0x3c8>)
 800664c:	5c9b      	ldrb	r3, [r3, r2]
 800664e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3330      	adds	r3, #48	; 0x30
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8006654:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8006656:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3314      	adds	r3, #20
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3330      	adds	r3, #48	; 0x30
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3334      	adds	r3, #52	; 0x34
 8006668:	404a      	eors	r2, r1
 800666a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3318      	adds	r3, #24
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3334      	adds	r3, #52	; 0x34
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3338      	adds	r3, #56	; 0x38
 800667c:	404a      	eors	r2, r1
 800667e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	331c      	adds	r3, #28
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3338      	adds	r3, #56	; 0x38
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	333c      	adds	r3, #60	; 0x3c
 8006690:	404a      	eors	r2, r1
 8006692:	601a      	str	r2, [r3, #0]
            for (i = 0; i < 7; i++, RK += 8) {
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3301      	adds	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3320      	adds	r3, #32
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	f67f af5c 	bls.w	8006560 <mbedtls_aes_setkey_enc+0x270>
            }
            break;
 80066a8:	bf00      	nop
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
    }

    return 0;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd90      	pop	{r4, r7, pc}
 80066b4:	20005128 	.word	0x20005128
 80066b8:	20002f28 	.word	0x20002f28

080066bc <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b0d0      	sub	sp, #320	; 0x140
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80066c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80066ca:	6018      	str	r0, [r3, #0]
 80066cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80066d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80066d4:	6019      	str	r1, [r3, #0]
 80066d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80066da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80066de:	601a      	str	r2, [r3, #0]
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init(&cty);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fdb1 	bl	800624c <mbedtls_aes_init>

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 80066ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80066ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fdef 	bl	80062da <mbedtls_aes_rk_offset>
 80066fc:	4602      	mov	r2, r0
 80066fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006702:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 800670a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800670e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f103 0208 	add.w	r2, r3, #8
 8006718:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800671c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Also checks keybits */
    if ((ret = mbedtls_aes_setkey_enc(&cty, key, keybits)) != 0) {
 800672c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006730:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8006734:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006738:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800673c:	f107 0014 	add.w	r0, r7, #20
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	f7ff fdd4 	bl	80062f0 <mbedtls_aes_setkey_enc>
 8006748:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800674c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 80e7 	bne.w	8006924 <mbedtls_aes_setkey_dec+0x268>
        goto exit;
    }

    ctx->nr = cty.nr;
 8006756:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800675a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006764:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	601a      	str	r2, [r3, #0]
            ctx->nr);
        goto exit;
    }
#endif

    SK = cty.buf + cty.rk_offset + cty.nr * 4;
 800676c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800677a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	f107 0214 	add.w	r2, r7, #20
 800678a:	3208      	adds	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 8006792:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006796:	1d13      	adds	r3, r2, #4
 8006798:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800679c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a0:	1d19      	adds	r1, r3, #4
 80067a2:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80067aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80067ae:	1d13      	adds	r3, r2, #4
 80067b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80067b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80067c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80067c6:	1d13      	adds	r3, r2, #4
 80067c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80067cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067d0:	1d19      	adds	r1, r3, #4
 80067d2:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80067da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80067de:	1d13      	adds	r3, r2, #4
 80067e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80067e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067e8:	1d19      	adds	r1, r3, #4
 80067ea:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	601a      	str	r2, [r3, #0]

    for (i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8) {
 80067f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80067f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3b01      	subs	r3, #1
 8006800:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006804:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006808:	3b20      	subs	r3, #32
 800680a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800680e:	e054      	b.n	80068ba <mbedtls_aes_setkey_dec+0x1fe>
        for (j = 0; j < 4; j++, SK++) {
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006816:	e042      	b.n	800689e <mbedtls_aes_setkey_dec+0x1e2>
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8006818:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	4b47      	ldr	r3, [pc, #284]	; (8006940 <mbedtls_aes_setkey_dec+0x284>)
 8006824:	5c9b      	ldrb	r3, [r3, r2]
 8006826:	461a      	mov	r2, r3
 8006828:	4b46      	ldr	r3, [pc, #280]	; (8006944 <mbedtls_aes_setkey_dec+0x288>)
 800682a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 800682e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4619      	mov	r1, r3
 800683a:	4b41      	ldr	r3, [pc, #260]	; (8006940 <mbedtls_aes_setkey_dec+0x284>)
 800683c:	5c5b      	ldrb	r3, [r3, r1]
 800683e:	4619      	mov	r1, r3
 8006840:	4b41      	ldr	r3, [pc, #260]	; (8006948 <mbedtls_aes_setkey_dec+0x28c>)
 8006842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8006846:	405a      	eors	r2, r3
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 8006848:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	b2db      	uxtb	r3, r3
 8006852:	4619      	mov	r1, r3
 8006854:	4b3a      	ldr	r3, [pc, #232]	; (8006940 <mbedtls_aes_setkey_dec+0x284>)
 8006856:	5c5b      	ldrb	r3, [r3, r1]
 8006858:	4619      	mov	r1, r3
 800685a:	4b3c      	ldr	r3, [pc, #240]	; (800694c <mbedtls_aes_setkey_dec+0x290>)
 800685c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 8006860:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);
 8006864:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	0e1b      	lsrs	r3, r3, #24
 800686c:	b2db      	uxtb	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	4b33      	ldr	r3, [pc, #204]	; (8006940 <mbedtls_aes_setkey_dec+0x284>)
 8006872:	5c9b      	ldrb	r3, [r3, r2]
 8006874:	461a      	mov	r2, r3
 8006876:	4b36      	ldr	r3, [pc, #216]	; (8006950 <mbedtls_aes_setkey_dec+0x294>)
 8006878:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 800687c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006880:	1d18      	adds	r0, r3, #4
 8006882:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 8006886:	404a      	eors	r2, r1
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8006888:	601a      	str	r2, [r3, #0]
        for (j = 0; j < 4; j++, SK++) {
 800688a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800688e:	3301      	adds	r3, #1
 8006890:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006898:	3304      	adds	r3, #4
 800689a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800689e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	ddb8      	ble.n	8006818 <mbedtls_aes_setkey_dec+0x15c>
    for (i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8) {
 80068a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80068aa:	3b01      	subs	r3, #1
 80068ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80068b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068b4:	3b20      	subs	r3, #32
 80068b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80068ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dca6      	bgt.n	8006810 <mbedtls_aes_setkey_dec+0x154>
        }
    }

    *RK++ = *SK++;
 80068c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80068c6:	1d13      	adds	r3, r2, #4
 80068c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80068cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80068da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80068de:	1d13      	adds	r3, r2, #4
 80068e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80068e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80068f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80068f6:	1d13      	adds	r3, r2, #4
 80068f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80068fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006900:	1d19      	adds	r1, r3, #4
 8006902:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800690a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800690e:	1d13      	adds	r3, r2, #4
 8006910:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e000      	b.n	8006926 <mbedtls_aes_setkey_dec+0x26a>
        goto exit;
 8006924:	bf00      	nop

exit:
    mbedtls_aes_free(&cty);
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fc9c 	bl	8006268 <mbedtls_aes_free>

    return ret;
 8006930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8006934:	4618      	mov	r0, r3
 8006936:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20002f28 	.word	0x20002f28
 8006944:	20004128 	.word	0x20004128
 8006948:	20004528 	.word	0x20004528
 800694c:	20004928 	.word	0x20004928
 8006950:	20004d28 	.word	0x20004d28

08006954 <mbedtls_aes_xts_decode_keys>:
                                       unsigned int keybits,
                                       const unsigned char **key1,
                                       unsigned int *key1bits,
                                       const unsigned char **key2,
                                       unsigned int *key2bits)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	613b      	str	r3, [r7, #16]

    switch (keybits) {
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006974:	d006      	beq.n	8006984 <mbedtls_aes_xts_decode_keys+0x30>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d004      	beq.n	8006988 <mbedtls_aes_xts_decode_keys+0x34>
        case 256: break;
        case 512: break;
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 800697e:	f06f 031f 	mvn.w	r3, #31
 8006982:	e011      	b.n	80069a8 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 8006988:	bf00      	nop
    }

    *key1bits = half_keybits;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	441a      	add	r2, r3
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	601a      	str	r2, [r3, #0]

    return 0;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08c      	sub	sp, #48	; 0x30
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80069c0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 80069c6:	f107 0118 	add.w	r1, r7, #24
 80069ca:	f107 0220 	add.w	r2, r7, #32
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f107 031c 	add.w	r3, r7, #28
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	460b      	mov	r3, r1
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	68b8      	ldr	r0, [r7, #8]
 80069e0:	f7ff ffb8 	bl	8006954 <mbedtls_aes_xts_decode_keys>
 80069e4:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <mbedtls_aes_xts_setkey_enc+0x3c>
        return ret;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	e014      	b.n	8006a1a <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80069f6:	69f9      	ldr	r1, [r7, #28]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fc78 	bl	80062f0 <mbedtls_aes_setkey_enc>
 8006a00:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <mbedtls_aes_xts_setkey_enc+0x58>
        return ret;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	e006      	b.n	8006a1a <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc(&ctx->crypt, key1, key1bits);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a39      	ldr	r1, [r7, #32]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fc6c 	bl	80062f0 <mbedtls_aes_setkey_enc>
 8006a18:	4603      	mov	r3, r0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3728      	adds	r7, #40	; 0x28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b08c      	sub	sp, #48	; 0x30
 8006a26:	af02      	add	r7, sp, #8
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006a2e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 8006a34:	f107 0118 	add.w	r1, r7, #24
 8006a38:	f107 0220 	add.w	r2, r7, #32
 8006a3c:	f107 0314 	add.w	r3, r7, #20
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	f107 031c 	add.w	r3, r7, #28
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f7ff ff81 	bl	8006954 <mbedtls_aes_xts_decode_keys>
 8006a52:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <mbedtls_aes_xts_setkey_dec+0x3c>
        return ret;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e014      	b.n	8006a88 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff fc41 	bl	80062f0 <mbedtls_aes_setkey_enc>
 8006a6e:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <mbedtls_aes_xts_setkey_dec+0x58>
        return ret;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	e006      	b.n	8006a88 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec(&ctx->crypt, key1, key1bits);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a39      	ldr	r1, [r7, #32]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff fe1b 	bl	80066bc <mbedtls_aes_setkey_dec>
 8006a86:	4603      	mov	r3, r0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3728      	adds	r7, #40	; 0x28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08e      	sub	sp, #56	; 0x38
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f103 0208 	add.w	r2, r3, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8006aac:	68b8      	ldr	r0, [r7, #8]
 8006aae:	f007 fc3d 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	1d1a      	adds	r2, r3, #4
 8006aba:	637a      	str	r2, [r7, #52]	; 0x34
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4053      	eors	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f007 fc2f 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	1d1a      	adds	r2, r3, #4
 8006ad6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4053      	eors	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f007 fc21 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8006aea:	4603      	mov	r3, r0
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	637a      	str	r2, [r7, #52]	; 0x34
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4053      	eors	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	330c      	adds	r3, #12
 8006b00:	4618      	mov	r0, r3
 8006b02:	f007 fc13 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8006b06:	4603      	mov	r3, r0
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	637a      	str	r2, [r7, #52]	; 0x34
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4053      	eors	r3, r2
 8006b16:	61fb      	str	r3, [r7, #28]

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	105b      	asrs	r3, r3, #1
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	633b      	str	r3, [r7, #48]	; 0x30
 8006b22:	e122      	b.n	8006d6a <mbedtls_internal_aes_encrypt+0x2da>
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	1d1a      	adds	r2, r3, #4
 8006b28:	637a      	str	r2, [r7, #52]	; 0x34
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	4bb0      	ldr	r3, [pc, #704]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b38:	405a      	eors	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	4bad      	ldr	r3, [pc, #692]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006b44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b48:	405a      	eors	r2, r3
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	4619      	mov	r1, r3
 8006b52:	4baa      	ldr	r3, [pc, #680]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b58:	405a      	eors	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	0e1b      	lsrs	r3, r3, #24
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	4ba7      	ldr	r3, [pc, #668]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b68:	4053      	eors	r3, r2
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	637a      	str	r2, [r7, #52]	; 0x34
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4b9e      	ldr	r3, [pc, #632]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006b7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b80:	405a      	eors	r2, r3
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4b9b      	ldr	r3, [pc, #620]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b90:	405a      	eors	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4b98      	ldr	r3, [pc, #608]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ba0:	405a      	eors	r2, r3
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	0e1b      	lsrs	r3, r3, #24
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4b95      	ldr	r3, [pc, #596]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bb0:	4053      	eors	r3, r2
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4b8c      	ldr	r3, [pc, #560]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bc8:	405a      	eors	r2, r3
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4b89      	ldr	r3, [pc, #548]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bd8:	405a      	eors	r2, r3
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	4b86      	ldr	r3, [pc, #536]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006be8:	405a      	eors	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	0e1b      	lsrs	r3, r3, #24
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4b83      	ldr	r3, [pc, #524]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bf8:	4053      	eors	r3, r2
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	637a      	str	r2, [r7, #52]	; 0x34
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4b7a      	ldr	r3, [pc, #488]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c10:	405a      	eors	r2, r3
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4b77      	ldr	r3, [pc, #476]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c20:	405a      	eors	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4b74      	ldr	r3, [pc, #464]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c30:	405a      	eors	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	0e1b      	lsrs	r3, r3, #24
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4b71      	ldr	r3, [pc, #452]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c40:	4053      	eors	r3, r2
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	637a      	str	r2, [r7, #52]	; 0x34
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	4b68      	ldr	r3, [pc, #416]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c58:	405a      	eors	r2, r3
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	4b65      	ldr	r3, [pc, #404]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c68:	405a      	eors	r2, r3
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	4b62      	ldr	r3, [pc, #392]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006c74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c78:	405a      	eors	r2, r3
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	4b5f      	ldr	r3, [pc, #380]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c88:	4053      	eors	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	1d1a      	adds	r2, r3, #4
 8006c90:	637a      	str	r2, [r7, #52]	; 0x34
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4b56      	ldr	r3, [pc, #344]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ca0:	405a      	eors	r2, r3
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006cac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cb0:	405a      	eors	r2, r3
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006cbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cc0:	405a      	eors	r2, r3
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cd0:	4053      	eors	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4b44      	ldr	r3, [pc, #272]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ce8:	405a      	eors	r2, r3
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4b41      	ldr	r3, [pc, #260]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006cf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cf8:	405a      	eors	r2, r3
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006d04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d08:	405a      	eors	r2, r3
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	4b3b      	ldr	r3, [pc, #236]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d18:	4053      	eors	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	637a      	str	r2, [r7, #52]	; 0x34
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006d2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d30:	405a      	eors	r2, r3
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d40:	405a      	eors	r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006d4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d50:	405a      	eors	r2, r3
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	0e1b      	lsrs	r3, r3, #24
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d60:	4053      	eors	r3, r2
 8006d62:	61fb      	str	r3, [r7, #28]
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	3b01      	subs	r3, #1
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f73f aed9 	bgt.w	8006b24 <mbedtls_internal_aes_encrypt+0x94>
    }

    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	637a      	str	r2, [r7, #52]	; 0x34
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d86:	405a      	eors	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006d92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d96:	405a      	eors	r2, r3
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006da2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006da6:	405a      	eors	r2, r3
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	0e1b      	lsrs	r3, r3, #24
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	4619      	mov	r1, r3
 8006db0:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <mbedtls_internal_aes_encrypt+0x370>)
 8006db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006db6:	4053      	eors	r3, r2
 8006db8:	623b      	str	r3, [r7, #32]
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	1d1a      	adds	r2, r3, #4
 8006dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <mbedtls_internal_aes_encrypt+0x364>)
 8006dca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dce:	405a      	eors	r2, r3
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <mbedtls_internal_aes_encrypt+0x368>)
 8006dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dde:	405a      	eors	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	4619      	mov	r1, r3
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <mbedtls_internal_aes_encrypt+0x36c>)
 8006dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dee:	405a      	eors	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	e007      	b.n	8006e04 <mbedtls_internal_aes_encrypt+0x374>
 8006df4:	20003028 	.word	0x20003028
 8006df8:	20003428 	.word	0x20003428
 8006dfc:	20003828 	.word	0x20003828
 8006e00:	20003c28 	.word	0x20003c28
 8006e04:	0e1b      	lsrs	r3, r3, #24
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4b7f      	ldr	r3, [pc, #508]	; (8007008 <mbedtls_internal_aes_encrypt+0x578>)
 8006e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e10:	4053      	eors	r3, r2
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	1d1a      	adds	r2, r3, #4
 8006e18:	637a      	str	r2, [r7, #52]	; 0x34
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	4b7a      	ldr	r3, [pc, #488]	; (800700c <mbedtls_internal_aes_encrypt+0x57c>)
 8006e24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e28:	405a      	eors	r2, r3
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	4b77      	ldr	r3, [pc, #476]	; (8007010 <mbedtls_internal_aes_encrypt+0x580>)
 8006e34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e38:	405a      	eors	r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	4b74      	ldr	r3, [pc, #464]	; (8007014 <mbedtls_internal_aes_encrypt+0x584>)
 8006e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e48:	405a      	eors	r2, r3
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0e1b      	lsrs	r3, r3, #24
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	4b6d      	ldr	r3, [pc, #436]	; (8007008 <mbedtls_internal_aes_encrypt+0x578>)
 8006e54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e58:	4053      	eors	r3, r2
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	637a      	str	r2, [r7, #52]	; 0x34
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4b68      	ldr	r3, [pc, #416]	; (800700c <mbedtls_internal_aes_encrypt+0x57c>)
 8006e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e70:	405a      	eors	r2, r3
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4b65      	ldr	r3, [pc, #404]	; (8007010 <mbedtls_internal_aes_encrypt+0x580>)
 8006e7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e80:	405a      	eors	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4b62      	ldr	r3, [pc, #392]	; (8007014 <mbedtls_internal_aes_encrypt+0x584>)
 8006e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e90:	405a      	eors	r2, r3
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	0e1b      	lsrs	r3, r3, #24
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4b5b      	ldr	r3, [pc, #364]	; (8007008 <mbedtls_internal_aes_encrypt+0x578>)
 8006e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ea0:	4053      	eors	r3, r2
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	637a      	str	r2, [r7, #52]	; 0x34
 8006eaa:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4a59      	ldr	r2, [pc, #356]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006eb4:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8006eb6:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4b55      	ldr	r3, [pc, #340]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006ec2:	5c5b      	ldrb	r3, [r3, r1]
 8006ec4:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8006ec6:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4b51      	ldr	r3, [pc, #324]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006ed2:	5c5b      	ldrb	r3, [r3, r1]
 8006ed4:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8006ed6:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4b4d      	ldr	r3, [pc, #308]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006ee2:	5c5b      	ldrb	r3, [r3, r1]
 8006ee4:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8006ee6:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8006ee8:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	637a      	str	r2, [r7, #52]	; 0x34
 8006ef0:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4a47      	ldr	r2, [pc, #284]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006efa:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8006efc:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	4b44      	ldr	r3, [pc, #272]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f08:	5c5b      	ldrb	r3, [r3, r1]
 8006f0a:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8006f0c:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	4b40      	ldr	r3, [pc, #256]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f18:	5c5b      	ldrb	r3, [r3, r1]
 8006f1a:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8006f1c:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	0e1b      	lsrs	r3, r3, #24
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	4b3c      	ldr	r3, [pc, #240]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f28:	5c5b      	ldrb	r3, [r3, r1]
 8006f2a:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8006f2c:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8006f2e:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	1d1a      	adds	r2, r3, #4
 8006f34:	637a      	str	r2, [r7, #52]	; 0x34
 8006f36:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8006f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	4a36      	ldr	r2, [pc, #216]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f40:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8006f42:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f4e:	5c5b      	ldrb	r3, [r3, r1]
 8006f50:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8006f52:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4b2e      	ldr	r3, [pc, #184]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f5e:	5c5b      	ldrb	r3, [r3, r1]
 8006f60:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8006f62:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	0e1b      	lsrs	r3, r3, #24
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f6e:	5c5b      	ldrb	r3, [r3, r1]
 8006f70:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8006f72:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8006f74:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	1d1a      	adds	r2, r3, #4
 8006f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8006f7c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8006f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	4611      	mov	r1, r2
 8006f84:	4a24      	ldr	r2, [pc, #144]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f86:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8006f88:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	0a1b      	lsrs	r3, r3, #8
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4619      	mov	r1, r3
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006f94:	5c5b      	ldrb	r3, [r3, r1]
 8006f96:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8006f98:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006fa4:	5c5b      	ldrb	r3, [r3, r1]
 8006fa6:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8006fa8:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4b19      	ldr	r3, [pc, #100]	; (8007018 <mbedtls_internal_aes_encrypt+0x588>)
 8006fb4:	5c5b      	ldrb	r3, [r3, r1]
 8006fb6:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8006fb8:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8006fba:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f007 f9c1 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f007 f9ba 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f007 f9b3 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f007 f9ac 	bl	800e348 <mbedtls_put_unaligned_uint32>

    mbedtls_platform_zeroize(&t, sizeof(t));
 8006ff0:	f107 0310 	add.w	r3, r7, #16
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f007 fa1a 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3738      	adds	r7, #56	; 0x38
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20003c28 	.word	0x20003c28
 800700c:	20003028 	.word	0x20003028
 8007010:	20003428 	.word	0x20003428
 8007014:	20003828 	.word	0x20003828
 8007018:	20002f28 	.word	0x20002f28

0800701c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	; 0x38
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f103 0208 	add.w	r2, r3, #8
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8007038:	68b8      	ldr	r0, [r7, #8]
 800703a:	f007 f977 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800703e:	4603      	mov	r3, r0
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	1d1a      	adds	r2, r3, #4
 8007046:	637a      	str	r2, [r7, #52]	; 0x34
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4053      	eors	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f007 f969 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800705a:	4603      	mov	r3, r0
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	1d1a      	adds	r2, r3, #4
 8007062:	637a      	str	r2, [r7, #52]	; 0x34
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4053      	eors	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3308      	adds	r3, #8
 8007070:	4618      	mov	r0, r3
 8007072:	f007 f95b 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8007076:	4603      	mov	r3, r0
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	1d1a      	adds	r2, r3, #4
 800707e:	637a      	str	r2, [r7, #52]	; 0x34
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4053      	eors	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	330c      	adds	r3, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f007 f94d 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8007092:	4603      	mov	r3, r0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	637a      	str	r2, [r7, #52]	; 0x34
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4053      	eors	r3, r2
 80070a2:	61fb      	str	r3, [r7, #28]

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	105b      	asrs	r3, r3, #1
 80070aa:	3b01      	subs	r3, #1
 80070ac:	633b      	str	r3, [r7, #48]	; 0x30
 80070ae:	e122      	b.n	80072f6 <mbedtls_internal_aes_decrypt+0x2da>
        AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	637a      	str	r2, [r7, #52]	; 0x34
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	4bb0      	ldr	r3, [pc, #704]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 80070c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070c4:	405a      	eors	r2, r3
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	4bad      	ldr	r3, [pc, #692]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 80070d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070d4:	405a      	eors	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	0c1b      	lsrs	r3, r3, #16
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	4baa      	ldr	r3, [pc, #680]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 80070e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070e4:	405a      	eors	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	0e1b      	lsrs	r3, r3, #24
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	4ba7      	ldr	r3, [pc, #668]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 80070f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070f4:	4053      	eors	r3, r2
 80070f6:	623b      	str	r3, [r7, #32]
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	637a      	str	r2, [r7, #52]	; 0x34
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	4b9e      	ldr	r3, [pc, #632]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800710c:	405a      	eors	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	4b9b      	ldr	r3, [pc, #620]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 8007118:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800711c:	405a      	eors	r2, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	b2db      	uxtb	r3, r3
 8007124:	4619      	mov	r1, r3
 8007126:	4b98      	ldr	r3, [pc, #608]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800712c:	405a      	eors	r2, r3
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	0e1b      	lsrs	r3, r3, #24
 8007132:	b2db      	uxtb	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	4b95      	ldr	r3, [pc, #596]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 8007138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800713c:	4053      	eors	r3, r2
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	637a      	str	r2, [r7, #52]	; 0x34
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	4619      	mov	r1, r3
 800714e:	4b8c      	ldr	r3, [pc, #560]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007150:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007154:	405a      	eors	r2, r3
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	b2db      	uxtb	r3, r3
 800715c:	4619      	mov	r1, r3
 800715e:	4b89      	ldr	r3, [pc, #548]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 8007160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007164:	405a      	eors	r2, r3
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	4b86      	ldr	r3, [pc, #536]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007174:	405a      	eors	r2, r3
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	b2db      	uxtb	r3, r3
 800717c:	4619      	mov	r1, r3
 800717e:	4b83      	ldr	r3, [pc, #524]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 8007180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007184:	4053      	eors	r3, r2
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	637a      	str	r2, [r7, #52]	; 0x34
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	4b7a      	ldr	r3, [pc, #488]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800719c:	405a      	eors	r2, r3
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	4b77      	ldr	r3, [pc, #476]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 80071a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071ac:	405a      	eors	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	0c1b      	lsrs	r3, r3, #16
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	4b74      	ldr	r3, [pc, #464]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 80071b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071bc:	405a      	eors	r2, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	0e1b      	lsrs	r3, r3, #24
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	4b71      	ldr	r3, [pc, #452]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 80071c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071cc:	4053      	eors	r3, r2
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_RROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	637a      	str	r2, [r7, #52]	; 0x34
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	4b68      	ldr	r3, [pc, #416]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 80071e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071e4:	405a      	eors	r2, r3
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	0a1b      	lsrs	r3, r3, #8
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	4b65      	ldr	r3, [pc, #404]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 80071f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071f4:	405a      	eors	r2, r3
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4619      	mov	r1, r3
 80071fe:	4b62      	ldr	r3, [pc, #392]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007204:	405a      	eors	r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	0e1b      	lsrs	r3, r3, #24
 800720a:	b2db      	uxtb	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	4b5f      	ldr	r3, [pc, #380]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 8007210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007214:	4053      	eors	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	637a      	str	r2, [r7, #52]	; 0x34
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4619      	mov	r1, r3
 8007226:	4b56      	ldr	r3, [pc, #344]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800722c:	405a      	eors	r2, r3
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4619      	mov	r1, r3
 8007236:	4b53      	ldr	r3, [pc, #332]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 8007238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800723c:	405a      	eors	r2, r3
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	b2db      	uxtb	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	4b50      	ldr	r3, [pc, #320]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800724c:	405a      	eors	r2, r3
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	4b4d      	ldr	r3, [pc, #308]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 8007258:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800725c:	4053      	eors	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	637a      	str	r2, [r7, #52]	; 0x34
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	4b44      	ldr	r3, [pc, #272]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007274:	405a      	eors	r2, r3
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	b2db      	uxtb	r3, r3
 800727c:	4619      	mov	r1, r3
 800727e:	4b41      	ldr	r3, [pc, #260]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 8007280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007284:	405a      	eors	r2, r3
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	b2db      	uxtb	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	4b3e      	ldr	r3, [pc, #248]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007294:	405a      	eors	r2, r3
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	b2db      	uxtb	r3, r3
 800729c:	4619      	mov	r1, r3
 800729e:	4b3b      	ldr	r3, [pc, #236]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 80072a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072a4:	4053      	eors	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	1d1a      	adds	r2, r3, #4
 80072ac:	637a      	str	r2, [r7, #52]	; 0x34
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	4b32      	ldr	r3, [pc, #200]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 80072b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072bc:	405a      	eors	r2, r3
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 80072c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072cc:	405a      	eors	r2, r3
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	4b2c      	ldr	r3, [pc, #176]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 80072d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072dc:	405a      	eors	r2, r3
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	4619      	mov	r1, r3
 80072e6:	4b29      	ldr	r3, [pc, #164]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 80072e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072ec:	4053      	eors	r3, r2
 80072ee:	61fb      	str	r3, [r7, #28]
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	3b01      	subs	r3, #1
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f73f aed9 	bgt.w	80070b0 <mbedtls_internal_aes_decrypt+0x94>
    }

    AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	637a      	str	r2, [r7, #52]	; 0x34
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 800730e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007312:	405a      	eors	r2, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	b2db      	uxtb	r3, r3
 800731a:	4619      	mov	r1, r3
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 800731e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007322:	405a      	eors	r2, r3
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	4b16      	ldr	r3, [pc, #88]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 800732e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007332:	405a      	eors	r2, r3
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	b2db      	uxtb	r3, r3
 800733a:	4619      	mov	r1, r3
 800733c:	4b13      	ldr	r3, [pc, #76]	; (800738c <mbedtls_internal_aes_decrypt+0x370>)
 800733e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007342:	4053      	eors	r3, r2
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	637a      	str	r2, [r7, #52]	; 0x34
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4619      	mov	r1, r3
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <mbedtls_internal_aes_decrypt+0x364>)
 8007356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800735a:	405a      	eors	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	b2db      	uxtb	r3, r3
 8007362:	4619      	mov	r1, r3
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <mbedtls_internal_aes_decrypt+0x368>)
 8007366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800736a:	405a      	eors	r2, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	b2db      	uxtb	r3, r3
 8007372:	4619      	mov	r1, r3
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <mbedtls_internal_aes_decrypt+0x36c>)
 8007376:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800737a:	405a      	eors	r2, r3
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	e007      	b.n	8007390 <mbedtls_internal_aes_decrypt+0x374>
 8007380:	20004128 	.word	0x20004128
 8007384:	20004528 	.word	0x20004528
 8007388:	20004928 	.word	0x20004928
 800738c:	20004d28 	.word	0x20004d28
 8007390:	0e1b      	lsrs	r3, r3, #24
 8007392:	b2db      	uxtb	r3, r3
 8007394:	4619      	mov	r1, r3
 8007396:	4b7f      	ldr	r3, [pc, #508]	; (8007594 <mbedtls_internal_aes_decrypt+0x578>)
 8007398:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800739c:	4053      	eors	r3, r2
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	637a      	str	r2, [r7, #52]	; 0x34
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	4b7a      	ldr	r3, [pc, #488]	; (8007598 <mbedtls_internal_aes_decrypt+0x57c>)
 80073b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073b4:	405a      	eors	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	4619      	mov	r1, r3
 80073be:	4b77      	ldr	r3, [pc, #476]	; (800759c <mbedtls_internal_aes_decrypt+0x580>)
 80073c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073c4:	405a      	eors	r2, r3
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	4b74      	ldr	r3, [pc, #464]	; (80075a0 <mbedtls_internal_aes_decrypt+0x584>)
 80073d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073d4:	405a      	eors	r2, r3
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	0e1b      	lsrs	r3, r3, #24
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	4b6d      	ldr	r3, [pc, #436]	; (8007594 <mbedtls_internal_aes_decrypt+0x578>)
 80073e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073e4:	4053      	eors	r3, r2
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	637a      	str	r2, [r7, #52]	; 0x34
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	4b68      	ldr	r3, [pc, #416]	; (8007598 <mbedtls_internal_aes_decrypt+0x57c>)
 80073f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073fc:	405a      	eors	r2, r3
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	4b65      	ldr	r3, [pc, #404]	; (800759c <mbedtls_internal_aes_decrypt+0x580>)
 8007408:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800740c:	405a      	eors	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	0c1b      	lsrs	r3, r3, #16
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4619      	mov	r1, r3
 8007416:	4b62      	ldr	r3, [pc, #392]	; (80075a0 <mbedtls_internal_aes_decrypt+0x584>)
 8007418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800741c:	405a      	eors	r2, r3
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	b2db      	uxtb	r3, r3
 8007424:	4619      	mov	r1, r3
 8007426:	4b5b      	ldr	r3, [pc, #364]	; (8007594 <mbedtls_internal_aes_decrypt+0x578>)
 8007428:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800742c:	4053      	eors	r3, r2
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	1d1a      	adds	r2, r3, #4
 8007434:	637a      	str	r2, [r7, #52]	; 0x34
 8007436:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	4611      	mov	r1, r2
 800743e:	4a59      	ldr	r2, [pc, #356]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007440:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8007442:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	b2db      	uxtb	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	4b55      	ldr	r3, [pc, #340]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 800744e:	5c5b      	ldrb	r3, [r3, r1]
 8007450:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8007452:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	4b51      	ldr	r3, [pc, #324]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 800745e:	5c5b      	ldrb	r3, [r3, r1]
 8007460:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8007462:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	0e1b      	lsrs	r3, r3, #24
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4619      	mov	r1, r3
 800746c:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 800746e:	5c5b      	ldrb	r3, [r3, r1]
 8007470:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8007472:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8007474:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	637a      	str	r2, [r7, #52]	; 0x34
 800747c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 800747e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	4611      	mov	r1, r2
 8007484:	4a47      	ldr	r2, [pc, #284]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007486:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8007488:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	0a1b      	lsrs	r3, r3, #8
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4619      	mov	r1, r3
 8007492:	4b44      	ldr	r3, [pc, #272]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007494:	5c5b      	ldrb	r3, [r3, r1]
 8007496:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8007498:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	4619      	mov	r1, r3
 80074a2:	4b40      	ldr	r3, [pc, #256]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074a4:	5c5b      	ldrb	r3, [r3, r1]
 80074a6:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 80074a8:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	0e1b      	lsrs	r3, r3, #24
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074b4:	5c5b      	ldrb	r3, [r3, r1]
 80074b6:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 80074b8:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80074ba:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 80074bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	637a      	str	r2, [r7, #52]	; 0x34
 80074c2:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 80074c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	4611      	mov	r1, r2
 80074ca:	4a36      	ldr	r2, [pc, #216]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074cc:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 80074ce:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	4b32      	ldr	r3, [pc, #200]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074da:	5c5b      	ldrb	r3, [r3, r1]
 80074dc:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 80074de:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	4b2e      	ldr	r3, [pc, #184]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074ea:	5c5b      	ldrb	r3, [r3, r1]
 80074ec:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80074ee:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	4619      	mov	r1, r3
 80074f8:	4b2a      	ldr	r3, [pc, #168]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 80074fa:	5c5b      	ldrb	r3, [r3, r1]
 80074fc:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 80074fe:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8007500:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	637a      	str	r2, [r7, #52]	; 0x34
 8007508:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 800750a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	4611      	mov	r1, r2
 8007510:	4a24      	ldr	r2, [pc, #144]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007512:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8007514:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	b2db      	uxtb	r3, r3
 800751c:	4619      	mov	r1, r3
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007520:	5c5b      	ldrb	r3, [r3, r1]
 8007522:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8007524:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007530:	5c5b      	ldrb	r3, [r3, r1]
 8007532:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8007534:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4619      	mov	r1, r3
 800753e:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <mbedtls_internal_aes_decrypt+0x588>)
 8007540:	5c5b      	ldrb	r3, [r3, r1]
 8007542:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8007544:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8007546:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f006 fefb 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f006 fef4 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3308      	adds	r3, #8
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f006 feed 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	330c      	adds	r3, #12
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f006 fee6 	bl	800e348 <mbedtls_put_unaligned_uint32>

    mbedtls_platform_zeroize(&t, sizeof(t));
 800757c:	f107 0310 	add.w	r3, r7, #16
 8007580:	2120      	movs	r1, #32
 8007582:	4618      	mov	r0, r3
 8007584:	f006 ff54 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3738      	adds	r7, #56	; 0x38
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20004d28 	.word	0x20004d28
 8007598:	20004128 	.word	0x20004128
 800759c:	20004528 	.word	0x20004528
 80075a0:	20004928 	.word	0x20004928
 80075a4:	20004028 	.word	0x20004028

080075a8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,
                          int mode,
                          const unsigned char input[16],
                          unsigned char output[16])
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d005      	beq.n	80075c8 <mbedtls_aes_crypt_ecb+0x20>
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <mbedtls_aes_crypt_ecb+0x20>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80075c2:	f06f 0320 	mvn.w	r3, #32
 80075c6:	e00f      	b.n	80075e8 <mbedtls_aes_crypt_ecb+0x40>
    if (aes_padlock_ace > 0) {
        return mbedtls_padlock_xcryptecb(ctx, mode, input, output);
    }
#endif

    if (mode == MBEDTLS_AES_ENCRYPT) {
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d106      	bne.n	80075dc <mbedtls_aes_crypt_ecb+0x34>
        return mbedtls_internal_aes_encrypt(ctx, input, output);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff fa5c 	bl	8006a90 <mbedtls_internal_aes_encrypt>
 80075d8:	4603      	mov	r3, r0
 80075da:	e005      	b.n	80075e8 <mbedtls_aes_crypt_ecb+0x40>
    } else {
        return mbedtls_internal_aes_decrypt(ctx, input, output);
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fd1b 	bl	800701c <mbedtls_internal_aes_decrypt>
 80075e6:	4603      	mov	r3, r0
    }
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <mbedtls_aes_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80075fe:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char temp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d005      	beq.n	8007616 <mbedtls_aes_crypt_cbc+0x26>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <mbedtls_aes_crypt_cbc+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8007610:	f06f 0320 	mvn.w	r3, #32
 8007614:	e065      	b.n	80076e2 <mbedtls_aes_crypt_cbc+0xf2>
    }

    if (length % 16) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <mbedtls_aes_crypt_cbc+0x36>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8007620:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8007624:	e05d      	b.n	80076e2 <mbedtls_aes_crypt_cbc+0xf2>
        // unaccelerated mode
        //
    }
#endif

    const unsigned char *ivp = iv;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	623b      	str	r3, [r7, #32]

    if (mode == MBEDTLS_AES_DECRYPT) {
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d149      	bne.n	80076c4 <mbedtls_aes_crypt_cbc+0xd4>
        while (length > 0) {
 8007630:	e029      	b.n	8007686 <mbedtls_aes_crypt_cbc+0x96>
            memcpy(temp, input, 16);
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	f107 0410 	add.w	r4, r7, #16
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	6859      	ldr	r1, [r3, #4]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            ret = mbedtls_aes_crypt_ecb(ctx, mode, input, output);
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff ffad 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 800764e:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0) {
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d141      	bne.n	80076da <mbedtls_aes_crypt_cbc+0xea>
                goto exit;
            }
            CBC_XOR_16(output, output, iv);
 8007656:	2310      	movs	r3, #16
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800765c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800765e:	f006 fea3 	bl	800e3a8 <mbedtls_xor>

            memcpy(iv, temp, 16);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	461d      	mov	r5, r3
 8007666:	f107 0410 	add.w	r4, r7, #16
 800766a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800766c:	6028      	str	r0, [r5, #0]
 800766e:	6069      	str	r1, [r5, #4]
 8007670:	60aa      	str	r2, [r5, #8]
 8007672:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	3310      	adds	r3, #16
 8007678:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	3310      	adds	r3, #16
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3b10      	subs	r3, #16
 8007684:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1d2      	bne.n	8007632 <mbedtls_aes_crypt_cbc+0x42>
 800768c:	e022      	b.n	80076d4 <mbedtls_aes_crypt_cbc+0xe4>
        }
    } else {
        while (length > 0) {
            CBC_XOR_16(output, input, ivp);
 800768e:	2310      	movs	r3, #16
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007694:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007696:	f006 fe87 	bl	800e3a8 <mbedtls_xor>

            ret = mbedtls_aes_crypt_ecb(ctx, mode, output, output);
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff81 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 80076a6:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0) {
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d117      	bne.n	80076de <mbedtls_aes_crypt_cbc+0xee>
                goto exit;
            }
            ivp = output;
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	623b      	str	r3, [r7, #32]

            input  += 16;
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	3310      	adds	r3, #16
 80076b6:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	3310      	adds	r3, #16
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3b10      	subs	r3, #16
 80076c2:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e1      	bne.n	800768e <mbedtls_aes_crypt_cbc+0x9e>
        }
        memcpy(iv, ivp, 16);
 80076ca:	2210      	movs	r2, #16
 80076cc:	6a39      	ldr	r1, [r7, #32]
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f009 fcc8 	bl	8011064 <memcpy>
    }
    ret = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
 80076d8:	e002      	b.n	80076e0 <mbedtls_aes_crypt_cbc+0xf0>
                goto exit;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <mbedtls_aes_crypt_cbc+0xf0>
                goto exit;
 80076de:	bf00      	nop

exit:
    return ret;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3728      	adds	r7, #40	; 0x28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bdb0      	pop	{r4, r5, r7, pc}

080076ea <mbedtls_gf128mul_x_ble>:
 * for machine endianness and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble(unsigned char r[16],
                                   const unsigned char x[16])
{
 80076ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6178      	str	r0, [r7, #20]
 80076f4:	6139      	str	r1, [r7, #16]
    uint64_t a, b, ra, rb;

    a = MBEDTLS_GET_UINT64_LE(x, 0);
 80076f6:	6938      	ldr	r0, [r7, #16]
 80076f8:	f006 fe34 	bl	800e364 <mbedtls_get_unaligned_uint64>
 80076fc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    b = MBEDTLS_GET_UINT64_LE(x, 8);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	3308      	adds	r3, #8
 8007704:	4618      	mov	r0, r3
 8007706:	f006 fe2d 	bl	800e364 <mbedtls_get_unaligned_uint64>
 800770a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    ra = (a << 1)  ^ 0x0087 >> (8 - ((b >> 63) << 3));
 800770e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007712:	1894      	adds	r4, r2, r2
 8007714:	eb43 0503 	adc.w	r5, r3, r3
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	0fea      	lsrs	r2, r5, #31
 800772a:	2300      	movs	r3, #0
 800772c:	4613      	mov	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	f1c3 0308 	rsb	r3, r3, #8
 8007734:	2287      	movs	r2, #135	; 0x87
 8007736:	fa42 f303 	asr.w	r3, r2, r3
 800773a:	17da      	asrs	r2, r3, #31
 800773c:	4698      	mov	r8, r3
 800773e:	4691      	mov	r9, r2
 8007740:	ea80 0308 	eor.w	r3, r0, r8
 8007744:	60bb      	str	r3, [r7, #8]
 8007746:	ea81 0309 	eor.w	r3, r1, r9
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007750:	e9c7 3408 	strd	r3, r4, [r7, #32]
    rb = (a >> 63) | (b << 1);
 8007754:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007758:	f04f 0000 	mov.w	r0, #0
 800775c:	f04f 0100 	mov.w	r1, #0
 8007760:	0fd8      	lsrs	r0, r3, #31
 8007762:	2100      	movs	r1, #0
 8007764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007768:	1894      	adds	r4, r2, r2
 800776a:	603c      	str	r4, [r7, #0]
 800776c:	415b      	adcs	r3, r3
 800776e:	607b      	str	r3, [r7, #4]
 8007770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007774:	ea40 0a02 	orr.w	sl, r0, r2
 8007778:	ea41 0b03 	orr.w	fp, r1, r3
 800777c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

    MBEDTLS_PUT_UINT64_LE(ra, r, 0);
 8007780:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007784:	6978      	ldr	r0, [r7, #20]
 8007786:	f006 fdff 	bl	800e388 <mbedtls_put_unaligned_uint64>
    MBEDTLS_PUT_UINT64_LE(rb, r, 8);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f103 0108 	add.w	r1, r3, #8
 8007790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007794:	4608      	mov	r0, r1
 8007796:	f006 fdf7 	bl	800e388 <mbedtls_put_unaligned_uint64>
}
 800779a:	bf00      	nop
 800779c:	3738      	adds	r7, #56	; 0x38
 800779e:	46bd      	mov	sp, r7
 80077a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077a4 <mbedtls_aes_crypt_xts>:
                          int mode,
                          size_t length,
                          const unsigned char data_unit[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b097      	sub	sp, #92	; 0x5c
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80077b2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t blocks = length / 16;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	657b      	str	r3, [r7, #84]	; 0x54
    size_t leftover = length % 16;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char tweak[16];
    unsigned char prev_tweak[16];
    unsigned char tmp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d005      	beq.n	80077d8 <mbedtls_aes_crypt_xts+0x34>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <mbedtls_aes_crypt_xts+0x34>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80077d2:	f06f 0320 	mvn.w	r3, #32
 80077d6:	e0c5      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
    }

    /* Data units must be at least 16 bytes long. */
    if (length < 16) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b0f      	cmp	r3, #15
 80077dc:	d802      	bhi.n	80077e4 <mbedtls_aes_crypt_xts+0x40>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 80077de:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80077e2:	e0bf      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
    }

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if (length > (1 << 20) * 16) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ea:	d902      	bls.n	80077f2 <mbedtls_aes_crypt_xts+0x4e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 80077ec:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80077f0:	e0b8      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
    }

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb(&ctx->tweak, MBEDTLS_AES_ENCRYPT,
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 708c 	add.w	r0, r3, #280	; 0x118
 80077f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	2101      	movs	r1, #1
 8007800:	f7ff fed2 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007804:	64f8      	str	r0, [r7, #76]	; 0x4c
                                data_unit, tweak);
    if (ret != 0) {
 8007806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d059      	beq.n	80078c0 <mbedtls_aes_crypt_xts+0x11c>
        return ret;
 800780c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780e:	e0a9      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
    }

    while (blocks--) {
        if (MBEDTLS_UNLIKELY(leftover && (mode == MBEDTLS_AES_DECRYPT) && blocks == 0)) {
 8007810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2301      	movne	r3, #1
 8007818:	2300      	moveq	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <mbedtls_aes_crypt_xts+0x90>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <mbedtls_aes_crypt_xts+0x90>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <mbedtls_aes_crypt_xts+0x92>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <mbedtls_aes_crypt_xts+0xc4>
 800783a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <mbedtls_aes_crypt_xts+0xc4>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the leftover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy(prev_tweak, tweak, sizeof(tweak));
 800784a:	f107 0420 	add.w	r4, r7, #32
 800784e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble(tweak, tweak);
 8007858:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800785c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff41 	bl	80076ea <mbedtls_gf128mul_x_ble>
        }

        mbedtls_xor(tmp, input, tweak, 16);
 8007868:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800786c:	f107 0010 	add.w	r0, r7, #16
 8007870:	2310      	movs	r3, #16
 8007872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007874:	f006 fd98 	bl	800e3a8 <mbedtls_xor>

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f107 0310 	add.w	r3, r7, #16
 800787e:	f107 0210 	add.w	r2, r7, #16
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	f7ff fe90 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007888:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (ret != 0) {
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <mbedtls_aes_crypt_xts+0xf0>
            return ret;
 8007890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007892:	e067      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
        }

        mbedtls_xor(output, tmp, tweak, 16);
 8007894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007898:	f107 0110 	add.w	r1, r7, #16
 800789c:	2310      	movs	r3, #16
 800789e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80078a0:	f006 fd82 	bl	800e3a8 <mbedtls_xor>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble(tweak, tweak);
 80078a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff ff1b 	bl	80076ea <mbedtls_gf128mul_x_ble>

        output += 16;
 80078b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b6:	3310      	adds	r3, #16
 80078b8:	66fb      	str	r3, [r7, #108]	; 0x6c
        input += 16;
 80078ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078bc:	3310      	adds	r3, #16
 80078be:	66bb      	str	r3, [r7, #104]	; 0x68
    while (blocks--) {
 80078c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	657a      	str	r2, [r7, #84]	; 0x54
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1a2      	bne.n	8007810 <mbedtls_aes_crypt_xts+0x6c>
    }

    if (leftover) {
 80078ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d048      	beq.n	8007962 <mbedtls_aes_crypt_xts+0x1be>
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <mbedtls_aes_crypt_xts+0x138>
 80078d6:	f107 0320 	add.w	r3, r7, #32
 80078da:	e001      	b.n	80078e0 <mbedtls_aes_crypt_xts+0x13c>
 80078dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 80078e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e4:	3b10      	subs	r3, #16
 80078e6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of ciphertext we won't steal. */
        for (i = 0; i < leftover; i++) {
 80078e8:	2300      	movs	r3, #0
 80078ea:	653b      	str	r3, [r7, #80]	; 0x50
 80078ec:	e00a      	b.n	8007904 <mbedtls_aes_crypt_xts+0x160>
            output[i] = prev_output[i];
 80078ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	441a      	add	r2, r3
 80078f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80078f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f8:	440b      	add	r3, r1
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < leftover; i++) {
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	3301      	adds	r3, #1
 8007902:	653b      	str	r3, [r7, #80]	; 0x50
 8007904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007908:	429a      	cmp	r2, r3
 800790a:	d3f0      	bcc.n	80078ee <mbedtls_aes_crypt_xts+0x14a>
        }

        /* Copy the remainder of the input for this final round. */
        mbedtls_xor(tmp, input, t, leftover);
 800790c:	f107 0010 	add.w	r0, r7, #16
 8007910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007916:	f006 fd47 	bl	800e3a8 <mbedtls_xor>

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        mbedtls_xor(tmp + i, prev_output + i, t + i, 16 - i);
 800791a:	f107 0210 	add.w	r2, r7, #16
 800791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007920:	18d0      	adds	r0, r2, r3
 8007922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007926:	18d1      	adds	r1, r2, r3
 8007928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800792a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800792c:	441a      	add	r2, r3
 800792e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007930:	f1c3 0310 	rsb	r3, r3, #16
 8007934:	f006 fd38 	bl	800e3a8 <mbedtls_xor>

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	f107 0210 	add.w	r2, r7, #16
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	f7ff fe30 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007948:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (ret != 0) {
 800794a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <mbedtls_aes_crypt_xts+0x1b0>
            return ret;
 8007950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007952:	e007      	b.n	8007964 <mbedtls_aes_crypt_xts+0x1c0>
        }

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        mbedtls_xor(prev_output, tmp, t, 16);
 8007954:	f107 0110 	add.w	r1, r7, #16
 8007958:	2310      	movs	r3, #16
 800795a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800795e:	f006 fd23 	bl	800e3a8 <mbedtls_xor>
    }

    return 0;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	375c      	adds	r7, #92	; 0x5c
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}

0800796c <mbedtls_aes_crypt_cfb128>:
                             size_t length,
                             size_t *iv_off,
                             unsigned char iv[16],
                             const unsigned char *input,
                             unsigned char *output)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
    int c;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800797a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800797e:	61fb      	str	r3, [r7, #28]
    size_t n;

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d005      	beq.n	8007992 <mbedtls_aes_crypt_cfb128+0x26>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <mbedtls_aes_crypt_cfb128+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 800798c:	f06f 0320 	mvn.w	r3, #32
 8007990:	e071      	b.n	8007a76 <mbedtls_aes_crypt_cfb128+0x10a>
    }

    n = *iv_off;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61bb      	str	r3, [r7, #24]

    if (n > 15) {
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b0f      	cmp	r3, #15
 800799c:	d902      	bls.n	80079a4 <mbedtls_aes_crypt_cfb128+0x38>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 800799e:	f06f 0320 	mvn.w	r3, #32
 80079a2:	e068      	b.n	8007a76 <mbedtls_aes_crypt_cfb128+0x10a>
    }

    if (mode == MBEDTLS_AES_DECRYPT) {
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d156      	bne.n	8007a58 <mbedtls_aes_crypt_cfb128+0xec>
        while (length--) {
 80079aa:	e02a      	b.n	8007a02 <mbedtls_aes_crypt_cfb128+0x96>
            if (n == 0) {
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <mbedtls_aes_crypt_cfb128+0x5a>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b6:	2101      	movs	r1, #1
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff fdf5 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 80079be:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d153      	bne.n	8007a6e <mbedtls_aes_crypt_cfb128+0x102>
                    goto exit;
                }
            }

            c = *input++;
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	617b      	str	r3, [r7, #20]
            *output++ = (unsigned char) (c ^ iv[n]);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	b25a      	sxtb	r2, r3
 80079d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	440b      	add	r3, r1
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b25b      	sxtb	r3, r3
 80079de:	4053      	eors	r3, r2
 80079e0:	b259      	sxtb	r1, r3
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	633a      	str	r2, [r7, #48]	; 0x30
 80079e8:	b2ca      	uxtb	r2, r1
 80079ea:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 80079ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	4413      	add	r3, r2
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	3301      	adds	r3, #1
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	61bb      	str	r3, [r7, #24]
        while (length--) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1cf      	bne.n	80079ac <mbedtls_aes_crypt_cfb128+0x40>
 8007a0c:	e029      	b.n	8007a62 <mbedtls_aes_crypt_cfb128+0xf6>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <mbedtls_aes_crypt_cfb128+0xbc>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a18:	2101      	movs	r1, #1
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff fdc4 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007a20:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d124      	bne.n	8007a72 <mbedtls_aes_crypt_cfb128+0x106>
                    goto exit;
                }
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8007a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	7819      	ldrb	r1, [r3, #0]
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	1c58      	adds	r0, r3, #1
 8007a3c:	6338      	str	r0, [r7, #48]	; 0x30
 8007a3e:	404a      	eors	r2, r1
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	440a      	add	r2, r1
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3301      	adds	r3, #1
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	61bb      	str	r3, [r7, #24]
        while (length--) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	1e5a      	subs	r2, r3, #1
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1d5      	bne.n	8007a0e <mbedtls_aes_crypt_cfb128+0xa2>
        }
    }

    *iv_off = n;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	601a      	str	r2, [r3, #0]
    ret = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e002      	b.n	8007a74 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 8007a72:	bf00      	nop

exit:
    return ret;
 8007a74:	69fb      	ldr	r3, [r7, #28]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <mbedtls_aes_crypt_ofb>:
                          size_t length,
                          size_t *iv_off,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
    size_t n;

    n = *iv_off;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]

    if (n > 15) {
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b0f      	cmp	r3, #15
 8007a9a:	d922      	bls.n	8007ae2 <mbedtls_aes_crypt_ofb+0x64>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8007a9c:	f06f 0320 	mvn.w	r3, #32
 8007aa0:	e02a      	b.n	8007af8 <mbedtls_aes_crypt_ofb+0x7a>
    }

    while (length--) {
        if (n == 0) {
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <mbedtls_aes_crypt_ofb+0x3e>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	2101      	movs	r1, #1
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7ff fd7a 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007ab4:	6178      	str	r0, [r7, #20]
            if (ret != 0) {
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d11b      	bne.n	8007af4 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
            }
        }
        *output++ =  *input++ ^ iv[n];
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	623a      	str	r2, [r7, #32]
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	1c58      	adds	r0, r3, #1
 8007ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8007ad2:	404a      	eors	r2, r1
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3301      	adds	r3, #1
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	613b      	str	r3, [r7, #16]
    while (length--) {
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	60ba      	str	r2, [r7, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1da      	bne.n	8007aa2 <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e000      	b.n	8007af6 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8007af4:	bf00      	nop

exit:
    return ret;
 8007af6:	697b      	ldr	r3, [r7, #20]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <mbedtls_aes_crypt_ctr>:
                          size_t *nc_off,
                          unsigned char nonce_counter[16],
                          unsigned char stream_block[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
    int c, i;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007b0e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007b12:	61bb      	str	r3, [r7, #24]
    size_t n;

    n = *nc_off;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	617b      	str	r3, [r7, #20]

    if (n > 0x0F) {
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d93d      	bls.n	8007b9c <mbedtls_aes_crypt_ctr+0x9c>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8007b20:	f06f 0320 	mvn.w	r3, #32
 8007b24:	e047      	b.n	8007bb6 <mbedtls_aes_crypt_ctr+0xb6>
    }

    while (length--) {
        if (n == 0) {
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11f      	bne.n	8007b6c <mbedtls_aes_crypt_ctr+0x6c>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block);
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	2101      	movs	r1, #1
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fd38 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 8007b38:	61b8      	str	r0, [r7, #24]
            if (ret != 0) {
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d138      	bne.n	8007bb2 <mbedtls_aes_crypt_ctr+0xb2>
                goto exit;
            }

            for (i = 16; i > 0; i--) {
 8007b40:	2310      	movs	r3, #16
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e00d      	b.n	8007b62 <mbedtls_aes_crypt_ctr+0x62>
                if (++nonce_counter[i - 1] != 0) {
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	3201      	adds	r2, #1
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <mbedtls_aes_crypt_ctr+0x6a>
            for (i = 16; i > 0; i--) {
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dcee      	bgt.n	8007b46 <mbedtls_aes_crypt_ctr+0x46>
 8007b68:	e000      	b.n	8007b6c <mbedtls_aes_crypt_ctr+0x6c>
                    break;
 8007b6a:	bf00      	nop
                }
            }
        }
        c = *input++;
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	613b      	str	r3, [r7, #16]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	b25a      	sxtb	r2, r3
 8007b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	440b      	add	r3, r1
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b25b      	sxtb	r3, r3
 8007b84:	4053      	eors	r3, r2
 8007b86:	b259      	sxtb	r1, r3
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b8e:	b2ca      	uxtb	r2, r1
 8007b90:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	3301      	adds	r3, #1
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	617b      	str	r3, [r7, #20]
    while (length--) {
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	60ba      	str	r2, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1bf      	bne.n	8007b26 <mbedtls_aes_crypt_ctr+0x26>
    }

    *nc_off = n;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	601a      	str	r2, [r3, #0]
    ret = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	e000      	b.n	8007bb4 <mbedtls_aes_crypt_ctr+0xb4>
                goto exit;
 8007bb2:	bf00      	nop

exit:
    return ret;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <aria_p1>:
/* armcc5 --gnu defines __GNUC__ but doesn't support GNU's extended asm */
#if defined(__GNUC__) && \
    (!defined(__ARMCC_VERSION) || __ARMCC_VERSION >= 6000000) && \
    __ARM_ARCH >= 6
static inline uint32_t aria_p1(uint32_t x)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
    uint32_t r;
    __asm("rev16 %0, %1" : "=l" (r) : "l" (x));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	ba5b      	rev16	r3, r3
 8007bca:	60fb      	str	r3, [r7, #12]
    return r;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <aria_a>:
 * half of App. B.1 in [1] in terms of 4-byte operators P1, P2, P3 and P4.
 * The implementation below uses only P1 and P2 as they are sufficient.
 */
static inline void aria_a(uint32_t *a, uint32_t *b,
                          uint32_t *c, uint32_t *d)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b088      	sub	sp, #32
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	603b      	str	r3, [r7, #0]
    uint32_t ta, tb, tc;
    ta  =  *b;                      // 4567
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	61fb      	str	r3, [r7, #28]
    *b  =  *a;                      // 0123
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	601a      	str	r2, [r3, #0]
    *a  =  ARIA_P2(ta);             // 6745
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	ea4f 4233 	mov.w	r2, r3, ror #16
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(*d);             // efcd
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007c08:	61bb      	str	r3, [r7, #24]
    *d  =  ARIA_P1(*c);             // 98ba
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff ffd5 	bl	8007bbe <aria_p1>
 8007c14:	4602      	mov	r2, r0
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	601a      	str	r2, [r3, #0]
    *c  =  ARIA_P1(tb);             // fedc
 8007c1a:	69b8      	ldr	r0, [r7, #24]
 8007c1c:	f7ff ffcf 	bl	8007bbe <aria_p1>
 8007c20:	4602      	mov	r2, r0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
    ta  ^= *d;                      // 4567+98ba
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	4053      	eors	r3, r2
 8007c2e:	61fb      	str	r3, [r7, #28]
    tc  =  ARIA_P2(*b);             // 2301
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007c38:	617b      	str	r3, [r7, #20]
    ta  =  ARIA_P1(ta) ^ tc ^ *c;   // 2301+5476+89ab+fedc
 8007c3a:	69f8      	ldr	r0, [r7, #28]
 8007c3c:	f7ff ffbf 	bl	8007bbe <aria_p1>
 8007c40:	4602      	mov	r2, r0
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	405a      	eors	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4053      	eors	r3, r2
 8007c4c:	61fb      	str	r3, [r7, #28]
    tb  ^= ARIA_P2(*d);             // ba98+efcd
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4053      	eors	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
    tc  ^= ARIA_P1(*a);             // 2301+7654
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ffac 	bl	8007bbe <aria_p1>
 8007c66:	4602      	mov	r2, r0
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	4053      	eors	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]
    *b  ^= ta ^ tb;                 // 0123+2301+5476+89ab+ba98+efcd+fedc OUT
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	69f9      	ldr	r1, [r7, #28]
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	404b      	eors	r3, r1
 8007c78:	405a      	eors	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(tb) ^ ta;        // 2301+5476+89ab+98ba+cdef+fedc
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	4053      	eors	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
    *a  ^= ARIA_P1(tb);             // 3210+4567+6745+89ab+98ba+dcfe+efcd OUT
 8007c8a:	69b8      	ldr	r0, [r7, #24]
 8007c8c:	f7ff ff97 	bl	8007bbe <aria_p1>
 8007c90:	4602      	mov	r2, r0
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	405a      	eors	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]
    ta  =  ARIA_P2(ta);             // 0123+7654+ab89+dcfe
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007ca2:	61fb      	str	r3, [r7, #28]
    *d  ^= ARIA_P1(ta) ^ tc;        // 1032+2301+6745+7654+98ba+ba98+cdef OUT
 8007ca4:	69f8      	ldr	r0, [r7, #28]
 8007ca6:	f7ff ff8a 	bl	8007bbe <aria_p1>
 8007caa:	4602      	mov	r2, r0
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	405a      	eors	r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	405a      	eors	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	601a      	str	r2, [r3, #0]
    tc  =  ARIA_P2(tc);             // 0123+5476
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8007cc0:	617b      	str	r3, [r7, #20]
    *c  ^= ARIA_P1(tc) ^ ta;        // 0123+1032+4567+7654+ab89+dcfe+fedc OUT
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	f7ff ff7b 	bl	8007bbe <aria_p1>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	405a      	eors	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	405a      	eors	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <aria_sl>:
 */
static inline void aria_sl(uint32_t *a, uint32_t *b,
                           uint32_t *c, uint32_t *d,
                           const uint8_t sa[256], const uint8_t sb[256],
                           const uint8_t sc[256], const uint8_t sd[256])
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	440b      	add	r3, r1
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	021b      	lsls	r3, r3, #8
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8007d10:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	0c1b      	lsrs	r3, r3, #16
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	440b      	add	r3, r1
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8007d24:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*a)]) << 24);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	0e1b      	lsrs	r3, r3, #24
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	440b      	add	r3, r1
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 8007d38:	405a      	eors	r2, r3
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	601a      	str	r2, [r3, #0]
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	4413      	add	r3, r2
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	4619      	mov	r1, r3
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	440b      	add	r3, r1
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	021b      	lsls	r3, r3, #8
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8007d60:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	0c1b      	lsrs	r3, r3, #16
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	440b      	add	r3, r1
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 8007d74:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*b)]) << 24);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	0e1b      	lsrs	r3, r3, #24
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	440b      	add	r3, r1
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 8007d88:	405a      	eors	r2, r3
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	601a      	str	r2, [r3, #0]
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	4413      	add	r3, r2
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	440b      	add	r3, r1
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	021b      	lsls	r3, r3, #8
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8007db0:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	440b      	add	r3, r1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8007dc4:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*c)]) << 24);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	0e1b      	lsrs	r3, r3, #24
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	440b      	add	r3, r1
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8007dd8:	405a      	eors	r2, r3
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	4413      	add	r3, r2
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	440b      	add	r3, r1
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	021b      	lsls	r3, r3, #8
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8007e00:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	440b      	add	r3, r1
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8007e14:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*d)]) << 24);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	0e1b      	lsrs	r3, r3, #24
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	440b      	add	r3, r1
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 8007e28:	405a      	eors	r2, r3
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <aria_fo_xor>:
/*
 * Helper for key schedule: r = FO( p, k ) ^ x
 */
static void aria_fo_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b08d      	sub	sp, #52	; 0x34
 8007e40:	af04      	add	r7, sp, #16
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4053      	eors	r3, r2
 8007e54:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4053      	eors	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4053      	eors	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4053      	eors	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 8007e86:	f107 0310 	add.w	r3, r7, #16
 8007e8a:	f107 0214 	add.w	r2, r7, #20
 8007e8e:	f107 0118 	add.w	r1, r7, #24
 8007e92:	f107 001c 	add.w	r0, r7, #28
 8007e96:	4c1b      	ldr	r4, [pc, #108]	; (8007f04 <aria_fo_xor+0xc8>)
 8007e98:	9403      	str	r4, [sp, #12]
 8007e9a:	4c1b      	ldr	r4, [pc, #108]	; (8007f08 <aria_fo_xor+0xcc>)
 8007e9c:	9402      	str	r4, [sp, #8]
 8007e9e:	4c1b      	ldr	r4, [pc, #108]	; (8007f0c <aria_fo_xor+0xd0>)
 8007ea0:	9401      	str	r4, [sp, #4]
 8007ea2:	4c1b      	ldr	r4, [pc, #108]	; (8007f10 <aria_fo_xor+0xd4>)
 8007ea4:	9400      	str	r4, [sp, #0]
 8007ea6:	f7ff ff1b 	bl	8007ce0 <aria_sl>
    aria_a(&a, &b, &c, &d);
 8007eaa:	f107 0310 	add.w	r3, r7, #16
 8007eae:	f107 0214 	add.w	r2, r7, #20
 8007eb2:	f107 0118 	add.w	r1, r7, #24
 8007eb6:	f107 001c 	add.w	r0, r7, #28
 8007eba:	f7ff fe8e 	bl	8007bda <aria_a>

    r[0] = a ^ x[0];
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	405a      	eors	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	6819      	ldr	r1, [r3, #0]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	404a      	eors	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	404a      	eors	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	404a      	eors	r2, r1
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3724      	adds	r7, #36	; 0x24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd90      	pop	{r4, r7, pc}
 8007f02:	bf00      	nop
 8007f04:	08012448 	.word	0x08012448
 8007f08:	08012348 	.word	0x08012348
 8007f0c:	08012248 	.word	0x08012248
 8007f10:	08012148 	.word	0x08012148

08007f14 <aria_fe_xor>:
/*
 * Helper for key schedule: r = FE( p, k ) ^ x
 */
static void aria_fe_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b08d      	sub	sp, #52	; 0x34
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4053      	eors	r3, r2
 8007f2c:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	3304      	adds	r3, #4
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4053      	eors	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3308      	adds	r3, #8
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3308      	adds	r3, #8
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4053      	eors	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	330c      	adds	r3, #12
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	330c      	adds	r3, #12
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4053      	eors	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8007f5e:	f107 0310 	add.w	r3, r7, #16
 8007f62:	f107 0214 	add.w	r2, r7, #20
 8007f66:	f107 0118 	add.w	r1, r7, #24
 8007f6a:	f107 001c 	add.w	r0, r7, #28
 8007f6e:	4c1b      	ldr	r4, [pc, #108]	; (8007fdc <aria_fe_xor+0xc8>)
 8007f70:	9403      	str	r4, [sp, #12]
 8007f72:	4c1b      	ldr	r4, [pc, #108]	; (8007fe0 <aria_fe_xor+0xcc>)
 8007f74:	9402      	str	r4, [sp, #8]
 8007f76:	4c1b      	ldr	r4, [pc, #108]	; (8007fe4 <aria_fe_xor+0xd0>)
 8007f78:	9401      	str	r4, [sp, #4]
 8007f7a:	4c1b      	ldr	r4, [pc, #108]	; (8007fe8 <aria_fe_xor+0xd4>)
 8007f7c:	9400      	str	r4, [sp, #0]
 8007f7e:	f7ff feaf 	bl	8007ce0 <aria_sl>
    aria_a(&a, &b, &c, &d);
 8007f82:	f107 0310 	add.w	r3, r7, #16
 8007f86:	f107 0214 	add.w	r2, r7, #20
 8007f8a:	f107 0118 	add.w	r1, r7, #24
 8007f8e:	f107 001c 	add.w	r0, r7, #28
 8007f92:	f7ff fe22 	bl	8007bda <aria_a>

    r[0] = a ^ x[0];
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	405a      	eors	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3304      	adds	r3, #4
 8007fae:	404a      	eors	r2, r1
 8007fb0:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	404a      	eors	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	6819      	ldr	r1, [r3, #0]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	404a      	eors	r2, r1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	08012248 	.word	0x08012248
 8007fe0:	08012148 	.word	0x08012148
 8007fe4:	08012448 	.word	0x08012448
 8007fe8:	08012348 	.word	0x08012348

08007fec <aria_rot128>:
 * MBEDTLS_GET_UINT32_LE / MBEDTLS_PUT_UINT32_LE ) so we need to reverse
 * bytes here.
 */
static void aria_rot128(uint32_t r[4], const uint32_t a[4],
                        const uint32_t b[4], uint8_t n)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	; 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint32_t t, u;

    const uint8_t n1 = n % 32;              // bit offset
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	75fb      	strb	r3, [r7, #23]
    const uint8_t n2 = n1 ? 32 - n1 : 0;    // reverse bit offset
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <aria_rot128+0x26>
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	f1c3 0320 	rsb	r3, r3, #32
 800800e:	b2db      	uxtb	r3, r3
 8008010:	e000      	b.n	8008014 <aria_rot128+0x28>
 8008012:	2300      	movs	r3, #0
 8008014:	75bb      	strb	r3, [r7, #22]

    j = (n / 32) % 4;                       // initial word offset
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	b2db      	uxtb	r3, r3
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	77bb      	strb	r3, [r7, #30]
    t = ARIA_P3(b[j]);                      // big endian
 8008022:	7fbb      	ldrb	r3, [r7, #30]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	ba1b      	rev	r3, r3
 800802e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8008030:	2300      	movs	r3, #0
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e030      	b.n	8008098 <aria_rot128+0xac>
        j = (j + 1) % 4;                    // get next word, big endian
 8008036:	7fbb      	ldrb	r3, [r7, #30]
 8008038:	3301      	adds	r3, #1
 800803a:	425a      	negs	r2, r3
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	f002 0203 	and.w	r2, r2, #3
 8008044:	bf58      	it	pl
 8008046:	4253      	negpl	r3, r2
 8008048:	77bb      	strb	r3, [r7, #30]
        u = ARIA_P3(b[j]);
 800804a:	7fbb      	ldrb	r3, [r7, #30]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	ba1b      	rev	r3, r3
 8008056:	613b      	str	r3, [r7, #16]
        t <<= n1;                           // rotate
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	fa02 f303 	lsl.w	r3, r2, r3
 8008060:	61bb      	str	r3, [r7, #24]
        t |= u >> n2;
 8008062:	7dbb      	ldrb	r3, [r7, #22]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	fa22 f303 	lsr.w	r3, r2, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        t = ARIA_P3(t);                     // back to little endian
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	ba1b      	rev	r3, r3
 8008074:	61bb      	str	r3, [r7, #24]
        r[i] = a[i] ^ t;                    // store
 8008076:	7ffb      	ldrb	r3, [r7, #31]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	4413      	add	r3, r2
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	7ffb      	ldrb	r3, [r7, #31]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	404a      	eors	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
        t = u;                              // move to next word
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8008092:	7ffb      	ldrb	r3, [r7, #31]
 8008094:	3301      	adds	r3, #1
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	7ffb      	ldrb	r3, [r7, #31]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d9cb      	bls.n	8008036 <aria_rot128+0x4a>
    }
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	3724      	adds	r7, #36	; 0x24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <mbedtls_aria_setkey_enc>:
/*
 * Set encryption key
 */
int mbedtls_aria_setkey_enc(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 80080ac:	b5b0      	push	{r4, r5, r7, lr}
 80080ae:	b0a2      	sub	sp, #136	; 0x88
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
    /* round constant masks */
    const uint32_t rc[3][4] =
 80080b8:	4b98      	ldr	r3, [pc, #608]	; (800831c <mbedtls_aria_setkey_enc+0x270>)
 80080ba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80080be:	461d      	mov	r5, r3
 80080c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80080cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i;
    uint32_t w[4][4], *w2;
    ARIA_VALIDATE_RET(ctx != NULL);
    ARIA_VALIDATE_RET(key != NULL);

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d009      	beq.n	80080ea <mbedtls_aria_setkey_enc+0x3e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2bc0      	cmp	r3, #192	; 0xc0
 80080da:	d006      	beq.n	80080ea <mbedtls_aria_setkey_enc+0x3e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	d002      	beq.n	80080ea <mbedtls_aria_setkey_enc+0x3e>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80080e4:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80080e8:	e114      	b.n	8008314 <mbedtls_aria_setkey_enc+0x268>
    }

    /* Copy key to W0 (and potential remainder to W1) */
    w[0][0] = MBEDTLS_GET_UINT32_LE(key,  0);
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f006 f91e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 80080f0:	4603      	mov	r3, r0
 80080f2:	613b      	str	r3, [r7, #16]
    w[0][1] = MBEDTLS_GET_UINT32_LE(key,  4);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f006 f917 	bl	800e32c <mbedtls_get_unaligned_uint32>
 80080fe:	4603      	mov	r3, r0
 8008100:	617b      	str	r3, [r7, #20]
    w[0][2] = MBEDTLS_GET_UINT32_LE(key,  8);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	3308      	adds	r3, #8
 8008106:	4618      	mov	r0, r3
 8008108:	f006 f910 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800810c:	4603      	mov	r3, r0
 800810e:	61bb      	str	r3, [r7, #24]
    w[0][3] = MBEDTLS_GET_UINT32_LE(key, 12);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	330c      	adds	r3, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f006 f909 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800811a:	4603      	mov	r3, r0
 800811c:	61fb      	str	r3, [r7, #28]

    memset(w[1], 0, 16);
 800811e:	f107 0310 	add.w	r3, r7, #16
 8008122:	3310      	adds	r3, #16
 8008124:	2210      	movs	r2, #16
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f008 ffa9 	bl	8011080 <memset>
    if (keybits >= 192) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2bbf      	cmp	r3, #191	; 0xbf
 8008132:	d90d      	bls.n	8008150 <mbedtls_aria_setkey_enc+0xa4>
        w[1][0] = MBEDTLS_GET_UINT32_LE(key, 16);    // 192 bit key
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3310      	adds	r3, #16
 8008138:	4618      	mov	r0, r3
 800813a:	f006 f8f7 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800813e:	4603      	mov	r3, r0
 8008140:	623b      	str	r3, [r7, #32]
        w[1][1] = MBEDTLS_GET_UINT32_LE(key, 20);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	3314      	adds	r3, #20
 8008146:	4618      	mov	r0, r3
 8008148:	f006 f8f0 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800814c:	4603      	mov	r3, r0
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (keybits == 256) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008156:	d10d      	bne.n	8008174 <mbedtls_aria_setkey_enc+0xc8>
        w[1][2] = MBEDTLS_GET_UINT32_LE(key, 24);    // 256 bit key
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	3318      	adds	r3, #24
 800815c:	4618      	mov	r0, r3
 800815e:	f006 f8e5 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008162:	4603      	mov	r3, r0
 8008164:	62bb      	str	r3, [r7, #40]	; 0x28
        w[1][3] = MBEDTLS_GET_UINT32_LE(key, 28);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	331c      	adds	r3, #28
 800816a:	4618      	mov	r0, r3
 800816c:	f006 f8de 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008170:	4603      	mov	r3, r0
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    i = (keybits - 128) >> 6;               // index: 0, 1, 2
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3b80      	subs	r3, #128	; 0x80
 8008178:	099b      	lsrs	r3, r3, #6
 800817a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    ctx->nr = 12 + 2 * i;                   // no. rounds: 12, 14, 16
 800817e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008182:	3306      	adds	r3, #6
 8008184:	b2db      	uxtb	r3, r3
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	b2da      	uxtb	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	701a      	strb	r2, [r3, #0]

    aria_fo_xor(w[1], w[0], rc[i], w[1]);   // W1 = FO(W0, CK1) ^ KR
 800818e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	441a      	add	r2, r3
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	f103 0410 	add.w	r4, r3, #16
 80081a2:	f107 0110 	add.w	r1, r7, #16
 80081a6:	f107 0310 	add.w	r3, r7, #16
 80081aa:	f103 0010 	add.w	r0, r3, #16
 80081ae:	4623      	mov	r3, r4
 80081b0:	f7ff fe44 	bl	8007e3c <aria_fo_xor>
    i = i < 2 ? i + 1 : 0;
 80081b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	dc03      	bgt.n	80081c4 <mbedtls_aria_setkey_enc+0x118>
 80081bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081c0:	3301      	adds	r3, #1
 80081c2:	e000      	b.n	80081c6 <mbedtls_aria_setkey_enc+0x11a>
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    aria_fe_xor(w[2], w[1], rc[i], w[0]);   // W2 = FE(W1, CK2) ^ W0
 80081ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80081ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	441a      	add	r2, r3
 80081d6:	f107 0410 	add.w	r4, r7, #16
 80081da:	f107 0310 	add.w	r3, r7, #16
 80081de:	f103 0110 	add.w	r1, r3, #16
 80081e2:	f107 0310 	add.w	r3, r7, #16
 80081e6:	f103 0020 	add.w	r0, r3, #32
 80081ea:	4623      	mov	r3, r4
 80081ec:	f7ff fe92 	bl	8007f14 <aria_fe_xor>
    i = i < 2 ? i + 1 : 0;
 80081f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	dc03      	bgt.n	8008200 <mbedtls_aria_setkey_enc+0x154>
 80081f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081fc:	3301      	adds	r3, #1
 80081fe:	e000      	b.n	8008202 <mbedtls_aria_setkey_enc+0x156>
 8008200:	2300      	movs	r3, #0
 8008202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    aria_fo_xor(w[3], w[2], rc[i], w[1]);   // W3 = FO(W2, CK3) ^ W1
 8008206:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800820a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	441a      	add	r2, r3
 8008212:	f107 0310 	add.w	r3, r7, #16
 8008216:	f103 0410 	add.w	r4, r3, #16
 800821a:	f107 0310 	add.w	r3, r7, #16
 800821e:	f103 0120 	add.w	r1, r3, #32
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800822a:	4623      	mov	r3, r4
 800822c:	f7ff fe06 	bl	8007e3c <aria_fo_xor>

    for (i = 0; i < 4; i++) {               // create round keys
 8008230:	2300      	movs	r3, #0
 8008232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008236:	e056      	b.n	80082e6 <mbedtls_aria_setkey_enc+0x23a>
        w2 = w[(i + 1) & 3];
 8008238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800823c:	3301      	adds	r3, #1
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	f107 0210 	add.w	r2, r7, #16
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	4413      	add	r3, r2
 800824a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        aria_rot128(ctx->rk[i], w[i], w2, 128 - 19);
 800824e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	1d18      	adds	r0, r3, #4
 800825a:	f107 0210 	add.w	r2, r7, #16
 800825e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	18d1      	adds	r1, r2, r3
 8008266:	236d      	movs	r3, #109	; 0x6d
 8008268:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800826c:	f7ff febe 	bl	8007fec <aria_rot128>
        aria_rot128(ctx->rk[i +  4], w[i], w2, 128 - 31);
 8008270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008274:	3304      	adds	r3, #4
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	1d18      	adds	r0, r3, #4
 800827e:	f107 0210 	add.w	r2, r7, #16
 8008282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	18d1      	adds	r1, r2, r3
 800828a:	2361      	movs	r3, #97	; 0x61
 800828c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008290:	f7ff feac 	bl	8007fec <aria_rot128>
        aria_rot128(ctx->rk[i +  8], w[i], w2,       61);
 8008294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008298:	3308      	adds	r3, #8
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	1d18      	adds	r0, r3, #4
 80082a2:	f107 0210 	add.w	r2, r7, #16
 80082a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	18d1      	adds	r1, r2, r3
 80082ae:	233d      	movs	r3, #61	; 0x3d
 80082b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082b4:	f7ff fe9a 	bl	8007fec <aria_rot128>
        aria_rot128(ctx->rk[i + 12], w[i], w2,       31);
 80082b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082bc:	330c      	adds	r3, #12
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	1d18      	adds	r0, r3, #4
 80082c6:	f107 0210 	add.w	r2, r7, #16
 80082ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	18d1      	adds	r1, r2, r3
 80082d2:	231f      	movs	r3, #31
 80082d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082d8:	f7ff fe88 	bl	8007fec <aria_rot128>
    for (i = 0; i < 4; i++) {               // create round keys
 80082dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082e0:	3301      	adds	r3, #1
 80082e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	dda4      	ble.n	8008238 <mbedtls_aria_setkey_enc+0x18c>
    }
    aria_rot128(ctx->rk[16], w[0], w[1], 19);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80082f4:	f107 0310 	add.w	r3, r7, #16
 80082f8:	f103 0210 	add.w	r2, r3, #16
 80082fc:	f107 0110 	add.w	r1, r7, #16
 8008300:	2313      	movs	r3, #19
 8008302:	f7ff fe73 	bl	8007fec <aria_rot128>

    /* w holds enough info to reconstruct the round keys */
    mbedtls_platform_zeroize(w, sizeof(w));
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	2140      	movs	r1, #64	; 0x40
 800830c:	4618      	mov	r0, r3
 800830e:	f006 f88f 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3788      	adds	r7, #136	; 0x88
 8008318:	46bd      	mov	sp, r7
 800831a:	bdb0      	pop	{r4, r5, r7, pc}
 800831c:	08011a80 	.word	0x08011a80

08008320 <mbedtls_aria_setkey_dec>:
/*
 * Set decryption key
 */
int mbedtls_aria_setkey_dec(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b08b      	sub	sp, #44	; 0x2c
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
    int i, j, k, ret;
    ARIA_VALIDATE_RET(ctx != NULL);
    ARIA_VALIDATE_RET(key != NULL);

    ret = mbedtls_aria_setkey_enc(ctx, key, keybits);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff febb 	bl	80080ac <mbedtls_aria_setkey_enc>
 8008336:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <mbedtls_aria_setkey_dec+0x22>
        return ret;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	e061      	b.n	8008406 <mbedtls_aria_setkey_dec+0xe6>
    }

    /* flip the order of round keys */
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 8008342:	2300      	movs	r3, #0
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	623b      	str	r3, [r7, #32]
 800834c:	e030      	b.n	80083b0 <mbedtls_aria_setkey_dec+0x90>
        for (k = 0; k < 4; k++) {
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e024      	b.n	800839e <mbedtls_aria_setkey_dec+0x7e>
            uint32_t t = ctx->rk[i][k];
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	0099      	lsls	r1, r3, #2
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	440b      	add	r3, r1
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	617b      	str	r3, [r7, #20]
            ctx->rk[i][k] = ctx->rk[j][k];
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	0099      	lsls	r1, r3, #2
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	440b      	add	r3, r1
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	0098      	lsls	r0, r3, #2
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4403      	add	r3, r0
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	605a      	str	r2, [r3, #4]
            ctx->rk[j][k] = t;
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	0099      	lsls	r1, r3, #2
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	440b      	add	r3, r1
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	605a      	str	r2, [r3, #4]
        for (k = 0; k < 4; k++) {
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3301      	adds	r3, #1
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	ddd7      	ble.n	8008354 <mbedtls_aria_setkey_dec+0x34>
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	3301      	adds	r3, #1
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	623b      	str	r3, [r7, #32]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	dbca      	blt.n	800834e <mbedtls_aria_setkey_dec+0x2e>
        }
    }

    /* apply affine transform to middle keys */
    for (i = 1; i < ctx->nr; i++) {
 80083b8:	2301      	movs	r3, #1
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	e01c      	b.n	80083f8 <mbedtls_aria_setkey_dec+0xd8>
        aria_a(&ctx->rk[i][0], &ctx->rk[i][1],
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	1d18      	adds	r0, r3, #4
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	3304      	adds	r3, #4
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	1d19      	adds	r1, r3, #4
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	3308      	adds	r3, #8
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	1d1c      	adds	r4, r3, #4
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	330c      	adds	r3, #12
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	3304      	adds	r3, #4
 80083ec:	4622      	mov	r2, r4
 80083ee:	f7ff fbf4 	bl	8007bda <aria_a>
    for (i = 1; i < ctx->nr; i++) {
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	3301      	adds	r3, #1
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	4293      	cmp	r3, r2
 8008402:	dbdc      	blt.n	80083be <mbedtls_aria_setkey_dec+0x9e>
               &ctx->rk[i][2], &ctx->rk[i][3]);
    }

    return 0;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	372c      	adds	r7, #44	; 0x2c
 800840a:	46bd      	mov	sp, r7
 800840c:	bd90      	pop	{r4, r7, pc}
	...

08008410 <mbedtls_aria_crypt_ecb>:
 * Encrypt a block
 */
int mbedtls_aria_crypt_ecb(mbedtls_aria_context *ctx,
                           const unsigned char input[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char output[MBEDTLS_ARIA_BLOCKSIZE])
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b08f      	sub	sp, #60	; 0x3c
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
    uint32_t a, b, c, d;
    ARIA_VALIDATE_RET(ctx != NULL);
    ARIA_VALIDATE_RET(input != NULL);
    ARIA_VALIDATE_RET(output != NULL);

    a = MBEDTLS_GET_UINT32_LE(input,  0);
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f005 ff85 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008422:	4603      	mov	r3, r0
 8008424:	623b      	str	r3, [r7, #32]
    b = MBEDTLS_GET_UINT32_LE(input,  4);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f005 ff7e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008430:	4603      	mov	r3, r0
 8008432:	61fb      	str	r3, [r7, #28]
    c = MBEDTLS_GET_UINT32_LE(input,  8);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3308      	adds	r3, #8
 8008438:	4618      	mov	r0, r3
 800843a:	f005 ff77 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800843e:	4603      	mov	r3, r0
 8008440:	61bb      	str	r3, [r7, #24]
    d = MBEDTLS_GET_UINT32_LE(input, 12);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	330c      	adds	r3, #12
 8008446:	4618      	mov	r0, r3
 8008448:	f005 ff70 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800844c:	4603      	mov	r3, r0
 800844e:	617b      	str	r3, [r7, #20]

    i = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
    while (1) {
        a ^= ctx->rk[i][0];
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	4413      	add	r3, r2
 800845c:	3304      	adds	r3, #4
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	4053      	eors	r3, r2
 8008464:	623b      	str	r3, [r7, #32]
        b ^= ctx->rk[i][1];
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	4413      	add	r3, r2
 800846e:	3308      	adds	r3, #8
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4053      	eors	r3, r2
 8008476:	61fb      	str	r3, [r7, #28]
        c ^= ctx->rk[i][2];
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4413      	add	r3, r2
 8008480:	330c      	adds	r3, #12
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	4053      	eors	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        d ^= ctx->rk[i][3];
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	3310      	adds	r3, #16
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	4053      	eors	r3, r2
 800849a:	617b      	str	r3, [r7, #20]
        i++;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	3301      	adds	r3, #1
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24

        aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	f107 0218 	add.w	r2, r7, #24
 80084aa:	f107 011c 	add.w	r1, r7, #28
 80084ae:	f107 0020 	add.w	r0, r7, #32
 80084b2:	4c51      	ldr	r4, [pc, #324]	; (80085f8 <mbedtls_aria_crypt_ecb+0x1e8>)
 80084b4:	9403      	str	r4, [sp, #12]
 80084b6:	4c51      	ldr	r4, [pc, #324]	; (80085fc <mbedtls_aria_crypt_ecb+0x1ec>)
 80084b8:	9402      	str	r4, [sp, #8]
 80084ba:	4c51      	ldr	r4, [pc, #324]	; (8008600 <mbedtls_aria_crypt_ecb+0x1f0>)
 80084bc:	9401      	str	r4, [sp, #4]
 80084be:	4c51      	ldr	r4, [pc, #324]	; (8008604 <mbedtls_aria_crypt_ecb+0x1f4>)
 80084c0:	9400      	str	r4, [sp, #0]
 80084c2:	f7ff fc0d 	bl	8007ce0 <aria_sl>
        aria_a(&a, &b, &c, &d);
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	f107 0218 	add.w	r2, r7, #24
 80084ce:	f107 011c 	add.w	r1, r7, #28
 80084d2:	f107 0020 	add.w	r0, r7, #32
 80084d6:	f7ff fb80 	bl	8007bda <aria_a>

        a ^= ctx->rk[i][0];
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	4413      	add	r3, r2
 80084e2:	3304      	adds	r3, #4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	4053      	eors	r3, r2
 80084ea:	623b      	str	r3, [r7, #32]
        b ^= ctx->rk[i][1];
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	4413      	add	r3, r2
 80084f4:	3308      	adds	r3, #8
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4053      	eors	r3, r2
 80084fc:	61fb      	str	r3, [r7, #28]
        c ^= ctx->rk[i][2];
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	4413      	add	r3, r2
 8008506:	330c      	adds	r3, #12
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	4053      	eors	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
        d ^= ctx->rk[i][3];
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	4413      	add	r3, r2
 8008518:	3310      	adds	r3, #16
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4053      	eors	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
        i++;
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	3301      	adds	r3, #1
 8008526:	627b      	str	r3, [r7, #36]	; 0x24

        aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	f107 0218 	add.w	r2, r7, #24
 8008530:	f107 011c 	add.w	r1, r7, #28
 8008534:	f107 0020 	add.w	r0, r7, #32
 8008538:	4c31      	ldr	r4, [pc, #196]	; (8008600 <mbedtls_aria_crypt_ecb+0x1f0>)
 800853a:	9403      	str	r4, [sp, #12]
 800853c:	4c31      	ldr	r4, [pc, #196]	; (8008604 <mbedtls_aria_crypt_ecb+0x1f4>)
 800853e:	9402      	str	r4, [sp, #8]
 8008540:	4c2d      	ldr	r4, [pc, #180]	; (80085f8 <mbedtls_aria_crypt_ecb+0x1e8>)
 8008542:	9401      	str	r4, [sp, #4]
 8008544:	4c2d      	ldr	r4, [pc, #180]	; (80085fc <mbedtls_aria_crypt_ecb+0x1ec>)
 8008546:	9400      	str	r4, [sp, #0]
 8008548:	f7ff fbca 	bl	8007ce0 <aria_sl>
        if (i >= ctx->nr) {
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	4293      	cmp	r3, r2
 8008556:	da0a      	bge.n	800856e <mbedtls_aria_crypt_ecb+0x15e>
            break;
        }
        aria_a(&a, &b, &c, &d);
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	f107 0218 	add.w	r2, r7, #24
 8008560:	f107 011c 	add.w	r1, r7, #28
 8008564:	f107 0020 	add.w	r0, r7, #32
 8008568:	f7ff fb37 	bl	8007bda <aria_a>
        a ^= ctx->rk[i][0];
 800856c:	e772      	b.n	8008454 <mbedtls_aria_crypt_ecb+0x44>
            break;
 800856e:	bf00      	nop
    }

    /* final key mixing */
    a ^= ctx->rk[i][0];
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	4413      	add	r3, r2
 8008578:	3304      	adds	r3, #4
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	4053      	eors	r3, r2
 8008580:	623b      	str	r3, [r7, #32]
    b ^= ctx->rk[i][1];
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	4413      	add	r3, r2
 800858a:	3308      	adds	r3, #8
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4053      	eors	r3, r2
 8008592:	61fb      	str	r3, [r7, #28]
    c ^= ctx->rk[i][2];
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	4413      	add	r3, r2
 800859c:	330c      	adds	r3, #12
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	4053      	eors	r3, r2
 80085a4:	61bb      	str	r3, [r7, #24]
    d ^= ctx->rk[i][3];
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	4413      	add	r3, r2
 80085ae:	3310      	adds	r3, #16
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4053      	eors	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]

    MBEDTLS_PUT_UINT32_LE(a, output,  0);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f005 fec3 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(b, output,  4);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f005 febc 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(c, output,  8);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3308      	adds	r3, #8
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f005 feb5 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_LE(d, output, 12);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	330c      	adds	r3, #12
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f005 feae 	bl	800e348 <mbedtls_put_unaligned_uint32>

    return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	372c      	adds	r7, #44	; 0x2c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd90      	pop	{r4, r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08012448 	.word	0x08012448
 80085fc:	08012348 	.word	0x08012348
 8008600:	08012248 	.word	0x08012248
 8008604:	08012148 	.word	0x08012148

08008608 <mbedtls_aria_init>:

/* Initialize context */
void mbedtls_aria_init(mbedtls_aria_context *ctx)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
    ARIA_VALIDATE(ctx != NULL);
    memset(ctx, 0, sizeof(mbedtls_aria_context));
 8008610:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f008 fd32 	bl	8011080 <memset>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <mbedtls_aria_free>:

/* Clear context */
void mbedtls_aria_free(mbedtls_aria_context *ctx)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <mbedtls_aria_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aria_context));
 8008632:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f005 fefa 	bl	800e430 <mbedtls_platform_zeroize>
 800863c:	e000      	b.n	8008640 <mbedtls_aria_free+0x1c>
        return;
 800863e:	bf00      	nop
}
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <mbedtls_aria_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8008646:	b5b0      	push	{r4, r5, r7, lr}
 8008648:	b088      	sub	sp, #32
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_ARIA_DECRYPT);
    ARIA_VALIDATE_RET(length == 0 || input  != NULL);
    ARIA_VALIDATE_RET(length == 0 || output != NULL);
    ARIA_VALIDATE_RET(iv != NULL);

    if (length % MBEDTLS_ARIA_BLOCKSIZE) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <mbedtls_aria_crypt_cbc+0x1e>
        return MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH;
 800865e:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 8008662:	e049      	b.n	80086f8 <mbedtls_aria_crypt_cbc+0xb2>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d142      	bne.n	80086f0 <mbedtls_aria_crypt_cbc+0xaa>
        while (length > 0) {
 800866a:	e024      	b.n	80086b6 <mbedtls_aria_crypt_cbc+0x70>
            memcpy(temp, input, MBEDTLS_ARIA_BLOCKSIZE);
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	f107 0410 	add.w	r4, r7, #16
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	6859      	ldr	r1, [r3, #4]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aria_crypt_ecb(ctx, input, output);
 800867c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800867e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff fec5 	bl	8008410 <mbedtls_aria_crypt_ecb>

            mbedtls_xor(output, output, iv, MBEDTLS_ARIA_BLOCKSIZE);
 8008686:	2310      	movs	r3, #16
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800868c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800868e:	f005 fe8b 	bl	800e3a8 <mbedtls_xor>

            memcpy(iv, temp, MBEDTLS_ARIA_BLOCKSIZE);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	461d      	mov	r5, r3
 8008696:	f107 0410 	add.w	r4, r7, #16
 800869a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800869c:	6028      	str	r0, [r5, #0]
 800869e:	6069      	str	r1, [r5, #4]
 80086a0:	60aa      	str	r2, [r5, #8]
 80086a2:	60eb      	str	r3, [r5, #12]

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	3310      	adds	r3, #16
 80086a8:	633b      	str	r3, [r7, #48]	; 0x30
            output += MBEDTLS_ARIA_BLOCKSIZE;
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	3310      	adds	r3, #16
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3b10      	subs	r3, #16
 80086b4:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1d7      	bne.n	800866c <mbedtls_aria_crypt_cbc+0x26>
 80086bc:	e01b      	b.n	80086f6 <mbedtls_aria_crypt_cbc+0xb0>
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, MBEDTLS_ARIA_BLOCKSIZE);
 80086be:	2310      	movs	r3, #16
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086c6:	f005 fe6f 	bl	800e3a8 <mbedtls_xor>

            mbedtls_aria_crypt_ecb(ctx, output, output);
 80086ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff fe9e 	bl	8008410 <mbedtls_aria_crypt_ecb>
            memcpy(iv, output, MBEDTLS_ARIA_BLOCKSIZE);
 80086d4:	2210      	movs	r2, #16
 80086d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086d8:	6838      	ldr	r0, [r7, #0]
 80086da:	f008 fcc3 	bl	8011064 <memcpy>

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	3310      	adds	r3, #16
 80086e2:	633b      	str	r3, [r7, #48]	; 0x30
            output += MBEDTLS_ARIA_BLOCKSIZE;
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	3310      	adds	r3, #16
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3b10      	subs	r3, #16
 80086ee:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <mbedtls_aria_crypt_cbc+0x78>
        }
    }

    return 0;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bdb0      	pop	{r4, r5, r7, pc}

08008700 <mbedtls_aria_crypt_cfb128>:
                              size_t length,
                              size_t *iv_off,
                              unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                              const unsigned char *input,
                              unsigned char *output)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
    ARIA_VALIDATE_RET(length == 0 || input  != NULL);
    ARIA_VALIDATE_RET(length == 0 || output != NULL);
    ARIA_VALIDATE_RET(iv != NULL);
    ARIA_VALIDATE_RET(iv_off != NULL);

    n = *iv_off;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	617b      	str	r3, [r7, #20]

    /* An overly large value of n can lead to an unlimited
     * buffer overflow. Therefore, guard against this
     * outside of parameter validation. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b0f      	cmp	r3, #15
 8008718:	d902      	bls.n	8008720 <mbedtls_aria_crypt_cfb128+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 800871a:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 800871e:	e054      	b.n	80087ca <mbedtls_aria_crypt_cfb128+0xca>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d148      	bne.n	80087b8 <mbedtls_aria_crypt_cfb128+0xb8>
        while (length--) {
 8008726:	e021      	b.n	800876c <mbedtls_aria_crypt_cfb128+0x6c>
            if (n == 0) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <mbedtls_aria_crypt_cfb128+0x38>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 800872e:	6a3a      	ldr	r2, [r7, #32]
 8008730:	6a39      	ldr	r1, [r7, #32]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff fe6c 	bl	8008410 <mbedtls_aria_crypt_ecb>
            }

            c = *input++;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	627a      	str	r2, [r7, #36]	; 0x24
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	74fb      	strb	r3, [r7, #19]
            *output++ = c ^ iv[n];
 8008742:	6a3a      	ldr	r2, [r7, #32]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	4413      	add	r3, r2
 8008748:	7819      	ldrb	r1, [r3, #0]
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008750:	7cfa      	ldrb	r2, [r7, #19]
 8008752:	404a      	eors	r2, r1
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]
            iv[n] = c;
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	7cfa      	ldrb	r2, [r7, #19]
 8008760:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	3301      	adds	r3, #1
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	617b      	str	r3, [r7, #20]
        while (length--) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	1e5a      	subs	r2, r3, #1
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1d8      	bne.n	8008728 <mbedtls_aria_crypt_cfb128+0x28>
 8008776:	e024      	b.n	80087c2 <mbedtls_aria_crypt_cfb128+0xc2>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <mbedtls_aria_crypt_cfb128+0x88>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 800877e:	6a3a      	ldr	r2, [r7, #32]
 8008780:	6a39      	ldr	r1, [r7, #32]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fe44 	bl	8008410 <mbedtls_aria_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8008788:	6a3a      	ldr	r2, [r7, #32]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	7819      	ldrb	r1, [r3, #0]
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	627a      	str	r2, [r7, #36]	; 0x24
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	1c58      	adds	r0, r3, #1
 800879c:	62b8      	str	r0, [r7, #40]	; 0x28
 800879e:	404a      	eors	r2, r1
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	6a39      	ldr	r1, [r7, #32]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	440a      	add	r2, r1
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	3301      	adds	r3, #1
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	617b      	str	r3, [r7, #20]
        while (length--) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1da      	bne.n	8008778 <mbedtls_aria_crypt_cfb128+0x78>
        }
    }

    *iv_off = n;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	601a      	str	r2, [r3, #0]

    return 0;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <mbedtls_aria_crypt_ctr>:
                           size_t *nc_off,
                           unsigned char nonce_counter[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char stream_block[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b088      	sub	sp, #32
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	603b      	str	r3, [r7, #0]
    ARIA_VALIDATE_RET(length == 0 || output != NULL);
    ARIA_VALIDATE_RET(nonce_counter != NULL);
    ARIA_VALIDATE_RET(stream_block  != NULL);
    ARIA_VALIDATE_RET(nc_off != NULL);

    n = *nc_off;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	61bb      	str	r3, [r7, #24]
    /* An overly large value of n can lead to an unlimited
     * buffer overflow. Therefore, guard against this
     * outside of parameter validation. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b0f      	cmp	r3, #15
 80087ea:	d938      	bls.n	800885e <mbedtls_aria_crypt_ctr+0x8c>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80087ec:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80087f0:	e03e      	b.n	8008870 <mbedtls_aria_crypt_ctr+0x9e>
    }

    while (length--) {
        if (n == 0) {
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d11a      	bne.n	800882e <mbedtls_aria_crypt_ctr+0x5c>
            mbedtls_aria_crypt_ecb(ctx, nonce_counter,
 80087f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fe07 	bl	8008410 <mbedtls_aria_crypt_ecb>
                                   stream_block);

            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 8008802:	2310      	movs	r3, #16
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e00d      	b.n	8008824 <mbedtls_aria_crypt_ctr+0x52>
                if (++nonce_counter[i - 1] != 0) {
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3b01      	subs	r3, #1
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	4413      	add	r3, r2
 8008810:	781a      	ldrb	r2, [r3, #0]
 8008812:	3201      	adds	r2, #1
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <mbedtls_aria_crypt_ctr+0x5a>
            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	3b01      	subs	r3, #1
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	dcee      	bgt.n	8008808 <mbedtls_aria_crypt_ctr+0x36>
 800882a:	e000      	b.n	800882e <mbedtls_aria_crypt_ctr+0x5c>
                    break;
 800882c:	bf00      	nop
                }
            }
        }
        c = *input++;
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	b25a      	sxtb	r2, r3
 800883c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	440b      	add	r3, r1
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	b25b      	sxtb	r3, r3
 8008846:	4053      	eors	r3, r2
 8008848:	b259      	sxtb	r1, r3
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	633a      	str	r2, [r7, #48]	; 0x30
 8008850:	b2ca      	uxtb	r2, r1
 8008852:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	3301      	adds	r3, #1
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	61bb      	str	r3, [r7, #24]
    while (length--) {
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	1e5a      	subs	r2, r3, #1
 8008862:	60ba      	str	r2, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1c4      	bne.n	80087f2 <mbedtls_aria_crypt_ctr+0x20>
    }

    *nc_off = n;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	601a      	str	r2, [r3, #0]

    return 0;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode(unsigned char *dst, size_t dlen, size_t *olen,
                          const unsigned char *src, size_t slen)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08c      	sub	sp, #48	; 0x30
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
    size_t i; /* index in source */
    size_t n; /* number of digits or trailing = in source */
    uint32_t x; /* value accumulator */
    unsigned accumulated_digits = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	623b      	str	r3, [r7, #32]
    unsigned equals = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	61fb      	str	r3, [r7, #28]
    int spaces_present = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for (i = n = 0; i < slen; i++) {
 8008892:	2300      	movs	r3, #0
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800889a:	e069      	b.n	8008970 <mbedtls_base64_decode+0xf8>
        /* Skip spaces before checking for EOL */
        spaces_present = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	61bb      	str	r3, [r7, #24]
        while (i < slen && src[i] == ' ') {
 80088a0:	e004      	b.n	80088ac <mbedtls_base64_decode+0x34>
            ++i;
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	3301      	adds	r3, #1
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            spaces_present = 1;
 80088a8:	2301      	movs	r3, #1
 80088aa:	61bb      	str	r3, [r7, #24]
        while (i < slen && src[i] == ' ') {
 80088ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d205      	bcs.n	80088c0 <mbedtls_base64_decode+0x48>
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	4413      	add	r3, r2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d0f0      	beq.n	80088a2 <mbedtls_base64_decode+0x2a>
        }

        /* Spaces at end of buffer are OK */
        if (i == slen) {
 80088c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d058      	beq.n	800897a <mbedtls_base64_decode+0x102>
            break;
        }

        if ((slen - i) >= 2 &&
 80088c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d90c      	bls.n	80088ec <mbedtls_base64_decode+0x74>
            src[i] == '\r' && src[i + 1] == '\n') {
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	4413      	add	r3, r2
 80088d8:	781b      	ldrb	r3, [r3, #0]
        if ((slen - i) >= 2 &&
 80088da:	2b0d      	cmp	r3, #13
 80088dc:	d106      	bne.n	80088ec <mbedtls_base64_decode+0x74>
            src[i] == '\r' && src[i + 1] == '\n') {
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	3301      	adds	r3, #1
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	4413      	add	r3, r2
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b0a      	cmp	r3, #10
 80088ea:	d03b      	beq.n	8008964 <mbedtls_base64_decode+0xec>
            continue;
        }

        if (src[i] == '\n') {
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	4413      	add	r3, r2
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b0a      	cmp	r3, #10
 80088f6:	d037      	beq.n	8008968 <mbedtls_base64_decode+0xf0>
            continue;
        }

        /* Space inside a line is an error */
        if (spaces_present) {
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <mbedtls_base64_decode+0x8c>
            return MBEDTLS_ERR_BASE64_INVALID_CHARACTER;
 80088fe:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8008902:	e0c2      	b.n	8008a8a <mbedtls_base64_decode+0x212>
        }

        if (src[i] > 127) {
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	4413      	add	r3, r2
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b25b      	sxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	da02      	bge.n	8008918 <mbedtls_base64_decode+0xa0>
            return MBEDTLS_ERR_BASE64_INVALID_CHARACTER;
 8008912:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8008916:	e0b8      	b.n	8008a8a <mbedtls_base64_decode+0x212>
        }

        if (src[i] == '=') {
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	4413      	add	r3, r2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b3d      	cmp	r3, #61	; 0x3d
 8008922:	d108      	bne.n	8008936 <mbedtls_base64_decode+0xbe>
            if (++equals > 2) {
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	3301      	adds	r3, #1
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d915      	bls.n	800895c <mbedtls_base64_decode+0xe4>
                return MBEDTLS_ERR_BASE64_INVALID_CHARACTER;
 8008930:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8008934:	e0a9      	b.n	8008a8a <mbedtls_base64_decode+0x212>
            }
        } else {
            if (equals != 0) {
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <mbedtls_base64_decode+0xca>
                return MBEDTLS_ERR_BASE64_INVALID_CHARACTER;
 800893c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8008940:	e0a3      	b.n	8008a8a <mbedtls_base64_decode+0x212>
            }
            if (mbedtls_ct_base64_dec_value(src[i]) < 0) {
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	4413      	add	r3, r2
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f003 fb11 	bl	800bf72 <mbedtls_ct_base64_dec_value>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	da02      	bge.n	800895c <mbedtls_base64_decode+0xe4>
                return MBEDTLS_ERR_BASE64_INVALID_CHARACTER;
 8008956:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 800895a:	e096      	b.n	8008a8a <mbedtls_base64_decode+0x212>
            }
        }
        n++;
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	3301      	adds	r3, #1
 8008960:	62bb      	str	r3, [r7, #40]	; 0x28
 8008962:	e002      	b.n	800896a <mbedtls_base64_decode+0xf2>
            continue;
 8008964:	bf00      	nop
 8008966:	e000      	b.n	800896a <mbedtls_base64_decode+0xf2>
            continue;
 8008968:	bf00      	nop
    for (i = n = 0; i < slen; i++) {
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	3301      	adds	r3, #1
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	429a      	cmp	r2, r3
 8008976:	d391      	bcc.n	800889c <mbedtls_base64_decode+0x24>
 8008978:	e000      	b.n	800897c <mbedtls_base64_decode+0x104>
            break;
 800897a:	bf00      	nop
    }

    if (n == 0) {
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <mbedtls_base64_decode+0x114>
        *olen = 0;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
        return 0;
 8008988:	2300      	movs	r3, #0
 800898a:	e07e      	b.n	8008a8a <mbedtls_base64_decode+0x212>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	08da      	lsrs	r2, r3, #3
 8008990:	4613      	mov	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	4413      	add	r3, r2
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	4619      	mov	r1, r3
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	f003 0207 	and.w	r2, r3, #7
 80089a0:	4613      	mov	r3, r2
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4413      	add	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	3307      	adds	r3, #7
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	440b      	add	r3, r1
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28
    n -= equals;
 80089b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (dst == NULL || dlen < n) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <mbedtls_base64_decode+0x14e>
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d205      	bcs.n	80089d2 <mbedtls_base64_decode+0x15a>
        *olen = n;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ca:	601a      	str	r2, [r3, #0]
        return MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL;
 80089cc:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80089d0:	e05b      	b.n	8008a8a <mbedtls_base64_decode+0x212>
    }

    equals = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
    for (x = 0, p = dst; i > 0; i--, src++) {
 80089d6:	2300      	movs	r3, #0
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e04a      	b.n	8008a76 <mbedtls_base64_decode+0x1fe>
        if (*src == '\r' || *src == '\n' || *src == ' ') {
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b0d      	cmp	r3, #13
 80089e6:	d03f      	beq.n	8008a68 <mbedtls_base64_decode+0x1f0>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b0a      	cmp	r3, #10
 80089ee:	d03b      	beq.n	8008a68 <mbedtls_base64_decode+0x1f0>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d037      	beq.n	8008a68 <mbedtls_base64_decode+0x1f0>
            continue;
        }

        x = x << 6;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	019b      	lsls	r3, r3, #6
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
        if (*src == '=') {
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b3d      	cmp	r3, #61	; 0x3d
 8008a04:	d103      	bne.n	8008a0e <mbedtls_base64_decode+0x196>
            ++equals;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	61fb      	str	r3, [r7, #28]
 8008a0c:	e009      	b.n	8008a22 <mbedtls_base64_decode+0x1aa>
        } else {
            x |= mbedtls_ct_base64_dec_value(*src);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 faad 	bl	800bf72 <mbedtls_ct_base64_dec_value>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if (++accumulated_digits == 4) {
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	3301      	adds	r3, #1
 8008a26:	623b      	str	r3, [r7, #32]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d11d      	bne.n	8008a6a <mbedtls_base64_decode+0x1f2>
            accumulated_digits = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	623b      	str	r3, [r7, #32]
            *p++ = MBEDTLS_BYTE_2(x);
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	0c19      	lsrs	r1, r3, #16
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	617a      	str	r2, [r7, #20]
 8008a3c:	b2ca      	uxtb	r2, r1
 8008a3e:	701a      	strb	r2, [r3, #0]
            if (equals <= 1) {
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d806      	bhi.n	8008a54 <mbedtls_base64_decode+0x1dc>
                *p++ = MBEDTLS_BYTE_1(x);
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	0a19      	lsrs	r1, r3, #8
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	617a      	str	r2, [r7, #20]
 8008a50:	b2ca      	uxtb	r2, r1
 8008a52:	701a      	strb	r2, [r3, #0]
            }
            if (equals <= 0) {
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d107      	bne.n	8008a6a <mbedtls_base64_decode+0x1f2>
                *p++ = MBEDTLS_BYTE_0(x);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	617a      	str	r2, [r7, #20]
 8008a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e000      	b.n	8008a6a <mbedtls_base64_decode+0x1f2>
            continue;
 8008a68:	bf00      	nop
    for (x = 0, p = dst; i > 0; i--, src++) {
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1b1      	bne.n	80089e0 <mbedtls_base64_decode+0x168>
            }
        }
    }

    *olen = p - dst;
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]

    return 0;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3730      	adds	r7, #48	; 0x30
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <camellia_feistel>:
        }                                                   \
    }

static void camellia_feistel(const uint32_t x[2], const uint32_t k[2],
                             uint32_t z[2])
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4053      	eors	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4053      	eors	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	0e1b      	lsrs	r3, r3, #24
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4b31      	ldr	r3, [pc, #196]	; (8008b8c <camellia_feistel+0xf8>)
 8008ac6:	5c9b      	ldrb	r3, [r3, r2]
 8008ac8:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4b2f      	ldr	r3, [pc, #188]	; (8008b90 <camellia_feistel+0xfc>)
 8008ad4:	5c5b      	ldrb	r3, [r3, r1]
 8008ad6:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8008ad8:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3(MBEDTLS_BYTE_1(I0)) <<  8) |
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	0a1b      	lsrs	r3, r3, #8
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4b2c      	ldr	r3, [pc, #176]	; (8008b94 <camellia_feistel+0x100>)
 8008ae4:	5c5b      	ldrb	r3, [r3, r1]
 8008ae6:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8008ae8:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4(MBEDTLS_BYTE_0(I0)));
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	4611      	mov	r1, r2
 8008af0:	4a29      	ldr	r2, [pc, #164]	; (8008b98 <camellia_feistel+0x104>)
 8008af2:	5c52      	ldrb	r2, [r2, r1]
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	4b23      	ldr	r3, [pc, #140]	; (8008b90 <camellia_feistel+0xfc>)
 8008b02:	5c9b      	ldrb	r3, [r3, r2]
 8008b04:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	0c1b      	lsrs	r3, r3, #16
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4b21      	ldr	r3, [pc, #132]	; (8008b94 <camellia_feistel+0x100>)
 8008b10:	5c5b      	ldrb	r3, [r3, r1]
 8008b12:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8008b14:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4(MBEDTLS_BYTE_1(I1)) <<  8) |
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	0a1b      	lsrs	r3, r3, #8
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <camellia_feistel+0x104>)
 8008b20:	5c5b      	ldrb	r3, [r3, r1]
 8008b22:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 8008b24:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1(MBEDTLS_BYTE_0(I1)));
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4a17      	ldr	r2, [pc, #92]	; (8008b8c <camellia_feistel+0xf8>)
 8008b2e:	5c52      	ldrb	r2, [r2, r1]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8008b30:	4313      	orrs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	ea4f 6333 	mov.w	r3, r3, ror #24
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4053      	eors	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ea4f 4333 	mov.w	r3, r3, ror #16
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4053      	eors	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4053      	eors	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4053      	eors	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	405a      	eors	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	6819      	ldr	r1, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	404a      	eors	r2, r1
 8008b7e:	601a      	str	r2, [r3, #0]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	08012578 	.word	0x08012578
 8008b90:	08012678 	.word	0x08012678
 8008b94:	08012778 	.word	0x08012778
 8008b98:	08012878 	.word	0x08012878

08008b9c <mbedtls_camellia_init>:

void mbedtls_camellia_init(mbedtls_camellia_context *ctx)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_camellia_context));
 8008ba4:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008ba8:	2100      	movs	r1, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f008 fa68 	bl	8011080 <memset>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <mbedtls_camellia_free>:

void mbedtls_camellia_free(mbedtls_camellia_context *ctx)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <mbedtls_camellia_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_camellia_context));
 8008bc6:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f005 fc30 	bl	800e430 <mbedtls_platform_zeroize>
 8008bd0:	e000      	b.n	8008bd4 <mbedtls_camellia_free+0x1c>
        return;
 8008bd2:	bf00      	nop
}
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b0c8      	sub	sp, #288	; 0x120
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008be6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008bea:	6018      	str	r0, [r3, #0]
 8008bec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008bfe:	601a      	str	r2, [r3, #0]
    unsigned char t[64];
    uint32_t SIGMA[6][2];
    uint32_t KC[16];
    uint32_t TK[20];

    RK = ctx->rk;
 8008c00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    memset(t, 0, 64);
 8008c10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008c14:	2240      	movs	r2, #64	; 0x40
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f008 fa31 	bl	8011080 <memset>
    memset(RK, 0, sizeof(ctx->rk));
 8008c1e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008c22:	2100      	movs	r1, #0
 8008c24:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8008c28:	f008 fa2a 	bl	8011080 <memset>

    switch (keybits) {
 8008c2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3a:	d021      	beq.n	8008c80 <mbedtls_camellia_setkey_enc+0xa4>
 8008c3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d824      	bhi.n	8008c96 <mbedtls_camellia_setkey_enc+0xba>
 8008c4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b80      	cmp	r3, #128	; 0x80
 8008c58:	d007      	beq.n	8008c6a <mbedtls_camellia_setkey_enc+0x8e>
 8008c5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2bc0      	cmp	r3, #192	; 0xc0
 8008c66:	d00b      	beq.n	8008c80 <mbedtls_camellia_setkey_enc+0xa4>
 8008c68:	e015      	b.n	8008c96 <mbedtls_camellia_setkey_enc+0xba>
        case 128: ctx->nr = 3; idx = 0; break;
 8008c6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2203      	movs	r2, #3
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c7e:	e00e      	b.n	8008c9e <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8008c80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c94:	e003      	b.n	8008c9e <mbedtls_camellia_setkey_enc+0xc2>
        default: return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8008c96:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8008c9a:	f000 bddb 	b.w	8009854 <mbedtls_camellia_setkey_enc+0xc78>
    }

    for (i = 0; i < keybits / 8; ++i) {
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ca4:	e014      	b.n	8008cd0 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 8008ca6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008caa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cb4:	4413      	add	r3, r2
 8008cb6:	7819      	ldrb	r1, [r3, #0]
 8008cb8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8008cbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cc0:	4413      	add	r3, r2
 8008cc2:	460a      	mov	r2, r1
 8008cc4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < keybits / 8; ++i) {
 8008cc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	08db      	lsrs	r3, r3, #3
 8008cdc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d3e0      	bcc.n	8008ca6 <mbedtls_camellia_setkey_enc+0xca>
    }

    if (keybits == 192) {
 8008ce4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2bc0      	cmp	r3, #192	; 0xc0
 8008cf0:	d11e      	bne.n	8008d30 <mbedtls_camellia_setkey_enc+0x154>
        for (i = 0; i < 8; i++) {
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cf8:	e016      	b.n	8008d28 <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 8008cfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cfe:	3310      	adds	r3, #16
 8008d00:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008d04:	443b      	add	r3, r7
 8008d06:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8008d0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d0e:	3318      	adds	r3, #24
 8008d10:	43d2      	mvns	r2, r2
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008d18:	443b      	add	r3, r7
 8008d1a:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for (i = 0; i < 8; i++) {
 8008d1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d22:	3301      	adds	r3, #1
 8008d24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d2c:	2b07      	cmp	r3, #7
 8008d2e:	d9e4      	bls.n	8008cfa <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for (i = 0; i < 6; i++) {
 8008d30:	2300      	movs	r3, #0
 8008d32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d36:	e029      	b.n	8008d8c <mbedtls_camellia_setkey_enc+0x1b0>
        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 0);
 8008d38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4a9a      	ldr	r2, [pc, #616]	; (8008fa8 <mbedtls_camellia_setkey_enc+0x3cc>)
 8008d40:	4413      	add	r3, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f005 faf2 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	ba1a      	rev	r2, r3
 8008d4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008d56:	443b      	add	r3, r7
 8008d58:	f843 2c7c 	str.w	r2, [r3, #-124]
        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 4);
 8008d5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4a91      	ldr	r2, [pc, #580]	; (8008fa8 <mbedtls_camellia_setkey_enc+0x3cc>)
 8008d64:	4413      	add	r3, r2
 8008d66:	3304      	adds	r3, #4
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f005 fadf 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	ba1a      	rev	r2, r3
 8008d72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008d7c:	443b      	add	r3, r7
 8008d7e:	f843 2c78 	str.w	r2, [r3, #-120]
    for (i = 0; i < 6; i++) {
 8008d82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d86:	3301      	adds	r3, #1
 8008d88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d9d1      	bls.n	8008d38 <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset(KC, 0, sizeof(KC));
 8008d94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d98:	2240      	movs	r2, #64	; 0x40
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f008 f96f 	bl	8011080 <memset>

    /* Store KL, KR */
    for (i = 0; i < 8; i++) {
 8008da2:	2300      	movs	r3, #0
 8008da4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008da8:	e017      	b.n	8008dda <mbedtls_camellia_setkey_enc+0x1fe>
        KC[i] = MBEDTLS_GET_UINT32_BE(t, i * 4);
 8008daa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8008db4:	4413      	add	r3, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f005 fab8 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	ba1a      	rev	r2, r3
 8008dc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008dca:	443b      	add	r3, r7
 8008dcc:	f843 2cbc 	str.w	r2, [r3, #-188]
    for (i = 0; i < 8; i++) {
 8008dd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008dda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dde:	2b07      	cmp	r3, #7
 8008de0:	d9e3      	bls.n	8008daa <mbedtls_camellia_setkey_enc+0x1ce>
    }

    /* Generate KA */
    for (i = 0; i < 4; ++i) {
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008de8:	e01f      	b.n	8008e2a <mbedtls_camellia_setkey_enc+0x24e>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8008dea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008df4:	443b      	add	r3, r7
 8008df6:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8008dfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dfe:	3304      	adds	r3, #4
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008e06:	443b      	add	r3, r7
 8008e08:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8008e0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e10:	3308      	adds	r3, #8
 8008e12:	404a      	eors	r2, r1
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008e1a:	443b      	add	r3, r7
 8008e1c:	f843 2cbc 	str.w	r2, [r3, #-188]
    for (i = 0; i < 4; ++i) {
 8008e20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d9db      	bls.n	8008dea <mbedtls_camellia_setkey_enc+0x20e>
    }

    camellia_feistel(KC + 8, SIGMA[0], KC + 10);
 8008e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e36:	3320      	adds	r3, #32
 8008e38:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008e3c:	3228      	adds	r2, #40	; 0x28
 8008e3e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fe26 	bl	8008a94 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[1], KC + 8);
 8008e48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e4c:	3328      	adds	r3, #40	; 0x28
 8008e4e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008e52:	3220      	adds	r2, #32
 8008e54:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008e58:	3108      	adds	r1, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fe1a 	bl	8008a94 <camellia_feistel>

    for (i = 0; i < 4; ++i) {
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e66:	e01f      	b.n	8008ea8 <mbedtls_camellia_setkey_enc+0x2cc>
        KC[8 + i] ^= KC[i];
 8008e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008e74:	443b      	add	r3, r7
 8008e76:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8008e7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008e84:	443b      	add	r3, r7
 8008e86:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8008e8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e8e:	3308      	adds	r3, #8
 8008e90:	404a      	eors	r2, r1
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008e98:	443b      	add	r3, r7
 8008e9a:	f843 2cbc 	str.w	r2, [r3, #-188]
    for (i = 0; i < 4; ++i) {
 8008e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d9db      	bls.n	8008e68 <mbedtls_camellia_setkey_enc+0x28c>
    }

    camellia_feistel(KC + 8, SIGMA[2], KC + 10);
 8008eb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008eb4:	3320      	adds	r3, #32
 8008eb6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008eba:	3228      	adds	r2, #40	; 0x28
 8008ebc:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008ec0:	3110      	adds	r1, #16
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fde6 	bl	8008a94 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[3], KC + 8);
 8008ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ecc:	3328      	adds	r3, #40	; 0x28
 8008ece:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008ed2:	3220      	adds	r2, #32
 8008ed4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008ed8:	3118      	adds	r1, #24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fdda 	bl	8008a94 <camellia_feistel>

    if (keybits > 128) {
 8008ee0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b80      	cmp	r3, #128	; 0x80
 8008eec:	d940      	bls.n	8008f70 <mbedtls_camellia_setkey_enc+0x394>
        /* Generate KB */
        for (i = 0; i < 4; ++i) {
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ef4:	e020      	b.n	8008f38 <mbedtls_camellia_setkey_enc+0x35c>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8008ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008efa:	3304      	adds	r3, #4
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008f02:	443b      	add	r3, r7
 8008f04:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8008f08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008f14:	443b      	add	r3, r7
 8008f16:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8008f1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008f1e:	330c      	adds	r3, #12
 8008f20:	404a      	eors	r2, r1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008f28:	443b      	add	r3, r7
 8008f2a:	f843 2cbc 	str.w	r2, [r3, #-188]
        for (i = 0; i < 4; ++i) {
 8008f2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008f32:	3301      	adds	r3, #1
 8008f34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d9da      	bls.n	8008ef6 <mbedtls_camellia_setkey_enc+0x31a>
        }

        camellia_feistel(KC + 12, SIGMA[4], KC + 14);
 8008f40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f44:	3330      	adds	r3, #48	; 0x30
 8008f46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008f4a:	3238      	adds	r2, #56	; 0x38
 8008f4c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008f50:	3120      	adds	r1, #32
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fd9e 	bl	8008a94 <camellia_feistel>
        camellia_feistel(KC + 14, SIGMA[5], KC + 12);
 8008f58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f5c:	3338      	adds	r3, #56	; 0x38
 8008f5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008f62:	3230      	adds	r2, #48	; 0x30
 8008f64:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008f68:	3128      	adds	r1, #40	; 0x28
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fd92 	bl	8008a94 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE(idx, 0);
 8008f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f92:	609a      	str	r2, [r3, #8]
 8008f94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f9e:	60da      	str	r2, [r3, #12]
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008fa6:	e0aa      	b.n	80090fe <mbedtls_camellia_setkey_enc+0x522>
 8008fa8:	08012548 	.word	0x08012548
 8008fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	49dd      	ldr	r1, [pc, #884]	; (8009328 <mbedtls_camellia_setkey_enc+0x74c>)
 8008fb4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008fb8:	0112      	lsls	r2, r2, #4
 8008fba:	440a      	add	r2, r1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8097 	beq.w	80090f4 <mbedtls_camellia_setkey_enc+0x518>
 8008fc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	1a9b      	subs	r3, r3, r2
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	4099      	lsls	r1, r3
 8008fe0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008fe4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008fe8:	6858      	ldr	r0, [r3, #4]
 8008fea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008fee:	4613      	mov	r3, r2
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	f1c3 0320 	rsb	r3, r3, #32
 8008ffc:	fa20 f203 	lsr.w	r2, r0, r3
 8009000:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	f107 0014 	add.w	r0, r7, #20
 800900a:	4403      	add	r3, r0
 800900c:	404a      	eors	r2, r1
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009018:	6859      	ldr	r1, [r3, #4]
 800901a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800901e:	4613      	mov	r3, r2
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	1a9b      	subs	r3, r3, r2
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	4099      	lsls	r1, r3
 800902a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800902e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009032:	6898      	ldr	r0, [r3, #8]
 8009034:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009038:	4613      	mov	r3, r2
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	f1c3 0320 	rsb	r3, r3, #32
 8009046:	fa20 f203 	lsr.w	r2, r0, r3
 800904a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	3304      	adds	r3, #4
 8009052:	f107 0014 	add.w	r0, r7, #20
 8009056:	4403      	add	r3, r0
 8009058:	404a      	eors	r2, r1
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009060:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009064:	6899      	ldr	r1, [r3, #8]
 8009066:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800906a:	4613      	mov	r3, r2
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	4099      	lsls	r1, r3
 8009076:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800907a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800907e:	68d8      	ldr	r0, [r3, #12]
 8009080:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009084:	4613      	mov	r3, r2
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	1a9b      	subs	r3, r3, r2
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	f1c3 0320 	rsb	r3, r3, #32
 8009092:	fa20 f203 	lsr.w	r2, r0, r3
 8009096:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	3308      	adds	r3, #8
 800909e:	f107 0014 	add.w	r0, r7, #20
 80090a2:	4403      	add	r3, r0
 80090a4:	404a      	eors	r2, r1
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80090ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090b0:	68d9      	ldr	r1, [r3, #12]
 80090b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80090b6:	4613      	mov	r3, r2
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	f003 031f 	and.w	r3, r3, #31
 80090c0:	4099      	lsls	r1, r3
 80090c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80090c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80090d0:	4613      	mov	r3, r2
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	f1c3 0320 	rsb	r3, r3, #32
 80090de:	fa20 f203 	lsr.w	r2, r0, r3
 80090e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	330c      	adds	r3, #12
 80090ea:	f107 0014 	add.w	r0, r7, #20
 80090ee:	4403      	add	r3, r0
 80090f0:	404a      	eors	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80090f8:	3301      	adds	r3, #1
 80090fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80090fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009102:	2b04      	cmp	r3, #4
 8009104:	f67f af52 	bls.w	8008fac <mbedtls_camellia_setkey_enc+0x3d0>
 8009108:	2300      	movs	r3, #0
 800910a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800910e:	e02e      	b.n	800916e <mbedtls_camellia_setkey_enc+0x592>
 8009110:	4986      	ldr	r1, [pc, #536]	; (800932c <mbedtls_camellia_setkey_enc+0x750>)
 8009112:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	18ca      	adds	r2, r1, r3
 8009120:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009124:	4413      	add	r3, r2
 8009126:	f993 3000 	ldrsb.w	r3, [r3]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d019      	beq.n	8009164 <mbedtls_camellia_setkey_enc+0x588>
 8009130:	497e      	ldr	r1, [pc, #504]	; (800932c <mbedtls_camellia_setkey_enc+0x750>)
 8009132:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	18ca      	adds	r2, r1, r3
 8009140:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009144:	4413      	add	r3, r2
 8009146:	f993 3000 	ldrsb.w	r3, [r3]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009150:	4413      	add	r3, r2
 8009152:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009156:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800915a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800915e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009168:	3301      	adds	r3, #1
 800916a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800916e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009172:	2b13      	cmp	r3, #19
 8009174:	d9cc      	bls.n	8009110 <mbedtls_camellia_setkey_enc+0x534>

    /* Manipulating KR */
    if (keybits > 128) {
 8009176:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800917a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	f240 810a 	bls.w	800939a <mbedtls_camellia_setkey_enc+0x7be>
        SHIFT_AND_PLACE(idx, 1);
 8009186:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009188:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800918c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009194:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009198:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80091a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80091a8:	609a      	str	r2, [r3, #8]
 80091aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80091b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80091b6:	60da      	str	r2, [r3, #12]
 80091b8:	2301      	movs	r3, #1
 80091ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80091be:	e0a9      	b.n	8009314 <mbedtls_camellia_setkey_enc+0x738>
 80091c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80091c4:	3b01      	subs	r3, #1
 80091c6:	4958      	ldr	r1, [pc, #352]	; (8009328 <mbedtls_camellia_setkey_enc+0x74c>)
 80091c8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80091cc:	0112      	lsls	r2, r2, #4
 80091ce:	440a      	add	r2, r1
 80091d0:	4413      	add	r3, r2
 80091d2:	3304      	adds	r3, #4
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 8097 	beq.w	800930a <mbedtls_camellia_setkey_enc+0x72e>
 80091dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80091e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80091e4:	6819      	ldr	r1, [r3, #0]
 80091e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80091ea:	4613      	mov	r3, r2
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	4099      	lsls	r1, r3
 80091f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80091fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80091fe:	6858      	ldr	r0, [r3, #4]
 8009200:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009204:	4613      	mov	r3, r2
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	f003 031f 	and.w	r3, r3, #31
 800920e:	f1c3 0320 	rsb	r3, r3, #32
 8009212:	fa20 f203 	lsr.w	r2, r0, r3
 8009216:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	f107 0014 	add.w	r0, r7, #20
 8009220:	4403      	add	r3, r0
 8009222:	404a      	eors	r2, r1
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800922a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800922e:	6859      	ldr	r1, [r3, #4]
 8009230:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009234:	4613      	mov	r3, r2
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	f003 031f 	and.w	r3, r3, #31
 800923e:	4099      	lsls	r1, r3
 8009240:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009244:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009248:	6898      	ldr	r0, [r3, #8]
 800924a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800924e:	4613      	mov	r3, r2
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	1a9b      	subs	r3, r3, r2
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	f1c3 0320 	rsb	r3, r3, #32
 800925c:	fa20 f203 	lsr.w	r2, r0, r3
 8009260:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	3304      	adds	r3, #4
 8009268:	f107 0014 	add.w	r0, r7, #20
 800926c:	4403      	add	r3, r0
 800926e:	404a      	eors	r2, r1
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009276:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800927a:	6899      	ldr	r1, [r3, #8]
 800927c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009280:	4613      	mov	r3, r2
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	f003 031f 	and.w	r3, r3, #31
 800928a:	4099      	lsls	r1, r3
 800928c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009290:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009294:	68d8      	ldr	r0, [r3, #12]
 8009296:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800929a:	4613      	mov	r3, r2
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	f003 031f 	and.w	r3, r3, #31
 80092a4:	f1c3 0320 	rsb	r3, r3, #32
 80092a8:	fa20 f203 	lsr.w	r2, r0, r3
 80092ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	3308      	adds	r3, #8
 80092b4:	f107 0014 	add.w	r0, r7, #20
 80092b8:	4403      	add	r3, r0
 80092ba:	404a      	eors	r2, r1
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80092c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092c6:	68d9      	ldr	r1, [r3, #12]
 80092c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80092cc:	4613      	mov	r3, r2
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	f003 031f 	and.w	r3, r3, #31
 80092d6:	4099      	lsls	r1, r3
 80092d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80092dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80092e6:	4613      	mov	r3, r2
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	f1c3 0320 	rsb	r3, r3, #32
 80092f4:	fa20 f203 	lsr.w	r2, r0, r3
 80092f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	330c      	adds	r3, #12
 8009300:	f107 0014 	add.w	r0, r7, #20
 8009304:	4403      	add	r3, r0
 8009306:	404a      	eors	r2, r1
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800930e:	3301      	adds	r3, #1
 8009310:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009314:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009318:	2b04      	cmp	r3, #4
 800931a:	f67f af51 	bls.w	80091c0 <mbedtls_camellia_setkey_enc+0x5e4>
 800931e:	2300      	movs	r3, #0
 8009320:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009324:	e035      	b.n	8009392 <mbedtls_camellia_setkey_enc+0x7b6>
 8009326:	bf00      	nop
 8009328:	08012978 	.word	0x08012978
 800932c:	08012998 	.word	0x08012998
 8009330:	49b2      	ldr	r1, [pc, #712]	; (80095fc <mbedtls_camellia_setkey_enc+0xa20>)
 8009332:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	18ca      	adds	r2, r1, r3
 8009340:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009344:	4413      	add	r3, r2
 8009346:	3314      	adds	r3, #20
 8009348:	f993 3000 	ldrsb.w	r3, [r3]
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009350:	d01a      	beq.n	8009388 <mbedtls_camellia_setkey_enc+0x7ac>
 8009352:	49aa      	ldr	r1, [pc, #680]	; (80095fc <mbedtls_camellia_setkey_enc+0xa20>)
 8009354:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	18ca      	adds	r2, r1, r3
 8009362:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009366:	4413      	add	r3, r2
 8009368:	3314      	adds	r3, #20
 800936a:	f993 3000 	ldrsb.w	r3, [r3]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009374:	4413      	add	r3, r2
 8009376:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800937a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800937e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009382:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800938c:	3301      	adds	r3, #1
 800938e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009392:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009396:	2b13      	cmp	r3, #19
 8009398:	d9ca      	bls.n	8009330 <mbedtls_camellia_setkey_enc+0x754>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE(idx, 2);
 800939a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800939e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80093a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80093ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80093b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80093ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80093be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093c2:	609a      	str	r2, [r3, #8]
 80093c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80093c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80093cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093d0:	60da      	str	r2, [r3, #12]
 80093d2:	2301      	movs	r3, #1
 80093d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093d8:	e0a9      	b.n	800952e <mbedtls_camellia_setkey_enc+0x952>
 80093da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093de:	3b01      	subs	r3, #1
 80093e0:	4987      	ldr	r1, [pc, #540]	; (8009600 <mbedtls_camellia_setkey_enc+0xa24>)
 80093e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80093e6:	0112      	lsls	r2, r2, #4
 80093e8:	440a      	add	r2, r1
 80093ea:	4413      	add	r3, r2
 80093ec:	3308      	adds	r3, #8
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8097 	beq.w	8009524 <mbedtls_camellia_setkey_enc+0x948>
 80093f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80093fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009404:	4613      	mov	r3, r2
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	f003 031f 	and.w	r3, r3, #31
 800940e:	4099      	lsls	r1, r3
 8009410:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009414:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009418:	6858      	ldr	r0, [r3, #4]
 800941a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800941e:	4613      	mov	r3, r2
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	1a9b      	subs	r3, r3, r2
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	f1c3 0320 	rsb	r3, r3, #32
 800942c:	fa20 f203 	lsr.w	r2, r0, r3
 8009430:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	f107 0014 	add.w	r0, r7, #20
 800943a:	4403      	add	r3, r0
 800943c:	404a      	eors	r2, r1
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009444:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009448:	6859      	ldr	r1, [r3, #4]
 800944a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800944e:	4613      	mov	r3, r2
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	f003 031f 	and.w	r3, r3, #31
 8009458:	4099      	lsls	r1, r3
 800945a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800945e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009462:	6898      	ldr	r0, [r3, #8]
 8009464:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009468:	4613      	mov	r3, r2
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	f003 031f 	and.w	r3, r3, #31
 8009472:	f1c3 0320 	rsb	r3, r3, #32
 8009476:	fa20 f203 	lsr.w	r2, r0, r3
 800947a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	3304      	adds	r3, #4
 8009482:	f107 0014 	add.w	r0, r7, #20
 8009486:	4403      	add	r3, r0
 8009488:	404a      	eors	r2, r1
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009494:	6899      	ldr	r1, [r3, #8]
 8009496:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800949a:	4613      	mov	r3, r2
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	4099      	lsls	r1, r3
 80094a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80094aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094ae:	68d8      	ldr	r0, [r3, #12]
 80094b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80094b4:	4613      	mov	r3, r2
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	f003 031f 	and.w	r3, r3, #31
 80094be:	f1c3 0320 	rsb	r3, r3, #32
 80094c2:	fa20 f203 	lsr.w	r2, r0, r3
 80094c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	3308      	adds	r3, #8
 80094ce:	f107 0014 	add.w	r0, r7, #20
 80094d2:	4403      	add	r3, r0
 80094d4:	404a      	eors	r2, r1
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80094dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094e0:	68d9      	ldr	r1, [r3, #12]
 80094e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80094e6:	4613      	mov	r3, r2
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	f003 031f 	and.w	r3, r3, #31
 80094f0:	4099      	lsls	r1, r3
 80094f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80094f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009500:	4613      	mov	r3, r2
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	f1c3 0320 	rsb	r3, r3, #32
 800950e:	fa20 f203 	lsr.w	r2, r0, r3
 8009512:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	330c      	adds	r3, #12
 800951a:	f107 0014 	add.w	r0, r7, #20
 800951e:	4403      	add	r3, r0
 8009520:	404a      	eors	r2, r1
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009528:	3301      	adds	r3, #1
 800952a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800952e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009532:	2b04      	cmp	r3, #4
 8009534:	f67f af51 	bls.w	80093da <mbedtls_camellia_setkey_enc+0x7fe>
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800953e:	e030      	b.n	80095a2 <mbedtls_camellia_setkey_enc+0x9c6>
 8009540:	492e      	ldr	r1, [pc, #184]	; (80095fc <mbedtls_camellia_setkey_enc+0xa20>)
 8009542:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	18ca      	adds	r2, r1, r3
 8009550:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009554:	4413      	add	r3, r2
 8009556:	3328      	adds	r3, #40	; 0x28
 8009558:	f993 3000 	ldrsb.w	r3, [r3]
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009560:	d01a      	beq.n	8009598 <mbedtls_camellia_setkey_enc+0x9bc>
 8009562:	4926      	ldr	r1, [pc, #152]	; (80095fc <mbedtls_camellia_setkey_enc+0xa20>)
 8009564:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	18ca      	adds	r2, r1, r3
 8009572:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009576:	4413      	add	r3, r2
 8009578:	3328      	adds	r3, #40	; 0x28
 800957a:	f993 3000 	ldrsb.w	r3, [r3]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009584:	4413      	add	r3, r2
 8009586:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800958a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800958e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009592:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800959c:	3301      	adds	r3, #1
 800959e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80095a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80095a6:	2b13      	cmp	r3, #19
 80095a8:	d9ca      	bls.n	8009540 <mbedtls_camellia_setkey_enc+0x964>

    /* Manipulating KB */
    if (keybits > 128) {
 80095aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b80      	cmp	r3, #128	; 0x80
 80095b6:	f240 810d 	bls.w	80097d4 <mbedtls_camellia_setkey_enc+0xbf8>
        SHIFT_AND_PLACE(idx, 3);
 80095ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095d4:	605a      	str	r2, [r3, #4]
 80095d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80095da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80095e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095f0:	60da      	str	r2, [r3, #12]
 80095f2:	2301      	movs	r3, #1
 80095f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80095f8:	e0ae      	b.n	8009758 <mbedtls_camellia_setkey_enc+0xb7c>
 80095fa:	bf00      	nop
 80095fc:	08012998 	.word	0x08012998
 8009600:	08012978 	.word	0x08012978
 8009604:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009608:	3b01      	subs	r3, #1
 800960a:	4995      	ldr	r1, [pc, #596]	; (8009860 <mbedtls_camellia_setkey_enc+0xc84>)
 800960c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009610:	0112      	lsls	r2, r2, #4
 8009612:	440a      	add	r2, r1
 8009614:	4413      	add	r3, r2
 8009616:	330c      	adds	r3, #12
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8097 	beq.w	800974e <mbedtls_camellia_setkey_enc+0xb72>
 8009620:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009624:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800962e:	4613      	mov	r3, r2
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	f003 031f 	and.w	r3, r3, #31
 8009638:	4099      	lsls	r1, r3
 800963a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800963e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009642:	6858      	ldr	r0, [r3, #4]
 8009644:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009648:	4613      	mov	r3, r2
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	f1c3 0320 	rsb	r3, r3, #32
 8009656:	fa20 f203 	lsr.w	r2, r0, r3
 800965a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	f107 0014 	add.w	r0, r7, #20
 8009664:	4403      	add	r3, r0
 8009666:	404a      	eors	r2, r1
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800966e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009672:	6859      	ldr	r1, [r3, #4]
 8009674:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009678:	4613      	mov	r3, r2
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	4099      	lsls	r1, r3
 8009684:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009688:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800968c:	6898      	ldr	r0, [r3, #8]
 800968e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009692:	4613      	mov	r3, r2
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	f003 031f 	and.w	r3, r3, #31
 800969c:	f1c3 0320 	rsb	r3, r3, #32
 80096a0:	fa20 f203 	lsr.w	r2, r0, r3
 80096a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	3304      	adds	r3, #4
 80096ac:	f107 0014 	add.w	r0, r7, #20
 80096b0:	4403      	add	r3, r0
 80096b2:	404a      	eors	r2, r1
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80096ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096be:	6899      	ldr	r1, [r3, #8]
 80096c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80096c4:	4613      	mov	r3, r2
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	1a9b      	subs	r3, r3, r2
 80096ca:	f003 031f 	and.w	r3, r3, #31
 80096ce:	4099      	lsls	r1, r3
 80096d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80096d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096d8:	68d8      	ldr	r0, [r3, #12]
 80096da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80096de:	4613      	mov	r3, r2
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	f003 031f 	and.w	r3, r3, #31
 80096e8:	f1c3 0320 	rsb	r3, r3, #32
 80096ec:	fa20 f203 	lsr.w	r2, r0, r3
 80096f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	3308      	adds	r3, #8
 80096f8:	f107 0014 	add.w	r0, r7, #20
 80096fc:	4403      	add	r3, r0
 80096fe:	404a      	eors	r2, r1
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009706:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800970a:	68d9      	ldr	r1, [r3, #12]
 800970c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009710:	4613      	mov	r3, r2
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	4099      	lsls	r1, r3
 800971c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800972a:	4613      	mov	r3, r2
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	f1c3 0320 	rsb	r3, r3, #32
 8009738:	fa20 f203 	lsr.w	r2, r0, r3
 800973c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	330c      	adds	r3, #12
 8009744:	f107 0014 	add.w	r0, r7, #20
 8009748:	4403      	add	r3, r0
 800974a:	404a      	eors	r2, r1
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009752:	3301      	adds	r3, #1
 8009754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009758:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800975c:	2b04      	cmp	r3, #4
 800975e:	f67f af51 	bls.w	8009604 <mbedtls_camellia_setkey_enc+0xa28>
 8009762:	2300      	movs	r3, #0
 8009764:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009768:	e030      	b.n	80097cc <mbedtls_camellia_setkey_enc+0xbf0>
 800976a:	493e      	ldr	r1, [pc, #248]	; (8009864 <mbedtls_camellia_setkey_enc+0xc88>)
 800976c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	18ca      	adds	r2, r1, r3
 800977a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800977e:	4413      	add	r3, r2
 8009780:	333c      	adds	r3, #60	; 0x3c
 8009782:	f993 3000 	ldrsb.w	r3, [r3]
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978a:	d01a      	beq.n	80097c2 <mbedtls_camellia_setkey_enc+0xbe6>
 800978c:	4935      	ldr	r1, [pc, #212]	; (8009864 <mbedtls_camellia_setkey_enc+0xc88>)
 800978e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	18ca      	adds	r2, r1, r3
 800979c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097a0:	4413      	add	r3, r2
 80097a2:	333c      	adds	r3, #60	; 0x3c
 80097a4:	f993 3000 	ldrsb.w	r3, [r3]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80097ae:	4413      	add	r3, r2
 80097b0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80097b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80097b8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80097bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097c6:	3301      	adds	r3, #1
 80097c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097d0:	2b13      	cmp	r3, #19
 80097d2:	d9ca      	bls.n	800976a <mbedtls_camellia_setkey_enc+0xb8e>
    }

    /* Do transpositions */
    for (i = 0; i < 20; i++) {
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097da:	e036      	b.n	800984a <mbedtls_camellia_setkey_enc+0xc6e>
        if (transposes[idx][i] != -1) {
 80097dc:	4922      	ldr	r1, [pc, #136]	; (8009868 <mbedtls_camellia_setkey_enc+0xc8c>)
 80097de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	18ca      	adds	r2, r1, r3
 80097ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097f0:	4413      	add	r3, r2
 80097f2:	f993 3000 	ldrsb.w	r3, [r3]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d021      	beq.n	8009840 <mbedtls_camellia_setkey_enc+0xc64>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 80097fc:	491a      	ldr	r1, [pc, #104]	; (8009868 <mbedtls_camellia_setkey_enc+0xc8c>)
 80097fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	18ca      	adds	r2, r1, r3
 800980c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009810:	4413      	add	r3, r2
 8009812:	f993 3000 	ldrsb.w	r3, [r3]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800981c:	18d1      	adds	r1, r2, r3
 800981e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009822:	4613      	mov	r3, r2
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	461a      	mov	r2, r3
 800982c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009830:	4413      	add	r3, r2
 8009832:	3320      	adds	r3, #32
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800983a:	4413      	add	r3, r2
 800983c:	680a      	ldr	r2, [r1, #0]
 800983e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20; i++) {
 8009840:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009844:	3301      	adds	r3, #1
 8009846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800984a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800984e:	2b13      	cmp	r3, #19
 8009850:	d9c4      	bls.n	80097dc <mbedtls_camellia_setkey_enc+0xc00>
        }
    }

    return 0;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	08012978 	.word	0x08012978
 8009864:	08012998 	.word	0x08012998
 8009868:	08012a38 	.word	0x08012a38

0800986c <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b0ce      	sub	sp, #312	; 0x138
 8009870:	af00      	add	r7, sp, #0
 8009872:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800987a:	6018      	str	r0, [r3, #0]
 800987c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009884:	6019      	str	r1, [r3, #0]
 8009886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800988a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800988e:	601a      	str	r2, [r3, #0]
    size_t i;
    mbedtls_camellia_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_camellia_init(&cty);
 8009890:	f107 0310 	add.w	r3, r7, #16
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff f981 	bl	8008b9c <mbedtls_camellia_init>

    /* Also checks keybits */
    if ((ret = mbedtls_camellia_setkey_enc(&cty, key, keybits)) != 0) {
 800989a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800989e:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80098a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098aa:	f107 0010 	add.w	r0, r7, #16
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	f7ff f993 	bl	8008bdc <mbedtls_camellia_setkey_enc>
 80098b6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80098ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f040 80c3 	bne.w	8009a4a <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;
    }

    ctx->nr = cty.nr;
 80098c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	601a      	str	r2, [r3, #0]
    idx = (ctx->nr == 4);
 80098da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	bf0c      	ite	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	2300      	movne	r3, #0
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 80098f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3304      	adds	r3, #4
 8009900:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8009904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	3318      	adds	r3, #24
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	f107 0210 	add.w	r2, r7, #16
 8009912:	3204      	adds	r2, #4
 8009914:	4413      	add	r3, r2
 8009916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 800991a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800991e:	1d13      	adds	r3, r2, #4
 8009920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009928:	1d19      	adds	r1, r3, #4
 800992a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800992e:	6812      	ldr	r2, [r2, #0]
 8009930:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009932:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009936:	1d13      	adds	r3, r2, #4
 8009938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800993c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009940:	1d19      	adds	r1, r3, #4
 8009942:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800994a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800994e:	1d13      	adds	r3, r2, #4
 8009950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009958:	1d19      	adds	r1, r3, #4
 800995a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800995e:	6812      	ldr	r2, [r2, #0]
 8009960:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009962:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009966:	1d13      	adds	r3, r2, #4
 8009968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800996c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	601a      	str	r2, [r3, #0]

    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 800997a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	3316      	adds	r3, #22
 8009982:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998a:	3b18      	subs	r3, #24
 800998c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009990:	e021      	b.n	80099d6 <mbedtls_camellia_setkey_dec+0x16a>
        *RK++ = *SK++;
 8009992:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009996:	1d13      	adds	r3, r2, #4
 8009998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800999c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099a0:	1d19      	adds	r1, r3, #4
 80099a2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 80099aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80099ae:	1d13      	adds	r3, r2, #4
 80099b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80099b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099b8:	1d19      	adds	r1, r3, #4
 80099ba:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	601a      	str	r2, [r3, #0]
    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 80099c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099c6:	3b01      	subs	r3, #1
 80099c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80099cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d0:	3b10      	subs	r3, #16
 80099d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80099d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1d9      	bne.n	8009992 <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	3b08      	subs	r3, #8
 80099e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 80099e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80099ec:	1d13      	adds	r3, r2, #4
 80099ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80099f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099f6:	1d19      	adds	r1, r3, #4
 80099f8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009a00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009a04:	1d13      	adds	r3, r2, #4
 8009a06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a0e:	1d19      	adds	r1, r3, #4
 8009a10:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009a18:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009a1c:	1d13      	adds	r3, r2, #4
 8009a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a26:	1d19      	adds	r1, r3, #4
 8009a28:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009a30:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009a34:	1d13      	adds	r3, r2, #4
 8009a36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a3e:	1d19      	adds	r1, r3, #4
 8009a40:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	e000      	b.n	8009a4c <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 8009a4a:	bf00      	nop

exit:
    mbedtls_camellia_free(&cty);
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff f8b1 	bl	8008bb8 <mbedtls_camellia_free>

    return ret;
 8009a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb(mbedtls_camellia_context *ctx,
                               int mode,
                               const unsigned char input[16],
                               unsigned char output[16])
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08a      	sub	sp, #40	; 0x28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
    int NR;
    uint32_t *RK, X[4];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d005      	beq.n	8009a84 <mbedtls_camellia_crypt_ecb+0x20>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <mbedtls_camellia_crypt_ecb+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8009a7e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009a82:	e0f6      	b.n	8009c72 <mbedtls_camellia_crypt_ecb+0x20e>
    }

    ((void) mode);

    NR = ctx->nr;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
    RK = ctx->rk;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	623b      	str	r3, [r7, #32]

    X[0] = MBEDTLS_GET_UINT32_BE(input,  0);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f004 fc4b 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8009a96:	4603      	mov	r3, r0
 8009a98:	ba1b      	rev	r3, r3
 8009a9a:	613b      	str	r3, [r7, #16]
    X[1] = MBEDTLS_GET_UINT32_BE(input,  4);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f004 fc43 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	ba1b      	rev	r3, r3
 8009aaa:	617b      	str	r3, [r7, #20]
    X[2] = MBEDTLS_GET_UINT32_BE(input,  8);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f004 fc3b 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	ba1b      	rev	r3, r3
 8009aba:	61bb      	str	r3, [r7, #24]
    X[3] = MBEDTLS_GET_UINT32_BE(input, 12);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f004 fc33 	bl	800e32c <mbedtls_get_unaligned_uint32>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	ba1b      	rev	r3, r3
 8009aca:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	623a      	str	r2, [r7, #32]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	4053      	eors	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	623a      	str	r2, [r7, #32]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	4053      	eors	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	1d1a      	adds	r2, r3, #4
 8009aec:	623a      	str	r2, [r7, #32]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	4053      	eors	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	623a      	str	r2, [r7, #32]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	4053      	eors	r3, r2
 8009b02:	61fb      	str	r3, [r7, #28]

    while (NR) {
 8009b04:	e075      	b.n	8009bf2 <mbedtls_camellia_crypt_ecb+0x18e>
        --NR;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
        camellia_feistel(X, RK, X + 2);
 8009b0c:	f107 0310 	add.w	r3, r7, #16
 8009b10:	3308      	adds	r3, #8
 8009b12:	f107 0010 	add.w	r0, r7, #16
 8009b16:	461a      	mov	r2, r3
 8009b18:	6a39      	ldr	r1, [r7, #32]
 8009b1a:	f7fe ffbb 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	3308      	adds	r3, #8
 8009b22:	623b      	str	r3, [r7, #32]
        camellia_feistel(X + 2, RK, X);
 8009b24:	f107 0310 	add.w	r3, r7, #16
 8009b28:	3308      	adds	r3, #8
 8009b2a:	f107 0210 	add.w	r2, r7, #16
 8009b2e:	6a39      	ldr	r1, [r7, #32]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe ffaf 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	623b      	str	r3, [r7, #32]
        camellia_feistel(X, RK, X + 2);
 8009b3c:	f107 0310 	add.w	r3, r7, #16
 8009b40:	3308      	adds	r3, #8
 8009b42:	f107 0010 	add.w	r0, r7, #16
 8009b46:	461a      	mov	r2, r3
 8009b48:	6a39      	ldr	r1, [r7, #32]
 8009b4a:	f7fe ffa3 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	3308      	adds	r3, #8
 8009b52:	623b      	str	r3, [r7, #32]
        camellia_feistel(X + 2, RK, X);
 8009b54:	f107 0310 	add.w	r3, r7, #16
 8009b58:	3308      	adds	r3, #8
 8009b5a:	f107 0210 	add.w	r2, r7, #16
 8009b5e:	6a39      	ldr	r1, [r7, #32]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe ff97 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	623b      	str	r3, [r7, #32]
        camellia_feistel(X, RK, X + 2);
 8009b6c:	f107 0310 	add.w	r3, r7, #16
 8009b70:	3308      	adds	r3, #8
 8009b72:	f107 0010 	add.w	r0, r7, #16
 8009b76:	461a      	mov	r2, r3
 8009b78:	6a39      	ldr	r1, [r7, #32]
 8009b7a:	f7fe ff8b 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	3308      	adds	r3, #8
 8009b82:	623b      	str	r3, [r7, #32]
        camellia_feistel(X + 2, RK, X);
 8009b84:	f107 0310 	add.w	r3, r7, #16
 8009b88:	3308      	adds	r3, #8
 8009b8a:	f107 0210 	add.w	r2, r7, #16
 8009b8e:	6a39      	ldr	r1, [r7, #32]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe ff7f 	bl	8008a94 <camellia_feistel>
        RK += 2;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	623b      	str	r3, [r7, #32]

        if (NR) {
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d027      	beq.n	8009bf2 <mbedtls_camellia_crypt_ecb+0x18e>
            FL(X[0], X[1], RK[0], RK[1]);
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	4053      	eors	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4053      	eors	r3, r2
 8009bc2:	613b      	str	r3, [r7, #16]
            RK += 2;
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	4053      	eors	r3, r2
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4013      	ands	r3, r2
 8009be2:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4053      	eors	r3, r2
 8009bea:	61fb      	str	r3, [r7, #28]
            RK += 2;
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	623b      	str	r3, [r7, #32]
    while (NR) {
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d186      	bne.n	8009b06 <mbedtls_camellia_crypt_ecb+0xa2>
        }
    }

    X[2] ^= *RK++;
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	1d1a      	adds	r2, r3, #4
 8009bfc:	623a      	str	r2, [r7, #32]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	4053      	eors	r3, r2
 8009c04:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	1d1a      	adds	r2, r3, #4
 8009c0a:	623a      	str	r2, [r7, #32]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4053      	eors	r3, r2
 8009c12:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	1d1a      	adds	r2, r3, #4
 8009c18:	623a      	str	r2, [r7, #32]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4053      	eors	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	1d1a      	adds	r2, r3, #4
 8009c26:	623a      	str	r2, [r7, #32]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	4053      	eors	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]

    MBEDTLS_PUT_UINT32_BE(X[2], output,  0);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	ba1b      	rev	r3, r3
 8009c34:	4619      	mov	r1, r3
 8009c36:	6838      	ldr	r0, [r7, #0]
 8009c38:	f004 fb86 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(X[3], output,  4);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	ba1b      	rev	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	f004 fb7e 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(X[0], output,  8);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f103 0208 	add.w	r2, r3, #8
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	ba1b      	rev	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f004 fb75 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(X[1], output, 12);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	f103 020c 	add.w	r2, r3, #12
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	ba1b      	rev	r3, r3
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f004 fb6c 	bl	800e348 <mbedtls_put_unaligned_uint32>

    return 0;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3728      	adds	r7, #40	; 0x28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <mbedtls_camellia_crypt_cbc>:
                               int mode,
                               size_t length,
                               unsigned char iv[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 8009c7a:	b5b0      	push	{r4, r5, r7, lr}
 8009c7c:	b088      	sub	sp, #32
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	603b      	str	r3, [r7, #0]
    unsigned char temp[16];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d005      	beq.n	8009c9a <mbedtls_camellia_crypt_cbc+0x20>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <mbedtls_camellia_crypt_cbc+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8009c94:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009c98:	e053      	b.n	8009d42 <mbedtls_camellia_crypt_cbc+0xc8>
    }

    if (length % 16) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <mbedtls_camellia_crypt_cbc+0x30>
        return MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH;
 8009ca4:	f06f 0325 	mvn.w	r3, #37	; 0x25
 8009ca8:	e04b      	b.n	8009d42 <mbedtls_camellia_crypt_cbc+0xc8>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d144      	bne.n	8009d3a <mbedtls_camellia_crypt_cbc+0xc0>
        while (length > 0) {
 8009cb0:	e025      	b.n	8009cfe <mbedtls_camellia_crypt_cbc+0x84>
            memcpy(temp, input, 16);
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	f107 0410 	add.w	r4, r7, #16
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	6859      	ldr	r1, [r3, #4]
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb(ctx, mode, input, output);
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cc6:	68b9      	ldr	r1, [r7, #8]
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff fecb 	bl	8009a64 <mbedtls_camellia_crypt_ecb>

            mbedtls_xor(output, output, iv, 16);
 8009cce:	2310      	movs	r3, #16
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009cd6:	f004 fb67 	bl	800e3a8 <mbedtls_xor>

            memcpy(iv, temp, 16);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	461d      	mov	r5, r3
 8009cde:	f107 0410 	add.w	r4, r7, #16
 8009ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ce4:	6028      	str	r0, [r5, #0]
 8009ce6:	6069      	str	r1, [r5, #4]
 8009ce8:	60aa      	str	r2, [r5, #8]
 8009cea:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	3310      	adds	r3, #16
 8009cf0:	633b      	str	r3, [r7, #48]	; 0x30
            output += 16;
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf4:	3310      	adds	r3, #16
 8009cf6:	637b      	str	r3, [r7, #52]	; 0x34
            length -= 16;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3b10      	subs	r3, #16
 8009cfc:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1d6      	bne.n	8009cb2 <mbedtls_camellia_crypt_cbc+0x38>
 8009d04:	e01c      	b.n	8009d40 <mbedtls_camellia_crypt_cbc+0xc6>
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, 16);
 8009d06:	2310      	movs	r3, #16
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d0e:	f004 fb4b 	bl	800e3a8 <mbedtls_xor>

            mbedtls_camellia_crypt_ecb(ctx, mode, output, output);
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fea3 	bl	8009a64 <mbedtls_camellia_crypt_ecb>
            memcpy(iv, output, 16);
 8009d1e:	2210      	movs	r2, #16
 8009d20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d22:	6838      	ldr	r0, [r7, #0]
 8009d24:	f007 f99e 	bl	8011064 <memcpy>

            input  += 16;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	3310      	adds	r3, #16
 8009d2c:	633b      	str	r3, [r7, #48]	; 0x30
            output += 16;
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	3310      	adds	r3, #16
 8009d32:	637b      	str	r3, [r7, #52]	; 0x34
            length -= 16;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3b10      	subs	r3, #16
 8009d38:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e2      	bne.n	8009d06 <mbedtls_camellia_crypt_cbc+0x8c>
        }
    }

    return 0;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3720      	adds	r7, #32
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bdb0      	pop	{r4, r5, r7, pc}

08009d4a <mbedtls_camellia_crypt_cfb128>:
                                  size_t length,
                                  size_t *iv_off,
                                  unsigned char iv[16],
                                  const unsigned char *input,
                                  unsigned char *output)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	603b      	str	r3, [r7, #0]
    int c;
    size_t n;
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d005      	beq.n	8009d6a <mbedtls_camellia_crypt_cfb128+0x20>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <mbedtls_camellia_crypt_cfb128+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8009d64:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009d68:	e063      	b.n	8009e32 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    n = *iv_off;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	617b      	str	r3, [r7, #20]
    if (n >= 16) {
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b0f      	cmp	r3, #15
 8009d74:	d902      	bls.n	8009d7c <mbedtls_camellia_crypt_cfb128+0x32>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8009d76:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009d7a:	e05a      	b.n	8009e32 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d14e      	bne.n	8009e20 <mbedtls_camellia_crypt_cfb128+0xd6>
        while (length--) {
 8009d82:	e026      	b.n	8009dd2 <mbedtls_camellia_crypt_cfb128+0x88>
            if (n == 0) {
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <mbedtls_camellia_crypt_cfb128+0x4c>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	6a3a      	ldr	r2, [r7, #32]
 8009d8e:	2101      	movs	r1, #1
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7ff fe67 	bl	8009a64 <mbedtls_camellia_crypt_ecb>
            }

            c = *input++;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char) (c ^ iv[n]);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	b25a      	sxtb	r2, r3
 8009da4:	6a39      	ldr	r1, [r7, #32]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	440b      	add	r3, r1
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	b25b      	sxtb	r3, r3
 8009dae:	4053      	eors	r3, r2
 8009db0:	b259      	sxtb	r1, r3
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	62ba      	str	r2, [r7, #40]	; 0x28
 8009db8:	b2ca      	uxtb	r2, r1
 8009dba:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8009dbc:	6a3a      	ldr	r2, [r7, #32]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	617b      	str	r3, [r7, #20]
        while (length--) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	1e5a      	subs	r2, r3, #1
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1d3      	bne.n	8009d84 <mbedtls_camellia_crypt_cfb128+0x3a>
 8009ddc:	e025      	b.n	8009e2a <mbedtls_camellia_crypt_cfb128+0xe0>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d105      	bne.n	8009df0 <mbedtls_camellia_crypt_cfb128+0xa6>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	6a3a      	ldr	r2, [r7, #32]
 8009de8:	2101      	movs	r1, #1
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fe3a 	bl	8009a64 <mbedtls_camellia_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8009df0:	6a3a      	ldr	r2, [r7, #32]
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	4413      	add	r3, r2
 8009df6:	7819      	ldrb	r1, [r3, #0]
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	1c58      	adds	r0, r3, #1
 8009e04:	62b8      	str	r0, [r7, #40]	; 0x28
 8009e06:	404a      	eors	r2, r1
 8009e08:	b2d2      	uxtb	r2, r2
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	6a39      	ldr	r1, [r7, #32]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	440a      	add	r2, r1
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	f003 030f 	and.w	r3, r3, #15
 8009e1e:	617b      	str	r3, [r7, #20]
        while (length--) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	1e5a      	subs	r2, r3, #1
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1d9      	bne.n	8009dde <mbedtls_camellia_crypt_cfb128+0x94>
        }
    }

    *iv_off = n;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	601a      	str	r2, [r3, #0]

    return 0;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <mbedtls_camellia_crypt_ctr>:
                               size_t *nc_off,
                               unsigned char nonce_counter[16],
                               unsigned char stream_block[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b088      	sub	sp, #32
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	61bb      	str	r3, [r7, #24]
    if (n >= 16) {
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b0f      	cmp	r3, #15
 8009e52:	d939      	bls.n	8009ec8 <mbedtls_camellia_crypt_ctr+0x8e>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8009e54:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009e58:	e03f      	b.n	8009eda <mbedtls_camellia_crypt_ctr+0xa0>
    }

    while (length--) {
        if (n == 0) {
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11b      	bne.n	8009e98 <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	2101      	movs	r1, #1
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7ff fdfc 	bl	8009a64 <mbedtls_camellia_crypt_ecb>
                                       stream_block);

            for (i = 16; i > 0; i--) {
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	e00d      	b.n	8009e8e <mbedtls_camellia_crypt_ctr+0x54>
                if (++nonce_counter[i - 1] != 0) {
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4413      	add	r3, r2
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	3201      	adds	r2, #1
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <mbedtls_camellia_crypt_ctr+0x5c>
            for (i = 16; i > 0; i--) {
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dcee      	bgt.n	8009e72 <mbedtls_camellia_crypt_ctr+0x38>
 8009e94:	e000      	b.n	8009e98 <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 8009e96:	bf00      	nop
                }
            }
        }
        c = *input++;
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	b25a      	sxtb	r2, r3
 8009ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	440b      	add	r3, r1
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	4053      	eors	r3, r2
 8009eb2:	b259      	sxtb	r1, r3
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	633a      	str	r2, [r7, #48]	; 0x30
 8009eba:	b2ca      	uxtb	r2, r1
 8009ebc:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	61bb      	str	r3, [r7, #24]
    while (length--) {
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	1e5a      	subs	r2, r3, #1
 8009ecc:	60ba      	str	r2, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1c3      	bne.n	8009e5a <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	601a      	str	r2, [r3, #0]

    return 0;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init(mbedtls_ccm_context *ctx)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ccm_context));
 8009eea:	227c      	movs	r2, #124	; 0x7c
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f007 f8c6 	bl	8011080 <memset>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey(mbedtls_ccm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8009f0c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009f10:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	2201      	movs	r2, #1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fd63 	bl	800a9e4 <mbedtls_cipher_info_from_values>
 8009f1e:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <mbedtls_ccm_setkey+0x30>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8009f26:	f06f 030c 	mvn.w	r3, #12
 8009f2a:	e026      	b.n	8009f7a <mbedtls_ccm_setkey+0x7e>
    }

    if (cipher_info->block_size != 16) {
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	2b10      	cmp	r3, #16
 8009f32:	d002      	beq.n	8009f3a <mbedtls_ccm_setkey+0x3e>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8009f34:	f06f 030c 	mvn.w	r3, #12
 8009f38:	e01f      	b.n	8009f7a <mbedtls_ccm_setkey+0x7e>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3320      	adds	r3, #32
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fd82 	bl	800aa48 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3320      	adds	r3, #32
 8009f48:	6939      	ldr	r1, [r7, #16]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fda8 	bl	800aaa0 <mbedtls_cipher_setup>
 8009f50:	6178      	str	r0, [r7, #20]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <mbedtls_ccm_setkey+0x60>
        return ret;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	e00e      	b.n	8009f7a <mbedtls_ccm_setkey+0x7e>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f103 0020 	add.w	r0, r3, #32
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	2301      	movs	r3, #1
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	f000 fdc6 	bl	800aaf8 <mbedtls_cipher_setkey>
 8009f6c:	6178      	str	r0, [r7, #20]
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <mbedtls_ccm_setkey+0x7c>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	e000      	b.n	8009f7a <mbedtls_ccm_setkey+0x7e>
    }

    return 0;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free(mbedtls_ccm_context *ctx)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d009      	beq.n	8009fa4 <mbedtls_ccm_free+0x22>
        return;
    }
    mbedtls_cipher_free(&ctx->cipher_ctx);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3320      	adds	r3, #32
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fd57 	bl	800aa48 <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ccm_context));
 8009f9a:	217c      	movs	r1, #124	; 0x7c
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f004 fa47 	bl	800e430 <mbedtls_platform_zeroize>
 8009fa2:	e000      	b.n	8009fa6 <mbedtls_ccm_free+0x24>
        return;
 8009fa4:	bf00      	nop
}
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <mbedtls_ccm_crypt>:
 */
static int mbedtls_ccm_crypt(mbedtls_ccm_context *ctx,
                             size_t offset, size_t use_len,
                             const unsigned char *input,
                             unsigned char *output)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08c      	sub	sp, #48	; 0x30
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
    size_t olen = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	623b      	str	r3, [r7, #32]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8009fbe:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char tmp_buf[16] = { 0 };
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	2200      	movs	r2, #0
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	605a      	str	r2, [r3, #4]
 8009fd2:	609a      	str	r2, [r3, #8]

    if ((ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->ctr, 16, tmp_buf,
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f103 0020 	add.w	r0, r3, #32
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f103 0110 	add.w	r1, r3, #16
 8009fe0:	f107 0210 	add.w	r2, r7, #16
 8009fe4:	f107 0320 	add.w	r3, r7, #32
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	4613      	mov	r3, r2
 8009fec:	2210      	movs	r2, #16
 8009fee:	f000 fde7 	bl	800abc0 <mbedtls_cipher_update>
 8009ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00d      	beq.n	800a016 <mbedtls_ccm_crypt+0x6a>
                                     &olen)) != 0) {
        ctx->state |= CCM_STATE__ERROR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ffe:	f043 0210 	orr.w	r2, r3, #16
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	679a      	str	r2, [r3, #120]	; 0x78
        mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 800a006:	f107 0310 	add.w	r3, r7, #16
 800a00a:	2110      	movs	r1, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	f004 fa0f 	bl	800e430 <mbedtls_platform_zeroize>
        return ret;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	e00f      	b.n	800a036 <mbedtls_ccm_crypt+0x8a>
    }

    mbedtls_xor(output, input, tmp_buf + offset, use_len);
 800a016:	f107 0210 	add.w	r2, r7, #16
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	441a      	add	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a024:	f004 f9c0 	bl	800e3a8 <mbedtls_xor>

    mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 800a028:	f107 0310 	add.w	r3, r7, #16
 800a02c:	2110      	movs	r1, #16
 800a02e:	4618      	mov	r0, r3
 800a030:	f004 f9fe 	bl	800e430 <mbedtls_platform_zeroize>
    return ret;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a036:	4618      	mov	r0, r3
 800a038:	3728      	adds	r7, #40	; 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <mbedtls_ccm_update>:

int mbedtls_ccm_update(mbedtls_ccm_context *ctx,
                       const unsigned char *input, size_t input_len,
                       unsigned char *output, size_t output_size,
                       size_t *output_len)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b090      	sub	sp, #64	; 0x40
 800a042:	af02      	add	r7, sp, #8
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a04c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned char i;
    size_t use_len, offset, olen;

    unsigned char local_output[16];

    if (ctx->state & CCM_STATE__ERROR) {
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a056:	f003 0310 	and.w	r3, r3, #16
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <mbedtls_ccm_update+0x26>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 800a05e:	f06f 030c 	mvn.w	r3, #12
 800a062:	e10d      	b.n	800a280 <mbedtls_ccm_update+0x242>
    }

    /* Check against plaintext length only if performing operation with
     * authentication
     */
    if (ctx->tag_len != 0 && ctx->processed + input_len > ctx->plaintext_len) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <mbedtls_ccm_update+0x44>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	441a      	add	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a078:	429a      	cmp	r2, r3
 800a07a:	d902      	bls.n	800a082 <mbedtls_ccm_update+0x44>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 800a07c:	f06f 030c 	mvn.w	r3, #12
 800a080:	e0fe      	b.n	800a280 <mbedtls_ccm_update+0x242>
    }

    if (output_size < input_len) {
 800a082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d202      	bcs.n	800a090 <mbedtls_ccm_update+0x52>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 800a08a:	f06f 030c 	mvn.w	r3, #12
 800a08e:	e0f7      	b.n	800a280 <mbedtls_ccm_update+0x242>
    }
    *output_len = input_len;
 800a090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]

    ret = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	637b      	str	r3, [r7, #52]	; 0x34

    while (input_len > 0) {
 800a09a:	e0e2      	b.n	800a262 <mbedtls_ccm_update+0x224>
        offset = ctx->processed % 16;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a0:	f003 030f 	and.w	r3, r3, #15
 800a0a4:	62bb      	str	r3, [r7, #40]	; 0x28

        use_len = 16 - offset;
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	f1c3 0310 	rsb	r3, r3, #16
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (use_len > input_len) {
 800a0ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d901      	bls.n	800a0ba <mbedtls_ccm_update+0x7c>
            use_len = input_len;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        ctx->processed += use_len;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d004      	beq.n	800a0da <mbedtls_ccm_update+0x9c>
            ctx->mode == MBEDTLS_CCM_STAR_ENCRYPT) {
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d138      	bne.n	800a14c <mbedtls_ccm_update+0x10e>
            mbedtls_xor(ctx->y + offset, ctx->y + offset, input, use_len);
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	18d0      	adds	r0, r2, r3
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	18d1      	adds	r1, r2, r3
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	f004 f95d 	bl	800e3a8 <mbedtls_xor>

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 800a0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	4413      	add	r3, r2
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d005      	beq.n	800a104 <mbedtls_ccm_update+0xc6>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a100:	429a      	cmp	r2, r3
 800a102:	d116      	bne.n	800a132 <mbedtls_ccm_update+0xf4>
                if ((ret =
                         mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen)) != 0) {
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f103 0020 	add.w	r0, r3, #32
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	4613      	mov	r3, r2
 800a116:	2210      	movs	r2, #16
 800a118:	f000 fd52 	bl	800abc0 <mbedtls_cipher_update>
 800a11c:	6378      	str	r0, [r7, #52]	; 0x34
                if ((ret =
 800a11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a120:	2b00      	cmp	r3, #0
 800a122:	d006      	beq.n	800a132 <mbedtls_ccm_update+0xf4>
                    ctx->state |= CCM_STATE__ERROR;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a128:	f043 0210 	orr.w	r2, r3, #16
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	679a      	str	r2, [r3, #120]	; 0x78
                    goto exit;
 800a130:	e09f      	b.n	800a272 <mbedtls_ccm_update+0x234>
                }
            }

            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, output);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff ff35 	bl	8009fac <mbedtls_ccm_crypt>
 800a142:	6378      	str	r0, [r7, #52]	; 0x34
            if (ret != 0) {
 800a144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8090 	bne.w	800a26c <mbedtls_ccm_update+0x22e>
                goto exit;
            }
        }

        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <mbedtls_ccm_update+0x122>
            ctx->mode == MBEDTLS_CCM_STAR_DECRYPT) {
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d146      	bne.n	800a1ee <mbedtls_ccm_update+0x1b0>
             * it will contain what we wrote to it. Therefore, we should avoid using
             * it as input to any operations.
             * Write decrypted data to local_output to avoid using output variable as
             * input in the XOR operation for Y.
             */
            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, local_output);
 800a160:	f107 0314 	add.w	r3, r7, #20
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a16a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff ff1d 	bl	8009fac <mbedtls_ccm_crypt>
 800a172:	6378      	str	r0, [r7, #52]	; 0x34
            if (ret != 0) {
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	2b00      	cmp	r3, #0
 800a178:	d17a      	bne.n	800a270 <mbedtls_ccm_update+0x232>
                goto exit;
            }

            mbedtls_xor(ctx->y + offset, ctx->y + offset, local_output, use_len);
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	18d0      	adds	r0, r2, r3
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	18d1      	adds	r1, r2, r3
 800a186:	f107 0214 	add.w	r2, r7, #20
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	f004 f90c 	bl	800e3a8 <mbedtls_xor>

            memcpy(output, local_output, use_len);
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a196:	4619      	mov	r1, r3
 800a198:	6838      	ldr	r0, [r7, #0]
 800a19a:	f006 ff63 	bl	8011064 <memcpy>
            mbedtls_platform_zeroize(local_output, 16);
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	2110      	movs	r1, #16
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f004 f943 	bl	800e430 <mbedtls_platform_zeroize>

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 800a1aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	4413      	add	r3, r2
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d005      	beq.n	800a1c0 <mbedtls_ccm_update+0x182>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d116      	bne.n	800a1ee <mbedtls_ccm_update+0x1b0>
                if ((ret =
                         mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen)) != 0) {
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f103 0020 	add.w	r0, r3, #32
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	2210      	movs	r2, #16
 800a1d4:	f000 fcf4 	bl	800abc0 <mbedtls_cipher_update>
 800a1d8:	6378      	str	r0, [r7, #52]	; 0x34
                if ((ret =
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <mbedtls_ccm_update+0x1b0>
                    ctx->state |= CCM_STATE__ERROR;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1e4:	f043 0210 	orr.w	r2, r3, #16
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	679a      	str	r2, [r3, #120]	; 0x78
                    goto exit;
 800a1ec:	e041      	b.n	800a272 <mbedtls_ccm_update+0x234>
                }
            }
        }

        if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 800a1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	4413      	add	r3, r2
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d005      	beq.n	800a204 <mbedtls_ccm_update+0x1c6>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a200:	429a      	cmp	r2, r3
 800a202:	d122      	bne.n	800a24a <mbedtls_ccm_update+0x20c>
            for (i = 0; i < ctx->q; i++) {
 800a204:	2300      	movs	r3, #0
 800a206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20a:	e015      	b.n	800a238 <mbedtls_ccm_update+0x1fa>
                if (++(ctx->ctr)[15-i] != 0) {
 800a20c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a210:	f1c3 030f 	rsb	r3, r3, #15
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	441a      	add	r2, r3
 800a218:	7c12      	ldrb	r2, [r2, #16]
 800a21a:	3201      	adds	r2, #1
 800a21c:	b2d1      	uxtb	r1, r2
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	441a      	add	r2, r3
 800a222:	7411      	strb	r1, [r2, #16]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	7c1b      	ldrb	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10c      	bne.n	800a248 <mbedtls_ccm_update+0x20a>
            for (i = 0; i < ctx->q; i++) {
 800a22e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a232:	3301      	adds	r3, #1
 800a234:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a23e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a242:	429a      	cmp	r2, r3
 800a244:	d3e2      	bcc.n	800a20c <mbedtls_ccm_update+0x1ce>
 800a246:	e000      	b.n	800a24a <mbedtls_ccm_update+0x20c>
                    break;
 800a248:	bf00      	nop
                }
            }
        }

        input_len -= use_len;
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	607b      	str	r3, [r7, #4]
        input += use_len;
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	4413      	add	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]
        output += use_len;
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	4413      	add	r3, r2
 800a260:	603b      	str	r3, [r7, #0]
    while (input_len > 0) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f47f af19 	bne.w	800a09c <mbedtls_ccm_update+0x5e>
    }

exit:
 800a26a:	e002      	b.n	800a272 <mbedtls_ccm_update+0x234>
                goto exit;
 800a26c:	bf00      	nop
 800a26e:	e000      	b.n	800a272 <mbedtls_ccm_update+0x234>
                goto exit;
 800a270:	bf00      	nop
    mbedtls_platform_zeroize(local_output, 16);
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	2110      	movs	r1, #16
 800a278:	4618      	mov	r0, r3
 800a27a:	f004 f8d9 	bl	800e430 <mbedtls_platform_zeroize>

    return ret;
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a280:	4618      	mov	r0, r3
 800a282:	3738      	adds	r7, #56	; 0x38
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <chacha20_quarter_round>:
static inline void chacha20_quarter_round(uint32_t state[16],
                                          size_t a,
                                          size_t b,
                                          size_t c,
                                          size_t d)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	4403      	add	r3, r0
 800a2b2:	440a      	add	r2, r1
 800a2b4:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4413      	add	r3, r2
 800a2be:	6819      	ldr	r1, [r3, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	4403      	add	r3, r0
 800a2d2:	404a      	eors	r2, r1
 800a2d4:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 16);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	68f9      	ldr	r1, [r7, #12]
 800a2e6:	440b      	add	r3, r1
 800a2e8:	ea4f 4232 	mov.w	r2, r2, ror #16
 800a2ec:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	6819      	ldr	r1, [r3, #0]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	4403      	add	r3, r0
 800a30a:	440a      	add	r2, r1
 800a30c:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	6819      	ldr	r1, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	4403      	add	r3, r0
 800a32a:	404a      	eors	r2, r1
 800a32c:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 12);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	68f9      	ldr	r1, [r7, #12]
 800a33e:	440b      	add	r3, r1
 800a340:	ea4f 5232 	mov.w	r2, r2, ror #20
 800a344:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	6819      	ldr	r1, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	4403      	add	r3, r0
 800a362:	440a      	add	r2, r1
 800a364:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	4403      	add	r3, r0
 800a382:	404a      	eors	r2, r1
 800a384:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 8);
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	68f9      	ldr	r1, [r7, #12]
 800a396:	440b      	add	r3, r1
 800a398:	ea4f 6232 	mov.w	r2, r2, ror #24
 800a39c:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	6819      	ldr	r1, [r3, #0]
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	4403      	add	r3, r0
 800a3ba:	440a      	add	r2, r1
 800a3bc:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	6819      	ldr	r1, [r3, #0]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4403      	add	r3, r0
 800a3da:	404a      	eors	r2, r1
 800a3dc:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 7);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	440b      	add	r3, r1
 800a3f0:	ea4f 6272 	mov.w	r2, r2, ror #25
 800a3f4:	601a      	str	r2, [r3, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block(uint32_t state[16])
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af02      	add	r7, sp, #8
 800a408:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round(state, 0, 4, 8,  12);
 800a40a:	230c      	movs	r3, #12
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	2308      	movs	r3, #8
 800a410:	2204      	movs	r2, #4
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff ff37 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 5, 9,  13);
 800a41a:	230d      	movs	r3, #13
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	2309      	movs	r3, #9
 800a420:	2205      	movs	r2, #5
 800a422:	2101      	movs	r1, #1
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ff2f 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 6, 10, 14);
 800a42a:	230e      	movs	r3, #14
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	230a      	movs	r3, #10
 800a430:	2206      	movs	r2, #6
 800a432:	2102      	movs	r1, #2
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff ff27 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 800a43a:	230f      	movs	r3, #15
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	230b      	movs	r3, #11
 800a440:	2207      	movs	r2, #7
 800a442:	2103      	movs	r1, #3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff ff1f 	bl	800a288 <chacha20_quarter_round>

    chacha20_quarter_round(state, 0, 5, 10, 15);
 800a44a:	230f      	movs	r3, #15
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	230a      	movs	r3, #10
 800a450:	2205      	movs	r2, #5
 800a452:	2100      	movs	r1, #0
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff ff17 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 6, 11, 12);
 800a45a:	230c      	movs	r3, #12
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	230b      	movs	r3, #11
 800a460:	2206      	movs	r2, #6
 800a462:	2101      	movs	r1, #1
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7ff ff0f 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 7, 8,  13);
 800a46a:	230d      	movs	r3, #13
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	2308      	movs	r3, #8
 800a470:	2207      	movs	r2, #7
 800a472:	2102      	movs	r1, #2
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff07 	bl	800a288 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 4, 9,  14);
 800a47a:	230e      	movs	r3, #14
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2309      	movs	r3, #9
 800a480:	2204      	movs	r2, #4
 800a482:	2103      	movs	r1, #3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff feff 	bl	800a288 <chacha20_quarter_round>
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block(const uint32_t initial_state[16],
                           unsigned char keystream[64])
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b094      	sub	sp, #80	; 0x50
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy(working_state,
 800a49c:	f107 0308 	add.w	r3, r7, #8
 800a4a0:	2240      	movs	r2, #64	; 0x40
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f006 fddd 	bl	8011064 <memcpy>
           initial_state,
           CHACHA20_BLOCK_SIZE_BYTES);

    for (i = 0U; i < 10U; i++) {
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ae:	e007      	b.n	800a4c0 <chacha20_block+0x2e>
        chacha20_inner_block(working_state);
 800a4b0:	f107 0308 	add.w	r3, r7, #8
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7ff ffa4 	bl	800a402 <chacha20_inner_block>
    for (i = 0U; i < 10U; i++) {
 800a4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4bc:	3301      	adds	r3, #1
 800a4be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c2:	2b09      	cmp	r3, #9
 800a4c4:	d9f4      	bls.n	800a4b0 <chacha20_block+0x1e>
    }

    working_state[0] += initial_state[0];
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	60bb      	str	r3, [r7, #8]
    working_state[1] += initial_state[1];
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
    working_state[2] += initial_state[2];
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
    working_state[3] += initial_state[3];
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	330c      	adds	r3, #12
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]
    working_state[4] += initial_state[4];
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3310      	adds	r3, #16
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	61bb      	str	r3, [r7, #24]
    working_state[5] += initial_state[5];
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3314      	adds	r3, #20
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4413      	add	r3, r2
 800a50a:	61fb      	str	r3, [r7, #28]
    working_state[6] += initial_state[6];
 800a50c:	6a3a      	ldr	r2, [r7, #32]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3318      	adds	r3, #24
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4413      	add	r3, r2
 800a516:	623b      	str	r3, [r7, #32]
    working_state[7] += initial_state[7];
 800a518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	331c      	adds	r3, #28
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4413      	add	r3, r2
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[8] += initial_state[8];
 800a524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3320      	adds	r3, #32
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4413      	add	r3, r2
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[9] += initial_state[9];
 800a530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3324      	adds	r3, #36	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[10] += initial_state[10];
 800a53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3328      	adds	r3, #40	; 0x28
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4413      	add	r3, r2
 800a546:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[11] += initial_state[11];
 800a548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	332c      	adds	r3, #44	; 0x2c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4413      	add	r3, r2
 800a552:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[12] += initial_state[12];
 800a554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3330      	adds	r3, #48	; 0x30
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4413      	add	r3, r2
 800a55e:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[13] += initial_state[13];
 800a560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3334      	adds	r3, #52	; 0x34
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4413      	add	r3, r2
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[14] += initial_state[14];
 800a56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3338      	adds	r3, #56	; 0x38
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4413      	add	r3, r2
 800a576:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[15] += initial_state[15];
 800a578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	333c      	adds	r3, #60	; 0x3c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4413      	add	r3, r2
 800a582:	647b      	str	r3, [r7, #68]	; 0x44

    for (i = 0U; i < 16; i++) {
 800a584:	2300      	movs	r3, #0
 800a586:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a588:	e012      	b.n	800a5b0 <chacha20_block+0x11e>
        size_t offset = i * 4U;
 800a58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	64bb      	str	r3, [r7, #72]	; 0x48

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a594:	441a      	add	r2, r3
 800a596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	3350      	adds	r3, #80	; 0x50
 800a59c:	443b      	add	r3, r7
 800a59e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	f003 fecf 	bl	800e348 <mbedtls_put_unaligned_uint32>
    for (i = 0U; i < 16; i++) {
 800a5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b2:	2b0f      	cmp	r3, #15
 800a5b4:	d9e9      	bls.n	800a58a <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize(working_state, sizeof(working_state));
 800a5b6:	f107 0308 	add.w	r3, r7, #8
 800a5ba:	2140      	movs	r1, #64	; 0x40
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f003 ff37 	bl	800e430 <mbedtls_platform_zeroize>
}
 800a5c2:	bf00      	nop
 800a5c4:	3750      	adds	r7, #80	; 0x50
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <mbedtls_chacha20_init>:

void mbedtls_chacha20_init(mbedtls_chacha20_context *ctx)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2140      	movs	r1, #64	; 0x40
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f003 ff2a 	bl	800e430 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3340      	adds	r3, #64	; 0x40
 800a5e0:	2140      	movs	r1, #64	; 0x40
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f003 ff24 	bl	800e430 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2240      	movs	r2, #64	; 0x40
 800a5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free(mbedtls_chacha20_context *ctx)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
    if (ctx != NULL) {
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <mbedtls_chacha20_free+0x16>
        mbedtls_platform_zeroize(ctx, sizeof(mbedtls_chacha20_context));
 800a606:	2184      	movs	r1, #132	; 0x84
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f003 ff11 	bl	800e430 <mbedtls_platform_zeroize>
    }
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey(mbedtls_chacha20_context *ctx,
                            const unsigned char key[32])
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a26      	ldr	r2, [pc, #152]	; (800a6c0 <mbedtls_chacha20_setkey+0xa8>)
 800a626:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a26      	ldr	r2, [pc, #152]	; (800a6c4 <mbedtls_chacha20_setkey+0xac>)
 800a62c:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a25      	ldr	r2, [pc, #148]	; (800a6c8 <mbedtls_chacha20_setkey+0xb0>)
 800a632:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a25      	ldr	r2, [pc, #148]	; (800a6cc <mbedtls_chacha20_setkey+0xb4>)
 800a638:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE(key, 0);
 800a63a:	6838      	ldr	r0, [r7, #0]
 800a63c:	f003 fe76 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a640:	4602      	mov	r2, r0
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE(key, 4);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	3304      	adds	r3, #4
 800a64a:	4618      	mov	r0, r3
 800a64c:	f003 fe6e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a650:	4602      	mov	r2, r0
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE(key, 8);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	3308      	adds	r3, #8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f003 fe66 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE(key, 12);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	330c      	adds	r3, #12
 800a66a:	4618      	mov	r0, r3
 800a66c:	f003 fe5e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a670:	4602      	mov	r2, r0
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE(key, 16);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	3310      	adds	r3, #16
 800a67a:	4618      	mov	r0, r3
 800a67c:	f003 fe56 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a680:	4602      	mov	r2, r0
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE(key, 20);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	3314      	adds	r3, #20
 800a68a:	4618      	mov	r0, r3
 800a68c:	f003 fe4e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a690:	4602      	mov	r2, r0
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = MBEDTLS_GET_UINT32_LE(key, 24);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	3318      	adds	r3, #24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f003 fe46 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = MBEDTLS_GET_UINT32_LE(key, 28);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	331c      	adds	r3, #28
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f003 fe3e 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	62da      	str	r2, [r3, #44]	; 0x2c

    return 0;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	61707865 	.word	0x61707865
 800a6c4:	3320646e 	.word	0x3320646e
 800a6c8:	79622d32 	.word	0x79622d32
 800a6cc:	6b206574 	.word	0x6b206574

0800a6d0 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update(mbedtls_chacha20_context *ctx,
                            size_t size,
                            const unsigned char *input,
                            unsigned char *output)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]

    /* Use leftover keystream bytes, if available */
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 800a6e2:	e01d      	b.n	800a720 <mbedtls_chacha20_update+0x50>
        output[offset] = input[offset]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	7819      	ldrb	r1, [r3, #0]
                         ^ ctx->keystream8[ctx->keystream_bytes_used];
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 800a6fa:	6838      	ldr	r0, [r7, #0]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	4403      	add	r3, r0
 800a700:	404a      	eors	r2, r1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3301      	adds	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
        size--;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	60bb      	str	r3, [r7, #8]
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d023      	beq.n	800a76e <mbedtls_chacha20_update+0x9e>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a72c:	2b3f      	cmp	r3, #63	; 0x3f
 800a72e:	d9d9      	bls.n	800a6e4 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 800a730:	e01d      	b.n	800a76e <mbedtls_chacha20_update+0x9e>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3340      	adds	r3, #64	; 0x40
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7ff fea9 	bl	800a492 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, 64U);
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	18d0      	adds	r0, r2, r3
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	18d1      	adds	r1, r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	f003 fe23 	bl	800e3a8 <mbedtls_xor>

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	3340      	adds	r3, #64	; 0x40
 800a766:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3b40      	subs	r3, #64	; 0x40
 800a76c:	60bb      	str	r3, [r7, #8]
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b3f      	cmp	r3, #63	; 0x3f
 800a772:	d8de      	bhi.n	800a732 <mbedtls_chacha20_update+0x62>
    }

    /* Last (partial) block */
    if (size > 0U) {
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01b      	beq.n	800a7b2 <mbedtls_chacha20_update+0xe2>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3340      	adds	r3, #64	; 0x40
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f7ff fe85 	bl	800a492 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, size);
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	18d0      	adds	r0, r2, r3
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	18d1      	adds	r1, r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 fdff 	bl	800e3a8 <mbedtls_xor>

        ctx->keystream_bytes_used = size;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return 0;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad(mbedtls_chachapoly_context *ctx)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) (ctx->aad_len % 16U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if (partial_block_len == 0U) {
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <chachapoly_pad_aad+0x20>
        return 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e012      	b.n	800a802 <chachapoly_pad_aad+0x46>
    }

    memset(zeroes, 0, sizeof(zeroes));
 800a7dc:	f107 030c 	add.w	r3, r7, #12
 800a7e0:	220f      	movs	r2, #15
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f006 fc4b 	bl	8011080 <memset>

    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                   zeroes,
                                   16U - partial_block_len);
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f1c3 0210 	rsb	r2, r3, #16
    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 800a7f6:	f107 030c 	add.w	r3, r7, #12
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f004 fa2f 	bl	800ec5e <mbedtls_poly1305_update>
 800a800:	4603      	mov	r3, r0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <mbedtls_chachapoly_init>:
                                   zeroes,
                                   16U - partial_block_len);
}

void mbedtls_chachapoly_init(mbedtls_chachapoly_context *ctx)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_init(&ctx->chacha20_ctx);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fed8 	bl	800a5ca <mbedtls_chacha20_init>
    mbedtls_poly1305_init(&ctx->poly1305_ctx);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3384      	adds	r3, #132	; 0x84
 800a81e:	4618      	mov	r0, r3
 800a820:	f004 fa01 	bl	800ec26 <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	f04f 0200 	mov.w	r2, #0
 800a82a:	f04f 0300 	mov.w	r3, #0
 800a82e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	f04f 0200 	mov.w	r2, #0
 800a838:	f04f 0300 	mov.w	r3, #0
 800a83c:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free(mbedtls_chachapoly_context *ctx)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d01f      	beq.n	800a8a6 <mbedtls_chachapoly_free+0x4e>
        return;
    }

    mbedtls_chacha20_free(&ctx->chacha20_ctx);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fec5 	bl	800a5f8 <mbedtls_chacha20_free>
    mbedtls_poly1305_free(&ctx->poly1305_ctx);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3384      	adds	r3, #132	; 0x84
 800a872:	4618      	mov	r0, r3
 800a874:	f004 f9e3 	bl	800ec3e <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 800a878:	6879      	ldr	r1, [r7, #4]
 800a87a:	f04f 0200 	mov.w	r2, #0
 800a87e:	f04f 0300 	mov.w	r3, #0
 800a882:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	f04f 0300 	mov.w	r3, #0
 800a890:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 800a8a4:	e000      	b.n	800a8a8 <mbedtls_chachapoly_free+0x50>
        return;
 800a8a6:	bf00      	nop
}
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey(mbedtls_chachapoly_context *ctx,
                              const unsigned char key[32])
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a8b8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a8bc:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_chacha20_setkey(&ctx->chacha20_ctx, key);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fea8 	bl	800a618 <mbedtls_chacha20_setkey>
 800a8c8:	60f8      	str	r0, [r7, #12]

    return ret;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update(mbedtls_chachapoly_context *ctx,
                              size_t len,
                              const unsigned char *input,
                              unsigned char *output)
{
 800a8d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a8d8:	b086      	sub	sp, #24
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	607a      	str	r2, [r7, #4]
 800a8e2:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a8e4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a8e8:	617b      	str	r3, [r7, #20]

    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d007      	beq.n	800a904 <mbedtls_chachapoly_update+0x30>
        (ctx->state != CHACHAPOLY_STATE_CIPHERTEXT)) {
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d002      	beq.n	800a904 <mbedtls_chachapoly_update+0x30>
        return MBEDTLS_ERR_CHACHAPOLY_BAD_STATE;
 800a8fe:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a902:	e057      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
    }

    if (ctx->state == CHACHAPOLY_STATE_AAD) {
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d10c      	bne.n	800a928 <mbedtls_chachapoly_update+0x54>
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2202      	movs	r2, #2
 800a912:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad(ctx);
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff ff50 	bl	800a7bc <chachapoly_pad_aad>
 800a91c:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <mbedtls_chachapoly_update+0x54>
            return ret;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	e045      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
        }
    }

    ctx->ciphertext_len += len;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	2000      	movs	r0, #0
 800a932:	460c      	mov	r4, r1
 800a934:	4605      	mov	r5, r0
 800a936:	eb12 0804 	adds.w	r8, r2, r4
 800a93a:	eb43 0905 	adc.w	r9, r3, r5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	e9c3 8936 	strd	r8, r9, [r3, #216]	; 0xd8

    if (ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT) {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d118      	bne.n	800a980 <mbedtls_chachapoly_update+0xac>
        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	f7ff febb 	bl	800a6d0 <mbedtls_chacha20_update>
 800a95a:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <mbedtls_chachapoly_update+0x92>
            return ret;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	e026      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, output, len);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3384      	adds	r3, #132	; 0x84
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	4618      	mov	r0, r3
 800a970:	f004 f975 	bl	800ec5e <mbedtls_poly1305_update>
 800a974:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01a      	beq.n	800a9b2 <mbedtls_chachapoly_update+0xde>
            return ret;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	e019      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
        }
    } else { /* DECRYPT */
        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, input, len);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3384      	adds	r3, #132	; 0x84
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	f004 f968 	bl	800ec5e <mbedtls_poly1305_update>
 800a98e:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <mbedtls_chachapoly_update+0xc6>
            return ret;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	e00c      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	f7ff fe95 	bl	800a6d0 <mbedtls_chacha20_update>
 800a9a6:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <mbedtls_chachapoly_update+0xde>
            return ret;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	e000      	b.n	800a9b4 <mbedtls_chachapoly_update+0xe0>
        }
    }

    return 0;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a9be <mbedtls_cipher_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET(ctx != NULL, 0);
    if (ctx->MBEDTLS_PRIVATE(cipher_info) == NULL) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e002      	b.n	800a9d8 <mbedtls_cipher_get_block_size+0x1a>
    }

    return ctx->MBEDTLS_PRIVATE(cipher_info)->MBEDTLS_PRIVATE(block_size);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	6039      	str	r1, [r7, #0]
 800a9ee:	71fb      	strb	r3, [r7, #7]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 800a9f4:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <mbedtls_cipher_info_from_values+0x60>)
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	e018      	b.n	800aa2c <mbedtls_cipher_info_from_values+0x48>
        if (def->info->base->cipher == cipher_id &&
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	79fa      	ldrb	r2, [r7, #7]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d10e      	bne.n	800aa26 <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
        if (def->info->base->cipher == cipher_id &&
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d108      	bne.n	800aa26 <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode) {
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800aa1a:	79ba      	ldrb	r2, [r7, #6]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d102      	bne.n	800aa26 <mbedtls_cipher_info_from_values+0x42>
            return def->info;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	e007      	b.n	800aa36 <mbedtls_cipher_info_from_values+0x52>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e2      	bne.n	800a9fa <mbedtls_cipher_info_from_values+0x16>
        }
    }

    return NULL;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	08013658 	.word	0x08013658

0800aa48 <mbedtls_cipher_free>:
{
    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
}

void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d01f      	beq.n	800aa96 <mbedtls_cipher_free+0x4e>
        return;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_CMAC_C)
    if (ctx->cmac_ctx) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <mbedtls_cipher_free+0x2c>
        mbedtls_platform_zeroize(ctx->cmac_ctx,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	2124      	movs	r1, #36	; 0x24
 800aa64:	4618      	mov	r0, r3
 800aa66:	f003 fce3 	bl	800e430 <mbedtls_platform_zeroize>
                                 sizeof(mbedtls_cmac_context_t));
        mbedtls_free(ctx->cmac_ctx);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f006 faf0 	bl	8011054 <free>
    }
#endif

    if (ctx->cipher_ctx) {
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <mbedtls_cipher_free+0x44>
        ctx->cipher_info->base->ctx_free_func(ctx->cipher_ctx);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_cipher_context_t));
 800aa8c:	2144      	movs	r1, #68	; 0x44
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f003 fcce 	bl	800e430 <mbedtls_platform_zeroize>
 800aa94:	e000      	b.n	800aa98 <mbedtls_cipher_free+0x50>
        return;
 800aa96:	bf00      	nop
}
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,
                         const mbedtls_cipher_info_t *cipher_info)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
    if (cipher_info == NULL) {
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <mbedtls_cipher_setup+0x14>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <mbedtls_cipher_setup+0x50>)
 800aab2:	e019      	b.n	800aae8 <mbedtls_cipher_setup+0x48>
    }

    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 800aab4:	2244      	movs	r2, #68	; 0x44
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f006 fae1 	bl	8011080 <memset>

    if (NULL == (ctx->cipher_ctx = cipher_info->base->ctx_alloc_func())) {
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	4798      	blx	r3
 800aac6:	4602      	mov	r2, r0
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	63da      	str	r2, [r3, #60]	; 0x3c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <mbedtls_cipher_setup+0x38>
        return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <mbedtls_cipher_setup+0x54>)
 800aad6:	e007      	b.n	800aae8 <mbedtls_cipher_setup+0x48>
    }

    ctx->cipher_info = cipher_info;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode(ctx, MBEDTLS_PADDING_PKCS7);
 800aade:	2100      	movs	r1, #0
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fcc3 	bl	800b46c <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode(ctx, MBEDTLS_PADDING_NONE);
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return 0;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	ffff9f00 	.word	0xffff9f00
 800aaf4:	ffff9e80 	.word	0xffff9e80

0800aaf8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey(mbedtls_cipher_context_t *ctx,
                          const unsigned char *key,
                          int key_bitlen,
                          const mbedtls_operation_t operation)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	70fb      	strb	r3, [r7, #3]
    if (operation != MBEDTLS_ENCRYPT && operation != MBEDTLS_DECRYPT) {
 800ab06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d005      	beq.n	800ab1a <mbedtls_cipher_setkey+0x22>
 800ab0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <mbedtls_cipher_setkey+0x22>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800ab16:	4b29      	ldr	r3, [pc, #164]	; (800abbc <mbedtls_cipher_setkey+0xc4>)
 800ab18:	e04b      	b.n	800abb2 <mbedtls_cipher_setkey+0xba>
    }
    if (ctx->cipher_info == NULL) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <mbedtls_cipher_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800ab22:	4b26      	ldr	r3, [pc, #152]	; (800abbc <mbedtls_cipher_setkey+0xc4>)
 800ab24:	e045      	b.n	800abb2 <mbedtls_cipher_setkey+0xba>
        ctx->operation = operation;
        return 0;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d108      	bne.n	800ab46 <mbedtls_cipher_setkey+0x4e>
        (int) ctx->cipher_info->key_bitlen != key_bitlen) {
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	461a      	mov	r2, r3
    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d001      	beq.n	800ab46 <mbedtls_cipher_setkey+0x4e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800ab42:	4b1e      	ldr	r3, [pc, #120]	; (800abbc <mbedtls_cipher_setkey+0xc4>)
 800ab44:	e035      	b.n	800abb2 <mbedtls_cipher_setkey+0xba>
    }

    ctx->key_bitlen = key_bitlen;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	78fa      	ldrb	r2, [r7, #3]
 800ab50:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if (MBEDTLS_ENCRYPT == operation ||
 800ab52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d00e      	beq.n	800ab78 <mbedtls_cipher_setkey+0x80>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	785b      	ldrb	r3, [r3, #1]
    if (MBEDTLS_ENCRYPT == operation ||
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d009      	beq.n	800ab78 <mbedtls_cipher_setkey+0x80>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d004      	beq.n	800ab78 <mbedtls_cipher_setkey+0x80>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode) {
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d10b      	bne.n	800ab90 <mbedtls_cipher_setkey+0x98>
        return ctx->cipher_info->base->setkey_enc_func(ctx->cipher_ctx, key,
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                       ctx->key_bitlen);
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_enc_func(ctx->cipher_ctx, key,
 800ab88:	68b9      	ldr	r1, [r7, #8]
 800ab8a:	4798      	blx	r3
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	e010      	b.n	800abb2 <mbedtls_cipher_setkey+0xba>
    }

    if (MBEDTLS_DECRYPT == operation) {
 800ab90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10b      	bne.n	800abb0 <mbedtls_cipher_setkey+0xb8>
        return ctx->cipher_info->base->setkey_dec_func(ctx->cipher_ctx, key,
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                       ctx->key_bitlen);
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_dec_func(ctx->cipher_ctx, key,
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	4798      	blx	r3
 800abac:	4603      	mov	r3, r0
 800abae:	e000      	b.n	800abb2 <mbedtls_cipher_setkey+0xba>
    }

    return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800abb0:	4b02      	ldr	r3, [pc, #8]	; (800abbc <mbedtls_cipher_setkey+0xc4>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	ffff9f00 	.word	0xffff9f00

0800abc0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update(mbedtls_cipher_context_t *ctx, const unsigned char *input,
                          size_t ilen, unsigned char *output, size_t *olen)
{
 800abc0:	b5b0      	push	{r4, r5, r7, lr}
 800abc2:	b08c      	sub	sp, #48	; 0x30
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800abce:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800abd2:	61bb      	str	r3, [r7, #24]
    size_t block_size;

    if (ctx->cipher_info == NULL) {
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <mbedtls_cipher_update+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800abdc:	4b76      	ldr	r3, [pc, #472]	; (800adb8 <mbedtls_cipher_update+0x1f8>)
 800abde:	e20e      	b.n	800affe <mbedtls_cipher_update+0x43e>
         * accessible through the cipher layer. */
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size(ctx);
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7ff fee9 	bl	800a9be <mbedtls_cipher_get_block_size>
 800abec:	6178      	str	r0, [r7, #20]
    if (0 == block_size) {
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <mbedtls_cipher_update+0x38>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800abf4:	4b71      	ldr	r3, [pc, #452]	; (800adbc <mbedtls_cipher_update+0x1fc>)
 800abf6:	e202      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }

    if (ctx->cipher_info->mode == MBEDTLS_MODE_ECB) {
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	785b      	ldrb	r3, [r3, #1]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d11c      	bne.n	800ac3c <mbedtls_cipher_update+0x7c>
        if (ilen != block_size) {
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d001      	beq.n	800ac0e <mbedtls_cipher_update+0x4e>
            return MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED;
 800ac0a:	4b6d      	ldr	r3, [pc, #436]	; (800adc0 <mbedtls_cipher_update+0x200>)
 800ac0c:	e1f7      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]

        if (0 != (ret = ctx->cipher_info->base->ecb_func(ctx->cipher_ctx,
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	685c      	ldr	r4, [r3, #4]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	47a0      	blx	r4
 800ac2c:	61b8      	str	r0, [r7, #24]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <mbedtls_cipher_update+0x78>
                                                         ctx->operation, input, output))) {
            return ret;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	e1e2      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        return 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e1e0      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }

#if defined(MBEDTLS_GCM_C)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_GCM) {
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	785b      	ldrb	r3, [r3, #1]
 800ac42:	2b06      	cmp	r3, #6
 800ac44:	d10c      	bne.n	800ac60 <mbedtls_cipher_update+0xa0>
        return mbedtls_gcm_update((mbedtls_gcm_context *) ctx->cipher_ctx,
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	f003 f854 	bl	800dd04 <mbedtls_gcm_update>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	e1ce      	b.n	800affe <mbedtls_cipher_update+0x43e>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CCM_C)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_CCM_STAR_NO_TAG) {
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	2b09      	cmp	r3, #9
 800ac68:	d10c      	bne.n	800ac84 <mbedtls_cipher_update+0xc4>
        return mbedtls_ccm_update((mbedtls_ccm_context *) ctx->cipher_ctx,
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	f7ff f9df 	bl	800a03e <mbedtls_ccm_update>
 800ac80:	4603      	mov	r3, r0
 800ac82:	e1bc      	b.n	800affe <mbedtls_cipher_update+0x43e>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if (ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305) {
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b4d      	cmp	r3, #77	; 0x4d
 800ac8c:	d10b      	bne.n	800aca6 <mbedtls_cipher_update+0xe6>
        *olen = ilen;
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	601a      	str	r2, [r3, #0]
        return mbedtls_chachapoly_update((mbedtls_chachapoly_context *) ctx->cipher_ctx,
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	f7ff fe19 	bl	800a8d4 <mbedtls_chachapoly_update>
 800aca2:	4603      	mov	r3, r0
 800aca4:	e1ab      	b.n	800affe <mbedtls_cipher_update+0x43e>
                                         ilen, input, output);
    }
#endif

    if (input == output &&
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d10f      	bne.n	800acce <mbedtls_cipher_update+0x10e>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (input == output &&
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <mbedtls_cipher_update+0x10a>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	fbb3 f2f2 	udiv	r2, r3, r2
 800acbe:	6979      	ldr	r1, [r7, #20]
 800acc0:	fb01 f202 	mul.w	r2, r1, r2
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <mbedtls_cipher_update+0x10e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800acca:	4b3b      	ldr	r3, [pc, #236]	; (800adb8 <mbedtls_cipher_update+0x1f8>)
 800accc:	e197      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_CBC) {
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	f040 80de 	bne.w	800ae96 <mbedtls_cipher_update+0x2d6>
        size_t copy_len = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10a      	bne.n	800acfe <mbedtls_cipher_update+0x13e>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <mbedtls_cipher_update+0x13e>
             ilen <= block_size - ctx->unprocessed_len) ||
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	1ad3      	subs	r3, r2, r3
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d91b      	bls.n	800ad36 <mbedtls_cipher_update+0x176>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen <= block_size - ctx->unprocessed_len) ||
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <mbedtls_cipher_update+0x15e>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <mbedtls_cipher_update+0x15e>
             ilen < block_size - ctx->unprocessed_len) ||
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d30b      	bcc.n	800ad36 <mbedtls_cipher_update+0x176>
            (ctx->operation == MBEDTLS_ENCRYPT &&
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen < block_size - ctx->unprocessed_len) ||
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d119      	bne.n	800ad5c <mbedtls_cipher_update+0x19c>
             ilen < block_size - ctx->unprocessed_len)) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_ENCRYPT &&
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d212      	bcs.n	800ad5c <mbedtls_cipher_update+0x19c>
            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	3310      	adds	r3, #16
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	3304      	adds	r3, #4
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f006 f98c 	bl	8011064 <memcpy>
                   ilen);

            ctx->unprocessed_len += ilen;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	441a      	add	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24
            return 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e150      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        /*
         * Process cached data first
         */
        if (0 != ctx->unprocessed_len) {
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d044      	beq.n	800adee <mbedtls_cipher_update+0x22e>
            copy_len = block_size - ctx->unprocessed_len;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	61fb      	str	r3, [r7, #28]

            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad72:	3310      	adds	r3, #16
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	3304      	adds	r3, #4
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f006 f970 	bl	8011064 <memcpy>
                   copy_len);

            if (0 != (ret = ctx->cipher_info->base->cbc_func(ctx->cipher_ctx,
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	689c      	ldr	r4, [r3, #8]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                             ctx->operation, block_size, ctx->iv,
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                             ctx->unprocessed_data, output))) {
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3314      	adds	r3, #20
            if (0 != (ret = ctx->cipher_info->base->cbc_func(ctx->cipher_ctx,
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	9201      	str	r2, [sp, #4]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	462b      	mov	r3, r5
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	47a0      	blx	r4
 800adac:	61b8      	str	r0, [r7, #24]
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <mbedtls_cipher_update+0x204>
                return ret;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	e122      	b.n	800affe <mbedtls_cipher_update+0x43e>
 800adb8:	ffff9f00 	.word	0xffff9f00
 800adbc:	ffff9c80 	.word	0xffff9c80
 800adc0:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	441a      	add	r2, r3
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	601a      	str	r2, [r3, #0]
            output += block_size;
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	4413      	add	r3, r2
 800add6:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	4413      	add	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if (0 != ilen) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d02c      	beq.n	800ae4e <mbedtls_cipher_update+0x28e>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	fbb3 f2f2 	udiv	r2, r3, r2
 800adfc:	6979      	ldr	r1, [r7, #20]
 800adfe:	fb01 f202 	mul.w	r2, r1, r2
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	61fb      	str	r3, [r7, #28]
            if (copy_len == 0 &&
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <mbedtls_cipher_update+0x262>
                ctx->operation == MBEDTLS_DECRYPT &&
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if (copy_len == 0 &&
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <mbedtls_cipher_update+0x262>
                NULL != ctx->add_padding) {
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <mbedtls_cipher_update+0x262>
                copy_len = block_size;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	61fb      	str	r3, [r7, #28]
            }

            memcpy(ctx->unprocessed_data, &(input[ilen - copy_len]),
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f103 0014 	add.w	r0, r3, #20
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	4413      	add	r3, r2
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	4619      	mov	r1, r3
 800ae36:	f006 f915 	bl	8011064 <memcpy>
                   copy_len);

            ctx->unprocessed_len += copy_len;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	441a      	add	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if (ilen) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d01e      	beq.n	800ae92 <mbedtls_cipher_update+0x2d2>
            if (0 != (ret = ctx->cipher_info->base->cbc_func(ctx->cipher_ctx,
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	689c      	ldr	r4, [r3, #8]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                             ctx->operation, ilen, ctx->iv, input,
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if (0 != (ret = ctx->cipher_info->base->cbc_func(ctx->cipher_ctx,
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4613      	mov	r3, r2
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	47a0      	blx	r4
 800ae7a:	61b8      	str	r0, [r7, #24]
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <mbedtls_cipher_update+0x2c6>
                                                             output))) {
                return ret;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	e0bb      	b.n	800affe <mbedtls_cipher_update+0x43e>
            }

            *olen += ilen;
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	441a      	add	r2, r3
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	601a      	str	r2, [r3, #0]
        }

        return 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e0b3      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_CFB) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d120      	bne.n	800aee2 <mbedtls_cipher_update+0x322>
        if (0 != (ret = ctx->cipher_info->base->cfb_func(ctx->cipher_ctx,
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	68dc      	ldr	r4, [r3, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f103 0524 	add.w	r5, r3, #36	; 0x24
                                                         ctx->operation, ilen,
                                                         &ctx->unprocessed_len, ctx->iv,
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3328      	adds	r3, #40	; 0x28
        if (0 != (ret = ctx->cipher_info->base->cfb_func(ctx->cipher_ctx,
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	9202      	str	r2, [sp, #8]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	9201      	str	r2, [sp, #4]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	462b      	mov	r3, r5
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	47a0      	blx	r4
 800aecc:	61b8      	str	r0, [r7, #24]
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <mbedtls_cipher_update+0x318>
                                                         input, output))) {
            return ret;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	e092      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]

        return 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	e08d      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_OFB) {
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d11d      	bne.n	800af28 <mbedtls_cipher_update+0x368>
        if (0 != (ret = ctx->cipher_info->base->ofb_func(ctx->cipher_ctx,
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	691c      	ldr	r4, [r3, #16]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f103 0224 	add.w	r2, r3, #36	; 0x24
                                                         ilen, &ctx->unprocessed_len, ctx->iv,
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if (0 != (ret = ctx->cipher_info->base->ofb_func(ctx->cipher_ctx,
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	460b      	mov	r3, r1
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	47a0      	blx	r4
 800af12:	61b8      	str	r0, [r7, #24]
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <mbedtls_cipher_update+0x35e>
                                                         input, output))) {
            return ret;
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	e06f      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]

        return 0;
 800af24:	2300      	movs	r3, #0
 800af26:	e06a      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_CTR) {
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d121      	bne.n	800af76 <mbedtls_cipher_update+0x3b6>
        if (0 != (ret = ctx->cipher_info->base->ctr_func(ctx->cipher_ctx,
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	695c      	ldr	r4, [r3, #20]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f103 0124 	add.w	r1, r3, #36	; 0x24
                                                         ilen, &ctx->unprocessed_len, ctx->iv,
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                         ctx->unprocessed_data, input, output))) {
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3314      	adds	r3, #20
        if (0 != (ret = ctx->cipher_info->base->ctr_func(ctx->cipher_ctx,
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	9202      	str	r2, [sp, #8]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	9201      	str	r2, [sp, #4]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	462b      	mov	r3, r5
 800af5a:	460a      	mov	r2, r1
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	47a0      	blx	r4
 800af60:	61b8      	str	r0, [r7, #24]
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <mbedtls_cipher_update+0x3ac>
            return ret;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	e048      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]

        return 0;
 800af72:	2300      	movs	r3, #0
 800af74:	e043      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_XTS) {
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	785b      	ldrb	r3, [r3, #1]
 800af7c:	2b0a      	cmp	r3, #10
 800af7e:	d123      	bne.n	800afc8 <mbedtls_cipher_update+0x408>
        if (ctx->unprocessed_len > 0) {
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <mbedtls_cipher_update+0x3cc>
            /* We can only process an entire data unit at a time. */
            return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800af88:	4b1f      	ldr	r3, [pc, #124]	; (800b008 <mbedtls_cipher_update+0x448>)
 800af8a:	e038      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        ret = ctx->cipher_info->base->xts_func(ctx->cipher_ctx,
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	699c      	ldr	r4, [r3, #24]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                               ctx->operation, ilen, ctx->iv, input, output);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = ctx->cipher_info->base->xts_func(ctx->cipher_ctx,
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	4613      	mov	r3, r2
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	47a0      	blx	r4
 800afb2:	61b8      	str	r0, [r7, #24]
        if (ret != 0) {
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <mbedtls_cipher_update+0x3fe>
            return ret;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	e01f      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]

        return 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e01a      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if (ctx->cipher_info->mode == MBEDTLS_MODE_STREAM) {
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	785b      	ldrb	r3, [r3, #1]
 800afce:	2b07      	cmp	r3, #7
 800afd0:	d114      	bne.n	800affc <mbedtls_cipher_update+0x43c>
        if (0 != (ret = ctx->cipher_info->base->stream_func(ctx->cipher_ctx,
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	69dc      	ldr	r4, [r3, #28]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	47a0      	blx	r4
 800afe6:	61b8      	str	r0, [r7, #24]
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <mbedtls_cipher_update+0x432>
                                                            ilen, input, output))) {
            return ret;
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	e005      	b.n	800affe <mbedtls_cipher_update+0x43e>
        }

        *olen = ilen;
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	601a      	str	r2, [r3, #0]

        return 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	e000      	b.n	800affe <mbedtls_cipher_update+0x43e>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800affc:	4b02      	ldr	r3, [pc, #8]	; (800b008 <mbedtls_cipher_update+0x448>)
}
 800affe:	4618      	mov	r0, r3
 800b000:	3720      	adds	r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bdb0      	pop	{r4, r5, r7, pc}
 800b006:	bf00      	nop
 800b008:	ffff9f80 	.word	0xffff9f80

0800b00c <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding(unsigned char *output, size_t output_len,
                             size_t data_len)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	613b      	str	r3, [r7, #16]
    unsigned char i;

    for (i = 0; i < padding_len; i++) {
 800b020:	2300      	movs	r3, #0
 800b022:	75fb      	strb	r3, [r7, #23]
 800b024:	e00a      	b.n	800b03c <add_pkcs_padding+0x30>
        output[data_len + i] = (unsigned char) padding_len;
 800b026:	7dfa      	ldrb	r2, [r7, #23]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4413      	add	r3, r2
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < padding_len; i++) {
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	3301      	adds	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	429a      	cmp	r2, r3
 800b042:	d8f0      	bhi.n	800b026 <add_pkcs_padding+0x1a>
    }
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
	...

0800b054 <get_pkcs_padding>:

static int get_pkcs_padding(unsigned char *input, size_t input_len,
                            size_t *data_len)
{
 800b054:	b480      	push	{r7}
 800b056:	b089      	sub	sp, #36	; 0x24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	76fb      	strb	r3, [r7, #27]

    if (NULL == input || NULL == data_len) {
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <get_pkcs_padding+0x1c>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <get_pkcs_padding+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b070:	4b2b      	ldr	r3, [pc, #172]	; (800b120 <get_pkcs_padding+0xcc>)
 800b072:	e04f      	b.n	800b114 <get_pkcs_padding+0xc0>
    }

    padding_len = input[input_len - 1];
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4413      	add	r3, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 800b080:	7ebb      	ldrb	r3, [r7, #26]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	1ad2      	subs	r2, r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 800b08a:	7ebb      	ldrb	r3, [r7, #26]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	bf34      	ite	cc
 800b092:	2301      	movcc	r3, #1
 800b094:	2300      	movcs	r3, #0
 800b096:	b2db      	uxtb	r3, r3
 800b098:	b25a      	sxtb	r2, r3
 800b09a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	b25b      	sxtb	r3, r3
 800b0a2:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 800b0a4:	7ebb      	ldrb	r3, [r7, #26]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bf0c      	ite	eq
 800b0aa:	2301      	moveq	r3, #1
 800b0ac:	2300      	movne	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	b25a      	sxtb	r2, r3
 800b0b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	b25b      	sxtb	r3, r3
 800b0ba:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
 800b0bc:	7ebb      	ldrb	r3, [r7, #26]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < input_len; i++) {
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]
 800b0c8:	e01a      	b.n	800b100 <get_pkcs_padding+0xac>
        bad |= (input[i] ^ padding_len) * (i >= pad_idx);
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	7ebb      	ldrb	r3, [r7, #26]
 800b0d4:	4053      	eors	r3, r2
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	69f9      	ldr	r1, [r7, #28]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	bf2c      	ite	cs
 800b0e0:	2301      	movcs	r3, #1
 800b0e2:	2300      	movcc	r3, #0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	fb12 f303 	smulbb	r3, r2, r3
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	b25a      	sxtb	r2, r3
 800b0f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	b25b      	sxtb	r3, r3
 800b0f8:	76fb      	strb	r3, [r7, #27]
    for (i = 0; i < input_len; i++) {
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	61fb      	str	r3, [r7, #28]
 800b100:	69fa      	ldr	r2, [r7, #28]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	429a      	cmp	r2, r3
 800b106:	d3e0      	bcc.n	800b0ca <get_pkcs_padding+0x76>
    }

    return MBEDTLS_ERR_CIPHER_INVALID_PADDING * (bad != 0);
 800b108:	7efb      	ldrb	r3, [r7, #27]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <get_pkcs_padding+0xbe>
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <get_pkcs_padding+0xd0>)
 800b110:	e000      	b.n	800b114 <get_pkcs_padding+0xc0>
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3724      	adds	r7, #36	; 0x24
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	ffff9f00 	.word	0xffff9f00
 800b124:	ffff9e00 	.word	0xffff9e00

0800b128 <add_one_and_zeros_padding>:
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding(unsigned char *output,
                                      size_t output_len, size_t data_len)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	75fb      	strb	r3, [r7, #23]

    output[data_len] = 0x80;
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4413      	add	r3, r2
 800b146:	2280      	movs	r2, #128	; 0x80
 800b148:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < padding_len; i++) {
 800b14a:	2301      	movs	r3, #1
 800b14c:	75fb      	strb	r3, [r7, #23]
 800b14e:	e009      	b.n	800b164 <add_one_and_zeros_padding+0x3c>
        output[data_len + i] = 0x00;
 800b150:	7dfa      	ldrb	r2, [r7, #23]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4413      	add	r3, r2
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4413      	add	r3, r2
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < padding_len; i++) {
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	3301      	adds	r3, #1
 800b162:	75fb      	strb	r3, [r7, #23]
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d8f1      	bhi.n	800b150 <add_one_and_zeros_padding+0x28>
    }
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
	...

0800b17c <get_one_and_zeros_padding>:

static int get_one_and_zeros_padding(unsigned char *input, size_t input_len,
                                     size_t *data_len)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done, bad;
 800b188:	2300      	movs	r3, #0
 800b18a:	74fb      	strb	r3, [r7, #19]

    if (NULL == input || NULL == data_len) {
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <get_one_and_zeros_padding+0x1c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <get_one_and_zeros_padding+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b198:	4b29      	ldr	r3, [pc, #164]	; (800b240 <get_one_and_zeros_padding+0xc4>)
 800b19a:	e04b      	b.n	800b234 <get_one_and_zeros_padding+0xb8>
    }

    bad = 0x80;
 800b19c:	2380      	movs	r3, #128	; 0x80
 800b19e:	74bb      	strb	r3, [r7, #18]
    *data_len = 0;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
    for (i = input_len; i > 0; i--) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	e03a      	b.n	800b222 <get_one_and_zeros_padding+0xa6>
        prev_done = done;
 800b1ac:	7cfb      	ldrb	r3, [r7, #19]
 800b1ae:	747b      	strb	r3, [r7, #17]
        done |= (input[i - 1] != 0);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf14      	ite	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	2300      	moveq	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	b25a      	sxtb	r2, r3
 800b1c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b25b      	sxtb	r3, r3
 800b1ce:	74fb      	strb	r3, [r7, #19]
        *data_len |= (i - 1) * (done != prev_done);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	7cf8      	ldrb	r0, [r7, #19]
 800b1da:	7c79      	ldrb	r1, [r7, #17]
 800b1dc:	4288      	cmp	r0, r1
 800b1de:	bf14      	ite	ne
 800b1e0:	2101      	movne	r1, #1
 800b1e2:	2100      	moveq	r1, #0
 800b1e4:	b2c9      	uxtb	r1, r1
 800b1e6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	601a      	str	r2, [r3, #0]
        bad ^= input[i - 1] * (done != prev_done);
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	781a      	ldrb	r2, [r3, #0]
 800b1fa:	7cf9      	ldrb	r1, [r7, #19]
 800b1fc:	7c7b      	ldrb	r3, [r7, #17]
 800b1fe:	4299      	cmp	r1, r3
 800b200:	bf14      	ite	ne
 800b202:	2301      	movne	r3, #1
 800b204:	2300      	moveq	r3, #0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	fb12 f303 	smulbb	r3, r2, r3
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	b25a      	sxtb	r2, r3
 800b212:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800b216:	4053      	eors	r3, r2
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	74bb      	strb	r3, [r7, #18]
    for (i = input_len; i > 0; i--) {
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	3b01      	subs	r3, #1
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1c1      	bne.n	800b1ac <get_one_and_zeros_padding+0x30>
    }

    return MBEDTLS_ERR_CIPHER_INVALID_PADDING * (bad != 0);
 800b228:	7cbb      	ldrb	r3, [r7, #18]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <get_one_and_zeros_padding+0xb6>
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <get_one_and_zeros_padding+0xc8>)
 800b230:	e000      	b.n	800b234 <get_one_and_zeros_padding+0xb8>
 800b232:	2300      	movs	r3, #0

}
 800b234:	4618      	mov	r0, r3
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	ffff9f00 	.word	0xffff9f00
 800b244:	ffff9e00 	.word	0xffff9e00

0800b248 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding(unsigned char *output,
                                      size_t output_len, size_t data_len)
{
 800b248:	b480      	push	{r7}
 800b24a:	b087      	sub	sp, #28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < padding_len; i++) {
 800b260:	2301      	movs	r3, #1
 800b262:	75fb      	strb	r3, [r7, #23]
 800b264:	e00a      	b.n	800b27c <add_zeros_and_len_padding+0x34>
        output[data_len + i - 1] = 0x00;
 800b266:	7dfa      	ldrb	r2, [r7, #23]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	3b01      	subs	r3, #1
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	4413      	add	r3, r2
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < padding_len; i++) {
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	3301      	adds	r3, #1
 800b27a:	75fb      	strb	r3, [r7, #23]
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	429a      	cmp	r2, r3
 800b282:	d8f0      	bhi.n	800b266 <add_zeros_and_len_padding+0x1e>
    }
    output[output_len - 1] = (unsigned char) padding_len;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	3b01      	subs	r3, #1
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	b2d2      	uxtb	r2, r2
 800b290:	701a      	strb	r2, [r3, #0]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding(unsigned char *input, size_t input_len,
                                     size_t *data_len)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b089      	sub	sp, #36	; 0x24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	76fb      	strb	r3, [r7, #27]

    if (NULL == input || NULL == data_len) {
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d002      	beq.n	800b2bc <get_zeros_and_len_padding+0x1c>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <get_zeros_and_len_padding+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b2bc:	4b2a      	ldr	r3, [pc, #168]	; (800b368 <get_zeros_and_len_padding+0xc8>)
 800b2be:	e04d      	b.n	800b35c <get_zeros_and_len_padding+0xbc>
    }

    padding_len = input[input_len - 1];
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 800b2cc:	7ebb      	ldrb	r3, [r7, #26]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	1ad2      	subs	r2, r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 800b2d6:	7ebb      	ldrb	r3, [r7, #26]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	bf34      	ite	cc
 800b2de:	2301      	movcc	r3, #1
 800b2e0:	2300      	movcs	r3, #0
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	b25a      	sxtb	r2, r3
 800b2e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 800b2f0:	7ebb      	ldrb	r3, [r7, #26]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bf0c      	ite	eq
 800b2f6:	2301      	moveq	r3, #1
 800b2f8:	2300      	movne	r3, #0
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	b25a      	sxtb	r2, r3
 800b2fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b302:	4313      	orrs	r3, r2
 800b304:	b25b      	sxtb	r3, r3
 800b306:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
 800b308:	7ebb      	ldrb	r3, [r7, #26]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < input_len - 1; i++) {
 800b310:	2300      	movs	r3, #0
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	e017      	b.n	800b346 <get_zeros_and_len_padding+0xa6>
        bad |= input[i] * (i >= pad_idx);
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	4413      	add	r3, r2
 800b31c:	781a      	ldrb	r2, [r3, #0]
 800b31e:	69f9      	ldr	r1, [r7, #28]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	4299      	cmp	r1, r3
 800b324:	bf2c      	ite	cs
 800b326:	2301      	movcs	r3, #1
 800b328:	2300      	movcc	r3, #0
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	fb12 f303 	smulbb	r3, r2, r3
 800b332:	b2db      	uxtb	r3, r3
 800b334:	b25a      	sxtb	r2, r3
 800b336:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	b25b      	sxtb	r3, r3
 800b33e:	76fb      	strb	r3, [r7, #27]
    for (i = 0; i < input_len - 1; i++) {
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	3301      	adds	r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	3b01      	subs	r3, #1
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d3e2      	bcc.n	800b316 <get_zeros_and_len_padding+0x76>
    }

    return MBEDTLS_ERR_CIPHER_INVALID_PADDING * (bad != 0);
 800b350:	7efb      	ldrb	r3, [r7, #27]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <get_zeros_and_len_padding+0xba>
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <get_zeros_and_len_padding+0xcc>)
 800b358:	e000      	b.n	800b35c <get_zeros_and_len_padding+0xbc>
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3724      	adds	r7, #36	; 0x24
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	ffff9f00 	.word	0xffff9f00
 800b36c:	ffff9e00 	.word	0xffff9e00

0800b370 <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding(unsigned char *output,
                              size_t output_len, size_t data_len)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
    size_t i;

    for (i = data_len; i < output_len; i++) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	e007      	b.n	800b392 <add_zeros_padding+0x22>
        output[i] = 0x00;
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4413      	add	r3, r2
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
    for (i = data_len; i < output_len; i++) {
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	3301      	adds	r3, #1
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	429a      	cmp	r2, r3
 800b398:	d3f3      	bcc.n	800b382 <add_zeros_padding+0x12>
    }
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <get_zeros_padding>:

static int get_zeros_padding(unsigned char *input, size_t input_len,
                             size_t *data_len)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	74fb      	strb	r3, [r7, #19]

    if (NULL == input || NULL == data_len) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <get_zeros_padding+0x1c>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <get_zeros_padding+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b3c4:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <get_zeros_padding+0x8c>)
 800b3c6:	e02e      	b.n	800b426 <get_zeros_padding+0x7e>
    }

    *data_len = 0;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
    for (i = input_len; i > 0; i--) {
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	617b      	str	r3, [r7, #20]
 800b3d2:	e024      	b.n	800b41e <get_zeros_padding+0x76>
        prev_done = done;
 800b3d4:	7cfb      	ldrb	r3, [r7, #19]
 800b3d6:	74bb      	strb	r3, [r7, #18]
        done |= (input[i-1] != 0);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bf14      	ite	ne
 800b3e6:	2301      	movne	r3, #1
 800b3e8:	2300      	moveq	r3, #0
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	b25a      	sxtb	r2, r3
 800b3ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	b25b      	sxtb	r3, r3
 800b3f6:	74fb      	strb	r3, [r7, #19]
        *data_len |= i * (done != prev_done);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	7cf9      	ldrb	r1, [r7, #19]
 800b3fe:	7cbb      	ldrb	r3, [r7, #18]
 800b400:	4299      	cmp	r1, r3
 800b402:	bf14      	ite	ne
 800b404:	2301      	movne	r3, #1
 800b406:	2300      	moveq	r3, #0
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	4619      	mov	r1, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	fb01 f303 	mul.w	r3, r1, r3
 800b412:	431a      	orrs	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]
    for (i = input_len; i > 0; i--) {
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1d7      	bne.n	800b3d4 <get_zeros_padding+0x2c>
    }

    return 0;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	ffff9f00 	.word	0xffff9f00

0800b438 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding(unsigned char *input, size_t input_len,
                          size_t *data_len)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
    if (NULL == input || NULL == data_len) {
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <get_no_padding+0x18>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <get_no_padding+0x1c>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <get_no_padding+0x30>)
 800b452:	e003      	b.n	800b45c <get_no_padding+0x24>
    }

    *data_len = input_len;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	601a      	str	r2, [r3, #0]

    return 0;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	ffff9f00 	.word	0xffff9f00

0800b46c <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode(mbedtls_cipher_context_t *ctx,
                                    mbedtls_cipher_padding_t mode)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]
    if (NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <mbedtls_cipher_set_padding_mode+0x1e>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d001      	beq.n	800b48e <mbedtls_cipher_set_padding_mode+0x22>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b48a:	4b1f      	ldr	r3, [pc, #124]	; (800b508 <mbedtls_cipher_set_padding_mode+0x9c>)
 800b48c:	e036      	b.n	800b4fc <mbedtls_cipher_set_padding_mode+0x90>

        return 0;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch (mode) {
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	2b04      	cmp	r3, #4
 800b492:	d830      	bhi.n	800b4f6 <mbedtls_cipher_set_padding_mode+0x8a>
 800b494:	a201      	add	r2, pc, #4	; (adr r2, 800b49c <mbedtls_cipher_set_padding_mode+0x30>)
 800b496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49a:	bf00      	nop
 800b49c:	0800b4b1 	.word	0x0800b4b1
 800b4a0:	0800b4bf 	.word	0x0800b4bf
 800b4a4:	0800b4cd 	.word	0x0800b4cd
 800b4a8:	0800b4db 	.word	0x0800b4db
 800b4ac:	0800b4e9 	.word	0x0800b4e9
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
        case MBEDTLS_PADDING_PKCS7:
            ctx->add_padding = add_pkcs_padding;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a16      	ldr	r2, [pc, #88]	; (800b50c <mbedtls_cipher_set_padding_mode+0xa0>)
 800b4b4:	60da      	str	r2, [r3, #12]
            ctx->get_padding = get_pkcs_padding;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a15      	ldr	r2, [pc, #84]	; (800b510 <mbedtls_cipher_set_padding_mode+0xa4>)
 800b4ba:	611a      	str	r2, [r3, #16]
            break;
 800b4bc:	e01d      	b.n	800b4fa <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
        case MBEDTLS_PADDING_ONE_AND_ZEROS:
            ctx->add_padding = add_one_and_zeros_padding;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a14      	ldr	r2, [pc, #80]	; (800b514 <mbedtls_cipher_set_padding_mode+0xa8>)
 800b4c2:	60da      	str	r2, [r3, #12]
            ctx->get_padding = get_one_and_zeros_padding;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a14      	ldr	r2, [pc, #80]	; (800b518 <mbedtls_cipher_set_padding_mode+0xac>)
 800b4c8:	611a      	str	r2, [r3, #16]
            break;
 800b4ca:	e016      	b.n	800b4fa <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
        case MBEDTLS_PADDING_ZEROS_AND_LEN:
            ctx->add_padding = add_zeros_and_len_padding;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a13      	ldr	r2, [pc, #76]	; (800b51c <mbedtls_cipher_set_padding_mode+0xb0>)
 800b4d0:	60da      	str	r2, [r3, #12]
            ctx->get_padding = get_zeros_and_len_padding;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a12      	ldr	r2, [pc, #72]	; (800b520 <mbedtls_cipher_set_padding_mode+0xb4>)
 800b4d6:	611a      	str	r2, [r3, #16]
            break;
 800b4d8:	e00f      	b.n	800b4fa <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
        case MBEDTLS_PADDING_ZEROS:
            ctx->add_padding = add_zeros_padding;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a11      	ldr	r2, [pc, #68]	; (800b524 <mbedtls_cipher_set_padding_mode+0xb8>)
 800b4de:	60da      	str	r2, [r3, #12]
            ctx->get_padding = get_zeros_padding;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a11      	ldr	r2, [pc, #68]	; (800b528 <mbedtls_cipher_set_padding_mode+0xbc>)
 800b4e4:	611a      	str	r2, [r3, #16]
            break;
 800b4e6:	e008      	b.n	800b4fa <mbedtls_cipher_set_padding_mode+0x8e>
#endif
        case MBEDTLS_PADDING_NONE:
            ctx->add_padding = NULL;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	60da      	str	r2, [r3, #12]
            ctx->get_padding = get_no_padding;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a0e      	ldr	r2, [pc, #56]	; (800b52c <mbedtls_cipher_set_padding_mode+0xc0>)
 800b4f2:	611a      	str	r2, [r3, #16]
            break;
 800b4f4:	e001      	b.n	800b4fa <mbedtls_cipher_set_padding_mode+0x8e>

        default:
            return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <mbedtls_cipher_set_padding_mode+0xc4>)
 800b4f8:	e000      	b.n	800b4fc <mbedtls_cipher_set_padding_mode+0x90>
    }

    return 0;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	ffff9f00 	.word	0xffff9f00
 800b50c:	0800b00d 	.word	0x0800b00d
 800b510:	0800b055 	.word	0x0800b055
 800b514:	0800b129 	.word	0x0800b129
 800b518:	0800b17d 	.word	0x0800b17d
 800b51c:	0800b249 	.word	0x0800b249
 800b520:	0800b2a1 	.word	0x0800b2a1
 800b524:	0800b371 	.word	0x0800b371
 800b528:	0800b3a9 	.word	0x0800b3a9
 800b52c:	0800b439 	.word	0x0800b439
 800b530:	ffff9f80 	.word	0xffff9f80

0800b534 <gcm_ctx_alloc>:
#include "platform.h"

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_gcm_context));
 800b53a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b53e:	2001      	movs	r0, #1
 800b540:	f005 fd78 	bl	8011034 <calloc>
 800b544:	4603      	mov	r3, r0
 800b546:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init((mbedtls_gcm_context *) ctx);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 feea 	bl	800d328 <mbedtls_gcm_init>
    }

    return ctx;
 800b554:	687b      	ldr	r3, [r7, #4]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <gcm_ctx_free>:

static void gcm_ctx_free(void *ctx)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free(ctx);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f002 fe62 	bl	800e230 <mbedtls_gcm_free>
    mbedtls_free(ctx);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f005 fd71 	bl	8011054 <free>
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc(void)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ccm_context));
 800b580:	217c      	movs	r1, #124	; 0x7c
 800b582:	2001      	movs	r0, #1
 800b584:	f005 fd56 	bl	8011034 <calloc>
 800b588:	4603      	mov	r3, r0
 800b58a:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init((mbedtls_ccm_context *) ctx);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fe fca5 	bl	8009ee2 <mbedtls_ccm_init>
    }

    return ctx;
 800b598:	687b      	ldr	r3, [r7, #4]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <ccm_ctx_free>:

static void ccm_ctx_free(void *ctx)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free(ctx);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fe fce9 	bl	8009f82 <mbedtls_ccm_free>
    mbedtls_free(ctx);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f005 fd4f 	bl	8011054 <free>
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb((mbedtls_aes_context *) ctx, operation, input, output);
 800b5ce:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7fb ffe6 	bl	80075a8 <mbedtls_aes_crypt_ecb>
 800b5dc:	4603      	mov	r3, r0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b086      	sub	sp, #24
 800b5ea:	af02      	add	r7, sp, #8
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	603b      	str	r3, [r7, #0]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc((mbedtls_aes_context *) ctx, operation, length, iv, input,
 800b5f6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7fb fff2 	bl	80075f0 <mbedtls_aes_crypt_cbc>
 800b60c:	4603      	mov	r3, r0
                                 output);
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                 size_t length, size_t *iv_off, unsigned char *iv,
                                 const unsigned char *input, unsigned char *output)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b088      	sub	sp, #32
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	460b      	mov	r3, r1
 800b624:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128((mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 800b626:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	9302      	str	r3, [sp, #8]
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7fc f996 	bl	800796c <mbedtls_aes_crypt_cfb128>
 800b640:	4603      	mov	r3, r0
                                    input, output);
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap(void *ctx, size_t length, size_t *iv_off,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af02      	add	r7, sp, #8
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	607a      	str	r2, [r7, #4]
 800b656:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb((mbedtls_aes_context *) ctx, length, iv_off,
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68b9      	ldr	r1, [r7, #8]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7fc fa09 	bl	8007a7e <mbedtls_aes_crypt_ofb>
 800b66c:	4603      	mov	r3, r0
                                 iv, input, output);
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                              unsigned char *nonce_counter, unsigned char *stream_block,
                              const unsigned char *input, unsigned char *output)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b088      	sub	sp, #32
 800b67a:	af04      	add	r7, sp, #16
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
 800b682:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr((mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	9302      	str	r3, [sp, #8]
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	9301      	str	r3, [sp, #4]
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7fc fa32 	bl	8007b00 <mbedtls_aes_crypt_ctr>
 800b69c:	4603      	mov	r3, r0
                                 stream_block, input, output);
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap(void *ctx, mbedtls_operation_t operation,
                              size_t length,
                              const unsigned char data_unit[16],
                              const unsigned char *input,
                              unsigned char *output)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af02      	add	r7, sp, #8
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	613b      	str	r3, [r7, #16]
    int mode;

    switch (operation) {
 800b6bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <aes_crypt_xts_wrap+0x26>
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d105      	bne.n	800b6d4 <aes_crypt_xts_wrap+0x2c>
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	617b      	str	r3, [r7, #20]
            break;
 800b6cc:	e004      	b.n	800b6d8 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
            break;
 800b6d2:	e001      	b.n	800b6d8 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b6d4:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <aes_crypt_xts_wrap+0x50>)
 800b6d6:	e00a      	b.n	800b6ee <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts(xts_ctx, mode, length,
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6979      	ldr	r1, [r7, #20]
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f7fc f85c 	bl	80077a4 <mbedtls_aes_crypt_xts>
 800b6ec:	4603      	mov	r3, r0
                                 data_unit, input, output);
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	ffff9f00 	.word	0xffff9f00

0800b6fc <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec((mbedtls_aes_context *) ctx, key, key_bitlen);
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7fa ffd5 	bl	80066bc <mbedtls_aes_setkey_dec>
 800b712:	4603      	mov	r3, r0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc((mbedtls_aes_context *) ctx, key, key_bitlen);
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7fa fddf 	bl	80062f0 <mbedtls_aes_setkey_enc>
 800b732:	4603      	mov	r3, r0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <aes_ctx_alloc>:

static void *aes_ctx_alloc(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc(1, sizeof(mbedtls_aes_context));
 800b742:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b746:	2001      	movs	r0, #1
 800b748:	f005 fc74 	bl	8011034 <calloc>
 800b74c:	4603      	mov	r3, r0
 800b74e:	607b      	str	r3, [r7, #4]

    if (aes == NULL) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <aes_ctx_alloc+0x1e>
        return NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	e003      	b.n	800b762 <aes_ctx_alloc+0x26>
    }

    mbedtls_aes_init(aes);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7fa fd76 	bl	800624c <mbedtls_aes_init>

    return aes;
 800b760:	687b      	ldr	r3, [r7, #4]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <aes_ctx_free>:

static void aes_ctx_free(void *ctx)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free((mbedtls_aes_context *) ctx);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7fa fd78 	bl	8006268 <mbedtls_aes_free>
    mbedtls_free(ctx);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f005 fc6b 	bl	8011054 <free>
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b086      	sub	sp, #24
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_enc(xts_ctx, key, key_bitlen);
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	6978      	ldr	r0, [r7, #20]
 800b79c:	f7fb f90a 	bl	80069b4 <mbedtls_aes_xts_setkey_enc>
 800b7a0:	4603      	mov	r3, r0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_dec(xts_ctx, key, key_bitlen);
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	6978      	ldr	r0, [r7, #20]
 800b7c0:	f7fb f92f 	bl	8006a22 <mbedtls_aes_xts_setkey_dec>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc(void)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc(1, sizeof(*xts_ctx));
 800b7d4:	f44f 710c 	mov.w	r1, #560	; 0x230
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f005 fc2b 	bl	8011034 <calloc>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	607b      	str	r3, [r7, #4]

    if (xts_ctx != NULL) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init(xts_ctx);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7fa fd4e 	bl	800628a <mbedtls_aes_xts_init>
    }

    return xts_ctx;
 800b7ee:	687b      	ldr	r3, [r7, #4]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <xts_aes_ctx_free>:

static void xts_aes_ctx_free(void *ctx)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	60fb      	str	r3, [r7, #12]

    if (xts_ctx == NULL) {
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <xts_aes_ctx_free+0x20>
        return;
    }

    mbedtls_aes_xts_free(xts_ctx);
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7fa fd4f 	bl	80062ae <mbedtls_aes_xts_free>
    mbedtls_free(xts_ctx);
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f005 fc1f 	bl	8011054 <free>
 800b816:	e000      	b.n	800b81a <xts_aes_ctx_free+0x22>
        return;
 800b818:	bf00      	nop
}
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	2102      	movs	r1, #2
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f001 fee7 	bl	800d606 <mbedtls_gcm_setkey>
 800b838:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	2102      	movs	r1, #2
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7fe fb51 	bl	8009efc <mbedtls_ccm_setkey>
 800b85a:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                                   const unsigned char *input, unsigned char *output)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	460b      	mov	r3, r1
 800b872:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb((mbedtls_camellia_context *) ctx, operation, input,
 800b874:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7fe f8f1 	bl	8009a64 <mbedtls_camellia_crypt_ecb>
 800b882:	4603      	mov	r3, r0
                                      output);
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                                   size_t length, unsigned char *iv,
                                   const unsigned char *input, unsigned char *output)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	607a      	str	r2, [r7, #4]
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	460b      	mov	r3, r1
 800b89a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc((mbedtls_camellia_context *) ctx, operation, length, iv,
 800b89c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7fe f9e4 	bl	8009c7a <mbedtls_camellia_crypt_cbc>
 800b8b2:	4603      	mov	r3, r0
                                      input, output);
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                      size_t length, size_t *iv_off, unsigned char *iv,
                                      const unsigned char *input, unsigned char *output)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	607a      	str	r2, [r7, #4]
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128((mbedtls_camellia_context *) ctx, operation, length,
 800b8cc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	9302      	str	r3, [sp, #8]
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7fe fa32 	bl	8009d4a <mbedtls_camellia_crypt_cfb128>
 800b8e6:	4603      	mov	r3, r0
                                         iv_off, iv, input, output);
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                                   unsigned char *nonce_counter, unsigned char *stream_block,
                                   const unsigned char *input, unsigned char *output)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af04      	add	r7, sp, #16
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr((mbedtls_camellia_context *) ctx, length, nc_off,
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	9302      	str	r3, [sp, #8]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	68b9      	ldr	r1, [r7, #8]
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7fe fa92 	bl	8009e3a <mbedtls_camellia_crypt_ctr>
 800b916:	4603      	mov	r3, r0
                                      nonce_counter, stream_block, input, output);
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec((mbedtls_camellia_context *) ctx, key, key_bitlen);
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	68b9      	ldr	r1, [r7, #8]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f7fd ff9b 	bl	800986c <mbedtls_camellia_setkey_dec>
 800b936:	4603      	mov	r3, r0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc((mbedtls_camellia_context *) ctx, key, key_bitlen);
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7fd f943 	bl	8008bdc <mbedtls_camellia_setkey_enc>
 800b956:	4603      	mov	r3, r0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <camellia_ctx_alloc>:

static void *camellia_ctx_alloc(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_camellia_context));
 800b966:	f44f 718a 	mov.w	r1, #276	; 0x114
 800b96a:	2001      	movs	r0, #1
 800b96c:	f005 fb62 	bl	8011034 <calloc>
 800b970:	4603      	mov	r3, r0
 800b972:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <camellia_ctx_alloc+0x1e>
        return NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	e003      	b.n	800b986 <camellia_ctx_alloc+0x26>
    }

    mbedtls_camellia_init(ctx);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7fd f90c 	bl	8008b9c <mbedtls_camellia_init>

    return ctx;
 800b984:	687b      	ldr	r3, [r7, #4]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <camellia_ctx_free>:

static void camellia_ctx_free(void *ctx)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free((mbedtls_camellia_context *) ctx);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7fd f90e 	bl	8008bb8 <mbedtls_camellia_free>
    mbedtls_free(ctx);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f005 fb59 	bl	8011054 <free>
}
 800b9a2:	bf00      	nop
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	2105      	movs	r1, #5
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f001 fe22 	bl	800d606 <mbedtls_gcm_setkey>
 800b9c2:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	2105      	movs	r1, #5
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7fe fa8c 	bl	8009efc <mbedtls_ccm_setkey>
 800b9e4:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <aria_crypt_ecb_wrap>:

#if defined(MBEDTLS_ARIA_C)

static int aria_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	72fb      	strb	r3, [r7, #11]
    (void) operation;
    return mbedtls_aria_crypt_ecb((mbedtls_aria_context *) ctx, input,
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7fc fd04 	bl	8008410 <mbedtls_aria_crypt_ecb>
 800ba08:	4603      	mov	r3, r0
                                  output);
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <aria_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aria_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                               size_t length, unsigned char *iv,
                               const unsigned char *input, unsigned char *output)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b086      	sub	sp, #24
 800ba16:	af02      	add	r7, sp, #8
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cbc((mbedtls_aria_context *) ctx, operation, length, iv,
 800ba22:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7fc fe07 	bl	8008646 <mbedtls_aria_crypt_cbc>
 800ba38:	4603      	mov	r3, r0
                                  input, output);
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <aria_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aria_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                  size_t length, size_t *iv_off, unsigned char *iv,
                                  const unsigned char *input, unsigned char *output)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b088      	sub	sp, #32
 800ba46:	af04      	add	r7, sp, #16
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cfb128((mbedtls_aria_context *) ctx, operation, length,
 800ba52:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	9302      	str	r3, [sp, #8]
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7fc fe4a 	bl	8008700 <mbedtls_aria_crypt_cfb128>
 800ba6c:	4603      	mov	r3, r0
                                     iv_off, iv, input, output);
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <aria_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aria_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                               unsigned char *nonce_counter, unsigned char *stream_block,
                               const unsigned char *input, unsigned char *output)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b088      	sub	sp, #32
 800ba7a:	af04      	add	r7, sp, #16
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607a      	str	r2, [r7, #4]
 800ba82:	603b      	str	r3, [r7, #0]
    return mbedtls_aria_crypt_ctr((mbedtls_aria_context *) ctx, length, nc_off,
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7fc fe9b 	bl	80087d2 <mbedtls_aria_crypt_ctr>
 800ba9c:	4603      	mov	r3, r0
                                  nonce_counter, stream_block, input, output);
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <aria_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aria_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_dec((mbedtls_aria_context *) ctx, key, key_bitlen);
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7fc fc32 	bl	8008320 <mbedtls_aria_setkey_dec>
 800babc:	4603      	mov	r3, r0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <aria_setkey_enc_wrap>:

static int aria_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_enc((mbedtls_aria_context *) ctx, key, key_bitlen);
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7fc fae8 	bl	80080ac <mbedtls_aria_setkey_enc>
 800badc:	4603      	mov	r3, r0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <aria_ctx_alloc>:

static void *aria_ctx_alloc(void)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
    mbedtls_aria_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_aria_context));
 800baec:	f44f 718a 	mov.w	r1, #276	; 0x114
 800baf0:	2001      	movs	r0, #1
 800baf2:	f005 fa9f 	bl	8011034 <calloc>
 800baf6:	4603      	mov	r3, r0
 800baf8:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <aria_ctx_alloc+0x1e>
        return NULL;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e003      	b.n	800bb0c <aria_ctx_alloc+0x26>
    }

    mbedtls_aria_init(ctx);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7fc fd7f 	bl	8008608 <mbedtls_aria_init>

    return ctx;
 800bb0a:	687b      	ldr	r3, [r7, #4]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <aria_ctx_free>:

static void aria_ctx_free(void *ctx)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    mbedtls_aria_free((mbedtls_aria_context *) ctx);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7fc fd81 	bl	8008624 <mbedtls_aria_free>
    mbedtls_free(ctx);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f005 fa96 	bl	8011054 <free>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <gcm_aria_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	2106      	movs	r1, #6
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f001 fd5f 	bl	800d606 <mbedtls_gcm_setkey>
 800bb48:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <ccm_aria_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	60f8      	str	r0, [r7, #12]
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	2106      	movs	r1, #6
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7fe f9c9 	bl	8009efc <mbedtls_ccm_setkey>
 800bb6a:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	607a      	str	r2, [r7, #4]
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	460b      	mov	r3, r1
 800bb82:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb((mbedtls_des_context *) ctx, input, output);
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 fe69 	bl	800c860 <mbedtls_des_crypt_ecb>
 800bb8e:	4603      	mov	r3, r0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	603b      	str	r3, [r7, #0]
 800bba4:	460b      	mov	r3, r1
 800bba6:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb((mbedtls_des3_context *) ctx, input, output);
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f001 f853 	bl	800cc58 <mbedtls_des3_crypt_ecb>
 800bbb2:	4603      	mov	r3, r0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	607a      	str	r2, [r7, #4]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc((mbedtls_des_context *) ctx, operation, length, iv, input,
 800bbcc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 ffd1 	bl	800cb84 <mbedtls_des_crypt_cbc>
 800bbe2:	4603      	mov	r3, r0
                                 output);
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                               unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af02      	add	r7, sp, #8
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc((mbedtls_des3_context *) ctx, operation, length, iv, input,
 800bbfc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	9301      	str	r3, [sp, #4]
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f001 fb21 	bl	800d254 <mbedtls_des3_crypt_cbc>
 800bc12:	4603      	mov	r3, r0
                                  output);
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec((mbedtls_des_context *) ctx, key);
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 fc35 	bl	800c49a <mbedtls_des_setkey_dec>
 800bc30:	4603      	mov	r3, r0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	60f8      	str	r0, [r7, #12]
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc((mbedtls_des_context *) ctx, key);
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fc17 	bl	800c47c <mbedtls_des_setkey_enc>
 800bc4e:	4603      	mov	r3, r0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec((mbedtls_des3_context *) ctx, key);
 800bc64:	68b9      	ldr	r1, [r7, #8]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f000 fd0b 	bl	800c682 <mbedtls_des3_set2key_dec>
 800bc6c:	4603      	mov	r3, r0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc((mbedtls_des3_context *) ctx, key);
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 fcd4 	bl	800c632 <mbedtls_des3_set2key_enc>
 800bc8a:	4603      	mov	r3, r0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec((mbedtls_des3_context *) ctx, key);
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fdb4 	bl	800c810 <mbedtls_des3_set3key_dec>
 800bca8:	4603      	mov	r3, r0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc((mbedtls_des3_context *) ctx, key);
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 fd7d 	bl	800c7c0 <mbedtls_des3_set3key_enc>
 800bcc6:	4603      	mov	r3, r0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <des_ctx_alloc>:

static void *des_ctx_alloc(void)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc(1, sizeof(mbedtls_des_context));
 800bcd6:	2180      	movs	r1, #128	; 0x80
 800bcd8:	2001      	movs	r0, #1
 800bcda:	f005 f9ab 	bl	8011034 <calloc>
 800bcde:	4603      	mov	r3, r0
 800bce0:	607b      	str	r3, [r7, #4]

    if (des == NULL) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <des_ctx_alloc+0x1c>
        return NULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	e003      	b.n	800bcf4 <des_ctx_alloc+0x24>
    }

    mbedtls_des_init(des);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f9a4 	bl	800c03a <mbedtls_des_init>

    return des;
 800bcf2:	687b      	ldr	r3, [r7, #4]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <des_ctx_free>:

static void des_ctx_free(void *ctx)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    mbedtls_des_free((mbedtls_des_context *) ctx);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f9a5 	bl	800c054 <mbedtls_des_free>
    mbedtls_free(ctx);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f005 f9a2 	bl	8011054 <free>
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <des3_ctx_alloc>:

static void *des3_ctx_alloc(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc(1, sizeof(mbedtls_des3_context));
 800bd1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800bd22:	2001      	movs	r0, #1
 800bd24:	f005 f986 	bl	8011034 <calloc>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	607b      	str	r3, [r7, #4]

    if (des3 == NULL) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <des3_ctx_alloc+0x1e>
        return NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e003      	b.n	800bd3e <des3_ctx_alloc+0x26>
    }

    mbedtls_des3_init(des3);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f99c 	bl	800c074 <mbedtls_des3_init>

    return des3;
 800bd3c:	687b      	ldr	r3, [r7, #4]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <des3_ctx_free>:

static void des3_ctx_free(void *ctx)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b082      	sub	sp, #8
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free((mbedtls_des3_context *) ctx);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f99e 	bl	800c090 <mbedtls_des3_free>
    mbedtls_free(ctx);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f005 f97d 	bl	8011054 <free>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd76:	d001      	beq.n	800bd7c <chacha20_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <chacha20_setkey_wrap+0x34>)
 800bd7a:	e009      	b.n	800bd90 <chacha20_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chacha20_setkey((mbedtls_chacha20_context *) ctx, key)) {
 800bd7c:	68b9      	ldr	r1, [r7, #8]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7fe fc4a 	bl	800a618 <mbedtls_chacha20_setkey>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <chacha20_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800bd8a:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <chacha20_setkey_wrap+0x34>)
 800bd8c:	e000      	b.n	800bd90 <chacha20_setkey_wrap+0x2c>
    }

    return 0;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	ffff9f00 	.word	0xffff9f00

0800bd9c <chacha20_stream_wrap>:

static int chacha20_stream_wrap(void *ctx,  size_t length,
                                const unsigned char *input,
                                unsigned char *output)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800bdaa:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800bdae:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update(ctx, length, input, output);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	68b9      	ldr	r1, [r7, #8]
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f7fe fc8a 	bl	800a6d0 <mbedtls_chacha20_update>
 800bdbc:	6178      	str	r0, [r7, #20]
    if (ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) {
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800bdc4:	d101      	bne.n	800bdca <chacha20_stream_wrap+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800bdc6:	4b03      	ldr	r3, [pc, #12]	; (800bdd4 <chacha20_stream_wrap+0x38>)
 800bdc8:	e000      	b.n	800bdcc <chacha20_stream_wrap+0x30>
    }

    return ret;
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	ffff9f00 	.word	0xffff9f00

0800bdd8 <chacha20_ctx_alloc>:

static void *chacha20_ctx_alloc(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chacha20_context));
 800bdde:	2184      	movs	r1, #132	; 0x84
 800bde0:	2001      	movs	r0, #1
 800bde2:	f005 f927 	bl	8011034 <calloc>
 800bde6:	4603      	mov	r3, r0
 800bde8:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <chacha20_ctx_alloc+0x1c>
        return NULL;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e003      	b.n	800bdfc <chacha20_ctx_alloc+0x24>
    }

    mbedtls_chacha20_init(ctx);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7fe fbe8 	bl	800a5ca <mbedtls_chacha20_init>

    return ctx;
 800bdfa:	687b      	ldr	r3, [r7, #4]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <chacha20_ctx_free>:

static void chacha20_ctx_free(void *ctx)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free((mbedtls_chacha20_context *) ctx);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7fe fbf3 	bl	800a5f8 <mbedtls_chacha20_free>
    mbedtls_free(ctx);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f005 f91e 	bl	8011054 <free>
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap(void *ctx,
                                  const unsigned char *key,
                                  unsigned int key_bitlen)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be32:	d001      	beq.n	800be38 <chachapoly_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <chachapoly_setkey_wrap+0x34>)
 800be36:	e009      	b.n	800be4c <chachapoly_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chachapoly_setkey((mbedtls_chachapoly_context *) ctx, key)) {
 800be38:	68b9      	ldr	r1, [r7, #8]
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7fe fd37 	bl	800a8ae <mbedtls_chachapoly_setkey>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <chachapoly_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800be46:	4b03      	ldr	r3, [pc, #12]	; (800be54 <chachapoly_setkey_wrap+0x34>)
 800be48:	e000      	b.n	800be4c <chachapoly_setkey_wrap+0x2c>
    }

    return 0;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	ffff9f00 	.word	0xffff9f00

0800be58 <chachapoly_ctx_alloc>:

static void *chachapoly_ctx_alloc(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chachapoly_context));
 800be5e:	21e8      	movs	r1, #232	; 0xe8
 800be60:	2001      	movs	r0, #1
 800be62:	f005 f8e7 	bl	8011034 <calloc>
 800be66:	4603      	mov	r3, r0
 800be68:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <chachapoly_ctx_alloc+0x1c>
        return NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	e003      	b.n	800be7c <chachapoly_ctx_alloc+0x24>
    }

    mbedtls_chachapoly_init(ctx);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7fe fcc8 	bl	800a80a <mbedtls_chachapoly_init>

    return ctx;
 800be7a:	687b      	ldr	r3, [r7, #4]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <chachapoly_ctx_free>:

static void chachapoly_ctx_free(void *ctx)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free((mbedtls_chachapoly_context *) ctx);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7fe fce3 	bl	800a858 <mbedtls_chachapoly_free>
    mbedtls_free(ctx);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f005 f8de 	bl	8011054 <free>
}
 800be98:	bf00      	nop
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <kw_ctx_alloc>:
};
#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */

#if defined(MBEDTLS_NIST_KW_C)
static void *kw_ctx_alloc(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_nist_kw_context));
 800bea6:	2144      	movs	r1, #68	; 0x44
 800bea8:	2001      	movs	r0, #1
 800beaa:	f005 f8c3 	bl	8011034 <calloc>
 800beae:	4603      	mov	r3, r0
 800beb0:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <kw_ctx_alloc+0x1e>
        mbedtls_nist_kw_init((mbedtls_nist_kw_context *) ctx);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f002 f9ce 	bl	800e25a <mbedtls_nist_kw_init>
    }

    return ctx;
 800bebe:	687b      	ldr	r3, [r7, #4]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <kw_ctx_free>:

static void kw_ctx_free(void *ctx)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
    mbedtls_nist_kw_free(ctx);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f002 fa1b 	bl	800e30c <mbedtls_nist_kw_free>
    mbedtls_free(ctx);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f005 f8bc 	bl	8011054 <free>
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <kw_aes_setkey_wrap>:

static int kw_aes_setkey_wrap(void *ctx, const unsigned char *key,
                              unsigned int key_bitlen)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 800bef0:	2301      	movs	r3, #1
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	2102      	movs	r1, #2
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f002 f9ba 	bl	800e274 <mbedtls_nist_kw_setkey>
 800bf00:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1);
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <kw_aes_setkey_unwrap>:

static int kw_aes_setkey_unwrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b086      	sub	sp, #24
 800bf0e:	af02      	add	r7, sp, #8
 800bf10:	60f8      	str	r0, [r7, #12]
 800bf12:	60b9      	str	r1, [r7, #8]
 800bf14:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 800bf16:	2300      	movs	r3, #0
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	2102      	movs	r1, #2
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f002 f9a7 	bl	800e274 <mbedtls_nist_kw_setkey>
 800bf26:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0);
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <mbedtls_ct_uchar_mask_of_range>:
 */
MBEDTLS_STATIC_TESTABLE
unsigned char mbedtls_ct_uchar_mask_of_range(unsigned char low,
                                             unsigned char high,
                                             unsigned char c)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	71fb      	strb	r3, [r7, #7]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	71bb      	strb	r3, [r7, #6]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	717b      	strb	r3, [r7, #5]
    /* low_mask is: 0 if low <= c, 0x...ff if low > c */
    unsigned low_mask = ((unsigned) c - low) >> 8;
 800bf42:	797a      	ldrb	r2, [r7, #5]
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	0a1b      	lsrs	r3, r3, #8
 800bf4a:	60fb      	str	r3, [r7, #12]
    /* high_mask is: 0 if c <= high, 0x...ff if c > high */
    unsigned high_mask = ((unsigned) high - c) >> 8;
 800bf4c:	79ba      	ldrb	r2, [r7, #6]
 800bf4e:	797b      	ldrb	r3, [r7, #5]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	0a1b      	lsrs	r3, r3, #8
 800bf54:	60bb      	str	r3, [r7, #8]
    return ~(low_mask | high_mask) & 0xff;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	43db      	mvns	r3, r3
 800bf64:	b2db      	uxtb	r3, r3
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <mbedtls_ct_base64_dec_value>:
    digit |= mbedtls_ct_uchar_mask_of_range(63, 63, value) & '/';
    return digit;
}

signed char mbedtls_ct_base64_dec_value(unsigned char c)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	4603      	mov	r3, r0
 800bf7a:	71fb      	strb	r3, [r7, #7]
    unsigned char val = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]
    /* For each range of digits, if c is in that range, mask val with
     * the corresponding value. Since c can only be in a single range,
     * only at most one masking will change val. Set val to one plus
     * the desired value so that it stays 0 if c is in none of the ranges. */
    val |= mbedtls_ct_uchar_mask_of_range('A', 'Z', c) & (c - 'A' +  0 + 1);
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	461a      	mov	r2, r3
 800bf84:	215a      	movs	r1, #90	; 0x5a
 800bf86:	2041      	movs	r0, #65	; 0x41
 800bf88:	f7ff ffd2 	bl	800bf30 <mbedtls_ct_uchar_mask_of_range>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	3b40      	subs	r3, #64	; 0x40
 800bf94:	4013      	ands	r3, r2
 800bf96:	b25a      	sxtb	r2, r3
 800bf98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	b25b      	sxtb	r3, r3
 800bfa0:	73fb      	strb	r3, [r7, #15]
    val |= mbedtls_ct_uchar_mask_of_range('a', 'z', c) & (c - 'a' + 26 + 1);
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	217a      	movs	r1, #122	; 0x7a
 800bfa8:	2061      	movs	r0, #97	; 0x61
 800bfaa:	f7ff ffc1 	bl	800bf30 <mbedtls_ct_uchar_mask_of_range>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	3b46      	subs	r3, #70	; 0x46
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	b25a      	sxtb	r2, r3
 800bfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	b25b      	sxtb	r3, r3
 800bfc2:	73fb      	strb	r3, [r7, #15]
    val |= mbedtls_ct_uchar_mask_of_range('0', '9', c) & (c - '0' + 52 + 1);
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	2139      	movs	r1, #57	; 0x39
 800bfca:	2030      	movs	r0, #48	; 0x30
 800bfcc:	f7ff ffb0 	bl	800bf30 <mbedtls_ct_uchar_mask_of_range>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	3305      	adds	r3, #5
 800bfd8:	4013      	ands	r3, r2
 800bfda:	b25a      	sxtb	r2, r3
 800bfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	b25b      	sxtb	r3, r3
 800bfe4:	73fb      	strb	r3, [r7, #15]
    val |= mbedtls_ct_uchar_mask_of_range('+', '+', c) & (c - '+' + 62 + 1);
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	212b      	movs	r1, #43	; 0x2b
 800bfec:	202b      	movs	r0, #43	; 0x2b
 800bfee:	f7ff ff9f 	bl	800bf30 <mbedtls_ct_uchar_mask_of_range>
 800bff2:	4603      	mov	r3, r0
 800bff4:	461a      	mov	r2, r3
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	3314      	adds	r3, #20
 800bffa:	4013      	ands	r3, r2
 800bffc:	b25a      	sxtb	r2, r3
 800bffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c002:	4313      	orrs	r3, r2
 800c004:	b25b      	sxtb	r3, r3
 800c006:	73fb      	strb	r3, [r7, #15]
    val |= mbedtls_ct_uchar_mask_of_range('/', '/', c) & (c - '/' + 63 + 1);
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	461a      	mov	r2, r3
 800c00c:	212f      	movs	r1, #47	; 0x2f
 800c00e:	202f      	movs	r0, #47	; 0x2f
 800c010:	f7ff ff8e 	bl	800bf30 <mbedtls_ct_uchar_mask_of_range>
 800c014:	4603      	mov	r3, r0
 800c016:	461a      	mov	r2, r3
 800c018:	79fb      	ldrb	r3, [r7, #7]
 800c01a:	3311      	adds	r3, #17
 800c01c:	4013      	ands	r3, r2
 800c01e:	b25a      	sxtb	r2, r3
 800c020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c024:	4313      	orrs	r3, r2
 800c026:	b25b      	sxtb	r3, r3
 800c028:	73fb      	strb	r3, [r7, #15]
    /* At this point, val is 0 if c is an invalid digit and v+1 if c is
     * a digit with the value v. */
    return val - 1;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	b25b      	sxtb	r3, r3
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while (0)

void mbedtls_des_init(mbedtls_des_context *ctx)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des_context));
 800c042:	2280      	movs	r2, #128	; 0x80
 800c044:	2100      	movs	r1, #0
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f005 f81a 	bl	8011080 <memset>
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <mbedtls_des_free>:

void mbedtls_des_free(mbedtls_des_context *ctx)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <mbedtls_des_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des_context));
 800c062:	2180      	movs	r1, #128	; 0x80
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f002 f9e3 	bl	800e430 <mbedtls_platform_zeroize>
 800c06a:	e000      	b.n	800c06e <mbedtls_des_free+0x1a>
        return;
 800c06c:	bf00      	nop
}
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <mbedtls_des3_init>:

void mbedtls_des3_init(mbedtls_des3_context *ctx)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des3_context));
 800c07c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c080:	2100      	movs	r1, #0
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f004 fffc 	bl	8011080 <memset>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <mbedtls_des3_free>:

void mbedtls_des3_free(mbedtls_des3_context *ctx)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d005      	beq.n	800c0aa <mbedtls_des3_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des3_context));
 800c09e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f002 f9c4 	bl	800e430 <mbedtls_platform_zeroize>
 800c0a8:	e000      	b.n	800c0ac <mbedtls_des3_free+0x1c>
        return;
 800c0aa:	bf00      	nop
}
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <mbedtls_des_setkey>:
    return 0;
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey(uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE(key, 0);
 800c0be:	6838      	ldr	r0, [r7, #0]
 800c0c0:	f002 f934 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	ba1b      	rev	r3, r3
 800c0c8:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE(key, 4);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f002 f92c 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	ba1b      	rev	r3, r3
 800c0d8:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	091a      	lsrs	r2, r3, #4
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	4053      	eors	r3, r2
 800c0e2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c0e6:	60bb      	str	r3, [r7, #8]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	4053      	eors	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	011b      	lsls	r3, r3, #4
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4053      	eors	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
    T =  ((Y) ^ X) & 0x10101010;  X ^= T; Y ^= (T);
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	4053      	eors	r3, r2
 800c100:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 800c104:	60bb      	str	r3, [r7, #8]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	4053      	eors	r3, r2
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	4053      	eors	r3, r2
 800c114:	60fb      	str	r3, [r7, #12]

    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	4a55      	ldr	r2, [pc, #340]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c122:	00da      	lsls	r2, r3, #3
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	0a1b      	lsrs	r3, r3, #8
 800c128:	f003 030f 	and.w	r3, r3, #15
 800c12c:	4951      	ldr	r1, [pc, #324]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c12e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	431a      	orrs	r2, r3
        | (LHs[(X >> 16) & 0xF] << 1) | (LHs[(X >> 24) & 0xF])
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	0c1b      	lsrs	r3, r3, #16
 800c13a:	f003 030f 	and.w	r3, r3, #15
 800c13e:	494d      	ldr	r1, [pc, #308]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	431a      	orrs	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	0e1b      	lsrs	r3, r3, #24
 800c14c:	f003 030f 	and.w	r3, r3, #15
 800c150:	4948      	ldr	r1, [pc, #288]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c156:	431a      	orrs	r2, r3
        | (LHs[(X >>  5) & 0xF] << 7) | (LHs[(X >> 13) & 0xF] << 6)
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	4944      	ldr	r1, [pc, #272]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c166:	01db      	lsls	r3, r3, #7
 800c168:	431a      	orrs	r2, r3
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	0b5b      	lsrs	r3, r3, #13
 800c16e:	f003 030f 	and.w	r3, r3, #15
 800c172:	4940      	ldr	r1, [pc, #256]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c174:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c178:	019b      	lsls	r3, r3, #6
 800c17a:	431a      	orrs	r2, r3
        | (LHs[(X >> 21) & 0xF] << 5) | (LHs[(X >> 29) & 0xF] << 4);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	0d5b      	lsrs	r3, r3, #21
 800c180:	f003 030f 	and.w	r3, r3, #15
 800c184:	493b      	ldr	r1, [pc, #236]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c186:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c18a:	015b      	lsls	r3, r3, #5
 800c18c:	431a      	orrs	r2, r3
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	0f5b      	lsrs	r3, r3, #29
 800c192:	4938      	ldr	r1, [pc, #224]	; (800c274 <mbedtls_des_setkey+0x1c0>)
 800c194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c198:	011b      	lsls	r3, r3, #4
    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]

    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	085b      	lsrs	r3, r3, #1
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	4a34      	ldr	r2, [pc, #208]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ac:	00da      	lsls	r2, r3, #3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	0a5b      	lsrs	r3, r3, #9
 800c1b2:	f003 030f 	and.w	r3, r3, #15
 800c1b6:	4930      	ldr	r1, [pc, #192]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	431a      	orrs	r2, r3
        | (RHs[(Y >> 17) & 0xF] << 1) | (RHs[(Y >> 25) & 0xF])
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	0c5b      	lsrs	r3, r3, #17
 800c1c4:	f003 030f 	and.w	r3, r3, #15
 800c1c8:	492b      	ldr	r1, [pc, #172]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	0e5b      	lsrs	r3, r3, #25
 800c1d6:	f003 030f 	and.w	r3, r3, #15
 800c1da:	4927      	ldr	r1, [pc, #156]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1e0:	431a      	orrs	r2, r3
        | (RHs[(Y >>  4) & 0xF] << 7) | (RHs[(Y >> 12) & 0xF] << 6)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	091b      	lsrs	r3, r3, #4
 800c1e6:	f003 030f 	and.w	r3, r3, #15
 800c1ea:	4923      	ldr	r1, [pc, #140]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1f0:	01db      	lsls	r3, r3, #7
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	0b1b      	lsrs	r3, r3, #12
 800c1f8:	f003 030f 	and.w	r3, r3, #15
 800c1fc:	491e      	ldr	r1, [pc, #120]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c1fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c202:	019b      	lsls	r3, r3, #6
 800c204:	431a      	orrs	r2, r3
        | (RHs[(Y >> 20) & 0xF] << 5) | (RHs[(Y >> 28) & 0xF] << 4);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	0d1b      	lsrs	r3, r3, #20
 800c20a:	f003 030f 	and.w	r3, r3, #15
 800c20e:	491a      	ldr	r1, [pc, #104]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c214:	015b      	lsls	r3, r3, #5
 800c216:	431a      	orrs	r2, r3
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	0f1b      	lsrs	r3, r3, #28
 800c21c:	4916      	ldr	r1, [pc, #88]	; (800c278 <mbedtls_des_setkey+0x1c4>)
 800c21e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c222:	011b      	lsls	r3, r3, #4
    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 800c224:	4313      	orrs	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c22e:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c236:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for (i = 0; i < 16; i++) {
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	e114      	b.n	800c468 <mbedtls_des_setkey+0x3b4>
        if (i < 2 || i == 8 || i == 15) {
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b01      	cmp	r3, #1
 800c242:	dd05      	ble.n	800c250 <mbedtls_des_setkey+0x19c>
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b08      	cmp	r3, #8
 800c248:	d002      	beq.n	800c250 <mbedtls_des_setkey+0x19c>
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2b0f      	cmp	r3, #15
 800c24e:	d115      	bne.n	800c27c <mbedtls_des_setkey+0x1c8>
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	005a      	lsls	r2, r3, #1
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	0edb      	lsrs	r3, r3, #27
 800c258:	4313      	orrs	r3, r2
 800c25a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c25e:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	005a      	lsls	r2, r3, #1
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	0edb      	lsrs	r3, r3, #27
 800c268:	4313      	orrs	r3, r2
 800c26a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e014      	b.n	800c29c <mbedtls_des_setkey+0x1e8>
 800c272:	bf00      	nop
 800c274:	080140f0 	.word	0x080140f0
 800c278:	08014130 	.word	0x08014130
        } else {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	009a      	lsls	r2, r3, #2
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	0e9b      	lsrs	r3, r3, #26
 800c284:	4313      	orrs	r3, r2
 800c286:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c28a:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	009a      	lsls	r2, r3, #2
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	0e9b      	lsrs	r3, r3, #26
 800c294:	4313      	orrs	r3, r2
 800c296:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c29a:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	071b      	lsls	r3, r3, #28
 800c2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ac:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	039b      	lsls	r3, r3, #14
 800c2b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	049b      	lsls	r3, r3, #18
 800c2bc:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 800c2c0:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	019b      	lsls	r3, r3, #6
 800c2c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	025b      	lsls	r3, r3, #9
 800c2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2d4:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	085b      	lsrs	r3, r3, #1
 800c2da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	029b      	lsls	r3, r3, #10
 800c2e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2e8:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	0a9b      	lsrs	r3, r3, #10
 800c2f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2fc:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	0b5b      	lsrs	r3, r3, #13
 800c302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c306:	431a      	orrs	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	091b      	lsrs	r3, r3, #4
 800c30c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c310:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	019b      	lsls	r3, r3, #6
 800c316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c31a:	431a      	orrs	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	085b      	lsrs	r3, r3, #1
 800c320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c324:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y) & 0x00000100)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	0b9b      	lsrs	r3, r3, #14
 800c32a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c32e:	431a      	orrs	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c336:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	095b      	lsrs	r3, r3, #5
 800c33c:	f003 0320 	and.w	r3, r3, #32
 800c340:	431a      	orrs	r2, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	0a9b      	lsrs	r3, r3, #10
 800c346:	f003 0310 	and.w	r3, r3, #16
 800c34a:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	08db      	lsrs	r3, r3, #3
 800c350:	f003 0308 	and.w	r3, r3, #8
 800c354:	431a      	orrs	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	0c9b      	lsrs	r3, r3, #18
 800c35a:	f003 0304 	and.w	r3, r3, #4
 800c35e:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	0e9b      	lsrs	r3, r3, #26
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	ea42 0103 	orr.w	r1, r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	0e1b      	lsrs	r3, r3, #24
 800c370:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	1d18      	adds	r0, r3, #4
 800c378:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800c37a:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c37c:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	03db      	lsls	r3, r3, #15
 800c382:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	045b      	lsls	r3, r3, #17
 800c38a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c38e:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	029b      	lsls	r3, r3, #10
 800c394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c398:	431a      	orrs	r2, r3
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	059b      	lsls	r3, r3, #22
 800c39e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3a2:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	089b      	lsrs	r3, r3, #2
 800c3a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3b6:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	041b      	lsls	r3, r3, #16
 800c3bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	02db      	lsls	r3, r3, #11
 800c3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3ca:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	099b      	lsrs	r3, r3, #6
 800c3da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3de:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	03db      	lsls	r3, r3, #15
 800c3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	091b      	lsrs	r3, r3, #4
 800c3ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3f2:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	089b      	lsrs	r3, r3, #2
 800c3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3fc:	431a      	orrs	r2, r3
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	021b      	lsls	r3, r3, #8
 800c402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c406:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	0b99      	lsrs	r1, r3, #14
 800c40c:	f640 0308 	movw	r3, #2056	; 0x808
 800c410:	400b      	ands	r3, r1
 800c412:	431a      	orrs	r2, r3
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	0a5b      	lsrs	r3, r3, #9
 800c418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41c:	431a      	orrs	r2, r3
                | ((Y) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c424:	431a      	orrs	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	01db      	lsls	r3, r3, #7
 800c42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42e:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	09db      	lsrs	r3, r3, #7
 800c434:	f003 0320 	and.w	r3, r3, #32
 800c438:	431a      	orrs	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	08db      	lsrs	r3, r3, #3
 800c43e:	f003 0311 	and.w	r3, r3, #17
 800c442:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	ea42 0103 	orr.w	r1, r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	0d5b      	lsrs	r3, r3, #21
 800c454:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	1d18      	adds	r0, r3, #4
 800c45c:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800c45e:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c460:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++) {
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	3301      	adds	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b0f      	cmp	r3, #15
 800c46c:	f77f aee7 	ble.w	800c23e <mbedtls_des_setkey+0x18a>
    }
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop

0800c47c <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey(ctx->sk, key);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff fe12 	bl	800c0b4 <mbedtls_des_setkey>

    return 0;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b086      	sub	sp, #24
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey(ctx->sk, key);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff fe03 	bl	800c0b4 <mbedtls_des_setkey>

    for (i = 0; i < 16; i += 2) {
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	e034      	b.n	800c51e <mbedtls_des_setkey_dec+0x84>
        SWAP(ctx->sk[i], ctx->sk[30 - i]);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4bc:	613b      	str	r3, [r7, #16]
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f1c3 021e 	rsb	r2, r3, #30
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f1c3 021e 	rsb	r2, r3, #30
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6939      	ldr	r1, [r7, #16]
 800c4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	613b      	str	r3, [r7, #16]
        SWAP(ctx->sk[i + 1], ctx->sk[31 - i]);
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f1c3 011f 	rsb	r1, r3, #31
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f1c3 021f 	rsb	r2, r3, #31
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i += 2) {
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	3302      	adds	r3, #2
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b0f      	cmp	r3, #15
 800c522:	ddc7      	ble.n	800c4b4 <mbedtls_des_setkey_dec+0x1a>
    }

    return 0;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <des3_set2key>:

static void des3_set2key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[MBEDTLS_DES_KEY_SIZE*2])
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f7ff fdb9 	bl	800c0b4 <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key + 8);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3308      	adds	r3, #8
 800c54c:	4619      	mov	r1, r3
 800c54e:	4610      	mov	r0, r2
 800c550:	f7ff fdb0 	bl	800c0b4 <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 800c554:	2300      	movs	r3, #0
 800c556:	617b      	str	r3, [r7, #20]
 800c558:	e063      	b.n	800c622 <des3_set2key+0xf4>
        dsk[i] = esk[30 - i];
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f1c3 031e 	rsb	r3, r3, #30
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	441a      	add	r2, r3
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	440b      	add	r3, r1
 800c56e:	6812      	ldr	r2, [r2, #0]
 800c570:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f1c3 031f 	rsb	r3, r3, #31
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	441a      	add	r2, r3
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	3301      	adds	r3, #1
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	440b      	add	r3, r1
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	441a      	add	r2, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	3320      	adds	r3, #32
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	440b      	add	r3, r1
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	441a      	add	r2, r3
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	3321      	adds	r3, #33	; 0x21
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	68f9      	ldr	r1, [r7, #12]
 800c5ba:	440b      	add	r3, r1
 800c5bc:	6812      	ldr	r2, [r2, #0]
 800c5be:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i];
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	441a      	add	r2, r3
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	3340      	adds	r3, #64	; 0x40
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	68f9      	ldr	r1, [r7, #12]
 800c5d0:	440b      	add	r3, r1
 800c5d2:	6812      	ldr	r2, [r2, #0]
 800c5d4:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	441a      	add	r2, r3
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	3341      	adds	r3, #65	; 0x41
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	440b      	add	r3, r1
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i];
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	441a      	add	r2, r3
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	3340      	adds	r3, #64	; 0x40
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	440b      	add	r3, r1
 800c600:	6812      	ldr	r2, [r2, #0]
 800c602:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	3301      	adds	r3, #1
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	441a      	add	r2, r3
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	3341      	adds	r3, #65	; 0x41
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	440b      	add	r3, r1
 800c618:	6812      	ldr	r2, [r2, #0]
 800c61a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	3302      	adds	r3, #2
 800c620:	617b      	str	r3, [r7, #20]
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b1f      	cmp	r3, #31
 800c626:	dd98      	ble.n	800c55a <des3_set2key+0x2c>
    }
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b0e2      	sub	sp, #392	; 0x188
 800c636:	af00      	add	r7, sp, #0
 800c638:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c63c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c640:	6018      	str	r0, [r3, #0]
 800c642:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c646:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c64a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(ctx->sk, sk, key);
 800c64c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c650:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c654:	6818      	ldr	r0, [r3, #0]
 800c656:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c65a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c65e:	f107 0108 	add.w	r1, r7, #8
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	f7ff ff63 	bl	800c52e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c670:	4618      	mov	r0, r3
 800c672:	f001 fedd 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b0e2      	sub	sp, #392	; 0x188
 800c686:	af00      	add	r7, sp, #0
 800c688:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c68c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c690:	6018      	str	r0, [r3, #0]
 800c692:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c696:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c69a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(sk, ctx->sk, key);
 800c69c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c6a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c6a4:	6819      	ldr	r1, [r3, #0]
 800c6a6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c6aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c6ae:	f107 0008 	add.w	r0, r7, #8
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	f7ff ff3b 	bl	800c52e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800c6b8:	f107 0308 	add.w	r3, r7, #8
 800c6bc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 feb5 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <des3_set3key>:

static void des3_set3key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[24])
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b086      	sub	sp, #24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff fce7 	bl	800c0b4 <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key +  8);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	f7ff fcde 	bl	800c0b4 <mbedtls_des_setkey>
    mbedtls_des_setkey(esk + 64, key + 16);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3310      	adds	r3, #16
 800c702:	4619      	mov	r1, r3
 800c704:	4610      	mov	r0, r2
 800c706:	f7ff fcd5 	bl	800c0b4 <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	e04f      	b.n	800c7b0 <des3_set3key+0xde>
        dsk[i] = esk[94 - i];
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	441a      	add	r2, r3
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	440b      	add	r3, r1
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	441a      	add	r2, r3
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	3301      	adds	r3, #1
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	68b9      	ldr	r1, [r7, #8]
 800c73c:	440b      	add	r3, r1
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	441a      	add	r2, r3
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	3320      	adds	r3, #32
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	68f9      	ldr	r1, [r7, #12]
 800c756:	440b      	add	r3, r1
 800c758:	6812      	ldr	r2, [r2, #0]
 800c75a:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	441a      	add	r2, r3
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	3321      	adds	r3, #33	; 0x21
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	68f9      	ldr	r1, [r7, #12]
 800c770:	440b      	add	r3, r1
 800c772:	6812      	ldr	r2, [r2, #0]
 800c774:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f1c3 031e 	rsb	r3, r3, #30
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	441a      	add	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	3340      	adds	r3, #64	; 0x40
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	440b      	add	r3, r1
 800c78c:	6812      	ldr	r2, [r2, #0]
 800c78e:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f1c3 031f 	rsb	r3, r3, #31
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	441a      	add	r2, r3
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	3341      	adds	r3, #65	; 0x41
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	440b      	add	r3, r1
 800c7a6:	6812      	ldr	r2, [r2, #0]
 800c7a8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	3302      	adds	r3, #2
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	2b1f      	cmp	r3, #31
 800c7b4:	ddac      	ble.n	800c710 <des3_set3key+0x3e>
    }
}
 800c7b6:	bf00      	nop
 800c7b8:	bf00      	nop
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b0e2      	sub	sp, #392	; 0x188
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c7ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c7ce:	6018      	str	r0, [r3, #0]
 800c7d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c7d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c7d8:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(ctx->sk, sk, key);
 800c7da:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c7de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c7e2:	6818      	ldr	r0, [r3, #0]
 800c7e4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c7e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c7ec:	f107 0108 	add.w	r1, r7, #8
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	f7ff ff6e 	bl	800c6d2 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800c7f6:	f107 0308 	add.w	r3, r7, #8
 800c7fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 fe16 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b0e2      	sub	sp, #392	; 0x188
 800c814:	af00      	add	r7, sp, #0
 800c816:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c81a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c81e:	6018      	str	r0, [r3, #0]
 800c820:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c824:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c828:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(sk, ctx->sk, key);
 800c82a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c82e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c838:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c83c:	f107 0008 	add.w	r0, r7, #8
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	f7ff ff46 	bl	800c6d2 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c84e:	4618      	mov	r0, r3
 800c850:	f001 fdee 	bl	800e430 <mbedtls_platform_zeroize>

    return 0;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb(mbedtls_des_context *ctx,
                          const unsigned char input[8],
                          unsigned char output[8])
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	; 0x28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 800c870:	68b8      	ldr	r0, [r7, #8]
 800c872:	f001 fd5b 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800c876:	4603      	mov	r3, r0
 800c878:	ba1b      	rev	r3, r3
 800c87a:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	3304      	adds	r3, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f001 fd53 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800c886:	4603      	mov	r3, r0
 800c888:	ba1b      	rev	r3, r3
 800c88a:	61fb      	str	r3, [r7, #28]

    DES_IP(X, Y);
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	091a      	lsrs	r2, r3, #4
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	4053      	eors	r3, r2
 800c894:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c898:	617b      	str	r3, [r7, #20]
 800c89a:	69fa      	ldr	r2, [r7, #28]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	4053      	eors	r3, r2
 800c8a0:	61fb      	str	r3, [r7, #28]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	6a3a      	ldr	r2, [r7, #32]
 800c8a8:	4053      	eors	r3, r2
 800c8aa:	623b      	str	r3, [r7, #32]
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	0c1a      	lsrs	r2, r3, #16
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	4053      	eors	r3, r2
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	041b      	lsls	r3, r3, #16
 800c8c4:	6a3a      	ldr	r2, [r7, #32]
 800c8c6:	4053      	eors	r3, r2
 800c8c8:	623b      	str	r3, [r7, #32]
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	089a      	lsrs	r2, r3, #2
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	4053      	eors	r3, r2
 800c8d2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	6a3a      	ldr	r2, [r7, #32]
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	4053      	eors	r3, r2
 800c8de:	623b      	str	r3, [r7, #32]
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	69fa      	ldr	r2, [r7, #28]
 800c8e6:	4053      	eors	r3, r2
 800c8e8:	61fb      	str	r3, [r7, #28]
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	0a1a      	lsrs	r2, r3, #8
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	4053      	eors	r3, r2
 800c8f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c8f6:	617b      	str	r3, [r7, #20]
 800c8f8:	6a3a      	ldr	r2, [r7, #32]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	4053      	eors	r3, r2
 800c8fe:	623b      	str	r3, [r7, #32]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	4053      	eors	r3, r2
 800c908:	61fb      	str	r3, [r7, #28]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	6a3a      	ldr	r2, [r7, #32]
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	4053      	eors	r3, r2
 800c918:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	69fa      	ldr	r2, [r7, #28]
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	4053      	eors	r3, r2
 800c924:	61fb      	str	r3, [r7, #28]
 800c926:	6a3a      	ldr	r2, [r7, #32]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	4053      	eors	r3, r2
 800c92c:	623b      	str	r3, [r7, #32]
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c934:	623b      	str	r3, [r7, #32]

    for (i = 0; i < 8; i++) {
 800c936:	2300      	movs	r3, #0
 800c938:	627b      	str	r3, [r7, #36]	; 0x24
 800c93a:	e0a6      	b.n	800ca8a <mbedtls_des_crypt_ecb+0x22a>
        DES_ROUND(Y, X);
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	1d1a      	adds	r2, r3, #4
 800c940:	61ba      	str	r2, [r7, #24]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	69fa      	ldr	r2, [r7, #28]
 800c946:	4053      	eors	r3, r2
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c950:	4a84      	ldr	r2, [pc, #528]	; (800cb64 <mbedtls_des_crypt_ecb+0x304>)
 800c952:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	0a1b      	lsrs	r3, r3, #8
 800c95a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c95e:	4982      	ldr	r1, [pc, #520]	; (800cb68 <mbedtls_des_crypt_ecb+0x308>)
 800c960:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c964:	405a      	eors	r2, r3
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	0c1b      	lsrs	r3, r3, #16
 800c96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c96e:	497f      	ldr	r1, [pc, #508]	; (800cb6c <mbedtls_des_crypt_ecb+0x30c>)
 800c970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c974:	405a      	eors	r2, r3
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	0e1b      	lsrs	r3, r3, #24
 800c97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c97e:	497c      	ldr	r1, [pc, #496]	; (800cb70 <mbedtls_des_crypt_ecb+0x310>)
 800c980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c984:	4053      	eors	r3, r2
 800c986:	6a3a      	ldr	r2, [r7, #32]
 800c988:	4053      	eors	r3, r2
 800c98a:	623b      	str	r3, [r7, #32]
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	1d1a      	adds	r2, r3, #4
 800c990:	61ba      	str	r2, [r7, #24]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c99a:	4053      	eors	r3, r2
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9a4:	4a73      	ldr	r2, [pc, #460]	; (800cb74 <mbedtls_des_crypt_ecb+0x314>)
 800c9a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	0a1b      	lsrs	r3, r3, #8
 800c9ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9b2:	4971      	ldr	r1, [pc, #452]	; (800cb78 <mbedtls_des_crypt_ecb+0x318>)
 800c9b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9b8:	405a      	eors	r2, r3
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	0c1b      	lsrs	r3, r3, #16
 800c9be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9c2:	496e      	ldr	r1, [pc, #440]	; (800cb7c <mbedtls_des_crypt_ecb+0x31c>)
 800c9c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9c8:	405a      	eors	r2, r3
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	0e1b      	lsrs	r3, r3, #24
 800c9ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d2:	496b      	ldr	r1, [pc, #428]	; (800cb80 <mbedtls_des_crypt_ecb+0x320>)
 800c9d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9d8:	4053      	eors	r3, r2
 800c9da:	6a3a      	ldr	r2, [r7, #32]
 800c9dc:	4053      	eors	r3, r2
 800c9de:	623b      	str	r3, [r7, #32]
        DES_ROUND(X, Y);
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	1d1a      	adds	r2, r3, #4
 800c9e4:	61ba      	str	r2, [r7, #24]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6a3a      	ldr	r2, [r7, #32]
 800c9ea:	4053      	eors	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9f4:	4a5b      	ldr	r2, [pc, #364]	; (800cb64 <mbedtls_des_crypt_ecb+0x304>)
 800c9f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	0a1b      	lsrs	r3, r3, #8
 800c9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca02:	4959      	ldr	r1, [pc, #356]	; (800cb68 <mbedtls_des_crypt_ecb+0x308>)
 800ca04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca08:	405a      	eors	r2, r3
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	0c1b      	lsrs	r3, r3, #16
 800ca0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca12:	4956      	ldr	r1, [pc, #344]	; (800cb6c <mbedtls_des_crypt_ecb+0x30c>)
 800ca14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca18:	405a      	eors	r2, r3
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	0e1b      	lsrs	r3, r3, #24
 800ca1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca22:	4953      	ldr	r1, [pc, #332]	; (800cb70 <mbedtls_des_crypt_ecb+0x310>)
 800ca24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca28:	4053      	eors	r3, r2
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	4053      	eors	r3, r2
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	61ba      	str	r2, [r7, #24]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ca3e:	4053      	eors	r3, r2
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca48:	4a4a      	ldr	r2, [pc, #296]	; (800cb74 <mbedtls_des_crypt_ecb+0x314>)
 800ca4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	0a1b      	lsrs	r3, r3, #8
 800ca52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca56:	4948      	ldr	r1, [pc, #288]	; (800cb78 <mbedtls_des_crypt_ecb+0x318>)
 800ca58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca5c:	405a      	eors	r2, r3
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	0c1b      	lsrs	r3, r3, #16
 800ca62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca66:	4945      	ldr	r1, [pc, #276]	; (800cb7c <mbedtls_des_crypt_ecb+0x31c>)
 800ca68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca6c:	405a      	eors	r2, r3
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	0e1b      	lsrs	r3, r3, #24
 800ca72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca76:	4942      	ldr	r1, [pc, #264]	; (800cb80 <mbedtls_des_crypt_ecb+0x320>)
 800ca78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca7c:	4053      	eors	r3, r2
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	4053      	eors	r3, r2
 800ca82:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 8; i++) {
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	3301      	adds	r3, #1
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	2b07      	cmp	r3, #7
 800ca8e:	f77f af55 	ble.w	800c93c <mbedtls_des_crypt_ecb+0xdc>
    }

    DES_FP(Y, X);
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	ea4f 0373 	mov.w	r3, r3, ror #1
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	4053      	eors	r3, r2
 800caa0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	69fa      	ldr	r2, [r7, #28]
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	4053      	eors	r3, r2
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	6a3a      	ldr	r2, [r7, #32]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	4053      	eors	r3, r2
 800cab4:	623b      	str	r3, [r7, #32]
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	ea4f 0373 	mov.w	r3, r3, ror #1
 800cabc:	623b      	str	r3, [r7, #32]
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	0a1a      	lsrs	r2, r3, #8
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	4053      	eors	r3, r2
 800cac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	4053      	eors	r3, r2
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	021b      	lsls	r3, r3, #8
 800cad8:	6a3a      	ldr	r2, [r7, #32]
 800cada:	4053      	eors	r3, r2
 800cadc:	623b      	str	r3, [r7, #32]
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	089a      	lsrs	r2, r3, #2
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	4053      	eors	r3, r2
 800cae6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	69fa      	ldr	r2, [r7, #28]
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	4053      	eors	r3, r2
 800caf2:	61fb      	str	r3, [r7, #28]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	6a3a      	ldr	r2, [r7, #32]
 800cafa:	4053      	eors	r3, r2
 800cafc:	623b      	str	r3, [r7, #32]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	0c1a      	lsrs	r2, r3, #16
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	4053      	eors	r3, r2
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	6a3a      	ldr	r2, [r7, #32]
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	4053      	eors	r3, r2
 800cb10:	623b      	str	r3, [r7, #32]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	041b      	lsls	r3, r3, #16
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	4053      	eors	r3, r2
 800cb1a:	61fb      	str	r3, [r7, #28]
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	091a      	lsrs	r2, r3, #4
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	4053      	eors	r3, r2
 800cb24:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	6a3a      	ldr	r2, [r7, #32]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4053      	eors	r3, r2
 800cb30:	623b      	str	r3, [r7, #32]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	011b      	lsls	r3, r3, #4
 800cb36:	69fa      	ldr	r2, [r7, #28]
 800cb38:	4053      	eors	r3, r2
 800cb3a:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	ba1b      	rev	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f001 fc00 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	ba1b      	rev	r3, r3
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f001 fbf8 	bl	800e348 <mbedtls_put_unaligned_uint32>

    return 0;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3728      	adds	r7, #40	; 0x28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	08013ff0 	.word	0x08013ff0
 800cb68:	08013df0 	.word	0x08013df0
 800cb6c:	08013bf0 	.word	0x08013bf0
 800cb70:	080139f0 	.word	0x080139f0
 800cb74:	08013ef0 	.word	0x08013ef0
 800cb78:	08013cf0 	.word	0x08013cf0
 800cb7c:	08013af0 	.word	0x08013af0
 800cb80:	080138f0 	.word	0x080138f0

0800cb84 <mbedtls_des_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[8],
                          const unsigned char *input,
                          unsigned char *output)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800cb92:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800cb96:	61fb      	str	r3, [r7, #28]
    unsigned char temp[8];

    if (length % 8) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <mbedtls_des_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800cba2:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800cba6:	e053      	b.n	800cc50 <mbedtls_des_crypt_cbc+0xcc>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d146      	bne.n	800cc3c <mbedtls_des_crypt_cbc+0xb8>
        while (length > 0) {
 800cbae:	e01c      	b.n	800cbea <mbedtls_des_crypt_cbc+0x66>
            mbedtls_xor(output, input, iv, 8);
 800cbb0:	2308      	movs	r3, #8
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb8:	f001 fbf6 	bl	800e3a8 <mbedtls_xor>

            ret = mbedtls_des_crypt_ecb(ctx, output, output);
 800cbbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f7ff fe4d 	bl	800c860 <mbedtls_des_crypt_ecb>
 800cbc6:	61f8      	str	r0, [r7, #28]
            if (ret != 0) {
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d13c      	bne.n	800cc48 <mbedtls_des_crypt_cbc+0xc4>
                goto exit;
            }
            memcpy(iv, output, 8);
 800cbce:	2208      	movs	r2, #8
 800cbd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbd2:	6838      	ldr	r0, [r7, #0]
 800cbd4:	f004 fa46 	bl	8011064 <memcpy>

            input  += 8;
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	3308      	adds	r3, #8
 800cbdc:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3b08      	subs	r3, #8
 800cbe8:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1df      	bne.n	800cbb0 <mbedtls_des_crypt_cbc+0x2c>
 800cbf0:	e027      	b.n	800cc42 <mbedtls_des_crypt_cbc+0xbe>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 800cbf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf4:	f107 0314 	add.w	r3, r7, #20
 800cbf8:	6810      	ldr	r0, [r2, #0]
 800cbfa:	6851      	ldr	r1, [r2, #4]
 800cbfc:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des_crypt_ecb(ctx, input, output);
 800cbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fe2c 	bl	800c860 <mbedtls_des_crypt_ecb>
 800cc08:	61f8      	str	r0, [r7, #28]
            if (ret != 0) {
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d11d      	bne.n	800cc4c <mbedtls_des_crypt_cbc+0xc8>
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);
 800cc10:	2308      	movs	r3, #8
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc18:	f001 fbc6 	bl	800e3a8 <mbedtls_xor>

            memcpy(iv, temp, 8);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f107 0314 	add.w	r3, r7, #20
 800cc24:	cb03      	ldmia	r3!, {r0, r1}
 800cc26:	6010      	str	r0, [r2, #0]
 800cc28:	6051      	str	r1, [r2, #4]

            input  += 8;
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	3308      	adds	r3, #8
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	3308      	adds	r3, #8
 800cc34:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3b08      	subs	r3, #8
 800cc3a:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1d7      	bne.n	800cbf2 <mbedtls_des_crypt_cbc+0x6e>
        }
    }
    ret = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	61fb      	str	r3, [r7, #28]
 800cc46:	e002      	b.n	800cc4e <mbedtls_des_crypt_cbc+0xca>
                goto exit;
 800cc48:	bf00      	nop
 800cc4a:	e000      	b.n	800cc4e <mbedtls_des_crypt_cbc+0xca>
                goto exit;
 800cc4c:	bf00      	nop

exit:
    return ret;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3720      	adds	r7, #32
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb(mbedtls_des3_context *ctx,
                           const unsigned char input[8],
                           unsigned char output[8])
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08a      	sub	sp, #40	; 0x28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 800cc68:	68b8      	ldr	r0, [r7, #8]
 800cc6a:	f001 fb5f 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	ba1b      	rev	r3, r3
 800cc72:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	3304      	adds	r3, #4
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 fb57 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	ba1b      	rev	r3, r3
 800cc82:	61fb      	str	r3, [r7, #28]

    DES_IP(X, Y);
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	091a      	lsrs	r2, r3, #4
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	4053      	eors	r3, r2
 800cc8c:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	4053      	eors	r3, r2
 800cc98:	61fb      	str	r3, [r7, #28]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	011b      	lsls	r3, r3, #4
 800cc9e:	6a3a      	ldr	r2, [r7, #32]
 800cca0:	4053      	eors	r3, r2
 800cca2:	623b      	str	r3, [r7, #32]
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	0c1a      	lsrs	r2, r3, #16
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	4053      	eors	r3, r2
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	4053      	eors	r3, r2
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	041b      	lsls	r3, r3, #16
 800ccbc:	6a3a      	ldr	r2, [r7, #32]
 800ccbe:	4053      	eors	r3, r2
 800ccc0:	623b      	str	r3, [r7, #32]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	089a      	lsrs	r2, r3, #2
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	4053      	eors	r3, r2
 800ccca:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ccce:	617b      	str	r3, [r7, #20]
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	4053      	eors	r3, r2
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	69fa      	ldr	r2, [r7, #28]
 800ccde:	4053      	eors	r3, r2
 800cce0:	61fb      	str	r3, [r7, #28]
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	0a1a      	lsrs	r2, r3, #8
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	4053      	eors	r3, r2
 800ccea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ccee:	617b      	str	r3, [r7, #20]
 800ccf0:	6a3a      	ldr	r2, [r7, #32]
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	4053      	eors	r3, r2
 800ccf6:	623b      	str	r3, [r7, #32]
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	021b      	lsls	r3, r3, #8
 800ccfc:	69fa      	ldr	r2, [r7, #28]
 800ccfe:	4053      	eors	r3, r2
 800cd00:	61fb      	str	r3, [r7, #28]
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cd08:	61fb      	str	r3, [r7, #28]
 800cd0a:	6a3a      	ldr	r2, [r7, #32]
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	4053      	eors	r3, r2
 800cd10:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	61fb      	str	r3, [r7, #28]
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	4053      	eors	r3, r2
 800cd24:	623b      	str	r3, [r7, #32]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cd2c:	623b      	str	r3, [r7, #32]

    for (i = 0; i < 8; i++) {
 800cd2e:	2300      	movs	r3, #0
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
 800cd32:	e0a6      	b.n	800ce82 <mbedtls_des3_crypt_ecb+0x22a>
        DES_ROUND(Y, X);
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	1d1a      	adds	r2, r3, #4
 800cd38:	61ba      	str	r2, [r7, #24]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	4053      	eors	r3, r2
 800cd40:	617b      	str	r3, [r7, #20]
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd48:	4aa8      	ldr	r2, [pc, #672]	; (800cfec <mbedtls_des3_crypt_ecb+0x394>)
 800cd4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	0a1b      	lsrs	r3, r3, #8
 800cd52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd56:	49a6      	ldr	r1, [pc, #664]	; (800cff0 <mbedtls_des3_crypt_ecb+0x398>)
 800cd58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd5c:	405a      	eors	r2, r3
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	0c1b      	lsrs	r3, r3, #16
 800cd62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd66:	49a3      	ldr	r1, [pc, #652]	; (800cff4 <mbedtls_des3_crypt_ecb+0x39c>)
 800cd68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd6c:	405a      	eors	r2, r3
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	0e1b      	lsrs	r3, r3, #24
 800cd72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd76:	49a0      	ldr	r1, [pc, #640]	; (800cff8 <mbedtls_des3_crypt_ecb+0x3a0>)
 800cd78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd7c:	4053      	eors	r3, r2
 800cd7e:	6a3a      	ldr	r2, [r7, #32]
 800cd80:	4053      	eors	r3, r2
 800cd82:	623b      	str	r3, [r7, #32]
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	1d1a      	adds	r2, r3, #4
 800cd88:	61ba      	str	r2, [r7, #24]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	ea4f 1333 	mov.w	r3, r3, ror #4
 800cd92:	4053      	eors	r3, r2
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd9c:	4a97      	ldr	r2, [pc, #604]	; (800cffc <mbedtls_des3_crypt_ecb+0x3a4>)
 800cd9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	0a1b      	lsrs	r3, r3, #8
 800cda6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdaa:	4995      	ldr	r1, [pc, #596]	; (800d000 <mbedtls_des3_crypt_ecb+0x3a8>)
 800cdac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdb0:	405a      	eors	r2, r3
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	0c1b      	lsrs	r3, r3, #16
 800cdb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdba:	4992      	ldr	r1, [pc, #584]	; (800d004 <mbedtls_des3_crypt_ecb+0x3ac>)
 800cdbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdc0:	405a      	eors	r2, r3
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	0e1b      	lsrs	r3, r3, #24
 800cdc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdca:	498f      	ldr	r1, [pc, #572]	; (800d008 <mbedtls_des3_crypt_ecb+0x3b0>)
 800cdcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdd0:	4053      	eors	r3, r2
 800cdd2:	6a3a      	ldr	r2, [r7, #32]
 800cdd4:	4053      	eors	r3, r2
 800cdd6:	623b      	str	r3, [r7, #32]
        DES_ROUND(X, Y);
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	1d1a      	adds	r2, r3, #4
 800cddc:	61ba      	str	r2, [r7, #24]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6a3a      	ldr	r2, [r7, #32]
 800cde2:	4053      	eors	r3, r2
 800cde4:	617b      	str	r3, [r7, #20]
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdec:	4a7f      	ldr	r2, [pc, #508]	; (800cfec <mbedtls_des3_crypt_ecb+0x394>)
 800cdee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	0a1b      	lsrs	r3, r3, #8
 800cdf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdfa:	497d      	ldr	r1, [pc, #500]	; (800cff0 <mbedtls_des3_crypt_ecb+0x398>)
 800cdfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce00:	405a      	eors	r2, r3
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	0c1b      	lsrs	r3, r3, #16
 800ce06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce0a:	497a      	ldr	r1, [pc, #488]	; (800cff4 <mbedtls_des3_crypt_ecb+0x39c>)
 800ce0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce10:	405a      	eors	r2, r3
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	0e1b      	lsrs	r3, r3, #24
 800ce16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce1a:	4977      	ldr	r1, [pc, #476]	; (800cff8 <mbedtls_des3_crypt_ecb+0x3a0>)
 800ce1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce20:	4053      	eors	r3, r2
 800ce22:	69fa      	ldr	r2, [r7, #28]
 800ce24:	4053      	eors	r3, r2
 800ce26:	61fb      	str	r3, [r7, #28]
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	1d1a      	adds	r2, r3, #4
 800ce2c:	61ba      	str	r2, [r7, #24]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ce36:	4053      	eors	r3, r2
 800ce38:	617b      	str	r3, [r7, #20]
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce40:	4a6e      	ldr	r2, [pc, #440]	; (800cffc <mbedtls_des3_crypt_ecb+0x3a4>)
 800ce42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	0a1b      	lsrs	r3, r3, #8
 800ce4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce4e:	496c      	ldr	r1, [pc, #432]	; (800d000 <mbedtls_des3_crypt_ecb+0x3a8>)
 800ce50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce54:	405a      	eors	r2, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	0c1b      	lsrs	r3, r3, #16
 800ce5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce5e:	4969      	ldr	r1, [pc, #420]	; (800d004 <mbedtls_des3_crypt_ecb+0x3ac>)
 800ce60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce64:	405a      	eors	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	0e1b      	lsrs	r3, r3, #24
 800ce6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce6e:	4966      	ldr	r1, [pc, #408]	; (800d008 <mbedtls_des3_crypt_ecb+0x3b0>)
 800ce70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce74:	4053      	eors	r3, r2
 800ce76:	69fa      	ldr	r2, [r7, #28]
 800ce78:	4053      	eors	r3, r2
 800ce7a:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 8; i++) {
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	3301      	adds	r3, #1
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	f77f af55 	ble.w	800cd34 <mbedtls_des3_crypt_ecb+0xdc>
    }

    for (i = 0; i < 8; i++) {
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce8e:	e0a6      	b.n	800cfde <mbedtls_des3_crypt_ecb+0x386>
        DES_ROUND(X, Y);
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	1d1a      	adds	r2, r3, #4
 800ce94:	61ba      	str	r2, [r7, #24]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6a3a      	ldr	r2, [r7, #32]
 800ce9a:	4053      	eors	r3, r2
 800ce9c:	617b      	str	r3, [r7, #20]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cea4:	4a51      	ldr	r2, [pc, #324]	; (800cfec <mbedtls_des3_crypt_ecb+0x394>)
 800cea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	0a1b      	lsrs	r3, r3, #8
 800ceae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceb2:	494f      	ldr	r1, [pc, #316]	; (800cff0 <mbedtls_des3_crypt_ecb+0x398>)
 800ceb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ceb8:	405a      	eors	r2, r3
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	0c1b      	lsrs	r3, r3, #16
 800cebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cec2:	494c      	ldr	r1, [pc, #304]	; (800cff4 <mbedtls_des3_crypt_ecb+0x39c>)
 800cec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cec8:	405a      	eors	r2, r3
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	0e1b      	lsrs	r3, r3, #24
 800cece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ced2:	4949      	ldr	r1, [pc, #292]	; (800cff8 <mbedtls_des3_crypt_ecb+0x3a0>)
 800ced4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ced8:	4053      	eors	r3, r2
 800ceda:	69fa      	ldr	r2, [r7, #28]
 800cedc:	4053      	eors	r3, r2
 800cede:	61fb      	str	r3, [r7, #28]
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	1d1a      	adds	r2, r3, #4
 800cee4:	61ba      	str	r2, [r7, #24]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ceee:	4053      	eors	r3, r2
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cef8:	4a40      	ldr	r2, [pc, #256]	; (800cffc <mbedtls_des3_crypt_ecb+0x3a4>)
 800cefa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf06:	493e      	ldr	r1, [pc, #248]	; (800d000 <mbedtls_des3_crypt_ecb+0x3a8>)
 800cf08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf0c:	405a      	eors	r2, r3
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	0c1b      	lsrs	r3, r3, #16
 800cf12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf16:	493b      	ldr	r1, [pc, #236]	; (800d004 <mbedtls_des3_crypt_ecb+0x3ac>)
 800cf18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf1c:	405a      	eors	r2, r3
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	0e1b      	lsrs	r3, r3, #24
 800cf22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf26:	4938      	ldr	r1, [pc, #224]	; (800d008 <mbedtls_des3_crypt_ecb+0x3b0>)
 800cf28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	69fa      	ldr	r2, [r7, #28]
 800cf30:	4053      	eors	r3, r2
 800cf32:	61fb      	str	r3, [r7, #28]
        DES_ROUND(Y, X);
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	1d1a      	adds	r2, r3, #4
 800cf38:	61ba      	str	r2, [r7, #24]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	4053      	eors	r3, r2
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf48:	4a28      	ldr	r2, [pc, #160]	; (800cfec <mbedtls_des3_crypt_ecb+0x394>)
 800cf4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	0a1b      	lsrs	r3, r3, #8
 800cf52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf56:	4926      	ldr	r1, [pc, #152]	; (800cff0 <mbedtls_des3_crypt_ecb+0x398>)
 800cf58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf5c:	405a      	eors	r2, r3
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	0c1b      	lsrs	r3, r3, #16
 800cf62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf66:	4923      	ldr	r1, [pc, #140]	; (800cff4 <mbedtls_des3_crypt_ecb+0x39c>)
 800cf68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf6c:	405a      	eors	r2, r3
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	0e1b      	lsrs	r3, r3, #24
 800cf72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf76:	4920      	ldr	r1, [pc, #128]	; (800cff8 <mbedtls_des3_crypt_ecb+0x3a0>)
 800cf78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf7c:	4053      	eors	r3, r2
 800cf7e:	6a3a      	ldr	r2, [r7, #32]
 800cf80:	4053      	eors	r3, r2
 800cf82:	623b      	str	r3, [r7, #32]
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	1d1a      	adds	r2, r3, #4
 800cf88:	61ba      	str	r2, [r7, #24]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	ea4f 1333 	mov.w	r3, r3, ror #4
 800cf92:	4053      	eors	r3, r2
 800cf94:	617b      	str	r3, [r7, #20]
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf9c:	4a17      	ldr	r2, [pc, #92]	; (800cffc <mbedtls_des3_crypt_ecb+0x3a4>)
 800cf9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	0a1b      	lsrs	r3, r3, #8
 800cfa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfaa:	4915      	ldr	r1, [pc, #84]	; (800d000 <mbedtls_des3_crypt_ecb+0x3a8>)
 800cfac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfb0:	405a      	eors	r2, r3
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	0c1b      	lsrs	r3, r3, #16
 800cfb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfba:	4912      	ldr	r1, [pc, #72]	; (800d004 <mbedtls_des3_crypt_ecb+0x3ac>)
 800cfbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfc0:	405a      	eors	r2, r3
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	0e1b      	lsrs	r3, r3, #24
 800cfc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfca:	490f      	ldr	r1, [pc, #60]	; (800d008 <mbedtls_des3_crypt_ecb+0x3b0>)
 800cfcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	6a3a      	ldr	r2, [r7, #32]
 800cfd4:	4053      	eors	r3, r2
 800cfd6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < 8; i++) {
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	3301      	adds	r3, #1
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	2b07      	cmp	r3, #7
 800cfe2:	f77f af55 	ble.w	800ce90 <mbedtls_des3_crypt_ecb+0x238>
    }

    for (i = 0; i < 8; i++) {
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24
 800cfea:	e0b6      	b.n	800d15a <mbedtls_des3_crypt_ecb+0x502>
 800cfec:	08013ff0 	.word	0x08013ff0
 800cff0:	08013df0 	.word	0x08013df0
 800cff4:	08013bf0 	.word	0x08013bf0
 800cff8:	080139f0 	.word	0x080139f0
 800cffc:	08013ef0 	.word	0x08013ef0
 800d000:	08013cf0 	.word	0x08013cf0
 800d004:	08013af0 	.word	0x08013af0
 800d008:	080138f0 	.word	0x080138f0
        DES_ROUND(Y, X);
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	1d1a      	adds	r2, r3, #4
 800d010:	61ba      	str	r2, [r7, #24]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	69fa      	ldr	r2, [r7, #28]
 800d016:	4053      	eors	r3, r2
 800d018:	617b      	str	r3, [r7, #20]
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d020:	4a84      	ldr	r2, [pc, #528]	; (800d234 <mbedtls_des3_crypt_ecb+0x5dc>)
 800d022:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	0a1b      	lsrs	r3, r3, #8
 800d02a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d02e:	4982      	ldr	r1, [pc, #520]	; (800d238 <mbedtls_des3_crypt_ecb+0x5e0>)
 800d030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d034:	405a      	eors	r2, r3
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d03e:	497f      	ldr	r1, [pc, #508]	; (800d23c <mbedtls_des3_crypt_ecb+0x5e4>)
 800d040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d044:	405a      	eors	r2, r3
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	0e1b      	lsrs	r3, r3, #24
 800d04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d04e:	497c      	ldr	r1, [pc, #496]	; (800d240 <mbedtls_des3_crypt_ecb+0x5e8>)
 800d050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d054:	4053      	eors	r3, r2
 800d056:	6a3a      	ldr	r2, [r7, #32]
 800d058:	4053      	eors	r3, r2
 800d05a:	623b      	str	r3, [r7, #32]
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	1d1a      	adds	r2, r3, #4
 800d060:	61ba      	str	r2, [r7, #24]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d06a:	4053      	eors	r3, r2
 800d06c:	617b      	str	r3, [r7, #20]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d074:	4a73      	ldr	r2, [pc, #460]	; (800d244 <mbedtls_des3_crypt_ecb+0x5ec>)
 800d076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d082:	4971      	ldr	r1, [pc, #452]	; (800d248 <mbedtls_des3_crypt_ecb+0x5f0>)
 800d084:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d088:	405a      	eors	r2, r3
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	0c1b      	lsrs	r3, r3, #16
 800d08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d092:	496e      	ldr	r1, [pc, #440]	; (800d24c <mbedtls_des3_crypt_ecb+0x5f4>)
 800d094:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d098:	405a      	eors	r2, r3
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	0e1b      	lsrs	r3, r3, #24
 800d09e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0a2:	496b      	ldr	r1, [pc, #428]	; (800d250 <mbedtls_des3_crypt_ecb+0x5f8>)
 800d0a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0a8:	4053      	eors	r3, r2
 800d0aa:	6a3a      	ldr	r2, [r7, #32]
 800d0ac:	4053      	eors	r3, r2
 800d0ae:	623b      	str	r3, [r7, #32]
        DES_ROUND(X, Y);
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	1d1a      	adds	r2, r3, #4
 800d0b4:	61ba      	str	r2, [r7, #24]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6a3a      	ldr	r2, [r7, #32]
 800d0ba:	4053      	eors	r3, r2
 800d0bc:	617b      	str	r3, [r7, #20]
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0c4:	4a5b      	ldr	r2, [pc, #364]	; (800d234 <mbedtls_des3_crypt_ecb+0x5dc>)
 800d0c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	0a1b      	lsrs	r3, r3, #8
 800d0ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d2:	4959      	ldr	r1, [pc, #356]	; (800d238 <mbedtls_des3_crypt_ecb+0x5e0>)
 800d0d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0d8:	405a      	eors	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	0c1b      	lsrs	r3, r3, #16
 800d0de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0e2:	4956      	ldr	r1, [pc, #344]	; (800d23c <mbedtls_des3_crypt_ecb+0x5e4>)
 800d0e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0e8:	405a      	eors	r2, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	0e1b      	lsrs	r3, r3, #24
 800d0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0f2:	4953      	ldr	r1, [pc, #332]	; (800d240 <mbedtls_des3_crypt_ecb+0x5e8>)
 800d0f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0f8:	4053      	eors	r3, r2
 800d0fa:	69fa      	ldr	r2, [r7, #28]
 800d0fc:	4053      	eors	r3, r2
 800d0fe:	61fb      	str	r3, [r7, #28]
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	1d1a      	adds	r2, r3, #4
 800d104:	61ba      	str	r2, [r7, #24]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d10e:	4053      	eors	r3, r2
 800d110:	617b      	str	r3, [r7, #20]
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d118:	4a4a      	ldr	r2, [pc, #296]	; (800d244 <mbedtls_des3_crypt_ecb+0x5ec>)
 800d11a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	0a1b      	lsrs	r3, r3, #8
 800d122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d126:	4948      	ldr	r1, [pc, #288]	; (800d248 <mbedtls_des3_crypt_ecb+0x5f0>)
 800d128:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d12c:	405a      	eors	r2, r3
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	0c1b      	lsrs	r3, r3, #16
 800d132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d136:	4945      	ldr	r1, [pc, #276]	; (800d24c <mbedtls_des3_crypt_ecb+0x5f4>)
 800d138:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d13c:	405a      	eors	r2, r3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	0e1b      	lsrs	r3, r3, #24
 800d142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d146:	4942      	ldr	r1, [pc, #264]	; (800d250 <mbedtls_des3_crypt_ecb+0x5f8>)
 800d148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d14c:	4053      	eors	r3, r2
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	4053      	eors	r3, r2
 800d152:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 8; i++) {
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	3301      	adds	r3, #1
 800d158:	627b      	str	r3, [r7, #36]	; 0x24
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	2b07      	cmp	r3, #7
 800d15e:	f77f af55 	ble.w	800d00c <mbedtls_des3_crypt_ecb+0x3b4>
    }

    DES_FP(Y, X);
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	ea4f 0373 	mov.w	r3, r3, ror #1
 800d168:	61fb      	str	r3, [r7, #28]
 800d16a:	69fa      	ldr	r2, [r7, #28]
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	4053      	eors	r3, r2
 800d170:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800d174:	617b      	str	r3, [r7, #20]
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	4053      	eors	r3, r2
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	6a3a      	ldr	r2, [r7, #32]
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	4053      	eors	r3, r2
 800d184:	623b      	str	r3, [r7, #32]
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	ea4f 0373 	mov.w	r3, r3, ror #1
 800d18c:	623b      	str	r3, [r7, #32]
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	0a1a      	lsrs	r2, r3, #8
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	4053      	eors	r3, r2
 800d196:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	69fa      	ldr	r2, [r7, #28]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	4053      	eors	r3, r2
 800d1a2:	61fb      	str	r3, [r7, #28]
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	6a3a      	ldr	r2, [r7, #32]
 800d1aa:	4053      	eors	r3, r2
 800d1ac:	623b      	str	r3, [r7, #32]
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	089a      	lsrs	r2, r3, #2
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4053      	eors	r3, r2
 800d1b6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d1ba:	617b      	str	r3, [r7, #20]
 800d1bc:	69fa      	ldr	r2, [r7, #28]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	4053      	eors	r3, r2
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	6a3a      	ldr	r2, [r7, #32]
 800d1ca:	4053      	eors	r3, r2
 800d1cc:	623b      	str	r3, [r7, #32]
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	0c1a      	lsrs	r2, r3, #16
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	4053      	eors	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	617b      	str	r3, [r7, #20]
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	4053      	eors	r3, r2
 800d1e0:	623b      	str	r3, [r7, #32]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	041b      	lsls	r3, r3, #16
 800d1e6:	69fa      	ldr	r2, [r7, #28]
 800d1e8:	4053      	eors	r3, r2
 800d1ea:	61fb      	str	r3, [r7, #28]
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	091a      	lsrs	r2, r3, #4
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	4053      	eors	r3, r2
 800d1f4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	6a3a      	ldr	r2, [r7, #32]
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	4053      	eors	r3, r2
 800d200:	623b      	str	r3, [r7, #32]
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	011b      	lsls	r3, r3, #4
 800d206:	69fa      	ldr	r2, [r7, #28]
 800d208:	4053      	eors	r3, r2
 800d20a:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	ba1b      	rev	r3, r3
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f001 f898 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	ba1b      	rev	r3, r3
 800d220:	4619      	mov	r1, r3
 800d222:	4610      	mov	r0, r2
 800d224:	f001 f890 	bl	800e348 <mbedtls_put_unaligned_uint32>

    return 0;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3728      	adds	r7, #40	; 0x28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	08013ff0 	.word	0x08013ff0
 800d238:	08013df0 	.word	0x08013df0
 800d23c:	08013bf0 	.word	0x08013bf0
 800d240:	080139f0 	.word	0x080139f0
 800d244:	08013ef0 	.word	0x08013ef0
 800d248:	08013cf0 	.word	0x08013cf0
 800d24c:	08013af0 	.word	0x08013af0
 800d250:	080138f0 	.word	0x080138f0

0800d254 <mbedtls_des3_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[8],
                           const unsigned char *input,
                           unsigned char *output)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d262:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d266:	61fb      	str	r3, [r7, #28]
    unsigned char temp[8];

    if (length % 8) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f003 0307 	and.w	r3, r3, #7
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <mbedtls_des3_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800d272:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800d276:	e053      	b.n	800d320 <mbedtls_des3_crypt_cbc+0xcc>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d146      	bne.n	800d30c <mbedtls_des3_crypt_cbc+0xb8>
        while (length > 0) {
 800d27e:	e01c      	b.n	800d2ba <mbedtls_des3_crypt_cbc+0x66>
            mbedtls_xor(output, input, iv, 8);
 800d280:	2308      	movs	r3, #8
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d288:	f001 f88e 	bl	800e3a8 <mbedtls_xor>

            ret = mbedtls_des3_crypt_ecb(ctx, output, output);
 800d28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fce1 	bl	800cc58 <mbedtls_des3_crypt_ecb>
 800d296:	61f8      	str	r0, [r7, #28]
            if (ret != 0) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d13c      	bne.n	800d318 <mbedtls_des3_crypt_cbc+0xc4>
                goto exit;
            }
            memcpy(iv, output, 8);
 800d29e:	2208      	movs	r2, #8
 800d2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2a2:	6838      	ldr	r0, [r7, #0]
 800d2a4:	f003 fede 	bl	8011064 <memcpy>

            input  += 8;
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	3308      	adds	r3, #8
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3b08      	subs	r3, #8
 800d2b8:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1df      	bne.n	800d280 <mbedtls_des3_crypt_cbc+0x2c>
 800d2c0:	e027      	b.n	800d312 <mbedtls_des3_crypt_cbc+0xbe>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 800d2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c4:	f107 0314 	add.w	r3, r7, #20
 800d2c8:	6810      	ldr	r0, [r2, #0]
 800d2ca:	6851      	ldr	r1, [r2, #4]
 800d2cc:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des3_crypt_ecb(ctx, input, output);
 800d2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fcc0 	bl	800cc58 <mbedtls_des3_crypt_ecb>
 800d2d8:	61f8      	str	r0, [r7, #28]
            if (ret != 0) {
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d11d      	bne.n	800d31c <mbedtls_des3_crypt_cbc+0xc8>
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2e8:	f001 f85e 	bl	800e3a8 <mbedtls_xor>

            memcpy(iv, temp, 8);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f107 0314 	add.w	r3, r7, #20
 800d2f4:	cb03      	ldmia	r3!, {r0, r1}
 800d2f6:	6010      	str	r0, [r2, #0]
 800d2f8:	6051      	str	r1, [r2, #4]

            input  += 8;
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	3308      	adds	r3, #8
 800d304:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3b08      	subs	r3, #8
 800d30a:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1d7      	bne.n	800d2c2 <mbedtls_des3_crypt_cbc+0x6e>
        }
    }
    ret = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	61fb      	str	r3, [r7, #28]
 800d316:	e002      	b.n	800d31e <mbedtls_des3_crypt_cbc+0xca>
                goto exit;
 800d318:	bf00      	nop
 800d31a:	e000      	b.n	800d31e <mbedtls_des3_crypt_cbc+0xca>
                goto exit;
 800d31c:	bf00      	nop

exit:
    return ret;
 800d31e:	69fb      	ldr	r3, [r7, #28]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init(mbedtls_gcm_context *ctx)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_gcm_context));
 800d330:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d334:	2100      	movs	r1, #0
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f003 fea2 	bl	8011080 <memset>
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table(mbedtls_gcm_context *ctx)
{
 800d344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d348:	b0a8      	sub	sp, #160	; 0xa0
 800d34a:	af02      	add	r7, sp, #8
 800d34c:	6478      	str	r0, [r7, #68]	; 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	64bb      	str	r3, [r7, #72]	; 0x48

    memset(h, 0, 16);
 800d352:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d356:	2210      	movs	r2, #16
 800d358:	2100      	movs	r1, #0
 800d35a:	4618      	mov	r0, r3
 800d35c:	f003 fe90 	bl	8011080 <memset>
    if ((ret = mbedtls_cipher_update(&ctx->cipher_ctx, h, 16, h, &olen)) != 0) {
 800d360:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d362:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d366:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800d36a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4613      	mov	r3, r2
 800d372:	2210      	movs	r2, #16
 800d374:	f7fd fc24 	bl	800abc0 <mbedtls_cipher_update>
 800d378:	67f8      	str	r0, [r7, #124]	; 0x7c
 800d37a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <gcm_gen_table+0x40>
        return ret;
 800d380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d382:	e13b      	b.n	800d5fc <gcm_gen_table+0x2b8>
    }

    /* pack h as two 64-bits ints, big-endian */
    hi = MBEDTLS_GET_UINT32_BE(h,  0);
 800d384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 ffcf 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800d38e:	4603      	mov	r3, r0
 800d390:	ba1b      	rev	r3, r3
 800d392:	2200      	movs	r2, #0
 800d394:	469a      	mov	sl, r3
 800d396:	4693      	mov	fp, r2
 800d398:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
    lo = MBEDTLS_GET_UINT32_BE(h,  4);
 800d39c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 ffc2 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	ba1b      	rev	r3, r3
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	623b      	str	r3, [r7, #32]
 800d3b0:	627a      	str	r2, [r7, #36]	; 0x24
 800d3b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    vh = (uint64_t) hi << 32 | lo;
 800d3ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d3be:	f04f 0000 	mov.w	r0, #0
 800d3c2:	f04f 0100 	mov.w	r1, #0
 800d3c6:	0011      	movs	r1, r2
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d3ce:	ea42 0400 	orr.w	r4, r2, r0
 800d3d2:	ea43 0501 	orr.w	r5, r3, r1
 800d3d6:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80

    hi = MBEDTLS_GET_UINT32_BE(h,  8);
 800d3da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3de:	3308      	adds	r3, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 ffa3 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	ba1b      	rev	r3, r3
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	61bb      	str	r3, [r7, #24]
 800d3ee:	61fa      	str	r2, [r7, #28]
 800d3f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d3f4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    lo = MBEDTLS_GET_UINT32_BE(h,  12);
 800d3f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3fc:	330c      	adds	r3, #12
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 ff94 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800d404:	4603      	mov	r3, r0
 800d406:	ba1b      	rev	r3, r3
 800d408:	2200      	movs	r2, #0
 800d40a:	613b      	str	r3, [r7, #16]
 800d40c:	617a      	str	r2, [r7, #20]
 800d40e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d412:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    vl = (uint64_t) hi << 32 | lo;
 800d416:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d41a:	f04f 0000 	mov.w	r0, #0
 800d41e:	f04f 0100 	mov.w	r1, #0
 800d422:	0011      	movs	r1, r2
 800d424:	2000      	movs	r0, #0
 800d426:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d42a:	ea42 0800 	orr.w	r8, r2, r0
 800d42e:	ea43 0901 	orr.w	r9, r3, r1
 800d432:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 800d436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d438:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d43c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    ctx->HH[8] = vh;
 800d440:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d442:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d446:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
        return 0;
    }
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800d44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d44c:	f04f 0200 	mov.w	r2, #0
 800d450:	f04f 0300 	mov.w	r3, #0
 800d454:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    ctx->HL[0] = 0;
 800d458:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d45a:	f04f 0200 	mov.w	r2, #0
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

    for (i = 4; i > 0; i >>= 1) {
 800d466:	2304      	movs	r3, #4
 800d468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d46c:	e05b      	b.n	800d526 <gcm_gen_table+0x1e2>
        uint32_t T = (vl & 1) * 0xe1000000U;
 800d46e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d472:	f003 0201 	and.w	r2, r3, #1
 800d476:	4613      	mov	r3, r2
 800d478:	0152      	lsls	r2, r2, #5
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	061b      	lsls	r3, r3, #24
 800d47e:	65fb      	str	r3, [r7, #92]	; 0x5c
        vl  = (vh << 63) | (vl >> 1);
 800d480:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d484:	f04f 0400 	mov.w	r4, #0
 800d488:	f04f 0500 	mov.w	r5, #0
 800d48c:	07d5      	lsls	r5, r2, #31
 800d48e:	2400      	movs	r4, #0
 800d490:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d494:	f04f 0000 	mov.w	r0, #0
 800d498:	f04f 0100 	mov.w	r1, #0
 800d49c:	0850      	lsrs	r0, r2, #1
 800d49e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d4a2:	0859      	lsrs	r1, r3, #1
 800d4a4:	ea44 0300 	orr.w	r3, r4, r0
 800d4a8:	60bb      	str	r3, [r7, #8]
 800d4aa:	ea45 0301 	orr.w	r3, r5, r1
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d4b4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        vh  = (vh >> 1) ^ ((uint64_t) T << 32);
 800d4b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d4bc:	f04f 0000 	mov.w	r0, #0
 800d4c0:	f04f 0100 	mov.w	r1, #0
 800d4c4:	0850      	lsrs	r0, r2, #1
 800d4c6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d4ca:	0859      	lsrs	r1, r3, #1
 800d4cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d4d4:	f04f 0200 	mov.w	r2, #0
 800d4d8:	f04f 0300 	mov.w	r3, #0
 800d4dc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d4de:	0023      	movs	r3, r4
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	ea80 0402 	eor.w	r4, r0, r2
 800d4e6:	603c      	str	r4, [r7, #0]
 800d4e8:	404b      	eors	r3, r1
 800d4ea:	607b      	str	r3, [r7, #4]
 800d4ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d4f0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

        ctx->HL[i] = vl;
 800d4f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4fa:	3309      	adds	r3, #9
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	18d1      	adds	r1, r2, r3
 800d500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d504:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 800d508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d50a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d50e:	3319      	adds	r3, #25
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	18d1      	adds	r1, r2, r3
 800d514:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d518:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 4; i > 0; i >>= 1) {
 800d51c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d520:	105b      	asrs	r3, r3, #1
 800d522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dc9f      	bgt.n	800d46e <gcm_gen_table+0x12a>
    }

    for (i = 2; i <= 8; i *= 2) {
 800d52e:	2302      	movs	r3, #2
 800d530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d534:	e05d      	b.n	800d5f2 <gcm_gen_table+0x2ae>
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 800d536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d538:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d53c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	4413      	add	r3, r2
 800d544:	667b      	str	r3, [r7, #100]	; 0x64
 800d546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d548:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800d54c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	4413      	add	r3, r2
 800d554:	663b      	str	r3, [r7, #96]	; 0x60
        vh = *HiH;
 800d556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        vl = *HiL;
 800d560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        for (j = 1; j < i; j++) {
 800d56a:	2301      	movs	r3, #1
 800d56c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d570:	e034      	b.n	800d5dc <gcm_gen_table+0x298>
            HiH[j] = vh ^ ctx->HH[j];
 800d572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d578:	3319      	adds	r3, #25
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	4413      	add	r3, r2
 800d57e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d58a:	18d4      	adds	r4, r2, r3
 800d58c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d590:	ea80 0502 	eor.w	r5, r0, r2
 800d594:	633d      	str	r5, [r7, #48]	; 0x30
 800d596:	404b      	eors	r3, r1
 800d598:	637b      	str	r3, [r7, #52]	; 0x34
 800d59a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d59e:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 800d5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5a8:	3309      	adds	r3, #9
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	4413      	add	r3, r2
 800d5ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5ba:	18d4      	adds	r4, r2, r3
 800d5bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d5c0:	ea80 0502 	eor.w	r5, r0, r2
 800d5c4:	62bd      	str	r5, [r7, #40]	; 0x28
 800d5c6:	404b      	eors	r3, r1
 800d5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5ce:	e9c4 2300 	strd	r2, r3, [r4]
        for (j = 1; j < i; j++) {
 800d5d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d5dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d5e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	dbc4      	blt.n	800d572 <gcm_gen_table+0x22e>
    for (i = 2; i <= 8; i *= 2) {
 800d5e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	dd9d      	ble.n	800d536 <gcm_gen_table+0x1f2>
        }
    }

    return 0;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3798      	adds	r7, #152	; 0x98
 800d600:	46bd      	mov	sp, r7
 800d602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d606 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
 800d612:	460b      	mov	r3, r1
 800d614:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d616:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d61a:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2b80      	cmp	r3, #128	; 0x80
 800d620:	d009      	beq.n	800d636 <mbedtls_gcm_setkey+0x30>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2bc0      	cmp	r3, #192	; 0xc0
 800d626:	d006      	beq.n	800d636 <mbedtls_gcm_setkey+0x30>
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d62e:	d002      	beq.n	800d636 <mbedtls_gcm_setkey+0x30>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800d630:	f06f 0313 	mvn.w	r3, #19
 800d634:	e038      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	7afb      	ldrb	r3, [r7, #11]
 800d63a:	2201      	movs	r2, #1
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fd f9d1 	bl	800a9e4 <mbedtls_cipher_info_from_values>
 800d642:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d102      	bne.n	800d650 <mbedtls_gcm_setkey+0x4a>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800d64a:	f06f 0313 	mvn.w	r3, #19
 800d64e:	e02b      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    if (cipher_info->block_size != 16) {
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	2b10      	cmp	r3, #16
 800d656:	d002      	beq.n	800d65e <mbedtls_gcm_setkey+0x58>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800d658:	f06f 0313 	mvn.w	r3, #19
 800d65c:	e024      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	4618      	mov	r0, r3
 800d662:	f7fd f9f1 	bl	800aa48 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6939      	ldr	r1, [r7, #16]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fa18 	bl	800aaa0 <mbedtls_cipher_setup>
 800d670:	6178      	str	r0, [r7, #20]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <mbedtls_gcm_setkey+0x76>
        return ret;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	e015      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	2301      	movs	r3, #1
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	f7fd fa38 	bl	800aaf8 <mbedtls_cipher_setkey>
 800d688:	6178      	str	r0, [r7, #20]
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <mbedtls_gcm_setkey+0x8e>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	e009      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    if ((ret = gcm_gen_table(ctx)) != 0) {
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff fe55 	bl	800d344 <gcm_gen_table>
 800d69a:	6178      	str	r0, [r7, #20]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <mbedtls_gcm_setkey+0xa0>
        return ret;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	e000      	b.n	800d6a8 <mbedtls_gcm_setkey+0xa2>
    }

    return 0;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult(mbedtls_gcm_context *ctx, const unsigned char x[16],
                     unsigned char output[16])
{
 800d6b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6b4:	b098      	sub	sp, #96	; 0x60
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d6ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800d6bc:	637a      	str	r2, [r7, #52]	; 0x34
    int i = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	65bb      	str	r3, [r7, #88]	; 0x58
        mbedtls_aesce_gcm_mult(output, x, h);
        return;
    }
#endif

    lo = x[15] & 0xf;
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	330f      	adds	r3, #15
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f003 030f 	and.w	r3, r3, #15
 800d6cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    zh = ctx->HH[lo];
 800d6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6d6:	3319      	adds	r3, #25
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	4413      	add	r3, r2
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    zl = ctx->HL[lo];
 800d6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6ea:	3309      	adds	r3, #9
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	4413      	add	r3, r2
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for (i = 15; i >= 0; i--) {
 800d6f8:	230f      	movs	r3, #15
 800d6fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6fc:	e0e6      	b.n	800d8cc <gcm_mult+0x21c>
        lo = x[i] & 0xf;
 800d6fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	4413      	add	r3, r2
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f003 030f 	and.w	r3, r3, #15
 800d70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        hi = (x[i] >> 4) & 0xf;
 800d70e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d712:	4413      	add	r3, r2
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	091b      	lsrs	r3, r3, #4
 800d718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        if (i != 15) {
 800d71c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d71e:	2b0f      	cmp	r3, #15
 800d720:	d068      	beq.n	800d7f4 <gcm_mult+0x144>
            rem = (unsigned char) zl & 0xf;
 800d722:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d726:	f003 030f 	and.w	r3, r3, #15
 800d72a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            zl = (zh << 60) | (zl >> 4);
 800d72e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d732:	f04f 0400 	mov.w	r4, #0
 800d736:	f04f 0500 	mov.w	r5, #0
 800d73a:	0715      	lsls	r5, r2, #28
 800d73c:	2400      	movs	r4, #0
 800d73e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f04f 0100 	mov.w	r1, #0
 800d74a:	0910      	lsrs	r0, r2, #4
 800d74c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d750:	0919      	lsrs	r1, r3, #4
 800d752:	ea44 0300 	orr.w	r3, r4, r0
 800d756:	62bb      	str	r3, [r7, #40]	; 0x28
 800d758:	ea45 0301 	orr.w	r3, r5, r1
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d75e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d762:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
            zh = (zh >> 4);
 800d766:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d76a:	f04f 0000 	mov.w	r0, #0
 800d76e:	f04f 0100 	mov.w	r1, #0
 800d772:	0910      	lsrs	r0, r2, #4
 800d774:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d778:	0919      	lsrs	r1, r3, #4
 800d77a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 800d77e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d782:	4a6f      	ldr	r2, [pc, #444]	; (800d940 <gcm_mult+0x290>)
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	4413      	add	r3, r2
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f04f 0000 	mov.w	r0, #0
 800d790:	f04f 0100 	mov.w	r1, #0
 800d794:	0411      	lsls	r1, r2, #16
 800d796:	2000      	movs	r0, #0
 800d798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d79c:	ea82 0400 	eor.w	r4, r2, r0
 800d7a0:	623c      	str	r4, [r7, #32]
 800d7a2:	404b      	eors	r3, r1
 800d7a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d7aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zh ^= ctx->HH[lo];
 800d7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7b4:	3319      	adds	r3, #25
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	4413      	add	r3, r2
 800d7ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d7c2:	ea82 0400 	eor.w	r4, r2, r0
 800d7c6:	61bc      	str	r4, [r7, #24]
 800d7c8:	404b      	eors	r3, r1
 800d7ca:	61fb      	str	r3, [r7, #28]
 800d7cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d7d0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zl ^= ctx->HL[lo];
 800d7d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7da:	3309      	adds	r3, #9
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	4413      	add	r3, r2
 800d7e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d7e8:	ea82 0800 	eor.w	r8, r2, r0
 800d7ec:	ea83 0901 	eor.w	r9, r3, r1
 800d7f0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48

        }

        rem = (unsigned char) zl & 0xf;
 800d7f4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d7f8:	f003 030f 	and.w	r3, r3, #15
 800d7fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        zl = (zh << 60) | (zl >> 4);
 800d800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d804:	f04f 0400 	mov.w	r4, #0
 800d808:	f04f 0500 	mov.w	r5, #0
 800d80c:	0715      	lsls	r5, r2, #28
 800d80e:	2400      	movs	r4, #0
 800d810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d814:	f04f 0000 	mov.w	r0, #0
 800d818:	f04f 0100 	mov.w	r1, #0
 800d81c:	0910      	lsrs	r0, r2, #4
 800d81e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d822:	0919      	lsrs	r1, r3, #4
 800d824:	ea44 0300 	orr.w	r3, r4, r0
 800d828:	613b      	str	r3, [r7, #16]
 800d82a:	ea45 0301 	orr.w	r3, r5, r1
 800d82e:	617b      	str	r3, [r7, #20]
 800d830:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d834:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        zh = (zh >> 4);
 800d838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d83c:	f04f 0000 	mov.w	r0, #0
 800d840:	f04f 0100 	mov.w	r1, #0
 800d844:	0910      	lsrs	r0, r2, #4
 800d846:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d84a:	0919      	lsrs	r1, r3, #4
 800d84c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 800d850:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d854:	4a3a      	ldr	r2, [pc, #232]	; (800d940 <gcm_mult+0x290>)
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	4413      	add	r3, r2
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f04f 0000 	mov.w	r0, #0
 800d862:	f04f 0100 	mov.w	r1, #0
 800d866:	0411      	lsls	r1, r2, #16
 800d868:	2000      	movs	r0, #0
 800d86a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d86e:	ea82 0400 	eor.w	r4, r2, r0
 800d872:	60bc      	str	r4, [r7, #8]
 800d874:	404b      	eors	r3, r1
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d87c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zh ^= ctx->HH[hi];
 800d880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d886:	3319      	adds	r3, #25
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	4413      	add	r3, r2
 800d88c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d894:	ea82 0400 	eor.w	r4, r2, r0
 800d898:	603c      	str	r4, [r7, #0]
 800d89a:	404b      	eors	r3, r1
 800d89c:	607b      	str	r3, [r7, #4]
 800d89e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d8a2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zl ^= ctx->HL[hi];
 800d8a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d8aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ac:	3309      	adds	r3, #9
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	4413      	add	r3, r2
 800d8b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d8ba:	ea82 0a00 	eor.w	sl, r2, r0
 800d8be:	ea83 0b01 	eor.w	fp, r3, r1
 800d8c2:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
    for (i = 15; i >= 0; i--) {
 800d8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f6bf af15 	bge.w	800d6fe <gcm_mult+0x4e>
    }

    MBEDTLS_PUT_UINT32_BE(zh >> 32, output, 0);
 800d8d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d8d8:	f04f 0200 	mov.w	r2, #0
 800d8dc:	f04f 0300 	mov.w	r3, #0
 800d8e0:	000a      	movs	r2, r1
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	ba1b      	rev	r3, r3
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8ec:	f000 fd2c 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(zh, output, 4);
 800d8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f6:	ba1b      	rev	r3, r3
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4610      	mov	r0, r2
 800d8fc:	f000 fd24 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(zl >> 32, output, 8);
 800d900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d902:	f103 0408 	add.w	r4, r3, #8
 800d906:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	f04f 0300 	mov.w	r3, #0
 800d912:	000a      	movs	r2, r1
 800d914:	2300      	movs	r3, #0
 800d916:	4613      	mov	r3, r2
 800d918:	ba1b      	rev	r3, r3
 800d91a:	4619      	mov	r1, r3
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fd13 	bl	800e348 <mbedtls_put_unaligned_uint32>
    MBEDTLS_PUT_UINT32_BE(zl, output, 12);
 800d922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d924:	f103 020c 	add.w	r2, r3, #12
 800d928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d92a:	ba1b      	rev	r3, r3
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f000 fd0a 	bl	800e348 <mbedtls_put_unaligned_uint32>
}
 800d934:	bf00      	nop
 800d936:	3760      	adds	r7, #96	; 0x60
 800d938:	46bd      	mov	sp, r7
 800d93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d93e:	bf00      	nop
 800d940:	08014170 	.word	0x08014170

0800d944 <mbedtls_gcm_starts>:

int mbedtls_gcm_starts(mbedtls_gcm_context *ctx,
                       int mode,
                       const unsigned char *iv, size_t iv_len)
{
 800d944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d948:	b090      	sub	sp, #64	; 0x40
 800d94a:	af02      	add	r7, sp, #8
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
 800d952:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d954:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d958:	633b      	str	r3, [r7, #48]	; 0x30
    unsigned char work_buf[16];
    const unsigned char *p;
    size_t use_len, olen = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	613b      	str	r3, [r7, #16]
    uint64_t iv_bits;

    /* IV is limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if (iv_len == 0 || (uint64_t) iv_len >> 61 != 0) {
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00c      	beq.n	800d97e <mbedtls_gcm_starts+0x3a>
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2200      	movs	r2, #0
 800d968:	4698      	mov	r8, r3
 800d96a:	4691      	mov	r9, r2
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	ea4f 7259 	mov.w	r2, r9, lsr #29
 800d978:	2300      	movs	r3, #0
 800d97a:	4313      	orrs	r3, r2
 800d97c:	d002      	beq.n	800d984 <mbedtls_gcm_starts+0x40>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800d97e:	f06f 0313 	mvn.w	r3, #19
 800d982:	e0a3      	b.n	800dacc <mbedtls_gcm_starts+0x188>
    }

    memset(ctx->y, 0x00, sizeof(ctx->y));
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d98a:	2210      	movs	r2, #16
 800d98c:	2100      	movs	r1, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f003 fb76 	bl	8011080 <memset>
    memset(ctx->buf, 0x00, sizeof(ctx->buf));
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d99a:	2210      	movs	r2, #16
 800d99c:	2100      	movs	r1, #0
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f003 fb6e 	bl	8011080 <memset>

    ctx->mode = mode;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    ctx->len = 0;
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	f04f 0200 	mov.w	r2, #0
 800d9b2:	f04f 0300 	mov.w	r3, #0
 800d9b6:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
    ctx->add_len = 0;
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	f04f 0200 	mov.w	r2, #0
 800d9c0:	f04f 0300 	mov.w	r3, #0
 800d9c4:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

    if (iv_len == 12) {
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b0c      	cmp	r3, #12
 800d9cc:	d10c      	bne.n	800d9e8 <mbedtls_gcm_starts+0xa4>
        memcpy(ctx->y, iv, iv_len);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f003 fb43 	bl	8011064 <memcpy>
        ctx->y[15] = 1;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 800d9e6:	e05c      	b.n	800daa2 <mbedtls_gcm_starts+0x15e>
    } else {
        memset(work_buf, 0x00, 16);
 800d9e8:	f107 0314 	add.w	r3, r7, #20
 800d9ec:	2210      	movs	r2, #16
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f003 fb45 	bl	8011080 <memset>
        iv_bits = (uint64_t) iv_len * 8;
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	461c      	mov	r4, r3
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	f04f 0200 	mov.w	r2, #0
 800da02:	f04f 0300 	mov.w	r3, #0
 800da06:	00eb      	lsls	r3, r5, #3
 800da08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da0c:	00e2      	lsls	r2, r4, #3
 800da0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        MBEDTLS_PUT_UINT64_BE(iv_bits, work_buf, 8);
 800da12:	f107 0114 	add.w	r1, r7, #20
 800da16:	3108      	adds	r1, #8
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	ba18      	rev	r0, r3
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	ba1c      	rev	r4, r3
 800da20:	4622      	mov	r2, r4
 800da22:	4603      	mov	r3, r0
 800da24:	4608      	mov	r0, r1
 800da26:	f000 fcaf 	bl	800e388 <mbedtls_put_unaligned_uint64>

        p = iv;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	637b      	str	r3, [r7, #52]	; 0x34
        while (iv_len > 0) {
 800da2e:	e020      	b.n	800da72 <mbedtls_gcm_starts+0x12e>
            use_len = (iv_len < 16) ? iv_len : 16;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b10      	cmp	r3, #16
 800da34:	bf28      	it	cs
 800da36:	2310      	movcs	r3, #16
 800da38:	627b      	str	r3, [r7, #36]	; 0x24

            mbedtls_xor(ctx->y, ctx->y, p, use_len);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da4a:	f000 fcad 	bl	800e3a8 <mbedtls_xor>

            gcm_mult(ctx, ctx->y, ctx->y);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da5a:	461a      	mov	r2, r3
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7ff fe27 	bl	800d6b0 <gcm_mult>

            iv_len -= use_len;
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	603b      	str	r3, [r7, #0]
            p += use_len;
 800da6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	4413      	add	r3, r2
 800da70:	637b      	str	r3, [r7, #52]	; 0x34
        while (iv_len > 0) {
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1db      	bne.n	800da30 <mbedtls_gcm_starts+0xec>
        }

        mbedtls_xor(ctx->y, ctx->y, work_buf, 16);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800da84:	f107 0214 	add.w	r2, r7, #20
 800da88:	2310      	movs	r3, #16
 800da8a:	f000 fc8d 	bl	800e3a8 <mbedtls_xor>

        gcm_mult(ctx, ctx->y, ctx->y);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da9a:	461a      	mov	r2, r3
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f7ff fe07 	bl	800d6b0 <gcm_mult>
    }

    if ((ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16,
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
                                     ctx->base_ectr, &olen)) != 0) {
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    if ((ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16,
 800dab0:	f107 0310 	add.w	r3, r7, #16
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	4613      	mov	r3, r2
 800dab8:	2210      	movs	r2, #16
 800daba:	f7fd f881 	bl	800abc0 <mbedtls_cipher_update>
 800dabe:	6338      	str	r0, [r7, #48]	; 0x30
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <mbedtls_gcm_starts+0x186>
        return ret;
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	e000      	b.n	800dacc <mbedtls_gcm_starts+0x188>
    }

    return 0;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3738      	adds	r7, #56	; 0x38
 800dad0:	46bd      	mov	sp, r7
 800dad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dad6 <mbedtls_gcm_update_ad>:
 *     * len > 0 && len % 16 == 0:      the authentication tag is correct if
 *                                      the data ends now.
 */
int mbedtls_gcm_update_ad(mbedtls_gcm_context *ctx,
                          const unsigned char *add, size_t add_len)
{
 800dad6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dada:	b08c      	sub	sp, #48	; 0x30
 800dadc:	af00      	add	r7, sp, #0
 800dade:	61f8      	str	r0, [r7, #28]
 800dae0:	61b9      	str	r1, [r7, #24]
 800dae2:	617a      	str	r2, [r7, #20]
    const unsigned char *p;
    size_t use_len, offset;

    /* IV is limited to 2^64 bits, so 2^61 bytes */
    if ((uint64_t) add_len >> 61 != 0) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2200      	movs	r2, #0
 800dae8:	60bb      	str	r3, [r7, #8]
 800daea:	60fa      	str	r2, [r7, #12]
 800daec:	f04f 0200 	mov.w	r2, #0
 800daf0:	f04f 0300 	mov.w	r3, #0
 800daf4:	68f9      	ldr	r1, [r7, #12]
 800daf6:	0f4a      	lsrs	r2, r1, #29
 800daf8:	2300      	movs	r3, #0
 800dafa:	4313      	orrs	r3, r2
 800dafc:	d002      	beq.n	800db04 <mbedtls_gcm_update_ad+0x2e>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800dafe:	f06f 0313 	mvn.w	r3, #19
 800db02:	e086      	b.n	800dc12 <mbedtls_gcm_update_ad+0x13c>
    }

    offset = ctx->add_len % 16;
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800db0a:	4613      	mov	r3, r2
 800db0c:	f003 030f 	and.w	r3, r3, #15
 800db10:	627b      	str	r3, [r7, #36]	; 0x24
    p = add;
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (offset != 0) {
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d040      	beq.n	800db9e <mbedtls_gcm_update_ad+0xc8>
        use_len = 16 - offset;
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	f1c3 0310 	rsb	r3, r3, #16
 800db22:	62bb      	str	r3, [r7, #40]	; 0x28
        if (use_len > add_len) {
 800db24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d901      	bls.n	800db30 <mbedtls_gcm_update_ad+0x5a>
            use_len = add_len;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, p, use_len);
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	18d0      	adds	r0, r2, r3
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	18d1      	adds	r1, r2, r3
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db48:	f000 fc2e 	bl	800e3a8 <mbedtls_xor>

        if (offset + use_len == 16) {
 800db4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	4413      	add	r3, r2
 800db52:	2b10      	cmp	r3, #16
 800db54:	d109      	bne.n	800db6a <mbedtls_gcm_update_ad+0x94>
            gcm_mult(ctx, ctx->buf, ctx->buf);
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db62:	461a      	mov	r2, r3
 800db64:	69f8      	ldr	r0, [r7, #28]
 800db66:	f7ff fda3 	bl	800d6b0 <gcm_mult>
        }

        ctx->add_len += use_len;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800db70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db72:	2000      	movs	r0, #0
 800db74:	4688      	mov	r8, r1
 800db76:	4681      	mov	r9, r0
 800db78:	eb12 0108 	adds.w	r1, r2, r8
 800db7c:	6039      	str	r1, [r7, #0]
 800db7e:	eb43 0309 	adc.w	r3, r3, r9
 800db82:	607b      	str	r3, [r7, #4]
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	e9d7 1200 	ldrd	r1, r2, [r7]
 800db8a:	e9c3 1254 	strd	r1, r2, [r3, #336]	; 0x150
        add_len -= use_len;
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	617b      	str	r3, [r7, #20]
        p += use_len;
 800db96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9a:	4413      	add	r3, r2
 800db9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    ctx->add_len += add_len;
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800dba4:	6979      	ldr	r1, [r7, #20]
 800dba6:	2000      	movs	r0, #0
 800dba8:	460c      	mov	r4, r1
 800dbaa:	4605      	mov	r5, r0
 800dbac:	eb12 0a04 	adds.w	sl, r2, r4
 800dbb0:	eb43 0b05 	adc.w	fp, r3, r5
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	e9c3 ab54 	strd	sl, fp, [r3, #336]	; 0x150

    while (add_len >= 16) {
 800dbba:	e019      	b.n	800dbf0 <mbedtls_gcm_update_ad+0x11a>
        mbedtls_xor(ctx->buf, ctx->buf, p, 16);
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dbc8:	2310      	movs	r3, #16
 800dbca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbcc:	f000 fbec 	bl	800e3a8 <mbedtls_xor>

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dbdc:	461a      	mov	r2, r3
 800dbde:	69f8      	ldr	r0, [r7, #28]
 800dbe0:	f7ff fd66 	bl	800d6b0 <gcm_mult>

        add_len -= 16;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	3b10      	subs	r3, #16
 800dbe8:	617b      	str	r3, [r7, #20]
        p += 16;
 800dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbec:	3310      	adds	r3, #16
 800dbee:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (add_len >= 16) {
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	2b0f      	cmp	r3, #15
 800dbf4:	d8e2      	bhi.n	800dbbc <mbedtls_gcm_update_ad+0xe6>
    }

    if (add_len > 0) {
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d009      	beq.n	800dc10 <mbedtls_gcm_update_ad+0x13a>
        mbedtls_xor(ctx->buf, ctx->buf, p, add_len);
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc0c:	f000 fbcc 	bl	800e3a8 <mbedtls_xor>
    }

    return 0;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3730      	adds	r7, #48	; 0x30
 800dc16:	46bd      	mov	sp, r7
 800dc18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dc1c <gcm_incr>:

/* Increment the counter. */
static void gcm_incr(unsigned char y[16])
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 16; i > 12; i--) {
 800dc24:	2310      	movs	r3, #16
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e00d      	b.n	800dc46 <gcm_incr+0x2a>
        if (++y[i - 1] != 0) {
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	4413      	add	r3, r2
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	3201      	adds	r2, #1
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d106      	bne.n	800dc4e <gcm_incr+0x32>
    for (i = 16; i > 12; i--) {
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b0c      	cmp	r3, #12
 800dc4a:	d8ee      	bhi.n	800dc2a <gcm_incr+0xe>
            break;
        }
    }
}
 800dc4c:	e000      	b.n	800dc50 <gcm_incr+0x34>
            break;
 800dc4e:	bf00      	nop
}
 800dc50:	bf00      	nop
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <gcm_mask>:
static int gcm_mask(mbedtls_gcm_context *ctx,
                    unsigned char ectr[16],
                    size_t offset, size_t use_len,
                    const unsigned char *input,
                    unsigned char *output)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af02      	add	r7, sp, #8
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
 800dc68:	603b      	str	r3, [r7, #0]
    size_t olen = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	613b      	str	r3, [r7, #16]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dc6e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dc72:	617b      	str	r3, [r7, #20]

    if ((ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ectr,
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800dc7c:	f107 0310 	add.w	r3, r7, #16
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2210      	movs	r2, #16
 800dc86:	f7fc ff9b 	bl	800abc0 <mbedtls_cipher_update>
 800dc8a:	6178      	str	r0, [r7, #20]
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d005      	beq.n	800dc9e <gcm_mask+0x42>
                                     &olen)) != 0) {
        mbedtls_platform_zeroize(ectr, 16);
 800dc92:	2110      	movs	r1, #16
 800dc94:	68b8      	ldr	r0, [r7, #8]
 800dc96:	f000 fbcb 	bl	800e430 <mbedtls_platform_zeroize>
        return ret;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	e02e      	b.n	800dcfc <gcm_mask+0xa0>
    }

    if (ctx->mode == MBEDTLS_GCM_DECRYPT) {
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10d      	bne.n	800dcc4 <gcm_mask+0x68>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, input, use_len);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	18d0      	adds	r0, r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	18d1      	adds	r1, r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	6a3a      	ldr	r2, [r7, #32]
 800dcc0:	f000 fb72 	bl	800e3a8 <mbedtls_xor>
    }
    mbedtls_xor(output, ectr + offset, input, use_len);
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	18d1      	adds	r1, r2, r3
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	6a3a      	ldr	r2, [r7, #32]
 800dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcd0:	f000 fb6a 	bl	800e3a8 <mbedtls_xor>
    if (ctx->mode == MBEDTLS_GCM_ENCRYPT) {
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d10d      	bne.n	800dcfa <gcm_mask+0x9e>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, output, use_len);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	18d0      	adds	r0, r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	18d1      	adds	r1, r2, r3
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcf6:	f000 fb57 	bl	800e3a8 <mbedtls_xor>
    }

    return 0;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3718      	adds	r7, #24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <mbedtls_gcm_update>:

int mbedtls_gcm_update(mbedtls_gcm_context *ctx,
                       const unsigned char *input, size_t input_length,
                       unsigned char *output, size_t output_size,
                       size_t *output_length)
{
 800dd04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd08:	b09c      	sub	sp, #112	; 0x70
 800dd0a:	af02      	add	r7, sp, #8
 800dd0c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800dd0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800dd10:	637a      	str	r2, [r7, #52]	; 0x34
 800dd12:	633b      	str	r3, [r7, #48]	; 0x30
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dd14:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dd18:	65bb      	str	r3, [r7, #88]	; 0x58
    const unsigned char *p = input;
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char *out_p = output;
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	663b      	str	r3, [r7, #96]	; 0x60
    size_t offset;
    unsigned char ectr[16] = { 0 };
 800dd22:	2300      	movs	r3, #0
 800dd24:	647b      	str	r3, [r7, #68]	; 0x44
 800dd26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	6013      	str	r3, [r2, #0]
 800dd2e:	6053      	str	r3, [r2, #4]
 800dd30:	6093      	str	r3, [r2, #8]

    if (output_size < input_length) {
 800dd32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d202      	bcs.n	800dd42 <mbedtls_gcm_update+0x3e>
        return MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL;
 800dd3c:	f06f 0315 	mvn.w	r3, #21
 800dd40:	e113      	b.n	800df6a <mbedtls_gcm_update+0x266>
    }
    *output_length = input_length;
 800dd42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd48:	6013      	str	r3, [r2, #0]

    /* Exit early if input_length==0 so that we don't do any pointer arithmetic
     * on a potentially null pointer.
     * Returning early also means that the last partial block of AD remains
     * untouched for mbedtls_gcm_finish */
    if (input_length == 0) {
 800dd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <mbedtls_gcm_update+0x50>
        return 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e10a      	b.n	800df6a <mbedtls_gcm_update+0x266>
    }

    if (output > input && (size_t) (output - input) < input_length) {
 800dd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d909      	bls.n	800dd70 <mbedtls_gcm_update+0x6c>
 800dd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	461a      	mov	r2, r3
 800dd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d902      	bls.n	800dd70 <mbedtls_gcm_update+0x6c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800dd6a:	f06f 0313 	mvn.w	r3, #19
 800dd6e:	e0fc      	b.n	800df6a <mbedtls_gcm_update+0x266>
    }

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if (ctx->len + input_length < ctx->len ||
 800dd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd72:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800dd76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd78:	2000      	movs	r0, #0
 800dd7a:	62b9      	str	r1, [r7, #40]	; 0x28
 800dd7c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dd7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd80:	1854      	adds	r4, r2, r1
 800dd82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd84:	eb43 0101 	adc.w	r1, r3, r1
 800dd88:	460d      	mov	r5, r1
 800dd8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800dd90:	4294      	cmp	r4, r2
 800dd92:	eb75 0303 	sbcs.w	r3, r5, r3
 800dd96:	d313      	bcc.n	800ddc0 <mbedtls_gcm_update+0xbc>
        (uint64_t) ctx->len + input_length > 0xFFFFFFFE0ull) {
 800dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9a:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800dd9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dda0:	2000      	movs	r0, #0
 800dda2:	6239      	str	r1, [r7, #32]
 800dda4:	6278      	str	r0, [r7, #36]	; 0x24
 800dda6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ddaa:	4621      	mov	r1, r4
 800ddac:	eb12 0801 	adds.w	r8, r2, r1
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	eb43 0901 	adc.w	r9, r3, r1
    if (ctx->len + input_length < ctx->len ||
 800ddb6:	f118 0f1f 	cmn.w	r8, #31
 800ddba:	f179 030f 	sbcs.w	r3, r9, #15
 800ddbe:	d302      	bcc.n	800ddc6 <mbedtls_gcm_update+0xc2>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800ddc0:	f06f 0313 	mvn.w	r3, #19
 800ddc4:	e0d1      	b.n	800df6a <mbedtls_gcm_update+0x266>
    }

    if (ctx->len == 0 && ctx->add_len % 16 != 0) {
 800ddc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	d113      	bne.n	800ddf8 <mbedtls_gcm_update+0xf4>
 800ddd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd2:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800ddd6:	f002 0a0f 	and.w	sl, r2, #15
 800ddda:	f04f 0b00 	mov.w	fp, #0
 800ddde:	ea5a 030b 	orrs.w	r3, sl, fp
 800dde2:	d009      	beq.n	800ddf8 <mbedtls_gcm_update+0xf4>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800dde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde6:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800ddea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ddf4:	f7ff fc5c 	bl	800d6b0 <gcm_mult>
    }

    offset = ctx->len % 16;
 800ddf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfa:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800ddfe:	4613      	mov	r3, r2
 800de00:	f003 030f 	and.w	r3, r3, #15
 800de04:	657b      	str	r3, [r7, #84]	; 0x54
    if (offset != 0) {
 800de06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d04a      	beq.n	800dea2 <mbedtls_gcm_update+0x19e>
        size_t use_len = 16 - offset;
 800de0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de0e:	f1c3 0310 	rsb	r3, r3, #16
 800de12:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (use_len > input_length) {
 800de14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de18:	429a      	cmp	r2, r3
 800de1a:	d901      	bls.n	800de20 <mbedtls_gcm_update+0x11c>
            use_len = input_length;
 800de1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        if ((ret = gcm_mask(ctx, ectr, offset, use_len, p, out_p)) != 0) {
 800de20:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800de24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de26:	9301      	str	r3, [sp, #4]
 800de28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de32:	f7ff ff13 	bl	800dc5c <gcm_mask>
 800de36:	65b8      	str	r0, [r7, #88]	; 0x58
 800de38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <mbedtls_gcm_update+0x13e>
            return ret;
 800de3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de40:	e093      	b.n	800df6a <mbedtls_gcm_update+0x266>
        }

        if (offset + use_len == 16) {
 800de42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de46:	4413      	add	r3, r2
 800de48:	2b10      	cmp	r3, #16
 800de4a:	d109      	bne.n	800de60 <mbedtls_gcm_update+0x15c>
            gcm_mult(ctx, ctx->buf, ctx->buf);
 800de4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4e:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800de52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800de58:	461a      	mov	r2, r3
 800de5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de5c:	f7ff fc28 	bl	800d6b0 <gcm_mult>
        }

        ctx->len += use_len;
 800de60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de62:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800de66:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de68:	2000      	movs	r0, #0
 800de6a:	61b9      	str	r1, [r7, #24]
 800de6c:	61f8      	str	r0, [r7, #28]
 800de6e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800de72:	4621      	mov	r1, r4
 800de74:	1851      	adds	r1, r2, r1
 800de76:	6139      	str	r1, [r7, #16]
 800de78:	4629      	mov	r1, r5
 800de7a:	eb43 0101 	adc.w	r1, r3, r1
 800de7e:	6179      	str	r1, [r7, #20]
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800de86:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148
        input_length -= use_len;
 800de8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	637b      	str	r3, [r7, #52]	; 0x34
        p += use_len;
 800de92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de96:	4413      	add	r3, r2
 800de98:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += use_len;
 800de9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de9e:	4413      	add	r3, r2
 800dea0:	663b      	str	r3, [r7, #96]	; 0x60
    }

    ctx->len += input_length;
 800dea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea4:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800dea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800deaa:	2000      	movs	r0, #0
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800deb4:	4621      	mov	r1, r4
 800deb6:	1851      	adds	r1, r2, r1
 800deb8:	6039      	str	r1, [r7, #0]
 800deba:	4629      	mov	r1, r5
 800debc:	eb43 0101 	adc.w	r1, r3, r1
 800dec0:	6079      	str	r1, [r7, #4]
 800dec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dec8:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148

    while (input_length >= 16) {
 800decc:	e029      	b.n	800df22 <mbedtls_gcm_update+0x21e>
        gcm_incr(ctx->y);
 800dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff fea1 	bl	800dc1c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, 16, p, out_p)) != 0) {
 800deda:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800dede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	2310      	movs	r3, #16
 800dee8:	2200      	movs	r2, #0
 800deea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800deec:	f7ff feb6 	bl	800dc5c <gcm_mask>
 800def0:	65b8      	str	r0, [r7, #88]	; 0x58
 800def2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <mbedtls_gcm_update+0x1f8>
            return ret;
 800def8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800defa:	e036      	b.n	800df6a <mbedtls_gcm_update+0x266>
        }

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defe:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800df02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800df08:	461a      	mov	r2, r3
 800df0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df0c:	f7ff fbd0 	bl	800d6b0 <gcm_mult>

        input_length -= 16;
 800df10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df12:	3b10      	subs	r3, #16
 800df14:	637b      	str	r3, [r7, #52]	; 0x34
        p += 16;
 800df16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df18:	3310      	adds	r3, #16
 800df1a:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += 16;
 800df1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df1e:	3310      	adds	r3, #16
 800df20:	663b      	str	r3, [r7, #96]	; 0x60
    while (input_length >= 16) {
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	2b0f      	cmp	r3, #15
 800df26:	d8d2      	bhi.n	800dece <mbedtls_gcm_update+0x1ca>
    }

    if (input_length > 0) {
 800df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d016      	beq.n	800df5c <mbedtls_gcm_update+0x258>
        gcm_incr(ctx->y);
 800df2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff fe71 	bl	800dc1c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, input_length, p, out_p)) != 0) {
 800df3a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800df3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df48:	2200      	movs	r2, #0
 800df4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df4c:	f7ff fe86 	bl	800dc5c <gcm_mask>
 800df50:	65b8      	str	r0, [r7, #88]	; 0x58
 800df52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <mbedtls_gcm_update+0x258>
            return ret;
 800df58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df5a:	e006      	b.n	800df6a <mbedtls_gcm_update+0x266>
        }
    }

    mbedtls_platform_zeroize(ectr, sizeof(ectr));
 800df5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df60:	2110      	movs	r1, #16
 800df62:	4618      	mov	r0, r3
 800df64:	f000 fa64 	bl	800e430 <mbedtls_platform_zeroize>
    return 0;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3768      	adds	r7, #104	; 0x68
 800df6e:	46bd      	mov	sp, r7
 800df70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df74 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish(mbedtls_gcm_context *ctx,
                       unsigned char *output, size_t output_size,
                       size_t *output_length,
                       unsigned char *tag, size_t tag_len)
{
 800df74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800df78:	b08c      	sub	sp, #48	; 0x30
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
 800df82:	603b      	str	r3, [r7, #0]

    /* We never pass any output in finish(). The output parameter exists only
     * for the sake of alternative implementations. */
    (void) output;
    (void) output_size;
    *output_length = 0;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	2200      	movs	r2, #0
 800df88:	601a      	str	r2, [r3, #0]

    orig_len = ctx->len * 8;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 800df90:	f04f 0200 	mov.w	r2, #0
 800df94:	f04f 0300 	mov.w	r3, #0
 800df98:	00cb      	lsls	r3, r1, #3
 800df9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800df9e:	00c2      	lsls	r2, r0, #3
 800dfa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    orig_add_len = ctx->add_len * 8;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	00cb      	lsls	r3, r1, #3
 800dfb4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dfb8:	00c2      	lsls	r2, r0, #3
 800dfba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (ctx->len == 0 && ctx->add_len % 16 != 0) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	d113      	bne.n	800dff0 <mbedtls_gcm_finish+0x7c>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800dfce:	f002 080f 	and.w	r8, r2, #15
 800dfd2:	f04f 0900 	mov.w	r9, #0
 800dfd6:	ea58 0309 	orrs.w	r3, r8, r9
 800dfda:	d009      	beq.n	800dff0 <mbedtls_gcm_finish+0x7c>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff fb60 	bl	800d6b0 <gcm_mult>
    }

    if (tag_len > 16 || tag_len < 4) {
 800dff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff2:	2b10      	cmp	r3, #16
 800dff4:	d802      	bhi.n	800dffc <mbedtls_gcm_finish+0x88>
 800dff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d802      	bhi.n	800e002 <mbedtls_gcm_finish+0x8e>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800dffc:	f06f 0313 	mvn.w	r3, #19
 800e000:	e079      	b.n	800e0f6 <mbedtls_gcm_finish+0x182>
    }

    if (ctx->len % 16 != 0) {
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800e008:	f002 040f 	and.w	r4, r2, #15
 800e00c:	2500      	movs	r5, #0
 800e00e:	ea54 0305 	orrs.w	r3, r4, r5
 800e012:	d009      	beq.n	800e028 <mbedtls_gcm_finish+0xb4>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e020:	461a      	mov	r2, r3
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f7ff fb44 	bl	800d6b0 <gcm_mult>
    }

    memcpy(tag, ctx->base_ectr, tag_len);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e02e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e030:	4619      	mov	r1, r3
 800e032:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e034:	f003 f816 	bl	8011064 <memcpy>

    if (orig_len || orig_add_len) {
 800e038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e03c:	4313      	orrs	r3, r2
 800e03e:	d103      	bne.n	800e048 <mbedtls_gcm_finish+0xd4>
 800e040:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e044:	4313      	orrs	r3, r2
 800e046:	d055      	beq.n	800e0f4 <mbedtls_gcm_finish+0x180>
        memset(work_buf, 0x00, 16);
 800e048:	f107 0310 	add.w	r3, r7, #16
 800e04c:	2210      	movs	r2, #16
 800e04e:	2100      	movs	r1, #0
 800e050:	4618      	mov	r0, r3
 800e052:	f003 f815 	bl	8011080 <memset>

        MBEDTLS_PUT_UINT32_BE((orig_add_len >> 32), work_buf, 0);
 800e056:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e05a:	f04f 0200 	mov.w	r2, #0
 800e05e:	f04f 0300 	mov.w	r3, #0
 800e062:	000a      	movs	r2, r1
 800e064:	2300      	movs	r3, #0
 800e066:	4613      	mov	r3, r2
 800e068:	ba1a      	rev	r2, r3
 800e06a:	f107 0310 	add.w	r3, r7, #16
 800e06e:	4611      	mov	r1, r2
 800e070:	4618      	mov	r0, r3
 800e072:	f000 f969 	bl	800e348 <mbedtls_put_unaligned_uint32>
        MBEDTLS_PUT_UINT32_BE((orig_add_len), work_buf, 4);
 800e076:	f107 0310 	add.w	r3, r7, #16
 800e07a:	3304      	adds	r3, #4
 800e07c:	6a3a      	ldr	r2, [r7, #32]
 800e07e:	ba12      	rev	r2, r2
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f000 f960 	bl	800e348 <mbedtls_put_unaligned_uint32>
        MBEDTLS_PUT_UINT32_BE((orig_len     >> 32), work_buf, 8);
 800e088:	f107 0010 	add.w	r0, r7, #16
 800e08c:	3008      	adds	r0, #8
 800e08e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e092:	f04f 0200 	mov.w	r2, #0
 800e096:	f04f 0300 	mov.w	r3, #0
 800e09a:	002a      	movs	r2, r5
 800e09c:	2300      	movs	r3, #0
 800e09e:	4613      	mov	r3, r2
 800e0a0:	ba1b      	rev	r3, r3
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f000 f950 	bl	800e348 <mbedtls_put_unaligned_uint32>
        MBEDTLS_PUT_UINT32_BE((orig_len), work_buf, 12);
 800e0a8:	f107 0310 	add.w	r3, r7, #16
 800e0ac:	330c      	adds	r3, #12
 800e0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0b0:	ba12      	rev	r2, r2
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 f947 	bl	800e348 <mbedtls_put_unaligned_uint32>

        mbedtls_xor(ctx->buf, ctx->buf, work_buf, 16);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800e0c6:	f107 0210 	add.w	r2, r7, #16
 800e0ca:	2310      	movs	r3, #16
 800e0cc:	f000 f96c 	bl	800e3a8 <mbedtls_xor>

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e0dc:	461a      	mov	r2, r3
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7ff fae6 	bl	800d6b0 <gcm_mult>

        mbedtls_xor(tag, tag, ctx->buf, tag_len);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800e0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e0ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e0f0:	f000 f95a 	bl	800e3a8 <mbedtls_xor>
    }

    return 0;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3730      	adds	r7, #48	; 0x30
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e100 <mbedtls_gcm_crypt_and_tag>:
                              size_t add_len,
                              const unsigned char *input,
                              unsigned char *output,
                              size_t tag_len,
                              unsigned char *tag)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af02      	add	r7, sp, #8
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e10e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e112:	617b      	str	r3, [r7, #20]
    size_t olen;

    if ((ret = mbedtls_gcm_starts(ctx, mode, iv, iv_len)) != 0) {
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7ff fc12 	bl	800d944 <mbedtls_gcm_starts>
 800e120:	6178      	str	r0, [r7, #20]
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <mbedtls_gcm_crypt_and_tag+0x2c>
        return ret;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	e02e      	b.n	800e18a <mbedtls_gcm_crypt_and_tag+0x8a>
    }

    if ((ret = mbedtls_gcm_update_ad(ctx, add, add_len)) != 0) {
 800e12c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e12e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7ff fcd0 	bl	800dad6 <mbedtls_gcm_update_ad>
 800e136:	6178      	str	r0, [r7, #20]
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <mbedtls_gcm_crypt_and_tag+0x42>
        return ret;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	e023      	b.n	800e18a <mbedtls_gcm_crypt_and_tag+0x8a>
    }

    if ((ret = mbedtls_gcm_update(ctx, input, length,
 800e142:	f107 0310 	add.w	r3, r7, #16
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff fdd6 	bl	800dd04 <mbedtls_gcm_update>
 800e158:	6178      	str	r0, [r7, #20]
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <mbedtls_gcm_crypt_and_tag+0x64>
                                  output, length, &olen)) != 0) {
        return ret;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	e012      	b.n	800e18a <mbedtls_gcm_crypt_and_tag+0x8a>
    }

    if ((ret = mbedtls_gcm_finish(ctx, NULL, 0, &olen, tag, tag_len)) != 0) {
 800e164:	f107 0210 	add.w	r2, r7, #16
 800e168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	4613      	mov	r3, r2
 800e172:	2200      	movs	r2, #0
 800e174:	2100      	movs	r1, #0
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f7ff fefc 	bl	800df74 <mbedtls_gcm_finish>
 800e17c:	6178      	str	r0, [r7, #20]
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <mbedtls_gcm_crypt_and_tag+0x88>
        return ret;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	e000      	b.n	800e18a <mbedtls_gcm_crypt_and_tag+0x8a>
    }

    return 0;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <mbedtls_gcm_auth_decrypt>:
                             size_t add_len,
                             const unsigned char *tag,
                             size_t tag_len,
                             const unsigned char *input,
                             unsigned char *output)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b094      	sub	sp, #80	; 0x50
 800e196:	af08      	add	r7, sp, #32
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	60b9      	str	r1, [r7, #8]
 800e19c:	607a      	str	r2, [r7, #4]
 800e19e:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e1a0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if ((ret = mbedtls_gcm_crypt_and_tag(ctx, MBEDTLS_GCM_DECRYPT, length,
 800e1a6:	f107 0314 	add.w	r3, r7, #20
 800e1aa:	9306      	str	r3, [sp, #24]
 800e1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ae:	9305      	str	r3, [sp, #20]
 800e1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1b2:	9304      	str	r3, [sp, #16]
 800e1b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1b6:	9303      	str	r3, [sp, #12]
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ba:	9302      	str	r3, [sp, #8]
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff ff98 	bl	800e100 <mbedtls_gcm_crypt_and_tag>
 800e1d0:	6278      	str	r0, [r7, #36]	; 0x24
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <mbedtls_gcm_auth_decrypt+0x4a>
                                         iv, iv_len, add, add_len,
                                         input, output, tag_len, check_tag)) != 0) {
        return ret;
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1da:	e025      	b.n	800e228 <mbedtls_gcm_auth_decrypt+0x96>
    }

    /* Check tag in "constant-time" */
    for (diff = 0, i = 0; i < tag_len; i++) {
 800e1dc:	2300      	movs	r3, #0
 800e1de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e4:	e011      	b.n	800e20a <mbedtls_gcm_auth_decrypt+0x78>
        diff |= tag[i] ^ check_tag[i];
 800e1e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	4413      	add	r3, r2
 800e1ec:	781a      	ldrb	r2, [r3, #0]
 800e1ee:	f107 0114 	add.w	r1, r7, #20
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	440b      	add	r3, r1
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	4053      	eors	r3, r2
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	4313      	orrs	r3, r2
 800e202:	62bb      	str	r3, [r7, #40]	; 0x28
    for (diff = 0, i = 0; i < tag_len; i++) {
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	3301      	adds	r3, #1
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e20e:	429a      	cmp	r2, r3
 800e210:	d3e9      	bcc.n	800e1e6 <mbedtls_gcm_auth_decrypt+0x54>
    }

    if (diff != 0) {
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	2b00      	cmp	r3, #0
 800e216:	d006      	beq.n	800e226 <mbedtls_gcm_auth_decrypt+0x94>
        mbedtls_platform_zeroize(output, length);
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e21c:	f000 f908 	bl	800e430 <mbedtls_platform_zeroize>
        return MBEDTLS_ERR_GCM_AUTH_FAILED;
 800e220:	f06f 0311 	mvn.w	r3, #17
 800e224:	e000      	b.n	800e228 <mbedtls_gcm_auth_decrypt+0x96>
    }

    return 0;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3730      	adds	r7, #48	; 0x30
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <mbedtls_gcm_free>:

void mbedtls_gcm_free(mbedtls_gcm_context *ctx)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d009      	beq.n	800e252 <mbedtls_gcm_free+0x22>
        return;
    }
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fc fc01 	bl	800aa48 <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_gcm_context));
 800e246:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f8f0 	bl	800e430 <mbedtls_platform_zeroize>
 800e250:	e000      	b.n	800e254 <mbedtls_gcm_free+0x24>
        return;
 800e252:	bf00      	nop
}
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <mbedtls_nist_kw_init>:

/*
 * Initialize context
 */
void mbedtls_nist_kw_init(mbedtls_nist_kw_context *ctx)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_nist_kw_context));
 800e262:	2244      	movs	r2, #68	; 0x44
 800e264:	2100      	movs	r1, #0
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f002 ff0a 	bl	8011080 <memset>
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <mbedtls_nist_kw_setkey>:
int mbedtls_nist_kw_setkey(mbedtls_nist_kw_context *ctx,
                           mbedtls_cipher_id_t cipher,
                           const unsigned char *key,
                           unsigned int keybits,
                           const int is_wrap)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	607a      	str	r2, [r7, #4]
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	460b      	mov	r3, r1
 800e282:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e284:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e288:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher,
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	7afb      	ldrb	r3, [r7, #11]
 800e28e:	2201      	movs	r2, #1
 800e290:	4618      	mov	r0, r3
 800e292:	f7fc fba7 	bl	800a9e4 <mbedtls_cipher_info_from_values>
 800e296:	6138      	str	r0, [r7, #16]
                                                  keybits,
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d101      	bne.n	800e2a2 <mbedtls_nist_kw_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800e29e:	4b19      	ldr	r3, [pc, #100]	; (800e304 <mbedtls_nist_kw_setkey+0x90>)
 800e2a0:	e02c      	b.n	800e2fc <mbedtls_nist_kw_setkey+0x88>
    }

    if (cipher_info->block_size != 16) {
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	2b10      	cmp	r3, #16
 800e2a8:	d001      	beq.n	800e2ae <mbedtls_nist_kw_setkey+0x3a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800e2aa:	4b16      	ldr	r3, [pc, #88]	; (800e304 <mbedtls_nist_kw_setkey+0x90>)
 800e2ac:	e026      	b.n	800e2fc <mbedtls_nist_kw_setkey+0x88>
     *  lengths of 128, 192, or 256 bits, is the only block cipher that fits
     *  this profile."
     *  Currently we don't support other 128 bit block ciphers for key wrapping,
     *  such as Camellia and Aria.
     */
    if (cipher != MBEDTLS_CIPHER_ID_AES) {
 800e2ae:	7afb      	ldrb	r3, [r7, #11]
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d001      	beq.n	800e2b8 <mbedtls_nist_kw_setkey+0x44>
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800e2b4:	4b14      	ldr	r3, [pc, #80]	; (800e308 <mbedtls_nist_kw_setkey+0x94>)
 800e2b6:	e021      	b.n	800e2fc <mbedtls_nist_kw_setkey+0x88>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fc fbc4 	bl	800aa48 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6939      	ldr	r1, [r7, #16]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fc fbeb 	bl	800aaa0 <mbedtls_cipher_setup>
 800e2ca:	6178      	str	r0, [r7, #20]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <mbedtls_nist_kw_setkey+0x62>
        return ret;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	e012      	b.n	800e2fc <mbedtls_nist_kw_setkey+0x88>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bf14      	ite	ne
 800e2e0:	2301      	movne	r3, #1
 800e2e2:	2300      	moveq	r3, #0
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	b25b      	sxtb	r3, r3
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	f7fc fc05 	bl	800aaf8 <mbedtls_cipher_setkey>
 800e2ee:	6178      	str	r0, [r7, #20]
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <mbedtls_nist_kw_setkey+0x86>
                                     is_wrap ? MBEDTLS_ENCRYPT :
                                     MBEDTLS_DECRYPT)
         ) != 0) {
        return ret;
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	e000      	b.n	800e2fc <mbedtls_nist_kw_setkey+0x88>
    }

    return 0;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	ffff9f00 	.word	0xffff9f00
 800e308:	ffff9f80 	.word	0xffff9f80

0800e30c <mbedtls_nist_kw_free>:

/*
 * Free context
 */
void mbedtls_nist_kw_free(mbedtls_nist_kw_context *ctx)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	f7fc fb96 	bl	800aa48 <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_nist_kw_context));
 800e31c:	2144      	movs	r1, #68	; 0x44
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f886 	bl	800e430 <mbedtls_platform_zeroize>
}
 800e324:	bf00      	nop
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <mbedtls_get_unaligned_uint32>:
 *
 * \param   p pointer to 4 bytes of data
 * \return  Data at the given address
 */
inline uint32_t mbedtls_get_unaligned_uint32(const void *p)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
    uint32_t r;
    memcpy(&r, p, sizeof(r));
 800e338:	60fb      	str	r3, [r7, #12]
    return r;
 800e33a:	68fb      	ldr	r3, [r7, #12]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <mbedtls_put_unaligned_uint32>:
 *
 * \param   p pointer to 4 bytes of data
 * \param   x data to write
 */
inline void mbedtls_put_unaligned_uint32(void *p, uint32_t x)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
 800e352:	683a      	ldr	r2, [r7, #0]
    memcpy(p, &x, sizeof(x));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	601a      	str	r2, [r3, #0]
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <mbedtls_get_unaligned_uint64>:
 *
 * \param   p pointer to 8 bytes of data
 * \return  Data at the given address
 */
inline uint64_t mbedtls_get_unaligned_uint64(const void *p)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
    uint64_t r;
    memcpy(&r, p, sizeof(r));
 800e36c:	f107 0308 	add.w	r3, r7, #8
 800e370:	2208      	movs	r2, #8
 800e372:	6879      	ldr	r1, [r7, #4]
 800e374:	4618      	mov	r0, r3
 800e376:	f002 fe75 	bl	8011064 <memcpy>
    return r;
 800e37a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800e37e:	4610      	mov	r0, r2
 800e380:	4619      	mov	r1, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <mbedtls_put_unaligned_uint64>:
 *
 * \param   p pointer to 8 bytes of data
 * \param   x data to write
 */
inline void mbedtls_put_unaligned_uint64(void *p, uint64_t x)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	e9c7 2300 	strd	r2, r3, [r7]
    memcpy(p, &x, sizeof(x));
 800e394:	463b      	mov	r3, r7
 800e396:	2208      	movs	r2, #8
 800e398:	4619      	mov	r1, r3
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f002 fe62 	bl	8011064 <memcpy>
}
 800e3a0:	bf00      	nop
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <mbedtls_xor>:
 * \param   a Pointer to input (buffer of at least \p n bytes)
 * \param   b Pointer to input (buffer of at least \p n bytes)
 * \param   n Number of bytes to process.
 */
inline void mbedtls_xor(unsigned char *r, const unsigned char *a, const unsigned char *b, size_t n)
{
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b087      	sub	sp, #28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
 800e3b4:	603b      	str	r3, [r7, #0]
    size_t i = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]
    for (; (i + 8) <= n; i += 8) {
        uint64_t x = mbedtls_get_unaligned_uint64(a + i) ^ mbedtls_get_unaligned_uint64(b + i);
        mbedtls_put_unaligned_uint64(r + i, x);
    }
#else
    for (; (i + 4) <= n; i += 4) {
 800e3ba:	e019      	b.n	800e3f0 <mbedtls_xor+0x48>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff ffb2 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff ffab 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	4063      	eors	r3, r4
 800e3da:	613b      	str	r3, [r7, #16]
        mbedtls_put_unaligned_uint32(r + i, x);
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	6939      	ldr	r1, [r7, #16]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff ffaf 	bl	800e348 <mbedtls_put_unaligned_uint32>
    for (; (i + 4) <= n; i += 4) {
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d2e0      	bcs.n	800e3bc <mbedtls_xor+0x14>
    }
#endif
#endif
    for (; i < n; i++) {
 800e3fa:	e010      	b.n	800e41e <mbedtls_xor+0x76>
        r[i] = a[i] ^ b[i];
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4413      	add	r3, r2
 800e402:	7819      	ldrb	r1, [r3, #0]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	4413      	add	r3, r2
 800e40a:	781a      	ldrb	r2, [r3, #0]
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	4403      	add	r3, r0
 800e412:	404a      	eors	r2, r1
 800e414:	b2d2      	uxtb	r2, r2
 800e416:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	3301      	adds	r3, #1
 800e41c:	617b      	str	r3, [r7, #20]
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	429a      	cmp	r2, r3
 800e424:	d3ea      	bcc.n	800e3fc <mbedtls_xor+0x54>
    }
}
 800e426:	bf00      	nop
 800e428:	bf00      	nop
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd90      	pop	{r4, r7, pc}

0800e430 <mbedtls_platform_zeroize>:
    && !defined(_WIN32)
static void *(*const volatile memset_func)(void *, int, size_t) = memset;
#endif

void mbedtls_platform_zeroize(void *buf, size_t len)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE(len == 0 || buf != NULL);

    if (len > 0) {
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d005      	beq.n	800e44c <mbedtls_platform_zeroize+0x1c>
#elif defined(__STDC_LIB_EXT1__)
        memset_s(buf, len, 0, len);
#elif defined(_WIN32)
        SecureZeroMemory(buf, len);
#else
        memset_func(buf, 0, len);
 800e440:	4b04      	ldr	r3, [pc, #16]	; (800e454 <mbedtls_platform_zeroize+0x24>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	2100      	movs	r1, #0
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	4798      	blx	r3
#endif
    }
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20000014 	.word	0x20000014

0800e458 <mul64>:

    return lo + (me << 16) + ((uint64_t) hi << 32);
}
#else
static inline uint64_t mul64(uint32_t a, uint32_t b)
{
 800e458:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800e45c:	b083      	sub	sp, #12
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	6039      	str	r1, [r7, #0]
    return (uint64_t) a * b;
 800e464:	6879      	ldr	r1, [r7, #4]
 800e466:	2000      	movs	r0, #0
 800e468:	4688      	mov	r8, r1
 800e46a:	4681      	mov	r9, r0
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	2000      	movs	r0, #0
 800e470:	460c      	mov	r4, r1
 800e472:	4605      	mov	r5, r0
 800e474:	fb04 f009 	mul.w	r0, r4, r9
 800e478:	fb08 f105 	mul.w	r1, r8, r5
 800e47c:	4401      	add	r1, r0
 800e47e:	fba8 2304 	umull	r2, r3, r8, r4
 800e482:	4419      	add	r1, r3
 800e484:	460b      	mov	r3, r1
}
 800e486:	4610      	mov	r0, r2
 800e488:	4619      	mov	r1, r3
 800e48a:	370c      	adds	r7, #12
 800e48c:	46bd      	mov	sp, r7
 800e48e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800e492:	4770      	bx	lr

0800e494 <poly1305_process>:
 */
static void poly1305_process(mbedtls_poly1305_context *ctx,
                             size_t nblocks,
                             const unsigned char *input,
                             uint32_t needs_padding)
{
 800e494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e498:	b0f4      	sub	sp, #464	; 0x1d0
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 800e4a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800e4a4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800e4a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    size_t i;

    r0 = ctx->r[0];
 800e4b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    r1 = ctx->r[1];
 800e4bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    r2 = ctx->r[2];
 800e4c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    r3 = ctx->r[3];
 800e4d0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    rs1 = r1 + (r1 >> 2U);
 800e4da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4de:	089a      	lsrs	r2, r3, #2
 800e4e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    rs2 = r2 + (r2 >> 2U);
 800e4ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e4ee:	089a      	lsrs	r2, r3, #2
 800e4f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    rs3 = r3 + (r3 >> 2U);
 800e4fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e4fe:	089a      	lsrs	r2, r3, #2
 800e500:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e504:	4413      	add	r3, r2
 800e506:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    acc0 = ctx->acc[0];
 800e50a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e50e:	6a1b      	ldr	r3, [r3, #32]
 800e510:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    acc1 = ctx->acc[1];
 800e514:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    acc2 = ctx->acc[2];
 800e51e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e524:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    acc3 = ctx->acc[3];
 800e528:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    acc4 = ctx->acc[4];
 800e532:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e538:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Process full blocks */
    for (i = 0U; i < nblocks; i++) {
 800e53c:	2300      	movs	r3, #0
 800e53e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800e542:	e34a      	b.n	800ebda <poly1305_process+0x746>
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = MBEDTLS_GET_UINT32_LE(input, offset + 0);
 800e544:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800e548:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e54c:	4413      	add	r3, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7ff feec 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e554:	4603      	mov	r3, r0
 800e556:	2200      	movs	r2, #0
 800e558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e55c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e560:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800e564:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        d1   = MBEDTLS_GET_UINT32_LE(input, offset + 4);
 800e568:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e56c:	1d1a      	adds	r2, r3, #4
 800e56e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800e572:	4413      	add	r3, r2
 800e574:	4618      	mov	r0, r3
 800e576:	f7ff fed9 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e586:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800e58a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
        d2   = MBEDTLS_GET_UINT32_LE(input, offset + 8);
 800e58e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e592:	f103 0208 	add.w	r2, r3, #8
 800e596:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800e59a:	4413      	add	r3, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff fec5 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e5aa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e5ae:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800e5b2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
        d3   = MBEDTLS_GET_UINT32_LE(input, offset + 12);
 800e5b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e5ba:	f103 020c 	add.w	r2, r3, #12
 800e5be:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800e5c2:	4413      	add	r3, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7ff feb1 	bl	800e32c <mbedtls_get_unaligned_uint32>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5d2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e5d6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800e5da:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800e5de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800e5e8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800e5ec:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e5f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	1851      	adds	r1, r2, r1
 800e5f8:	67b9      	str	r1, [r7, #120]	; 0x78
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	414b      	adcs	r3, r1
 800e5fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e600:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800e604:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        d1  += (uint64_t) acc1 + (d0 >> 32U);
 800e608:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e60c:	2200      	movs	r2, #0
 800e60e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800e612:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800e616:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e61a:	f04f 0000 	mov.w	r0, #0
 800e61e:	f04f 0100 	mov.w	r1, #0
 800e622:	0018      	movs	r0, r3
 800e624:	2100      	movs	r1, #0
 800e626:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800e62a:	4623      	mov	r3, r4
 800e62c:	181b      	adds	r3, r3, r0
 800e62e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e632:	462b      	mov	r3, r5
 800e634:	414b      	adcs	r3, r1
 800e636:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e63a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e63e:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e642:	4621      	mov	r1, r4
 800e644:	1851      	adds	r1, r2, r1
 800e646:	6739      	str	r1, [r7, #112]	; 0x70
 800e648:	4629      	mov	r1, r5
 800e64a:	414b      	adcs	r3, r1
 800e64c:	677b      	str	r3, [r7, #116]	; 0x74
 800e64e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800e652:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
        d2  += (uint64_t) acc2 + (d1 >> 32U);
 800e656:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800e660:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800e664:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e668:	f04f 0000 	mov.w	r0, #0
 800e66c:	f04f 0100 	mov.w	r1, #0
 800e670:	0018      	movs	r0, r3
 800e672:	2100      	movs	r1, #0
 800e674:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800e678:	4623      	mov	r3, r4
 800e67a:	181b      	adds	r3, r3, r0
 800e67c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800e680:	462b      	mov	r3, r5
 800e682:	414b      	adcs	r3, r1
 800e684:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800e688:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e68c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800e690:	4621      	mov	r1, r4
 800e692:	1851      	adds	r1, r2, r1
 800e694:	66b9      	str	r1, [r7, #104]	; 0x68
 800e696:	4629      	mov	r1, r5
 800e698:	414b      	adcs	r3, r1
 800e69a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e69c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800e6a0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
        d3  += (uint64_t) acc3 + (d2 >> 32U);
 800e6a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800e6ae:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800e6b2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e6b6:	f04f 0000 	mov.w	r0, #0
 800e6ba:	f04f 0100 	mov.w	r1, #0
 800e6be:	0018      	movs	r0, r3
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800e6c6:	4623      	mov	r3, r4
 800e6c8:	181b      	adds	r3, r3, r0
 800e6ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e6ce:	462b      	mov	r3, r5
 800e6d0:	414b      	adcs	r3, r1
 800e6d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800e6d6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e6da:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800e6de:	4621      	mov	r1, r4
 800e6e0:	1851      	adds	r1, r2, r1
 800e6e2:	6639      	str	r1, [r7, #96]	; 0x60
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	414b      	adcs	r3, r1
 800e6e8:	667b      	str	r3, [r7, #100]	; 0x64
 800e6ea:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800e6ee:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
        acc0 = (uint32_t) d0;
 800e6f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e6f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        acc1 = (uint32_t) d1;
 800e6fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e6fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
        acc2 = (uint32_t) d2;
 800e702:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e706:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        acc3 = (uint32_t) d3;
 800e70a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e70e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        acc4 += (uint32_t) (d3 >> 32U) + needs_padding;
 800e712:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e716:	f04f 0000 	mov.w	r0, #0
 800e71a:	f04f 0100 	mov.w	r1, #0
 800e71e:	0018      	movs	r0, r3
 800e720:	2100      	movs	r1, #0
 800e722:	4602      	mov	r2, r0
 800e724:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800e728:	441a      	add	r2, r3
 800e72a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e72e:	4413      	add	r3, r2
 800e730:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

        /* Compute: acc *= r */
        d0 = mul64(acc0, r0) +
 800e734:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e738:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 800e73c:	f7ff fe8c 	bl	800e458 <mul64>
 800e740:	4604      	mov	r4, r0
 800e742:	460d      	mov	r5, r1
             mul64(acc1, rs3) +
 800e744:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 800e748:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800e74c:	f7ff fe84 	bl	800e458 <mul64>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800e754:	18a1      	adds	r1, r4, r2
 800e756:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800e75a:	eb45 0303 	adc.w	r3, r5, r3
 800e75e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
             mul64(acc2, rs2) +
 800e762:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e766:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800e76a:	f7ff fe75 	bl	800e458 <mul64>
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
             mul64(acc1, rs3) +
 800e772:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800e776:	4621      	mov	r1, r4
 800e778:	1889      	adds	r1, r1, r2
 800e77a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800e77e:	4629      	mov	r1, r5
 800e780:	eb41 0303 	adc.w	r3, r1, r3
 800e784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
             mul64(acc3, rs1);
 800e788:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800e78c:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800e790:	f7ff fe62 	bl	800e458 <mul64>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800e798:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800e79c:	4621      	mov	r1, r4
 800e79e:	1889      	adds	r1, r1, r2
 800e7a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	eb41 0303 	adc.w	r3, r1, r3
 800e7a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7aa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800e7ae:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        d1 = mul64(acc0, r1) +
 800e7b2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800e7b6:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 800e7ba:	f7ff fe4d 	bl	800e458 <mul64>
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
             mul64(acc1, r0) +
 800e7c2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e7c6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800e7ca:	f7ff fe45 	bl	800e458 <mul64>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800e7d2:	18a1      	adds	r1, r4, r2
 800e7d4:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800e7d8:	eb45 0303 	adc.w	r3, r5, r3
 800e7dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
             mul64(acc2, rs3) +
 800e7e0:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 800e7e4:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800e7e8:	f7ff fe36 	bl	800e458 <mul64>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
             mul64(acc1, r0) +
 800e7f0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	1889      	adds	r1, r1, r2
 800e7f8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	eb41 0303 	adc.w	r3, r1, r3
 800e802:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
             mul64(acc3, rs2) +
 800e806:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e80a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800e80e:	f7ff fe23 	bl	800e458 <mul64>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
             mul64(acc2, rs3) +
 800e816:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800e81a:	4621      	mov	r1, r4
 800e81c:	1889      	adds	r1, r1, r2
 800e81e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800e822:	4629      	mov	r1, r5
 800e824:	eb41 0303 	adc.w	r3, r1, r3
 800e828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
             mul64(acc4, rs1);
 800e82c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800e830:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800e834:	f7ff fe10 	bl	800e458 <mul64>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800e83c:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800e840:	4621      	mov	r1, r4
 800e842:	1889      	adds	r1, r1, r2
 800e844:	6539      	str	r1, [r7, #80]	; 0x50
 800e846:	4629      	mov	r1, r5
 800e848:	eb41 0303 	adc.w	r3, r1, r3
 800e84c:	657b      	str	r3, [r7, #84]	; 0x54
 800e84e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e852:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
        d2 = mul64(acc0, r2) +
 800e856:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800e85a:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 800e85e:	f7ff fdfb 	bl	800e458 <mul64>
 800e862:	4604      	mov	r4, r0
 800e864:	460d      	mov	r5, r1
             mul64(acc1, r1) +
 800e866:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800e86a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800e86e:	f7ff fdf3 	bl	800e458 <mul64>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800e876:	18a1      	adds	r1, r4, r2
 800e878:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e87c:	eb45 0303 	adc.w	r3, r5, r3
 800e880:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
             mul64(acc2, r0) +
 800e884:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e888:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800e88c:	f7ff fde4 	bl	800e458 <mul64>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
             mul64(acc1, r1) +
 800e894:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e898:	4621      	mov	r1, r4
 800e89a:	1889      	adds	r1, r1, r2
 800e89c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	eb41 0303 	adc.w	r3, r1, r3
 800e8a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
             mul64(acc3, rs3) +
 800e8aa:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 800e8ae:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800e8b2:	f7ff fdd1 	bl	800e458 <mul64>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
             mul64(acc2, r0) +
 800e8ba:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800e8be:	4621      	mov	r1, r4
 800e8c0:	1889      	adds	r1, r1, r2
 800e8c2:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	eb41 0303 	adc.w	r3, r1, r3
 800e8cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
             mul64(acc4, rs2);
 800e8d0:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e8d4:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800e8d8:	f7ff fdbe 	bl	800e458 <mul64>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800e8e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	1889      	adds	r1, r1, r2
 800e8e8:	64b9      	str	r1, [r7, #72]	; 0x48
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	eb41 0303 	adc.w	r3, r1, r3
 800e8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8f2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800e8f6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
        d3 = mul64(acc0, r3) +
 800e8fa:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 800e8fe:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 800e902:	f7ff fda9 	bl	800e458 <mul64>
 800e906:	4604      	mov	r4, r0
 800e908:	460d      	mov	r5, r1
             mul64(acc1, r2) +
 800e90a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800e90e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800e912:	f7ff fda1 	bl	800e458 <mul64>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800e91a:	18a1      	adds	r1, r4, r2
 800e91c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800e920:	eb45 0303 	adc.w	r3, r5, r3
 800e924:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             mul64(acc2, r1) +
 800e928:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800e92c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800e930:	f7ff fd92 	bl	800e458 <mul64>
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
             mul64(acc1, r2) +
 800e938:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e93c:	4621      	mov	r1, r4
 800e93e:	1889      	adds	r1, r1, r2
 800e940:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800e944:	4629      	mov	r1, r5
 800e946:	eb41 0303 	adc.w	r3, r1, r3
 800e94a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             mul64(acc3, r0) +
 800e94e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e952:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800e956:	f7ff fd7f 	bl	800e458 <mul64>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
             mul64(acc2, r1) +
 800e95e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e962:	4621      	mov	r1, r4
 800e964:	1889      	adds	r1, r1, r2
 800e966:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e96a:	4629      	mov	r1, r5
 800e96c:	eb41 0303 	adc.w	r3, r1, r3
 800e970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
             mul64(acc4, rs3);
 800e974:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 800e978:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800e97c:	f7ff fd6c 	bl	800e458 <mul64>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800e984:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e988:	4621      	mov	r1, r4
 800e98a:	1889      	adds	r1, r1, r2
 800e98c:	6439      	str	r1, [r7, #64]	; 0x40
 800e98e:	4629      	mov	r1, r5
 800e990:	eb41 0303 	adc.w	r3, r1, r3
 800e994:	647b      	str	r3, [r7, #68]	; 0x44
 800e996:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800e99a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
        acc4 *= r0;
 800e99e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800e9a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e9a6:	fb02 f303 	mul.w	r3, r2, r3
 800e9aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += (d0 >> 32);
 800e9ae:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e9b2:	f04f 0000 	mov.w	r0, #0
 800e9b6:	f04f 0100 	mov.w	r1, #0
 800e9ba:	0018      	movs	r0, r3
 800e9bc:	2100      	movs	r1, #0
 800e9be:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e9c2:	1814      	adds	r4, r2, r0
 800e9c4:	63bc      	str	r4, [r7, #56]	; 0x38
 800e9c6:	414b      	adcs	r3, r1
 800e9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800e9ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
        d2 += (d1 >> 32);
 800e9d2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e9d6:	f04f 0000 	mov.w	r0, #0
 800e9da:	f04f 0100 	mov.w	r1, #0
 800e9de:	0018      	movs	r0, r3
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e9e6:	1814      	adds	r4, r2, r0
 800e9e8:	633c      	str	r4, [r7, #48]	; 0x30
 800e9ea:	414b      	adcs	r3, r1
 800e9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800e9ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e9f2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
        d3 += (d2 >> 32);
 800e9f6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e9fa:	f04f 0000 	mov.w	r0, #0
 800e9fe:	f04f 0100 	mov.w	r1, #0
 800ea02:	0018      	movs	r0, r3
 800ea04:	2100      	movs	r1, #0
 800ea06:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ea0a:	1814      	adds	r4, r2, r0
 800ea0c:	62bc      	str	r4, [r7, #40]	; 0x28
 800ea0e:	414b      	adcs	r3, r1
 800ea10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea12:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ea16:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
        acc0 = (uint32_t) d0;
 800ea1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ea1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        acc1 = (uint32_t) d1;
 800ea22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ea26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
        acc2 = (uint32_t) d2;
 800ea2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ea2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        acc3 = (uint32_t) d3;
 800ea32:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800ea36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        acc4 = (uint32_t) (d3 >> 32) + acc4;
 800ea3a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ea3e:	f04f 0000 	mov.w	r0, #0
 800ea42:	f04f 0100 	mov.w	r1, #0
 800ea46:	0018      	movs	r0, r3
 800ea48:	2100      	movs	r1, #0
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800ea50:	4413      	add	r3, r2
 800ea52:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

        d0 = (uint64_t) acc0 + (acc4 >> 2) + (acc4 & 0xFFFFFFFCU);
 800ea56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ea60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ea64:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800ea68:	089b      	lsrs	r3, r3, #2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea70:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800ea74:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800ea78:	4623      	mov	r3, r4
 800ea7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ea7e:	4602      	mov	r2, r0
 800ea80:	eb13 0802 	adds.w	r8, r3, r2
 800ea84:	462b      	mov	r3, r5
 800ea86:	460a      	mov	r2, r1
 800ea88:	eb43 0902 	adc.w	r9, r3, r2
 800ea8c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800ea90:	2200      	movs	r2, #0
 800ea92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea96:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ea9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea9e:	f023 0a03 	bic.w	sl, r3, #3
 800eaa2:	f04f 0b00 	mov.w	fp, #0
 800eaa6:	eb18 030a 	adds.w	r3, r8, sl
 800eaaa:	623b      	str	r3, [r7, #32]
 800eaac:	eb49 030b 	adc.w	r3, r9, fp
 800eab0:	627b      	str	r3, [r7, #36]	; 0x24
 800eab2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800eab6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        acc4 &= 3U;
 800eaba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800eabe:	f003 0303 	and.w	r3, r3, #3
 800eac2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        acc0 = (uint32_t) d0;
 800eac6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eaca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        d0 = (uint64_t) acc1 + (d0 >> 32U);
 800eace:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ead2:	2200      	movs	r2, #0
 800ead4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ead8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800eadc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800eae0:	f04f 0000 	mov.w	r0, #0
 800eae4:	f04f 0100 	mov.w	r1, #0
 800eae8:	0018      	movs	r0, r3
 800eaea:	2100      	movs	r1, #0
 800eaec:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800eaf0:	4623      	mov	r3, r4
 800eaf2:	181b      	adds	r3, r3, r0
 800eaf4:	61bb      	str	r3, [r7, #24]
 800eaf6:	462b      	mov	r3, r5
 800eaf8:	414b      	adcs	r3, r1
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eb00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        acc1 = (uint32_t) d0;
 800eb04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb08:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
        d0 = (uint64_t) acc2 + (d0 >> 32U);
 800eb0c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb16:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800eb1a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800eb1e:	f04f 0000 	mov.w	r0, #0
 800eb22:	f04f 0100 	mov.w	r1, #0
 800eb26:	0018      	movs	r0, r3
 800eb28:	2100      	movs	r1, #0
 800eb2a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800eb2e:	4623      	mov	r3, r4
 800eb30:	181b      	adds	r3, r3, r0
 800eb32:	613b      	str	r3, [r7, #16]
 800eb34:	462b      	mov	r3, r5
 800eb36:	414b      	adcs	r3, r1
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800eb3e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        acc2 = (uint32_t) d0;
 800eb42:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        d0 = (uint64_t) acc3 + (d0 >> 32U);
 800eb4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eb54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800eb58:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800eb5c:	f04f 0000 	mov.w	r0, #0
 800eb60:	f04f 0100 	mov.w	r1, #0
 800eb64:	0018      	movs	r0, r3
 800eb66:	2100      	movs	r1, #0
 800eb68:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800eb6c:	4623      	mov	r3, r4
 800eb6e:	181b      	adds	r3, r3, r0
 800eb70:	60bb      	str	r3, [r7, #8]
 800eb72:	462b      	mov	r3, r5
 800eb74:	414b      	adcs	r3, r1
 800eb76:	60fb      	str	r3, [r7, #12]
 800eb78:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800eb7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        acc3 = (uint32_t) d0;
 800eb80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        d0 = (uint64_t) acc4 + (d0 >> 32U);
 800eb88:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eb92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eb96:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800eb9a:	f04f 0000 	mov.w	r0, #0
 800eb9e:	f04f 0100 	mov.w	r1, #0
 800eba2:	0018      	movs	r0, r3
 800eba4:	2100      	movs	r1, #0
 800eba6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ebaa:	4623      	mov	r3, r4
 800ebac:	181b      	adds	r3, r3, r0
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	462b      	mov	r3, r5
 800ebb2:	414b      	adcs	r3, r1
 800ebb4:	607b      	str	r3, [r7, #4]
 800ebb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ebba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
        acc4 = (uint32_t) d0;
 800ebbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ebc2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800ebc6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ebca:	3310      	adds	r3, #16
 800ebcc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    for (i = 0U; i < nblocks; i++) {
 800ebd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800ebda:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800ebde:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	f4ff acae 	bcc.w	800e544 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800ebe8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ebec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800ebf0:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800ebf2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ebf6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800ebfa:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 800ebfc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ec00:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800ec04:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 800ec06:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ec0a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800ec0e:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 800ec10:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ec14:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800ec18:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ec1a:	bf00      	nop
 800ec1c:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800ec20:	46bd      	mov	sp, r7
 800ec22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ec26 <mbedtls_poly1305_init>:
    MBEDTLS_PUT_UINT32_LE(acc2, mac,  8);
    MBEDTLS_PUT_UINT32_LE(acc3, mac, 12);
}

void mbedtls_poly1305_init(mbedtls_poly1305_context *ctx)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b082      	sub	sp, #8
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800ec2e:	2148      	movs	r1, #72	; 0x48
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff fbfd 	bl	800e430 <mbedtls_platform_zeroize>
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <mbedtls_poly1305_free>:

void mbedtls_poly1305_free(mbedtls_poly1305_context *ctx)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d004      	beq.n	800ec56 <mbedtls_poly1305_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800ec4c:	2148      	movs	r1, #72	; 0x48
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff fbee 	bl	800e430 <mbedtls_platform_zeroize>
 800ec54:	e000      	b.n	800ec58 <mbedtls_poly1305_free+0x1a>
        return;
 800ec56:	bf00      	nop
}
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update(mbedtls_poly1305_context *ctx,
                            const unsigned char *input,
                            size_t ilen)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b088      	sub	sp, #32
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	60f8      	str	r0, [r7, #12]
 800ec66:	60b9      	str	r1, [r7, #8]
 800ec68:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;

    if ((remaining > 0U) && (ctx->queue_len > 0U)) {
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d03e      	beq.n	800ecf6 <mbedtls_poly1305_update+0x98>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d03a      	beq.n	800ecf6 <mbedtls_poly1305_update+0x98>
        queue_free_len = (POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec84:	f1c3 0310 	rsb	r3, r3, #16
 800ec88:	617b      	str	r3, [r7, #20]

        if (ilen < queue_free_len) {
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d213      	bcs.n	800ecba <mbedtls_poly1305_update+0x5c>
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy(&ctx->queue[ctx->queue_len],
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec96:	3330      	adds	r3, #48	; 0x30
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	68b9      	ldr	r1, [r7, #8]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f002 f9de 	bl	8011064 <memcpy>
                   input,
                   ilen);

            ctx->queue_len += ilen;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	441a      	add	r2, r3
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	61bb      	str	r3, [r7, #24]
 800ecb8:	e01d      	b.n	800ecf6 <mbedtls_poly1305_update+0x98>
        } else {
            /* Enough data to produce a complete block */
            memcpy(&ctx->queue[ctx->queue_len],
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecbe:	3330      	adds	r3, #48	; 0x30
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	68b9      	ldr	r1, [r7, #8]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f002 f9ca 	bl	8011064 <memcpy>
                   input,
                   queue_free_len);

            ctx->queue_len = 0U;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process(ctx, 1U, ctx->queue, 1U);   /* add padding bit */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ecdc:	2301      	movs	r3, #1
 800ecde:	2101      	movs	r1, #1
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7ff fbd7 	bl	800e494 <poly1305_process>

            offset    += queue_free_len;
 800ece6:	69fa      	ldr	r2, [r7, #28]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	4413      	add	r3, r2
 800ecec:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800ecee:	69ba      	ldr	r2, [r7, #24]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	61bb      	str	r3, [r7, #24]
        }
    }

    if (remaining >= POLY1305_BLOCK_SIZE_BYTES) {
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	2b0f      	cmp	r3, #15
 800ecfa:	d913      	bls.n	800ed24 <mbedtls_poly1305_update+0xc6>
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	091b      	lsrs	r3, r3, #4
 800ed00:	613b      	str	r3, [r7, #16]

        poly1305_process(ctx, nblocks, &input[offset], 1U);
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	441a      	add	r2, r3
 800ed08:	2301      	movs	r3, #1
 800ed0a:	6939      	ldr	r1, [r7, #16]
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f7ff fbc1 	bl	800e494 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	011b      	lsls	r3, r3, #4
 800ed16:	69fa      	ldr	r2, [r7, #28]
 800ed18:	4413      	add	r3, r2
 800ed1a:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	f003 030f 	and.w	r3, r3, #15
 800ed22:	61bb      	str	r3, [r7, #24]
    }

    if (remaining > 0U) {
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00c      	beq.n	800ed44 <mbedtls_poly1305_update+0xe6>
        /* Store partial block */
        ctx->queue_len = remaining;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy(ctx->queue, &input[offset], remaining);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	f002 f990 	bl	8011064 <memcpy>
    }

    return 0;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3720      	adds	r7, #32
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <__malloc_lock>:

/*********************************************************************
*
*       __malloc_lock()
*/
void __malloc_lock (struct _reent *_r) {
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  OS_USE_PARA(_r);
#if (OS_INTERRUPT_SAFE == 1)
  OS_InterruptSafe_Lock();
 800ed56:	f000 fbcb 	bl	800f4f0 <OS_InterruptSafe_Lock>
#else
  OS_ThreadSafe_Lock();
#endif
}
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <__malloc_unlock>:

/*********************************************************************
*
*       __malloc_unlock()
*/
void __malloc_unlock(struct _reent *_r) {
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
  OS_USE_PARA(_r);
#if (OS_INTERRUPT_SAFE == 1)
  OS_InterruptSafe_Unlock();
 800ed6a:	f000 fbd7 	bl	800f51c <OS_InterruptSafe_Unlock>
#else
  OS_ThreadSafe_Unlock();
#endif
}
 800ed6e:	bf00      	nop
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <_Init>:
*       _Init()
*
*  Function description
*    Performs initialization of memory locations used for communication.
*/
static void _Init(void) {
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
  OS_U32 VectorTableBaseAddr;

  //
  // On Cortex-M initial top of stack is stored at address defined by VTOR
  //
  VectorTableBaseAddr  = VTOR_ADDR;                /*lint !e9078 MISRA C:2012 Rule 11.4, advisory */ /*lint !e923 MISRA C:2012 Rule 11.6, required */
 800ed7e:	4b1d      	ldr	r3, [pc, #116]	; (800edf4 <_Init+0x7c>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	607b      	str	r3, [r7, #4]
  _BaseAddr    = (*(OS_U32*)VectorTableBaseAddr);  /*lint !e9078 MISRA C:2012 Rule 11.4, advisory */ /*lint !e923 MISRA C:2012 Rule 11.6, required */
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a1b      	ldr	r2, [pc, #108]	; (800edf8 <_Init+0x80>)
 800ed8a:	6013      	str	r3, [r2, #0]
  HOST_ACT     = 0u;
 800ed8c:	4b1a      	ldr	r3, [pc, #104]	; (800edf8 <_Init+0x80>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	3b17      	subs	r3, #23
 800ed92:	2200      	movs	r2, #0
 800ed94:	701a      	strb	r2, [r3, #0]
  RX_SIZE      = RX_BUF_SIZE;
 800ed96:	4b18      	ldr	r3, [pc, #96]	; (800edf8 <_Init+0x80>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3b02      	subs	r3, #2
 800ed9c:	2208      	movs	r2, #8
 800ed9e:	701a      	strb	r2, [r3, #0]
  TX_SIZE      = TX_BUF_SIZE;
 800eda0:	4b15      	ldr	r3, [pc, #84]	; (800edf8 <_Init+0x80>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3b03      	subs	r3, #3
 800eda6:	2212      	movs	r2, #18
 800eda8:	701a      	strb	r2, [r3, #0]
  RX_CNT       = 0u;
 800edaa:	4b13      	ldr	r3, [pc, #76]	; (800edf8 <_Init+0x80>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3b18      	subs	r3, #24
 800edb0:	2200      	movs	r2, #0
 800edb2:	701a      	strb	r2, [r3, #0]
  TX_CNT       = 0u;
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <_Init+0x80>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3b16      	subs	r3, #22
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]
  PROT_ID      = MAGIC_NUM;
 800edbe:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <_Init+0x80>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	2252      	movs	r2, #82	; 0x52
 800edc6:	701a      	strb	r2, [r3, #0]
  _pTxBuf      = (OS_U8*)(_BaseAddr - (TX_BUF_SIZE + 3u));
 800edc8:	4b0b      	ldr	r3, [pc, #44]	; (800edf8 <_Init+0x80>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3b15      	subs	r3, #21
 800edce:	461a      	mov	r2, r3
 800edd0:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <_Init+0x84>)
 800edd2:	601a      	str	r2, [r3, #0]
  _pRxBuf      = (OS_U8*)(_BaseAddr - (TX_BUF_SIZE + RX_BUF_SIZE + 6u));
 800edd4:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <_Init+0x80>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3b20      	subs	r3, #32
 800edda:	461a      	mov	r2, r3
 800eddc:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <_Init+0x88>)
 800edde:	601a      	str	r2, [r3, #0]
  _TxIsPending = 0u;
 800ede0:	4b08      	ldr	r3, [pc, #32]	; (800ee04 <_Init+0x8c>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	601a      	str	r2, [r3, #0]
}
 800ede6:	bf00      	nop
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	e000ed08 	.word	0xe000ed08
 800edf8:	20005160 	.word	0x20005160
 800edfc:	20005174 	.word	0x20005174
 800ee00:	20005170 	.word	0x20005170
 800ee04:	20005164 	.word	0x20005164

0800ee08 <_LockTxBuf>:
*
*  Return value
*    1: Sending buffer locked.
*    0: Sending buffer couldn't be locked as already in use.
*/
static unsigned int _LockTxBuf(void) {
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
  unsigned int Locked;

  Locked = 0u;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	607b      	str	r3, [r7, #4]
  OS_INT_Disable();
 800ee12:	2380      	movs	r3, #128	; 0x80
 800ee14:	f383 8811 	msr	BASEPRI, r3
  if (_TxBufLocked == 0u) {
 800ee18:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <_LockTxBuf+0x4c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <_LockTxBuf+0x22>
    _TxBufLocked = 1u;
 800ee20:	4b0c      	ldr	r3, [pc, #48]	; (800ee54 <_LockTxBuf+0x4c>)
 800ee22:	2201      	movs	r2, #1
 800ee24:	601a      	str	r2, [r3, #0]
    Locked = 1u;
 800ee26:	2301      	movs	r3, #1
 800ee28:	607b      	str	r3, [r7, #4]
  }
  OS_INT_EnableConditional();
 800ee2a:	4b0b      	ldr	r3, [pc, #44]	; (800ee58 <_LockTxBuf+0x50>)
 800ee2c:	785b      	ldrb	r3, [r3, #1]
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b0f      	cmp	r3, #15
 800ee32:	d902      	bls.n	800ee3a <_LockTxBuf+0x32>
 800ee34:	2099      	movs	r0, #153	; 0x99
 800ee36:	f000 f9cd 	bl	800f1d4 <OS_Error>
 800ee3a:	4b07      	ldr	r3, [pc, #28]	; (800ee58 <_LockTxBuf+0x50>)
 800ee3c:	785b      	ldrb	r3, [r3, #1]
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <_LockTxBuf+0x42>
 800ee44:	2300      	movs	r3, #0
 800ee46:	f383 8811 	msr	BASEPRI, r3
  return Locked;
 800ee4a:	687b      	ldr	r3, [r7, #4]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	2000517c 	.word	0x2000517c
 800ee58:	200051a8 	.word	0x200051a8

0800ee5c <_UnlockTxBuf>:
*       _UnlockTxBuf()
*
*  Function description
*    Releases the exclusive access to sending buffer.
*/
static void _UnlockTxBuf(void) {
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0
  _TxBufLocked = 0u;
 800ee60:	4b03      	ldr	r3, [pc, #12]	; (800ee70 <_UnlockTxBuf+0x14>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
}
 800ee66:	bf00      	nop
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	2000517c 	.word	0x2000517c

0800ee74 <_Receive>:
*       _Receive()
*
*  Function description
*    Performs Command / data read from embOSView
*/
static void _Receive(void) {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
  OS_U8        i;
  const OS_U8* pBuf;

  if (RX_CNT > 0u) {  // Data received?
 800ee7a:	4b1b      	ldr	r3, [pc, #108]	; (800eee8 <_Receive+0x74>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3b18      	subs	r3, #24
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d02a      	beq.n	800eede <_Receive+0x6a>
    if (_pfOnRx != NULL) {
 800ee88:	4b18      	ldr	r3, [pc, #96]	; (800eeec <_Receive+0x78>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d021      	beq.n	800eed4 <_Receive+0x60>
      pBuf = _pRxBuf + (RX_BUF_SIZE - RX_CNT);  //lint !e9016 MISRA C:2012 Rule 18.4, advisory
 800ee90:	4b17      	ldr	r3, [pc, #92]	; (800eef0 <_Receive+0x7c>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <_Receive+0x74>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3b18      	subs	r3, #24
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	f1c3 0308 	rsb	r3, r3, #8
 800eea2:	4413      	add	r3, r2
 800eea4:	603b      	str	r3, [r7, #0]
      for (i = 0u; i < RX_CNT; i++) {
 800eea6:	2300      	movs	r3, #0
 800eea8:	71fb      	strb	r3, [r7, #7]
 800eeaa:	e00b      	b.n	800eec4 <_Receive+0x50>
        _pfOnRx(*pBuf);
 800eeac:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <_Receive+0x78>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	7812      	ldrb	r2, [r2, #0]
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	4798      	blx	r3
        pBuf++;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	603b      	str	r3, [r7, #0]
      for (i = 0u; i < RX_CNT; i++) {
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	3301      	adds	r3, #1
 800eec2:	71fb      	strb	r3, [r7, #7]
 800eec4:	4b08      	ldr	r3, [pc, #32]	; (800eee8 <_Receive+0x74>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3b18      	subs	r3, #24
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	79fa      	ldrb	r2, [r7, #7]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d3eb      	bcc.n	800eeac <_Receive+0x38>
      }
    }
    RX_CNT = 0u;
 800eed4:	4b04      	ldr	r3, [pc, #16]	; (800eee8 <_Receive+0x74>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3b18      	subs	r3, #24
 800eeda:	2200      	movs	r2, #0
 800eedc:	701a      	strb	r2, [r3, #0]
  }
}
 800eede:	bf00      	nop
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20005160 	.word	0x20005160
 800eeec:	20005154 	.word	0x20005154
 800eef0:	20005170 	.word	0x20005170

0800eef4 <_FillTxBuf>:
*    Stores bytes in the sending buffer.
*
*  Parameter
*    Data: Data byte to be sent.
*/
static void _FillTxBuf(OS_U8 Data) {
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	71fb      	strb	r3, [r7, #7]
  unsigned int Cnt;
  OS_INT       Byte;
  OS_U8*       pBuf;

  Cnt   = 1u;
 800eefe:	2301      	movs	r3, #1
 800ef00:	617b      	str	r3, [r7, #20]
  pBuf  = _pTxBuf;
 800ef02:	4b23      	ldr	r3, [pc, #140]	; (800ef90 <_FillTxBuf+0x9c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	613b      	str	r3, [r7, #16]
  *pBuf = Data;
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	79fa      	ldrb	r2, [r7, #7]
 800ef0c:	701a      	strb	r2, [r3, #0]
  pBuf++;
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	3301      	adds	r3, #1
 800ef12:	613b      	str	r3, [r7, #16]
  if (_pfGetNextChar != NULL) {
 800ef14:	4b1f      	ldr	r3, [pc, #124]	; (800ef94 <_FillTxBuf+0xa0>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d017      	beq.n	800ef4c <_FillTxBuf+0x58>
    //
    // Get more bytes from the communication state machine
    // until the sending buffer is full.
    //
    for (;;) {
      if (Cnt >= TX_BUF_SIZE) {
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	2b11      	cmp	r3, #17
 800ef20:	d811      	bhi.n	800ef46 <_FillTxBuf+0x52>
        break;
      }
      Byte = _pfGetNextChar();
 800ef22:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <_FillTxBuf+0xa0>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4798      	blx	r3
 800ef28:	60f8      	str	r0, [r7, #12]
      if (Byte < 0) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	db0c      	blt.n	800ef4a <_FillTxBuf+0x56>
        break;  //lint !e9011 MISRA C:2012 Rule 15.4, advisory
      }
      *pBuf = (OS_U8)Byte;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	701a      	strb	r2, [r3, #0]
      pBuf++;
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	613b      	str	r3, [r7, #16]
      Cnt++;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	3301      	adds	r3, #1
 800ef42:	617b      	str	r3, [r7, #20]
      if (Cnt >= TX_BUF_SIZE) {
 800ef44:	e7ea      	b.n	800ef1c <_FillTxBuf+0x28>
        break;
 800ef46:	bf00      	nop
 800ef48:	e000      	b.n	800ef4c <_FillTxBuf+0x58>
        break;  //lint !e9011 MISRA C:2012 Rule 15.4, advisory
 800ef4a:	bf00      	nop
    }
  }
  OS_INT_Disable();
 800ef4c:	2380      	movs	r3, #128	; 0x80
 800ef4e:	f383 8811 	msr	BASEPRI, r3
  _TxTimeoutTimer = TX_TIMEOUT;
 800ef52:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <_FillTxBuf+0xa4>)
 800ef54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef58:	601a      	str	r2, [r3, #0]
  TX_CNT = (OS_U8)Cnt;
 800ef5a:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <_FillTxBuf+0xa8>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3b16      	subs	r3, #22
 800ef60:	697a      	ldr	r2, [r7, #20]
 800ef62:	b2d2      	uxtb	r2, r2
 800ef64:	701a      	strb	r2, [r3, #0]
  OS_INT_EnableConditional();
 800ef66:	4b0e      	ldr	r3, [pc, #56]	; (800efa0 <_FillTxBuf+0xac>)
 800ef68:	785b      	ldrb	r3, [r3, #1]
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b0f      	cmp	r3, #15
 800ef6e:	d902      	bls.n	800ef76 <_FillTxBuf+0x82>
 800ef70:	2099      	movs	r0, #153	; 0x99
 800ef72:	f000 f92f 	bl	800f1d4 <OS_Error>
 800ef76:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <_FillTxBuf+0xac>)
 800ef78:	785b      	ldrb	r3, [r3, #1]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <_FillTxBuf+0x92>
 800ef80:	2300      	movs	r3, #0
 800ef82:	f383 8811 	msr	BASEPRI, r3
}
 800ef86:	bf00      	nop
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20005174 	.word	0x20005174
 800ef94:	2000515c 	.word	0x2000515c
 800ef98:	20005178 	.word	0x20005178
 800ef9c:	20005160 	.word	0x20005160
 800efa0:	200051a8 	.word	0x200051a8

0800efa4 <_DropTxData>:
*       _DropTxData
*
*  Function description
*    Empties the sending buffer of embOS.
*/
static void _DropTxData(void) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
  if (_pfGetNextChar != NULL) {
 800efa8:	4b06      	ldr	r3, [pc, #24]	; (800efc4 <_DropTxData+0x20>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d006      	beq.n	800efbe <_DropTxData+0x1a>
    while (_pfGetNextChar() >= 0) {
 800efb0:	bf00      	nop
 800efb2:	4b04      	ldr	r3, [pc, #16]	; (800efc4 <_DropTxData+0x20>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4798      	blx	r3
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	daf9      	bge.n	800efb2 <_DropTxData+0xe>
      ;
    }
  }
}
 800efbe:	bf00      	nop
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	2000515c 	.word	0x2000515c

0800efc8 <_Send>:
*       _Send()
*
*  Function description
*    Sends data back to embOSView if it is ready to receive data.
*/
static void _Send(void) {
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
  if (TX_CNT == 0u) {  // Can we send data?
 800efcc:	4b13      	ldr	r3, [pc, #76]	; (800f01c <_Send+0x54>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3b16      	subs	r3, #22
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d11d      	bne.n	800f016 <_Send+0x4e>
    _TxTimeoutTimer = 0u;
 800efda:	4b11      	ldr	r3, [pc, #68]	; (800f020 <_Send+0x58>)
 800efdc:	2200      	movs	r2, #0
 800efde:	601a      	str	r2, [r3, #0]
    if (_TxIsPending != 0u) {
 800efe0:	4b10      	ldr	r3, [pc, #64]	; (800f024 <_Send+0x5c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d008      	beq.n	800effa <_Send+0x32>
      _FillTxBuf(_TxPendingData);
 800efe8:	4b0f      	ldr	r3, [pc, #60]	; (800f028 <_Send+0x60>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff ff81 	bl	800eef4 <_FillTxBuf>
      _TxIsPending = 0u;
 800eff2:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <_Send+0x5c>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	601a      	str	r2, [r3, #0]
          _UnlockTxBuf();
        }
      }
    }
  }
}
 800eff8:	e00d      	b.n	800f016 <_Send+0x4e>
      if (_pfOnTx != NULL) {
 800effa:	4b0c      	ldr	r3, [pc, #48]	; (800f02c <_Send+0x64>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d009      	beq.n	800f016 <_Send+0x4e>
        if (_LockTxBuf() != 0u) {
 800f002:	f7ff ff01 	bl	800ee08 <_LockTxBuf>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <_Send+0x4e>
          (void)_pfOnTx();
 800f00c:	4b07      	ldr	r3, [pc, #28]	; (800f02c <_Send+0x64>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4798      	blx	r3
          _UnlockTxBuf();
 800f012:	f7ff ff23 	bl	800ee5c <_UnlockTxBuf>
}
 800f016:	bf00      	nop
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	20005160 	.word	0x20005160
 800f020:	20005178 	.word	0x20005178
 800f024:	20005164 	.word	0x20005164
 800f028:	20005168 	.word	0x20005168
 800f02c:	20005158 	.word	0x20005158

0800f030 <JLINKMEM_Process>:
*  Function description
*    This function should be called more or less regularly to allow
*    memory reads while the application program is running.
*    The more often it is called, the higher the transfer speed.
*/
void JLINKMEM_Process(void) {
 800f030:	b580      	push	{r7, lr}
 800f032:	af00      	add	r7, sp, #0
  static unsigned int _TxTimeout;  // Set when the embOSView fails to fetch our data
  if (OS_IsRunning() != 0u) {      // No communication until the embOS starts
 800f034:	f001 fb1a 	bl	801066c <OS_IsRunning>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d03a      	beq.n	800f0b4 <JLINKMEM_Process+0x84>
    if (_IsInited == 0u) {
 800f03e:	4b1e      	ldr	r3, [pc, #120]	; (800f0b8 <JLINKMEM_Process+0x88>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d104      	bne.n	800f050 <JLINKMEM_Process+0x20>
      _Init();
 800f046:	f7ff fe97 	bl	800ed78 <_Init>
      _IsInited = 1u;
 800f04a:	4b1b      	ldr	r3, [pc, #108]	; (800f0b8 <JLINKMEM_Process+0x88>)
 800f04c:	2201      	movs	r2, #1
 800f04e:	601a      	str	r2, [r3, #0]
    }
    if (HOST_ACT != 0u) {          // Do nothing until the embOSView connects to us
 800f050:	4b1a      	ldr	r3, [pc, #104]	; (800f0bc <JLINKMEM_Process+0x8c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3b17      	subs	r3, #23
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d02a      	beq.n	800f0b4 <JLINKMEM_Process+0x84>
      //
      // Handle Timeout timer
      //
      if (_TxTimeoutTimer > 0u) {
 800f05e:	4b18      	ldr	r3, [pc, #96]	; (800f0c0 <JLINKMEM_Process+0x90>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00b      	beq.n	800f07e <JLINKMEM_Process+0x4e>
        _TxTimeoutTimer--;
 800f066:	4b16      	ldr	r3, [pc, #88]	; (800f0c0 <JLINKMEM_Process+0x90>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3b01      	subs	r3, #1
 800f06c:	4a14      	ldr	r2, [pc, #80]	; (800f0c0 <JLINKMEM_Process+0x90>)
 800f06e:	6013      	str	r3, [r2, #0]
        if (_TxTimeoutTimer == 0u) {
 800f070:	4b13      	ldr	r3, [pc, #76]	; (800f0c0 <JLINKMEM_Process+0x90>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d102      	bne.n	800f07e <JLINKMEM_Process+0x4e>
          _TxTimeout = 1u;
 800f078:	4b12      	ldr	r3, [pc, #72]	; (800f0c4 <JLINKMEM_Process+0x94>)
 800f07a:	2201      	movs	r2, #1
 800f07c:	601a      	str	r2, [r3, #0]
        }
      }

      if (_TxTimeout != 0u) {
 800f07e:	4b11      	ldr	r3, [pc, #68]	; (800f0c4 <JLINKMEM_Process+0x94>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d012      	beq.n	800f0ac <JLINKMEM_Process+0x7c>
        HOST_ACT     = 0u;
 800f086:	4b0d      	ldr	r3, [pc, #52]	; (800f0bc <JLINKMEM_Process+0x8c>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3b17      	subs	r3, #23
 800f08c:	2200      	movs	r2, #0
 800f08e:	701a      	strb	r2, [r3, #0]
        _TxTimeout   = 0u;
 800f090:	4b0c      	ldr	r3, [pc, #48]	; (800f0c4 <JLINKMEM_Process+0x94>)
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
        _TxIsPending = 0u;
 800f096:	4b0c      	ldr	r3, [pc, #48]	; (800f0c8 <JLINKMEM_Process+0x98>)
 800f098:	2200      	movs	r2, #0
 800f09a:	601a      	str	r2, [r3, #0]
        _DropTxData();
 800f09c:	f7ff ff82 	bl	800efa4 <_DropTxData>
        RX_CNT = 0u;               // Drop all bytes form receiving buffer.
 800f0a0:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <JLINKMEM_Process+0x8c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3b18      	subs	r3, #24
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
        _Receive();
        _Send();
      }
    }
  }
}
 800f0aa:	e003      	b.n	800f0b4 <JLINKMEM_Process+0x84>
        _Receive();
 800f0ac:	f7ff fee2 	bl	800ee74 <_Receive>
        _Send();
 800f0b0:	f7ff ff8a 	bl	800efc8 <_Send>
}
 800f0b4:	bf00      	nop
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	2000516c 	.word	0x2000516c
 800f0bc:	20005160 	.word	0x20005160
 800f0c0:	20005178 	.word	0x20005178
 800f0c4:	20005180 	.word	0x20005180
 800f0c8:	20005164 	.word	0x20005164

0800f0cc <JLINKMEM_SendChar>:
*    and sent later, when the handler is called.
*
*  Parameter
*    Data: Data byte to be sent.
*/
void JLINKMEM_SendChar(OS_U8 Data) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	71fb      	strb	r3, [r7, #7]
  if (OS_IsRunning() != 0u) {  // No communication until the embOS starts
 800f0d6:	f001 fac9 	bl	801066c <OS_IsRunning>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d037      	beq.n	800f150 <JLINKMEM_SendChar+0x84>
    if (_IsInited == 0u) {
 800f0e0:	4b20      	ldr	r3, [pc, #128]	; (800f164 <JLINKMEM_SendChar+0x98>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d104      	bne.n	800f0f2 <JLINKMEM_SendChar+0x26>
      _Init();
 800f0e8:	f7ff fe46 	bl	800ed78 <_Init>
      _IsInited = 1u;
 800f0ec:	4b1d      	ldr	r3, [pc, #116]	; (800f164 <JLINKMEM_SendChar+0x98>)
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	601a      	str	r2, [r3, #0]
    }
    if (HOST_ACT != 0u) {      // Do nothing until embOSView connects to us
 800f0f2:	4b1d      	ldr	r3, [pc, #116]	; (800f168 <JLINKMEM_SendChar+0x9c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3b17      	subs	r3, #23
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d020      	beq.n	800f142 <JLINKMEM_SendChar+0x76>
      if (TX_CNT == 0u) {
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <JLINKMEM_SendChar+0x9c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	3b16      	subs	r3, #22
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d112      	bne.n	800f134 <JLINKMEM_SendChar+0x68>
        if (_LockTxBuf() != 0u) {
 800f10e:	f7ff fe7b 	bl	800ee08 <_LockTxBuf>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d006      	beq.n	800f126 <JLINKMEM_SendChar+0x5a>
          _FillTxBuf(Data);
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff feea 	bl	800eef4 <_FillTxBuf>
          _UnlockTxBuf();
 800f120:	f7ff fe9c 	bl	800ee5c <_UnlockTxBuf>
    //
    OS_TASK_EnterRegion();
    OS_COM_ClearTxActive();
    OS_TASK_LeaveRegion();
  }
}
 800f124:	e01a      	b.n	800f15c <JLINKMEM_SendChar+0x90>
          _TxIsPending   = 1u;
 800f126:	4b11      	ldr	r3, [pc, #68]	; (800f16c <JLINKMEM_SendChar+0xa0>)
 800f128:	2201      	movs	r2, #1
 800f12a:	601a      	str	r2, [r3, #0]
          _TxPendingData = Data;
 800f12c:	4a10      	ldr	r2, [pc, #64]	; (800f170 <JLINKMEM_SendChar+0xa4>)
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	7013      	strb	r3, [r2, #0]
}
 800f132:	e013      	b.n	800f15c <JLINKMEM_SendChar+0x90>
        _TxIsPending   = 1u;
 800f134:	4b0d      	ldr	r3, [pc, #52]	; (800f16c <JLINKMEM_SendChar+0xa0>)
 800f136:	2201      	movs	r2, #1
 800f138:	601a      	str	r2, [r3, #0]
        _TxPendingData = Data;
 800f13a:	4a0d      	ldr	r2, [pc, #52]	; (800f170 <JLINKMEM_SendChar+0xa4>)
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	7013      	strb	r3, [r2, #0]
}
 800f140:	e00c      	b.n	800f15c <JLINKMEM_SendChar+0x90>
      OS_TASK_EnterRegion();
 800f142:	f000 ffd1 	bl	80100e8 <OS_EnterRegionFunc>
      OS_COM_ClearTxActive();
 800f146:	f001 fcc5 	bl	8010ad4 <OS_COM_ClearTxActive>
      OS_TASK_LeaveRegion();
 800f14a:	f000 fd49 	bl	800fbe0 <OS_TASK_LeaveRegion>
}
 800f14e:	e005      	b.n	800f15c <JLINKMEM_SendChar+0x90>
    OS_TASK_EnterRegion();
 800f150:	f000 ffca 	bl	80100e8 <OS_EnterRegionFunc>
    OS_COM_ClearTxActive();
 800f154:	f001 fcbe 	bl	8010ad4 <OS_COM_ClearTxActive>
    OS_TASK_LeaveRegion();
 800f158:	f000 fd42 	bl	800fbe0 <OS_TASK_LeaveRegion>
}
 800f15c:	bf00      	nop
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	2000516c 	.word	0x2000516c
 800f168:	20005160 	.word	0x20005160
 800f16c:	20005164 	.word	0x20005164
 800f170:	20005168 	.word	0x20005168

0800f174 <JLINKMEM_SetpfOnRx>:
*    Sets the Rx callback routine
*
*  Parameter
*    pfOnRx: Pointer to Rx callback routine
*/
void JLINKMEM_SetpfOnRx(void (*pfOnRx)(OS_U8 Data)) {
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  _pfOnRx = pfOnRx;
 800f17c:	4a04      	ldr	r2, [pc, #16]	; (800f190 <JLINKMEM_SetpfOnRx+0x1c>)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6013      	str	r3, [r2, #0]
}
 800f182:	bf00      	nop
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20005154 	.word	0x20005154

0800f194 <JLINKMEM_SetpfOnTx>:
*    Sets the Tx callback routine
*
*  Parameter
*    pfOnTx: Pointer to Tx callback routine
*/
void JLINKMEM_SetpfOnTx(OS_U8 (*pfOnTx)(void)) {
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  _pfOnTx = pfOnTx;
 800f19c:	4a04      	ldr	r2, [pc, #16]	; (800f1b0 <JLINKMEM_SetpfOnTx+0x1c>)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6013      	str	r3, [r2, #0]
}
 800f1a2:	bf00      	nop
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	20005158 	.word	0x20005158

0800f1b4 <JLINKMEM_SetpfGetNextChar>:
*    Sets the get next character callback routine
*
*  Parameter
*    pfGetNextChar: Pointer to  get next character callback routine
*/
void JLINKMEM_SetpfGetNextChar(OS_INT (*pfGetNextChar)(void)) {
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  _pfGetNextChar = pfGetNextChar;
 800f1bc:	4a04      	ldr	r2, [pc, #16]	; (800f1d0 <JLINKMEM_SetpfGetNextChar+0x1c>)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6013      	str	r3, [r2, #0]
}
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	2000515c 	.word	0x2000515c

0800f1d4 <OS_Error>:
*    of the listed errors may occur.
*
*  Parameters
*    ErrCode: embOS error code
*/
void OS_Error(OS_STATUS ErrCode) {
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	80fb      	strh	r3, [r7, #6]
  OS_MPU_PRIVSTATE_ENTER();
  //
  // Disabling preemptive task switches avoids that other higher priority
  // tasks preempt OS_Error() which makes debugging easier.
  //
  OS_TASK_EnterRegion();
 800f1de:	f000 ff83 	bl	80100e8 <OS_EnterRegionFunc>
  //
  // Enable interrupts for embOSView communication.
  //
  OS_Global.Counters.Cnt.DI = 0u;
 800f1e2:	4b09      	ldr	r3, [pc, #36]	; (800f208 <OS_Error+0x34>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	705a      	strb	r2, [r3, #1]
  OS_INT_Enable();
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f383 8811 	msr	BASEPRI, r3
  //
  // OS_Global.Status will be shown in e.g. embOSView and IDE plugins.
  // It is available in debug and stack check builds only.
  //
#if (OS_DEBUG != 0) || (OS_SUPPORT_STACKCHECK != 0)
  OS_Global.Status = ErrCode;
 800f1ee:	4a06      	ldr	r2, [pc, #24]	; (800f208 <OS_Error+0x34>)
 800f1f0:	88fb      	ldrh	r3, [r7, #6]
 800f1f2:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
#endif
  //
  // Endless loop may be left by setting ErrCode to OS_OK (0).
  //
  while (ErrCode != OS_OK) {
 800f1f6:	88fb      	ldrh	r3, [r7, #6]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1fc      	bne.n	800f1f6 <OS_Error+0x22>
  }
  OS_MPU_PRIVSTATE_LEAVE();
}
 800f1fc:	bf00      	nop
 800f1fe:	bf00      	nop
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	200051a8 	.word	0x200051a8

0800f20c <_OS_GetHWTimerCycles>:
*    Returns the current hardware timer count value.
*
*  Return value
*    Current timer count value.
*/
static unsigned int _OS_GetHWTimerCycles(void) {
 800f20c:	b480      	push	{r7}
 800f20e:	af00      	add	r7, sp, #0
  return SysTick->VAL;
 800f210:	4b03      	ldr	r3, [pc, #12]	; (800f220 <_OS_GetHWTimerCycles+0x14>)
 800f212:	689b      	ldr	r3, [r3, #8]
}
 800f214:	4618      	mov	r0, r3
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	e000e010 	.word	0xe000e010

0800f224 <_OS_GetHWTimer_IntPending>:
*
*  Return value
*    == 0: Interrupt pending flag not set.
*    != 0: Interrupt pending flag set.
*/
static unsigned int _OS_GetHWTimer_IntPending(void) {
 800f224:	b480      	push	{r7}
 800f226:	af00      	add	r7, sp, #0
  return SCB->ICSR & SCB_ICSR_PENDSTSET_Msk;
 800f228:	4b04      	ldr	r3, [pc, #16]	; (800f23c <_OS_GetHWTimer_IntPending+0x18>)
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
}
 800f230:	4618      	mov	r0, r3
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	e000ed00 	.word	0xe000ed00

0800f240 <SysTick_Handler>:
*       SysTick_Handler()
*
*  Function description
*    This is the hardware timer exception handler.
*/
void SysTick_Handler(void) {
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
  OS_INT_EnterNestable();
 800f244:	4b40      	ldr	r3, [pc, #256]	; (800f348 <SysTick_Handler+0x108>)
 800f246:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d102      	bne.n	800f254 <SysTick_Handler+0x14>
 800f24e:	20a5      	movs	r0, #165	; 0xa5
 800f250:	f7ff ffc0 	bl	800f1d4 <OS_Error>
 800f254:	4b3c      	ldr	r3, [pc, #240]	; (800f348 <SysTick_Handler+0x108>)
 800f256:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f25a:	3301      	adds	r3, #1
 800f25c:	b2da      	uxtb	r2, r3
 800f25e:	4b3a      	ldr	r3, [pc, #232]	; (800f348 <SysTick_Handler+0x108>)
 800f260:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800f264:	4b38      	ldr	r3, [pc, #224]	; (800f348 <SysTick_Handler+0x108>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2bff      	cmp	r3, #255	; 0xff
 800f26c:	d102      	bne.n	800f274 <SysTick_Handler+0x34>
 800f26e:	209d      	movs	r0, #157	; 0x9d
 800f270:	f7ff ffb0 	bl	800f1d4 <OS_Error>
 800f274:	4b34      	ldr	r3, [pc, #208]	; (800f348 <SysTick_Handler+0x108>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	3301      	adds	r3, #1
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	4b32      	ldr	r3, [pc, #200]	; (800f348 <SysTick_Handler+0x108>)
 800f280:	701a      	strb	r2, [r3, #0]
 800f282:	f000 fe95 	bl	800ffb0 <OS_AssertCPUInISRMode>
 800f286:	4b30      	ldr	r3, [pc, #192]	; (800f348 <SysTick_Handler+0x108>)
 800f288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <SysTick_Handler+0x56>
 800f28e:	4b2e      	ldr	r3, [pc, #184]	; (800f348 <SysTick_Handler+0x108>)
 800f290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4798      	blx	r3
  OS_TICK_Handle();
 800f296:	f000 fcd5 	bl	800fc44 <OS_TICK_Handle>
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_Process();
 800f29a:	f7ff fec9 	bl	800f030 <JLINKMEM_Process>
#endif
  OS_INT_LeaveNestable();
 800f29e:	4b2a      	ldr	r3, [pc, #168]	; (800f348 <SysTick_Handler+0x108>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d10c      	bne.n	800f2c2 <SysTick_Handler+0x82>
 800f2a8:	4b27      	ldr	r3, [pc, #156]	; (800f348 <SysTick_Handler+0x108>)
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d008      	beq.n	800f2c2 <SysTick_Handler+0x82>
 800f2b0:	4b25      	ldr	r3, [pc, #148]	; (800f348 <SysTick_Handler+0x108>)
 800f2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00c      	beq.n	800f2d2 <SysTick_Handler+0x92>
 800f2b8:	4b23      	ldr	r3, [pc, #140]	; (800f348 <SysTick_Handler+0x108>)
 800f2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	4798      	blx	r3
 800f2c0:	e007      	b.n	800f2d2 <SysTick_Handler+0x92>
 800f2c2:	4b21      	ldr	r3, [pc, #132]	; (800f348 <SysTick_Handler+0x108>)
 800f2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d003      	beq.n	800f2d2 <SysTick_Handler+0x92>
 800f2ca:	4b1f      	ldr	r3, [pc, #124]	; (800f348 <SysTick_Handler+0x108>)
 800f2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	4798      	blx	r3
 800f2d2:	2380      	movs	r3, #128	; 0x80
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	4b1b      	ldr	r3, [pc, #108]	; (800f348 <SysTick_Handler+0x108>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d116      	bne.n	800f310 <SysTick_Handler+0xd0>
 800f2e2:	4b19      	ldr	r3, [pc, #100]	; (800f348 <SysTick_Handler+0x108>)
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d012      	beq.n	800f310 <SysTick_Handler+0xd0>
 800f2ea:	4b17      	ldr	r3, [pc, #92]	; (800f348 <SysTick_Handler+0x108>)
 800f2ec:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d102      	bne.n	800f2fa <SysTick_Handler+0xba>
 800f2f4:	2098      	movs	r0, #152	; 0x98
 800f2f6:	f7ff ff6d 	bl	800f1d4 <OS_Error>
 800f2fa:	4b13      	ldr	r3, [pc, #76]	; (800f348 <SysTick_Handler+0x108>)
 800f2fc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f300:	3b01      	subs	r3, #1
 800f302:	b2da      	uxtb	r2, r3
 800f304:	4b10      	ldr	r3, [pc, #64]	; (800f348 <SysTick_Handler+0x108>)
 800f306:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800f30a:	f7f1 f85b 	bl	80003c4 <OS_SwitchFromInt>
 800f30e:	e00f      	b.n	800f330 <SysTick_Handler+0xf0>
 800f310:	4b0d      	ldr	r3, [pc, #52]	; (800f348 <SysTick_Handler+0x108>)
 800f312:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <SysTick_Handler+0xe0>
 800f31a:	2098      	movs	r0, #152	; 0x98
 800f31c:	f7ff ff5a 	bl	800f1d4 <OS_Error>
 800f320:	4b09      	ldr	r3, [pc, #36]	; (800f348 <SysTick_Handler+0x108>)
 800f322:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f326:	3b01      	subs	r3, #1
 800f328:	b2da      	uxtb	r2, r3
 800f32a:	4b07      	ldr	r3, [pc, #28]	; (800f348 <SysTick_Handler+0x108>)
 800f32c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800f330:	4b05      	ldr	r3, [pc, #20]	; (800f348 <SysTick_Handler+0x108>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	b2db      	uxtb	r3, r3
 800f336:	3b01      	subs	r3, #1
 800f338:	b2da      	uxtb	r2, r3
 800f33a:	4b03      	ldr	r3, [pc, #12]	; (800f348 <SysTick_Handler+0x108>)
 800f33c:	701a      	strb	r2, [r3, #0]
 800f33e:	2300      	movs	r3, #0
 800f340:	f383 8811 	msr	BASEPRI, r3
}
 800f344:	bf00      	nop
 800f346:	bd80      	pop	{r7, pc}
 800f348:	200051a8 	.word	0x200051a8

0800f34c <OS_InitHW>:
*       OS_InitHW()
*
*  Function description
*    Initialize the hardware required for embOS to run.
*/
void OS_InitHW(void) {
 800f34c:	b5b0      	push	{r4, r5, r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
  OS_INT_IncDI();
 800f352:	4b24      	ldr	r3, [pc, #144]	; (800f3e4 <OS_InitHW+0x98>)
 800f354:	785b      	ldrb	r3, [r3, #1]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b0f      	cmp	r3, #15
 800f35a:	d902      	bls.n	800f362 <OS_InitHW+0x16>
 800f35c:	2099      	movs	r0, #153	; 0x99
 800f35e:	f7ff ff39 	bl	800f1d4 <OS_Error>
 800f362:	2380      	movs	r3, #128	; 0x80
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <OS_InitHW+0x98>)
 800f36a:	785b      	ldrb	r3, [r3, #1]
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	3301      	adds	r3, #1
 800f370:	b2da      	uxtb	r2, r3
 800f372:	4b1c      	ldr	r3, [pc, #112]	; (800f3e4 <OS_InitHW+0x98>)
 800f374:	705a      	strb	r2, [r3, #1]
  //
  // We assume PLL and core clock were already set by the SystemInit() function,
  // which was called from the startup code. Therefore, we just ensure the system
  // clock variable is updated and then set the periodic system timer tick for embOS.
  //
    NVIC_SetPriority(SysTick_IRQn, (1u << 4U) - 2u);  // Set the priority higher than the PendSV priority
 800f376:	210e      	movs	r1, #14
 800f378:	20ff      	movs	r0, #255	; 0xff
 800f37a:	f7f6 f913 	bl	80055a4 <NVIC_SetPriority>
    SysTick_INIT();
 800f37e:	f7f6 fa01 	bl	8005784 <SysTick_INIT>
    //
  // Inform embOS about the timer settings
  //

    OS_SYSTIMER_CONFIG SysTimerConfig = {OS_TIMER_FREQ, OS_INT_FREQ, OS_TIMER_DOWNCOUNTING, _OS_GetHWTimerCycles, _OS_GetHWTimer_IntPending};
 800f382:	4b19      	ldr	r3, [pc, #100]	; (800f3e8 <OS_InitHW+0x9c>)
 800f384:	1d3c      	adds	r4, r7, #4
 800f386:	461d      	mov	r5, r3
 800f388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f38a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	6023      	str	r3, [r4, #0]
    OS_TIME_ConfigSysTimer(&SysTimerConfig);
 800f390:	1d3b      	adds	r3, r7, #4
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f910 	bl	800f5b8 <OS_TIME_ConfigSysTimer>
    SEGGER_SYSVIEW_Conf();
 800f398:	f7f3 fbb2 	bl	8002b00 <SEGGER_SYSVIEW_Conf>

  //
  // Initialize communication for embOSView
  //
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_SetpfOnRx(OS_COM_OnRx);
 800f39c:	4813      	ldr	r0, [pc, #76]	; (800f3ec <OS_InitHW+0xa0>)
 800f39e:	f7ff fee9 	bl	800f174 <JLINKMEM_SetpfOnRx>
  JLINKMEM_SetpfOnTx(OS_COM_OnTx);
 800f3a2:	4813      	ldr	r0, [pc, #76]	; (800f3f0 <OS_InitHW+0xa4>)
 800f3a4:	f7ff fef6 	bl	800f194 <JLINKMEM_SetpfOnTx>
  JLINKMEM_SetpfGetNextChar(OS_COM_GetNextChar);
 800f3a8:	4812      	ldr	r0, [pc, #72]	; (800f3f4 <OS_InitHW+0xa8>)
 800f3aa:	f7ff ff03 	bl	800f1b4 <JLINKMEM_SetpfGetNextChar>
#elif (OS_VIEW_IFSELECT == OS_VIEW_IF_UART)
  BSP_UART_Init(OS_UART, OS_BAUDRATE, BSP_UART_DATA_BITS_8, BSP_UART_PARITY_NONE, BSP_UART_STOP_BITS_1);
  BSP_UART_SetReadCallback(OS_UART, _OS_OnRX);
  BSP_UART_SetWriteCallback(OS_UART, _OS_OnTX);
#endif
  OS_INT_DecRI();
 800f3ae:	4b0d      	ldr	r3, [pc, #52]	; (800f3e4 <OS_InitHW+0x98>)
 800f3b0:	785b      	ldrb	r3, [r3, #1]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b0f      	cmp	r3, #15
 800f3b6:	d902      	bls.n	800f3be <OS_InitHW+0x72>
 800f3b8:	2099      	movs	r0, #153	; 0x99
 800f3ba:	f7ff ff0b 	bl	800f1d4 <OS_Error>
 800f3be:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <OS_InitHW+0x98>)
 800f3c0:	785b      	ldrb	r3, [r3, #1]
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	4b06      	ldr	r3, [pc, #24]	; (800f3e4 <OS_InitHW+0x98>)
 800f3ca:	705a      	strb	r2, [r3, #1]
 800f3cc:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <OS_InitHW+0x98>)
 800f3ce:	785b      	ldrb	r3, [r3, #1]
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d102      	bne.n	800f3dc <OS_InitHW+0x90>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f383 8811 	msr	BASEPRI, r3
}
 800f3dc:	bf00      	nop
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f3e4:	200051a8 	.word	0x200051a8
 800f3e8:	080120b0 	.word	0x080120b0
 800f3ec:	08010dc9 	.word	0x08010dc9
 800f3f0:	08010e85 	.word	0x08010e85
 800f3f4:	08010b37 	.word	0x08010b37

0800f3f8 <OS_Idle>:
*  Additional information
*    The idle loop does not have a stack of its own, therefore no
*    functionality should be implemented that relies on the stack
*    to be preserved.
*/
void OS_Idle(void) {  // Idle loop: No task is ready to execute
 800f3f8:	b480      	push	{r7}
 800f3fa:	af00      	add	r7, sp, #0
  while (1) {         // Nothing to do ... wait for interrupt
 800f3fc:	e7fe      	b.n	800f3fc <OS_Idle+0x4>

0800f3fe <OS_COM_Send1>:
*       OS_COM_Send1()
*
*  Function description
*    Sends one character.
*/
void OS_COM_Send1(OS_U8 c) {
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b082      	sub	sp, #8
 800f402:	af00      	add	r7, sp, #0
 800f404:	4603      	mov	r3, r0
 800f406:	71fb      	strb	r3, [r7, #7]
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_SendChar(c);
 800f408:	79fb      	ldrb	r3, [r7, #7]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff fe5e 	bl	800f0cc <JLINKMEM_SendChar>
#elif (OS_VIEW_IFSELECT == OS_VIEW_DISABLED)
  OS_USEPARA(c);           // Avoid compiler warning
  OS_COM_ClearTxActive();  // Let embOS know that Tx is not busy
#endif
}
 800f410:	bf00      	nop
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <OS_ThreadSafe_Lock>:
 800f418:	b510      	push	{r4, lr}
 800f41a:	f000 f88d 	bl	800f538 <OS_GetCPUState>
 800f41e:	2801      	cmp	r0, #1
 800f420:	d102      	bne.n	800f428 <OS_ThreadSafe_Lock+0x10>
 800f422:	20a0      	movs	r0, #160	; 0xa0
 800f424:	f7ff fed6 	bl	800f1d4 <OS_Error>
 800f428:	4c17      	ldr	r4, [pc, #92]	; (800f488 <OS_ThreadSafe_Lock+0x70>)
 800f42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f42c:	b12b      	cbz	r3, 800f43a <OS_ThreadSafe_Lock+0x22>
 800f42e:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f432:	b913      	cbnz	r3, 800f43a <OS_ThreadSafe_Lock+0x22>
 800f434:	20a1      	movs	r0, #161	; 0xa1
 800f436:	f7ff fecd 	bl	800f1d4 <OS_Error>
 800f43a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800f43e:	b15b      	cbz	r3, 800f458 <OS_ThreadSafe_Lock+0x40>
 800f440:	2b01      	cmp	r3, #1
 800f442:	d106      	bne.n	800f452 <OS_ThreadSafe_Lock+0x3a>
 800f444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f446:	b93b      	cbnz	r3, 800f458 <OS_ThreadSafe_Lock+0x40>
 800f448:	68a3      	ldr	r3, [r4, #8]
 800f44a:	b92b      	cbnz	r3, 800f458 <OS_ThreadSafe_Lock+0x40>
 800f44c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f450:	b913      	cbnz	r3, 800f458 <OS_ThreadSafe_Lock+0x40>
 800f452:	20e5      	movs	r0, #229	; 0xe5
 800f454:	f7ff febe 	bl	800f1d4 <OS_Error>
 800f458:	f001 f908 	bl	801066c <OS_IsRunning>
 800f45c:	b190      	cbz	r0, 800f484 <OS_ThreadSafe_Lock+0x6c>
 800f45e:	4c0b      	ldr	r4, [pc, #44]	; (800f48c <OS_ThreadSafe_Lock+0x74>)
 800f460:	7823      	ldrb	r3, [r4, #0]
 800f462:	b953      	cbnz	r3, 800f47a <OS_ThreadSafe_Lock+0x62>
 800f464:	f000 fe40 	bl	80100e8 <OS_EnterRegionFunc>
 800f468:	7823      	ldrb	r3, [r4, #0]
 800f46a:	b923      	cbnz	r3, 800f476 <OS_ThreadSafe_Lock+0x5e>
 800f46c:	2301      	movs	r3, #1
 800f46e:	4808      	ldr	r0, [pc, #32]	; (800f490 <OS_ThreadSafe_Lock+0x78>)
 800f470:	7023      	strb	r3, [r4, #0]
 800f472:	f000 fcad 	bl	800fdd0 <OS_MUTEX_Create>
 800f476:	f000 fbb3 	bl	800fbe0 <OS_TASK_LeaveRegion>
 800f47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f47e:	4804      	ldr	r0, [pc, #16]	; (800f490 <OS_ThreadSafe_Lock+0x78>)
 800f480:	f000 bd00 	b.w	800fe84 <OS_MUTEX_LockBlocked>
 800f484:	bd10      	pop	{r4, pc}
 800f486:	bf00      	nop
 800f488:	200051a8 	.word	0x200051a8
 800f48c:	20005188 	.word	0x20005188
 800f490:	20005190 	.word	0x20005190

0800f494 <OS_ThreadSafe_Unlock>:
 800f494:	b510      	push	{r4, lr}
 800f496:	f000 f84f 	bl	800f538 <OS_GetCPUState>
 800f49a:	2801      	cmp	r0, #1
 800f49c:	d102      	bne.n	800f4a4 <OS_ThreadSafe_Unlock+0x10>
 800f49e:	20a0      	movs	r0, #160	; 0xa0
 800f4a0:	f7ff fe98 	bl	800f1d4 <OS_Error>
 800f4a4:	4c10      	ldr	r4, [pc, #64]	; (800f4e8 <OS_ThreadSafe_Unlock+0x54>)
 800f4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4a8:	b12b      	cbz	r3, 800f4b6 <OS_ThreadSafe_Unlock+0x22>
 800f4aa:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f4ae:	b913      	cbnz	r3, 800f4b6 <OS_ThreadSafe_Unlock+0x22>
 800f4b0:	20a1      	movs	r0, #161	; 0xa1
 800f4b2:	f7ff fe8f 	bl	800f1d4 <OS_Error>
 800f4b6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800f4ba:	b15b      	cbz	r3, 800f4d4 <OS_ThreadSafe_Unlock+0x40>
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d106      	bne.n	800f4ce <OS_ThreadSafe_Unlock+0x3a>
 800f4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4c2:	b93b      	cbnz	r3, 800f4d4 <OS_ThreadSafe_Unlock+0x40>
 800f4c4:	68a3      	ldr	r3, [r4, #8]
 800f4c6:	b92b      	cbnz	r3, 800f4d4 <OS_ThreadSafe_Unlock+0x40>
 800f4c8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f4cc:	b913      	cbnz	r3, 800f4d4 <OS_ThreadSafe_Unlock+0x40>
 800f4ce:	20e5      	movs	r0, #229	; 0xe5
 800f4d0:	f7ff fe80 	bl	800f1d4 <OS_Error>
 800f4d4:	f001 f8ca 	bl	801066c <OS_IsRunning>
 800f4d8:	b120      	cbz	r0, 800f4e4 <OS_ThreadSafe_Unlock+0x50>
 800f4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4de:	4803      	ldr	r0, [pc, #12]	; (800f4ec <OS_ThreadSafe_Unlock+0x58>)
 800f4e0:	f000 bd1e 	b.w	800ff20 <OS_MUTEX_Unlock>
 800f4e4:	bd10      	pop	{r4, pc}
 800f4e6:	bf00      	nop
 800f4e8:	200051a8 	.word	0x200051a8
 800f4ec:	20005190 	.word	0x20005190

0800f4f0 <OS_InterruptSafe_Lock>:
 800f4f0:	b508      	push	{r3, lr}
 800f4f2:	f000 fd73 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f4f6:	4b07      	ldr	r3, [pc, #28]	; (800f514 <OS_InterruptSafe_Lock+0x24>)
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	b932      	cbnz	r2, 800f50a <OS_InterruptSafe_Lock+0x1a>
 800f4fc:	f3ef 8111 	mrs	r1, BASEPRI
 800f500:	4a05      	ldr	r2, [pc, #20]	; (800f518 <OS_InterruptSafe_Lock+0x28>)
 800f502:	6011      	str	r1, [r2, #0]
 800f504:	2280      	movs	r2, #128	; 0x80
 800f506:	f382 8811 	msr	BASEPRI, r2
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	3201      	adds	r2, #1
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	bd08      	pop	{r3, pc}
 800f512:	bf00      	nop
 800f514:	2000518c 	.word	0x2000518c
 800f518:	20005184 	.word	0x20005184

0800f51c <OS_InterruptSafe_Unlock>:
 800f51c:	4a04      	ldr	r2, [pc, #16]	; (800f530 <OS_InterruptSafe_Unlock+0x14>)
 800f51e:	6813      	ldr	r3, [r2, #0]
 800f520:	3b01      	subs	r3, #1
 800f522:	6013      	str	r3, [r2, #0]
 800f524:	b91b      	cbnz	r3, 800f52e <OS_InterruptSafe_Unlock+0x12>
 800f526:	4b03      	ldr	r3, [pc, #12]	; (800f534 <OS_InterruptSafe_Unlock+0x18>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f383 8811 	msr	BASEPRI, r3
 800f52e:	4770      	bx	lr
 800f530:	2000518c 	.word	0x2000518c
 800f534:	20005184 	.word	0x20005184

0800f538 <OS_GetCPUState>:
 800f538:	f3ef 8005 	mrs	r0, IPSR
 800f53c:	b1f0      	cbz	r0, 800f57c <OS_GetCPUState+0x44>
 800f53e:	1e83      	subs	r3, r0, #2
 800f540:	2b01      	cmp	r3, #1
 800f542:	d918      	bls.n	800f576 <OS_GetCPUState+0x3e>
 800f544:	280e      	cmp	r0, #14
 800f546:	d018      	beq.n	800f57a <OS_GetCPUState+0x42>
 800f548:	280f      	cmp	r0, #15
 800f54a:	d907      	bls.n	800f55c <OS_GetCPUState+0x24>
 800f54c:	4b0c      	ldr	r3, [pc, #48]	; (800f580 <OS_GetCPUState+0x48>)
 800f54e:	5c1b      	ldrb	r3, [r3, r0]
 800f550:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f554:	bf0c      	ite	eq
 800f556:	2002      	moveq	r0, #2
 800f558:	2001      	movne	r0, #1
 800f55a:	4770      	bx	lr
 800f55c:	1f02      	subs	r2, r0, #4
 800f55e:	2a0b      	cmp	r2, #11
 800f560:	d807      	bhi.n	800f572 <OS_GetCPUState+0x3a>
 800f562:	f640 1387 	movw	r3, #2439	; 0x987
 800f566:	40d3      	lsrs	r3, r2
 800f568:	f013 0301 	ands.w	r3, r3, #1
 800f56c:	d0f0      	beq.n	800f550 <OS_GetCPUState+0x18>
 800f56e:	4b05      	ldr	r3, [pc, #20]	; (800f584 <OS_GetCPUState+0x4c>)
 800f570:	e7ed      	b.n	800f54e <OS_GetCPUState+0x16>
 800f572:	2300      	movs	r3, #0
 800f574:	e7ec      	b.n	800f550 <OS_GetCPUState+0x18>
 800f576:	2002      	movs	r0, #2
 800f578:	4770      	bx	lr
 800f57a:	2004      	movs	r0, #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	e000e3f0 	.word	0xe000e3f0
 800f584:	e000ed14 	.word	0xe000ed14

0800f588 <OS_TRACE_SetAPI>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4c0a      	ldr	r4, [pc, #40]	; (800f5b4 <OS_TRACE_SetAPI+0x2c>)
 800f58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58e:	4605      	mov	r5, r0
 800f590:	b12b      	cbz	r3, 800f59e <OS_TRACE_SetAPI+0x16>
 800f592:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f596:	b913      	cbnz	r3, 800f59e <OS_TRACE_SetAPI+0x16>
 800f598:	20a1      	movs	r0, #161	; 0xa1
 800f59a:	f7ff fe1b 	bl	800f1d4 <OS_Error>
 800f59e:	f7ff ffcb 	bl	800f538 <OS_GetCPUState>
 800f5a2:	2801      	cmp	r0, #1
 800f5a4:	d102      	bne.n	800f5ac <OS_TRACE_SetAPI+0x24>
 800f5a6:	20a0      	movs	r0, #160	; 0xa0
 800f5a8:	f7ff fe14 	bl	800f1d4 <OS_Error>
 800f5ac:	f000 fd16 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f5b0:	63e5      	str	r5, [r4, #60]	; 0x3c
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	200051a8 	.word	0x200051a8

0800f5b8 <OS_TIME_ConfigSysTimer>:
 800f5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	4e2a      	ldr	r6, [pc, #168]	; (800f668 <OS_TIME_ConfigSysTimer+0xb0>)
 800f5be:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	b133      	cbz	r3, 800f5d2 <OS_TIME_ConfigSysTimer+0x1a>
 800f5c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c8:	4798      	blx	r3
 800f5ca:	4601      	mov	r1, r0
 800f5cc:	f240 101b 	movw	r0, #283	; 0x11b
 800f5d0:	47a8      	blx	r5
 800f5d2:	f000 fd03 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f5d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5d8:	4d24      	ldr	r5, [pc, #144]	; (800f66c <OS_TIME_ConfigSysTimer+0xb4>)
 800f5da:	462f      	mov	r7, r5
 800f5dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f5de:	fbb0 f2f1 	udiv	r2, r0, r1
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	603b      	str	r3, [r7, #0]
 800f5e6:	616a      	str	r2, [r5, #20]
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	4601      	mov	r1, r0
 800f5ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5f0:	bb19      	cbnz	r1, 800f63a <OS_TIME_ConfigSysTimer+0x82>
 800f5f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f5f6:	fbb1 f1f2 	udiv	r1, r1, r2
 800f5fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5fe:	61ea      	str	r2, [r5, #28]
 800f600:	4a1b      	ldr	r2, [pc, #108]	; (800f670 <OS_TIME_ConfigSysTimer+0xb8>)
 800f602:	61a9      	str	r1, [r5, #24]
 800f604:	4619      	mov	r1, r3
 800f606:	b9f9      	cbnz	r1, 800f648 <OS_TIME_ConfigSysTimer+0x90>
 800f608:	4919      	ldr	r1, [pc, #100]	; (800f670 <OS_TIME_ConfigSysTimer+0xb8>)
 800f60a:	fbb1 f1f2 	udiv	r1, r1, r2
 800f60e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f612:	626a      	str	r2, [r5, #36]	; 0x24
 800f614:	4a17      	ldr	r2, [pc, #92]	; (800f674 <OS_TIME_ConfigSysTimer+0xbc>)
 800f616:	6229      	str	r1, [r5, #32]
 800f618:	4610      	mov	r0, r2
 800f61a:	4619      	mov	r1, r3
 800f61c:	b9d9      	cbnz	r1, 800f656 <OS_TIME_ConfigSysTimer+0x9e>
 800f61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f622:	fbb0 f0f2 	udiv	r0, r0, r2
 800f626:	62eb      	str	r3, [r5, #44]	; 0x2c
 800f628:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f62a:	62a8      	str	r0, [r5, #40]	; 0x28
 800f62c:	b1d3      	cbz	r3, 800f664 <OS_TIME_ConfigSysTimer+0xac>
 800f62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f634:	f240 101b 	movw	r0, #283	; 0x11b
 800f638:	4718      	bx	r3
 800f63a:	fbb2 f0f1 	udiv	r0, r2, r1
 800f63e:	fb01 2010 	mls	r0, r1, r0, r2
 800f642:	460a      	mov	r2, r1
 800f644:	4601      	mov	r1, r0
 800f646:	e7d3      	b.n	800f5f0 <OS_TIME_ConfigSysTimer+0x38>
 800f648:	fbb2 f0f1 	udiv	r0, r2, r1
 800f64c:	fb01 2010 	mls	r0, r1, r0, r2
 800f650:	460a      	mov	r2, r1
 800f652:	4601      	mov	r1, r0
 800f654:	e7d7      	b.n	800f606 <OS_TIME_ConfigSysTimer+0x4e>
 800f656:	fbb2 f4f1 	udiv	r4, r2, r1
 800f65a:	fb01 2414 	mls	r4, r1, r4, r2
 800f65e:	460a      	mov	r2, r1
 800f660:	4621      	mov	r1, r4
 800f662:	e7db      	b.n	800f61c <OS_TIME_ConfigSysTimer+0x64>
 800f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f668:	200051a8 	.word	0x200051a8
 800f66c:	20005228 	.word	0x20005228
 800f670:	000f4240 	.word	0x000f4240
 800f674:	3b9aca00 	.word	0x3b9aca00

0800f678 <OS__TIME_GetCycles>:
 800f678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f67c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800f708 <OS__TIME_GetCycles+0x90>
 800f680:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f684:	b913      	cbnz	r3, 800f68c <OS__TIME_GetCycles+0x14>
 800f686:	20eb      	movs	r0, #235	; 0xeb
 800f688:	f7ff fda4 	bl	800f1d4 <OS_Error>
 800f68c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f690:	b913      	cbnz	r3, 800f698 <OS__TIME_GetCycles+0x20>
 800f692:	20ec      	movs	r0, #236	; 0xec
 800f694:	f7ff fd9e 	bl	800f1d4 <OS_Error>
 800f698:	2380      	movs	r3, #128	; 0x80
 800f69a:	f383 8811 	msr	BASEPRI, r3
 800f69e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800f70c <OS__TIME_GetCycles+0x94>
 800f6a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f6a6:	e9d8 4704 	ldrd	r4, r7, [r8, #16]
 800f6aa:	4798      	blx	r3
 800f6ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6b0:	4605      	mov	r5, r0
 800f6b2:	4798      	blx	r3
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	b138      	cbz	r0, 800f6c8 <OS__TIME_GetCycles+0x50>
 800f6b8:	3401      	adds	r4, #1
 800f6ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f6be:	f147 0700 	adc.w	r7, r7, #0
 800f6c2:	4798      	blx	r3
 800f6c4:	2600      	movs	r6, #0
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6cc:	2b0f      	cmp	r3, #15
 800f6ce:	d902      	bls.n	800f6d6 <OS__TIME_GetCycles+0x5e>
 800f6d0:	2099      	movs	r0, #153	; 0x99
 800f6d2:	f7ff fd7f 	bl	800f1d4 <OS_Error>
 800f6d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f6de:	b90b      	cbnz	r3, 800f6e4 <OS__TIME_GetCycles+0x6c>
 800f6e0:	f382 8811 	msr	BASEPRI, r2
 800f6e4:	f899 2008 	ldrb.w	r2, [r9, #8]
 800f6e8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f6ec:	b912      	cbnz	r2, 800f6f4 <OS__TIME_GetCycles+0x7c>
 800f6ee:	1b5d      	subs	r5, r3, r5
 800f6f0:	eb66 0606 	sbc.w	r6, r6, r6
 800f6f4:	fba4 4103 	umull	r4, r1, r4, r3
 800f6f8:	fb03 1107 	mla	r1, r3, r7, r1
 800f6fc:	1960      	adds	r0, r4, r5
 800f6fe:	eb41 0106 	adc.w	r1, r1, r6
 800f702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f706:	bf00      	nop
 800f708:	20005228 	.word	0x20005228
 800f70c:	200051a8 	.word	0x200051a8

0800f710 <OS__TIME_ConvertCycles2us>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	4d0b      	ldr	r5, [pc, #44]	; (800f740 <OS__TIME_ConvertCycles2us+0x30>)
 800f714:	68eb      	ldr	r3, [r5, #12]
 800f716:	4604      	mov	r4, r0
 800f718:	460e      	mov	r6, r1
 800f71a:	b913      	cbnz	r3, 800f722 <OS__TIME_ConvertCycles2us+0x12>
 800f71c:	20eb      	movs	r0, #235	; 0xeb
 800f71e:	f7ff fd59 	bl	800f1d4 <OS_Error>
 800f722:	692b      	ldr	r3, [r5, #16]
 800f724:	b913      	cbnz	r3, 800f72c <OS__TIME_ConvertCycles2us+0x1c>
 800f726:	20ec      	movs	r0, #236	; 0xec
 800f728:	f7ff fd54 	bl	800f1d4 <OS_Error>
 800f72c:	6a29      	ldr	r1, [r5, #32]
 800f72e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800f730:	fba1 0404 	umull	r0, r4, r1, r4
 800f734:	2300      	movs	r3, #0
 800f736:	fb01 4106 	mla	r1, r1, r6, r4
 800f73a:	f7f1 f96d 	bl	8000a18 <__aeabi_uldivmod>
 800f73e:	bd70      	pop	{r4, r5, r6, pc}
 800f740:	20005228 	.word	0x20005228

0800f744 <OS_TIME_Get_us64>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	4e10      	ldr	r6, [pc, #64]	; (800f788 <OS_TIME_Get_us64+0x44>)
 800f748:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f74a:	b113      	cbz	r3, 800f752 <OS_TIME_Get_us64+0xe>
 800f74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74e:	20d6      	movs	r0, #214	; 0xd6
 800f750:	4798      	blx	r3
 800f752:	f7ff fef1 	bl	800f538 <OS_GetCPUState>
 800f756:	2801      	cmp	r0, #1
 800f758:	d105      	bne.n	800f766 <OS_TIME_Get_us64+0x22>
 800f75a:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
 800f75e:	b913      	cbnz	r3, 800f766 <OS_TIME_Get_us64+0x22>
 800f760:	20a4      	movs	r0, #164	; 0xa4
 800f762:	f7ff fd37 	bl	800f1d4 <OS_Error>
 800f766:	f000 fc39 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f76a:	f7ff ff85 	bl	800f678 <OS__TIME_GetCycles>
 800f76e:	f7ff ffcf 	bl	800f710 <OS__TIME_ConvertCycles2us>
 800f772:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f774:	4604      	mov	r4, r0
 800f776:	460d      	mov	r5, r1
 800f778:	b11b      	cbz	r3, 800f782 <OS_TIME_Get_us64+0x3e>
 800f77a:	4601      	mov	r1, r0
 800f77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f77e:	20d6      	movs	r0, #214	; 0xd6
 800f780:	4798      	blx	r3
 800f782:	4620      	mov	r0, r4
 800f784:	4629      	mov	r1, r5
 800f786:	bd70      	pop	{r4, r5, r6, pc}
 800f788:	200051a8 	.word	0x200051a8

0800f78c <OS_TIME_GetTicks>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	f7ff fed3 	bl	800f538 <OS_GetCPUState>
 800f792:	2801      	cmp	r0, #1
 800f794:	4c05      	ldr	r4, [pc, #20]	; (800f7ac <OS_TIME_GetTicks+0x20>)
 800f796:	d105      	bne.n	800f7a4 <OS_TIME_GetTicks+0x18>
 800f798:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f79c:	b913      	cbnz	r3, 800f7a4 <OS_TIME_GetTicks+0x18>
 800f79e:	20a4      	movs	r0, #164	; 0xa4
 800f7a0:	f7ff fd18 	bl	800f1d4 <OS_Error>
 800f7a4:	f000 fc1a 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f7a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f7aa:	bd10      	pop	{r4, pc}
 800f7ac:	200051a8 	.word	0x200051a8

0800f7b0 <OS_TIME_GetTicks32>:
 800f7b0:	f7ff bfec 	b.w	800f78c <OS_TIME_GetTicks>

0800f7b4 <OS_TASKEVENT_GetSingleBlocked>:
 800f7b4:	b570      	push	{r4, r5, r6, lr}
 800f7b6:	4c2d      	ldr	r4, [pc, #180]	; (800f86c <OS_TASKEVENT_GetSingleBlocked+0xb8>)
 800f7b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	b11b      	cbz	r3, 800f7c6 <OS_TASKEVENT_GetSingleBlocked+0x12>
 800f7be:	4601      	mov	r1, r0
 800f7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c2:	20a6      	movs	r0, #166	; 0xa6
 800f7c4:	4798      	blx	r3
 800f7c6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d006      	beq.n	800f7dc <OS_TASKEVENT_GetSingleBlocked+0x28>
 800f7ce:	b913      	cbnz	r3, 800f7d6 <OS_TASKEVENT_GetSingleBlocked+0x22>
 800f7d0:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f7d4:	b913      	cbnz	r3, 800f7dc <OS_TASKEVENT_GetSingleBlocked+0x28>
 800f7d6:	20e2      	movs	r0, #226	; 0xe2
 800f7d8:	f7ff fcfc 	bl	800f1d4 <OS_Error>
 800f7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7de:	b12b      	cbz	r3, 800f7ec <OS_TASKEVENT_GetSingleBlocked+0x38>
 800f7e0:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800f7e4:	b913      	cbnz	r3, 800f7ec <OS_TASKEVENT_GetSingleBlocked+0x38>
 800f7e6:	20a1      	movs	r0, #161	; 0xa1
 800f7e8:	f7ff fcf4 	bl	800f1d4 <OS_Error>
 800f7ec:	f7ff fea4 	bl	800f538 <OS_GetCPUState>
 800f7f0:	2801      	cmp	r0, #1
 800f7f2:	d102      	bne.n	800f7fa <OS_TASKEVENT_GetSingleBlocked+0x46>
 800f7f4:	20a0      	movs	r0, #160	; 0xa0
 800f7f6:	f7ff fced 	bl	800f1d4 <OS_Error>
 800f7fa:	f000 fbef 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f7fe:	2380      	movs	r3, #128	; 0x80
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	68a0      	ldr	r0, [r4, #8]
 800f806:	6983      	ldr	r3, [r0, #24]
 800f808:	422b      	tst	r3, r5
 800f80a:	d113      	bne.n	800f834 <OS_TASKEVENT_GetSingleBlocked+0x80>
 800f80c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f80e:	61c5      	str	r5, [r0, #28]
 800f810:	2108      	movs	r1, #8
 800f812:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 800f816:	b10b      	cbz	r3, 800f81c <OS_TASKEVENT_GetSingleBlocked+0x68>
 800f818:	6a1b      	ldr	r3, [r3, #32]
 800f81a:	4798      	blx	r3
 800f81c:	7823      	ldrb	r3, [r4, #0]
 800f81e:	4813      	ldr	r0, [pc, #76]	; (800f86c <OS_TASKEVENT_GetSingleBlocked+0xb8>)
 800f820:	b2de      	uxtb	r6, r3
 800f822:	3301      	adds	r3, #1
 800f824:	b2db      	uxtb	r3, r3
 800f826:	7023      	strb	r3, [r4, #0]
 800f828:	f7f0 fdba 	bl	80003a0 <OS_Switch>
 800f82c:	7026      	strb	r6, [r4, #0]
 800f82e:	2380      	movs	r3, #128	; 0x80
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	68a3      	ldr	r3, [r4, #8]
 800f836:	699e      	ldr	r6, [r3, #24]
 800f838:	699a      	ldr	r2, [r3, #24]
 800f83a:	ea22 0205 	bic.w	r2, r2, r5
 800f83e:	619a      	str	r2, [r3, #24]
 800f840:	7863      	ldrb	r3, [r4, #1]
 800f842:	2b0f      	cmp	r3, #15
 800f844:	ea06 0605 	and.w	r6, r6, r5
 800f848:	d902      	bls.n	800f850 <OS_TASKEVENT_GetSingleBlocked+0x9c>
 800f84a:	2099      	movs	r0, #153	; 0x99
 800f84c:	f7ff fcc2 	bl	800f1d4 <OS_Error>
 800f850:	7863      	ldrb	r3, [r4, #1]
 800f852:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f856:	b90b      	cbnz	r3, 800f85c <OS_TASKEVENT_GetSingleBlocked+0xa8>
 800f858:	f382 8811 	msr	BASEPRI, r2
 800f85c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f85e:	b11b      	cbz	r3, 800f868 <OS_TASKEVENT_GetSingleBlocked+0xb4>
 800f860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f862:	4631      	mov	r1, r6
 800f864:	20a6      	movs	r0, #166	; 0xa6
 800f866:	4798      	blx	r3
 800f868:	4630      	mov	r0, r6
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	200051a8 	.word	0x200051a8

0800f870 <OS_TASKEVENT_Set>:
 800f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f874:	4d26      	ldr	r5, [pc, #152]	; (800f910 <OS_TASKEVENT_Set+0xa0>)
 800f876:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f878:	4604      	mov	r4, r0
 800f87a:	460e      	mov	r6, r1
 800f87c:	b133      	cbz	r3, 800f88c <OS_TASKEVENT_Set+0x1c>
 800f87e:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800f880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f882:	4798      	blx	r3
 800f884:	4632      	mov	r2, r6
 800f886:	4601      	mov	r1, r0
 800f888:	2036      	movs	r0, #54	; 0x36
 800f88a:	47b8      	blx	r7
 800f88c:	f7ff fe54 	bl	800f538 <OS_GetCPUState>
 800f890:	2801      	cmp	r0, #1
 800f892:	d105      	bne.n	800f8a0 <OS_TASKEVENT_Set+0x30>
 800f894:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800f898:	b913      	cbnz	r3, 800f8a0 <OS_TASKEVENT_Set+0x30>
 800f89a:	20a4      	movs	r0, #164	; 0xa4
 800f89c:	f7ff fc9a 	bl	800f1d4 <OS_Error>
 800f8a0:	f000 fb9c 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f8a4:	b914      	cbnz	r4, 800f8ac <OS_TASKEVENT_Set+0x3c>
 800f8a6:	2080      	movs	r0, #128	; 0x80
 800f8a8:	f7ff fc94 	bl	800f1d4 <OS_Error>
 800f8ac:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f8b0:	2b0f      	cmp	r3, #15
 800f8b2:	d002      	beq.n	800f8ba <OS_TASKEVENT_Set+0x4a>
 800f8b4:	2080      	movs	r0, #128	; 0x80
 800f8b6:	f7ff fc8d 	bl	800f1d4 <OS_Error>
 800f8ba:	2380      	movs	r3, #128	; 0x80
 800f8bc:	f383 8811 	msr	BASEPRI, r3
 800f8c0:	69a3      	ldr	r3, [r4, #24]
 800f8c2:	4333      	orrs	r3, r6
 800f8c4:	61a3      	str	r3, [r4, #24]
 800f8c6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800f8ca:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800f8ce:	2b08      	cmp	r3, #8
 800f8d0:	d108      	bne.n	800f8e4 <OS_TASKEVENT_Set+0x74>
 800f8d2:	69a2      	ldr	r2, [r4, #24]
 800f8d4:	69e3      	ldr	r3, [r4, #28]
 800f8d6:	421a      	tst	r2, r3
 800f8d8:	d004      	beq.n	800f8e4 <OS_TASKEVENT_Set+0x74>
 800f8da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f8dc:	60e3      	str	r3, [r4, #12]
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f000 fc1c 	bl	801011c <OS_MakeTaskReady>
 800f8e4:	786b      	ldrb	r3, [r5, #1]
 800f8e6:	2b0f      	cmp	r3, #15
 800f8e8:	d902      	bls.n	800f8f0 <OS_TASKEVENT_Set+0x80>
 800f8ea:	2099      	movs	r0, #153	; 0x99
 800f8ec:	f7ff fc72 	bl	800f1d4 <OS_Error>
 800f8f0:	786b      	ldrb	r3, [r5, #1]
 800f8f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f8f6:	b90b      	cbnz	r3, 800f8fc <OS_TASKEVENT_Set+0x8c>
 800f8f8:	f382 8811 	msr	BASEPRI, r2
 800f8fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f8fe:	b123      	cbz	r3, 800f90a <OS_TASKEVENT_Set+0x9a>
 800f900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f906:	2036      	movs	r0, #54	; 0x36
 800f908:	4718      	bx	r3
 800f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90e:	bf00      	nop
 800f910:	200051a8 	.word	0x200051a8

0800f914 <_DelayUntil>:
 800f914:	b510      	push	{r4, lr}
 800f916:	4b0e      	ldr	r3, [pc, #56]	; (800f950 <_DelayUntil+0x3c>)
 800f918:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f91c:	4604      	mov	r4, r0
 800f91e:	b952      	cbnz	r2, 800f936 <_DelayUntil+0x22>
 800f920:	785b      	ldrb	r3, [r3, #1]
 800f922:	b113      	cbz	r3, 800f92a <_DelayUntil+0x16>
 800f924:	209a      	movs	r0, #154	; 0x9a
 800f926:	f7ff fc55 	bl	800f1d4 <OS_Error>
 800f92a:	f7ff ff2f 	bl	800f78c <OS_TIME_GetTicks>
 800f92e:	1b00      	subs	r0, r0, r4
 800f930:	2800      	cmp	r0, #0
 800f932:	dbfa      	blt.n	800f92a <_DelayUntil+0x16>
 800f934:	bd10      	pop	{r4, pc}
 800f936:	2280      	movs	r2, #128	; 0x80
 800f938:	f382 8811 	msr	BASEPRI, r2
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	2204      	movs	r2, #4
 800f940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800f944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f948:	60d8      	str	r0, [r3, #12]
 800f94a:	f000 bb5b 	b.w	8010004 <OS_Deactivated>
 800f94e:	bf00      	nop
 800f950:	200051a8 	.word	0x200051a8

0800f954 <OS_TASK_Create_DP>:
 800f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f958:	4d54      	ldr	r5, [pc, #336]	; (800faac <OS_TASK_Create_DP+0x158>)
 800f95a:	b085      	sub	sp, #20
 800f95c:	461f      	mov	r7, r3
 800f95e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f960:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800f964:	9103      	str	r1, [sp, #12]
 800f966:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 800f96a:	4604      	mov	r4, r0
 800f96c:	4691      	mov	r9, r2
 800f96e:	b14b      	cbz	r3, 800f984 <OS_TASK_Create_DP+0x30>
 800f970:	e9d3 b30e 	ldrd	fp, r3, [r3, #56]	; 0x38
 800f974:	4798      	blx	r3
 800f976:	f8cd 8000 	str.w	r8, [sp]
 800f97a:	4601      	mov	r1, r0
 800f97c:	4633      	mov	r3, r6
 800f97e:	464a      	mov	r2, r9
 800f980:	202e      	movs	r0, #46	; 0x2e
 800f982:	47d8      	blx	fp
 800f984:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f988:	b913      	cbnz	r3, 800f990 <OS_TASK_Create_DP+0x3c>
 800f98a:	20a5      	movs	r0, #165	; 0xa5
 800f98c:	f7ff fc22 	bl	800f1d4 <OS_Error>
 800f990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f992:	b12b      	cbz	r3, 800f9a0 <OS_TASK_Create_DP+0x4c>
 800f994:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800f998:	b913      	cbnz	r3, 800f9a0 <OS_TASK_Create_DP+0x4c>
 800f99a:	20a1      	movs	r0, #161	; 0xa1
 800f99c:	f7ff fc1a 	bl	800f1d4 <OS_Error>
 800f9a0:	f7ff fdca 	bl	800f538 <OS_GetCPUState>
 800f9a4:	2801      	cmp	r0, #1
 800f9a6:	d102      	bne.n	800f9ae <OS_TASK_Create_DP+0x5a>
 800f9a8:	20a0      	movs	r0, #160	; 0xa0
 800f9aa:	f7ff fc13 	bl	800f1d4 <OS_Error>
 800f9ae:	f000 fb15 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800f9b2:	2380      	movs	r3, #128	; 0x80
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800f9bc:	f1bb 0f00 	cmp.w	fp, #0
 800f9c0:	d169      	bne.n	800fa96 <OS_TASK_Create_DP+0x142>
 800f9c2:	786b      	ldrb	r3, [r5, #1]
 800f9c4:	2b0f      	cmp	r3, #15
 800f9c6:	d902      	bls.n	800f9ce <OS_TASK_Create_DP+0x7a>
 800f9c8:	2099      	movs	r0, #153	; 0x99
 800f9ca:	f7ff fc03 	bl	800f1d4 <OS_Error>
 800f9ce:	786b      	ldrb	r3, [r5, #1]
 800f9d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f9d4:	b90b      	cbnz	r3, 800f9da <OS_TASK_Create_DP+0x86>
 800f9d6:	f382 8811 	msr	BASEPRI, r2
 800f9da:	2254      	movs	r2, #84	; 0x54
 800f9dc:	2100      	movs	r1, #0
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f001 fb4e 	bl	8011080 <memset>
 800f9e4:	e9c4 9904 	strd	r9, r9, [r4, #16]
 800f9e8:	230f      	movs	r3, #15
 800f9ea:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800f9ee:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
 800f9f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800f9f6:	f1b8 0f57 	cmp.w	r8, #87	; 0x57
 800f9fa:	9b03      	ldr	r3, [sp, #12]
 800f9fc:	f884 a052 	strb.w	sl, [r4, #82]	; 0x52
 800fa00:	6263      	str	r3, [r4, #36]	; 0x24
 800fa02:	d802      	bhi.n	800fa0a <OS_TASK_Create_DP+0xb6>
 800fa04:	2078      	movs	r0, #120	; 0x78
 800fa06:	f7ff fbe5 	bl	800f1d4 <OS_Error>
 800fa0a:	e9c4 860a 	strd	r8, r6, [r4, #40]	; 0x28
 800fa0e:	4642      	mov	r2, r8
 800fa10:	21cd      	movs	r1, #205	; 0xcd
 800fa12:	4630      	mov	r0, r6
 800fa14:	f001 fb34 	bl	8011080 <memset>
 800fa18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fa1a:	b113      	cbz	r3, 800fa22 <OS_TASK_Create_DP+0xce>
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	4798      	blx	r3
 800fa22:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fa24:	b113      	cbz	r3, 800fa2c <OS_TASK_Create_DP+0xd8>
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	4620      	mov	r0, r4
 800fa2a:	4798      	blx	r3
 800fa2c:	4446      	add	r6, r8
 800fa2e:	f026 0607 	bic.w	r6, r6, #7
 800fa32:	f1a6 0358 	sub.w	r3, r6, #88	; 0x58
 800fa36:	2100      	movs	r1, #0
 800fa38:	f06f 0202 	mvn.w	r2, #2
 800fa3c:	f846 1c58 	str.w	r1, [r6, #-88]
 800fa40:	625a      	str	r2, [r3, #36]	; 0x24
 800fa42:	4a1b      	ldr	r2, [pc, #108]	; (800fab0 <OS_TASK_Create_DP+0x15c>)
 800fa44:	641a      	str	r2, [r3, #64]	; 0x40
 800fa46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa4a:	645a      	str	r2, [r3, #68]	; 0x44
 800fa4c:	4a19      	ldr	r2, [pc, #100]	; (800fab4 <OS_TASK_Create_DP+0x160>)
 800fa4e:	62da      	str	r2, [r3, #44]	; 0x2c
 800fa50:	3201      	adds	r2, #1
 800fa52:	631a      	str	r2, [r3, #48]	; 0x30
 800fa54:	3201      	adds	r2, #1
 800fa56:	635a      	str	r2, [r3, #52]	; 0x34
 800fa58:	3201      	adds	r2, #1
 800fa5a:	605a      	str	r2, [r3, #4]
 800fa5c:	3201      	adds	r2, #1
 800fa5e:	609a      	str	r2, [r3, #8]
 800fa60:	3201      	adds	r2, #1
 800fa62:	60da      	str	r2, [r3, #12]
 800fa64:	3201      	adds	r2, #1
 800fa66:	611a      	str	r2, [r3, #16]
 800fa68:	3201      	adds	r2, #1
 800fa6a:	615a      	str	r2, [r3, #20]
 800fa6c:	3201      	adds	r2, #1
 800fa6e:	619a      	str	r2, [r3, #24]
 800fa70:	3201      	adds	r2, #1
 800fa72:	64df      	str	r7, [r3, #76]	; 0x4c
 800fa74:	61da      	str	r2, [r3, #28]
 800fa76:	3702      	adds	r7, #2
 800fa78:	3201      	adds	r2, #1
 800fa7a:	651f      	str	r7, [r3, #80]	; 0x50
 800fa7c:	621a      	str	r2, [r3, #32]
 800fa7e:	4620      	mov	r0, r4
 800fa80:	6063      	str	r3, [r4, #4]
 800fa82:	f000 fbb7 	bl	80101f4 <OS_InsertTask>
 800fa86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fa88:	b16b      	cbz	r3, 800faa6 <OS_TASK_Create_DP+0x152>
 800fa8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa8c:	202e      	movs	r0, #46	; 0x2e
 800fa8e:	b005      	add	sp, #20
 800fa90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	4718      	bx	r3
 800fa96:	45a3      	cmp	fp, r4
 800fa98:	d102      	bne.n	800faa0 <OS_TASK_Create_DP+0x14c>
 800fa9a:	20aa      	movs	r0, #170	; 0xaa
 800fa9c:	f7ff fb9a 	bl	800f1d4 <OS_Error>
 800faa0:	f8db b000 	ldr.w	fp, [fp]
 800faa4:	e78a      	b.n	800f9bc <OS_TASK_Create_DP+0x68>
 800faa6:	b005      	add	sp, #20
 800faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faac:	200051a8 	.word	0x200051a8
 800fab0:	0800032f 	.word	0x0800032f
 800fab4:	cccc0001 	.word	0xcccc0001

0800fab8 <OS_TASK_Delay>:
 800fab8:	b570      	push	{r4, r5, r6, lr}
 800faba:	4d14      	ldr	r5, [pc, #80]	; (800fb0c <OS_TASK_Delay+0x54>)
 800fabc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fabe:	4604      	mov	r4, r0
 800fac0:	b11b      	cbz	r3, 800faca <OS_TASK_Delay+0x12>
 800fac2:	4601      	mov	r1, r0
 800fac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac6:	202a      	movs	r0, #42	; 0x2a
 800fac8:	4798      	blx	r3
 800faca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800facc:	b12b      	cbz	r3, 800fada <OS_TASK_Delay+0x22>
 800face:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800fad2:	b913      	cbnz	r3, 800fada <OS_TASK_Delay+0x22>
 800fad4:	20a1      	movs	r0, #161	; 0xa1
 800fad6:	f7ff fb7d 	bl	800f1d4 <OS_Error>
 800fada:	f7ff fd2d 	bl	800f538 <OS_GetCPUState>
 800fade:	2801      	cmp	r0, #1
 800fae0:	d102      	bne.n	800fae8 <OS_TASK_Delay+0x30>
 800fae2:	20a0      	movs	r0, #160	; 0xa0
 800fae4:	f7ff fb76 	bl	800f1d4 <OS_Error>
 800fae8:	f000 fa78 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800faec:	2c00      	cmp	r4, #0
 800faee:	dd04      	ble.n	800fafa <OS_TASK_Delay+0x42>
 800faf0:	f7ff fe4c 	bl	800f78c <OS_TIME_GetTicks>
 800faf4:	4420      	add	r0, r4
 800faf6:	f7ff ff0d 	bl	800f914 <_DelayUntil>
 800fafa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fafc:	b123      	cbz	r3, 800fb08 <OS_TASK_Delay+0x50>
 800fafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb04:	202a      	movs	r0, #42	; 0x2a
 800fb06:	4718      	bx	r3
 800fb08:	bd70      	pop	{r4, r5, r6, pc}
 800fb0a:	bf00      	nop
 800fb0c:	200051a8 	.word	0x200051a8

0800fb10 <OS_TASK_GetName>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	4d16      	ldr	r5, [pc, #88]	; (800fb6c <OS_TASK_GetName+0x5c>)
 800fb14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fb16:	4604      	mov	r4, r0
 800fb18:	b133      	cbz	r3, 800fb28 <OS_TASK_GetName+0x18>
 800fb1a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb1e:	4798      	blx	r3
 800fb20:	4601      	mov	r1, r0
 800fb22:	f240 1015 	movw	r0, #277	; 0x115
 800fb26:	47b0      	blx	r6
 800fb28:	f7ff fd06 	bl	800f538 <OS_GetCPUState>
 800fb2c:	2801      	cmp	r0, #1
 800fb2e:	d105      	bne.n	800fb3c <OS_TASK_GetName+0x2c>
 800fb30:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800fb34:	b913      	cbnz	r3, 800fb3c <OS_TASK_GetName+0x2c>
 800fb36:	20a4      	movs	r0, #164	; 0xa4
 800fb38:	f7ff fb4c 	bl	800f1d4 <OS_Error>
 800fb3c:	f000 fa4e 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800fb40:	b90c      	cbnz	r4, 800fb46 <OS_TASK_GetName+0x36>
 800fb42:	68ac      	ldr	r4, [r5, #8]
 800fb44:	b184      	cbz	r4, 800fb68 <OS_TASK_GetName+0x58>
 800fb46:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800fb4a:	2b0f      	cmp	r3, #15
 800fb4c:	d002      	beq.n	800fb54 <OS_TASK_GetName+0x44>
 800fb4e:	2080      	movs	r0, #128	; 0x80
 800fb50:	f7ff fb40 	bl	800f1d4 <OS_Error>
 800fb54:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800fb56:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fb58:	b123      	cbz	r3, 800fb64 <OS_TASK_GetName+0x54>
 800fb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb5c:	4621      	mov	r1, r4
 800fb5e:	f240 1015 	movw	r0, #277	; 0x115
 800fb62:	4798      	blx	r3
 800fb64:	4620      	mov	r0, r4
 800fb66:	bd70      	pop	{r4, r5, r6, pc}
 800fb68:	4c01      	ldr	r4, [pc, #4]	; (800fb70 <OS_TASK_GetName+0x60>)
 800fb6a:	e7f4      	b.n	800fb56 <OS_TASK_GetName+0x46>
 800fb6c:	200051a8 	.word	0x200051a8
 800fb70:	080141f4 	.word	0x080141f4

0800fb74 <OS_TASK_GetTimeSliceRem>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	4d19      	ldr	r5, [pc, #100]	; (800fbdc <OS_TASK_GetTimeSliceRem+0x68>)
 800fb78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	b133      	cbz	r3, 800fb8c <OS_TASK_GetTimeSliceRem+0x18>
 800fb7e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fb80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb82:	4798      	blx	r3
 800fb84:	4601      	mov	r1, r0
 800fb86:	f44f 708b 	mov.w	r0, #278	; 0x116
 800fb8a:	47b0      	blx	r6
 800fb8c:	f7ff fcd4 	bl	800f538 <OS_GetCPUState>
 800fb90:	2801      	cmp	r0, #1
 800fb92:	d105      	bne.n	800fba0 <OS_TASK_GetTimeSliceRem+0x2c>
 800fb94:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800fb98:	b913      	cbnz	r3, 800fba0 <OS_TASK_GetTimeSliceRem+0x2c>
 800fb9a:	20a4      	movs	r0, #164	; 0xa4
 800fb9c:	f7ff fb1a 	bl	800f1d4 <OS_Error>
 800fba0:	f000 fa1c 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800fba4:	b93c      	cbnz	r4, 800fbb6 <OS_TASK_GetTimeSliceRem+0x42>
 800fba6:	68ac      	ldr	r4, [r5, #8]
 800fba8:	b92c      	cbnz	r4, 800fbb6 <OS_TASK_GetTimeSliceRem+0x42>
 800fbaa:	2080      	movs	r0, #128	; 0x80
 800fbac:	f7ff fb12 	bl	800f1d4 <OS_Error>
 800fbb0:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800fbb4:	deff      	udf	#255	; 0xff
 800fbb6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800fbba:	2b0f      	cmp	r3, #15
 800fbbc:	d002      	beq.n	800fbc4 <OS_TASK_GetTimeSliceRem+0x50>
 800fbbe:	2080      	movs	r0, #128	; 0x80
 800fbc0:	f7ff fb08 	bl	800f1d4 <OS_Error>
 800fbc4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fbc6:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
 800fbca:	b123      	cbz	r3, 800fbd6 <OS_TASK_GetTimeSliceRem+0x62>
 800fbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbce:	4621      	mov	r1, r4
 800fbd0:	f44f 708b 	mov.w	r0, #278	; 0x116
 800fbd4:	4798      	blx	r3
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	bd70      	pop	{r4, r5, r6, pc}
 800fbda:	bf00      	nop
 800fbdc:	200051a8 	.word	0x200051a8

0800fbe0 <OS_TASK_LeaveRegion>:
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4c17      	ldr	r4, [pc, #92]	; (800fc40 <OS_TASK_LeaveRegion+0x60>)
 800fbe4:	7823      	ldrb	r3, [r4, #0]
 800fbe6:	b913      	cbnz	r3, 800fbee <OS_TASK_LeaveRegion+0xe>
 800fbe8:	2097      	movs	r0, #151	; 0x97
 800fbea:	f7ff faf3 	bl	800f1d4 <OS_Error>
 800fbee:	7823      	ldrb	r3, [r4, #0]
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	7023      	strb	r3, [r4, #0]
 800fbf6:	7823      	ldrb	r3, [r4, #0]
 800fbf8:	bb03      	cbnz	r3, 800fc3c <OS_TASK_LeaveRegion+0x5c>
 800fbfa:	6863      	ldr	r3, [r4, #4]
 800fbfc:	b1f3      	cbz	r3, 800fc3c <OS_TASK_LeaveRegion+0x5c>
 800fbfe:	2380      	movs	r3, #128	; 0x80
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	6863      	ldr	r3, [r4, #4]
 800fc06:	b16b      	cbz	r3, 800fc24 <OS_TASK_LeaveRegion+0x44>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	7023      	strb	r3, [r4, #0]
 800fc0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc0e:	b123      	cbz	r3, 800fc1a <OS_TASK_LeaveRegion+0x3a>
 800fc10:	68a0      	ldr	r0, [r4, #8]
 800fc12:	6a1b      	ldr	r3, [r3, #32]
 800fc14:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800fc18:	4798      	blx	r3
 800fc1a:	4809      	ldr	r0, [pc, #36]	; (800fc40 <OS_TASK_LeaveRegion+0x60>)
 800fc1c:	f7f0 fbc0 	bl	80003a0 <OS_Switch>
 800fc20:	2300      	movs	r3, #0
 800fc22:	7023      	strb	r3, [r4, #0]
 800fc24:	7863      	ldrb	r3, [r4, #1]
 800fc26:	2b0f      	cmp	r3, #15
 800fc28:	d902      	bls.n	800fc30 <OS_TASK_LeaveRegion+0x50>
 800fc2a:	2099      	movs	r0, #153	; 0x99
 800fc2c:	f7ff fad2 	bl	800f1d4 <OS_Error>
 800fc30:	7863      	ldrb	r3, [r4, #1]
 800fc32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fc36:	b90b      	cbnz	r3, 800fc3c <OS_TASK_LeaveRegion+0x5c>
 800fc38:	f382 8811 	msr	BASEPRI, r2
 800fc3c:	bd10      	pop	{r4, pc}
 800fc3e:	bf00      	nop
 800fc40:	200051a8 	.word	0x200051a8

0800fc44 <OS_TICK_Handle>:
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	4c2e      	ldr	r4, [pc, #184]	; (800fd00 <OS_TICK_Handle+0xbc>)
 800fc48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc4a:	b11b      	cbz	r3, 800fc54 <OS_TICK_Handle+0x10>
 800fc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc4e:	f44f 7091 	mov.w	r0, #290	; 0x122
 800fc52:	4798      	blx	r3
 800fc54:	f7ff fc70 	bl	800f538 <OS_GetCPUState>
 800fc58:	2801      	cmp	r0, #1
 800fc5a:	d002      	beq.n	800fc62 <OS_TICK_Handle+0x1e>
 800fc5c:	20a2      	movs	r0, #162	; 0xa2
 800fc5e:	f7ff fab9 	bl	800f1d4 <OS_Error>
 800fc62:	f7ff fc69 	bl	800f538 <OS_GetCPUState>
 800fc66:	2801      	cmp	r0, #1
 800fc68:	d105      	bne.n	800fc76 <OS_TICK_Handle+0x32>
 800fc6a:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800fc6e:	b913      	cbnz	r3, 800fc76 <OS_TICK_Handle+0x32>
 800fc70:	20a4      	movs	r0, #164	; 0xa4
 800fc72:	f7ff faaf 	bl	800f1d4 <OS_Error>
 800fc76:	f000 f9b1 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800fc7a:	4b22      	ldr	r3, [pc, #136]	; (800fd04 <OS_TICK_Handle+0xc0>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d003      	beq.n	800fc8a <OS_TICK_Handle+0x46>
 800fc82:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fc86:	f7ff faa5 	bl	800f1d4 <OS_Error>
 800fc8a:	4b1f      	ldr	r3, [pc, #124]	; (800fd08 <OS_TICK_Handle+0xc4>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d003      	beq.n	800fc9a <OS_TICK_Handle+0x56>
 800fc92:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fc96:	f7ff fa9d 	bl	800f1d4 <OS_Error>
 800fc9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc9c:	b16b      	cbz	r3, 800fcba <OS_TICK_Handle+0x76>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800fca4:	7163      	strb	r3, [r4, #5]
 800fca6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800fca8:	bb25      	cbnz	r5, 800fcf4 <OS_TICK_Handle+0xb0>
 800fcaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fcac:	b333      	cbz	r3, 800fcfc <OS_TICK_Handle+0xb8>
 800fcae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcb4:	f44f 7091 	mov.w	r0, #290	; 0x122
 800fcb8:	4718      	bx	r3
 800fcba:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800fcbe:	3201      	adds	r2, #1
 800fcc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fcc2:	f141 0100 	adc.w	r1, r1, #0
 800fcc6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800fcca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fccc:	3301      	adds	r3, #1
 800fcce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcd0:	1a9b      	subs	r3, r3, r2
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	bfa4      	itt	ge
 800fcd6:	2301      	movge	r3, #1
 800fcd8:	7163      	strbge	r3, [r4, #5]
 800fcda:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d0e1      	beq.n	800fca6 <OS_TICK_Handle+0x62>
 800fce2:	3b01      	subs	r3, #1
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1db      	bne.n	800fca6 <OS_TICK_Handle+0x62>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	7123      	strb	r3, [r4, #4]
 800fcf2:	e7d8      	b.n	800fca6 <OS_TICK_Handle+0x62>
 800fcf4:	686b      	ldr	r3, [r5, #4]
 800fcf6:	4798      	blx	r3
 800fcf8:	682d      	ldr	r5, [r5, #0]
 800fcfa:	e7d5      	b.n	800fca8 <OS_TICK_Handle+0x64>
 800fcfc:	bd70      	pop	{r4, r5, r6, pc}
 800fcfe:	bf00      	nop
 800fd00:	200051a8 	.word	0x200051a8
 800fd04:	2000001c 	.word	0x2000001c
 800fd08:	20000018 	.word	0x20000018

0800fd0c <_HandlePriorityInheritance>:
 800fd0c:	6842      	ldr	r2, [r0, #4]
 800fd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd10:	4604      	mov	r4, r0
 800fd12:	b32a      	cbz	r2, 800fd60 <_HandlePriorityInheritance+0x54>
 800fd14:	e9d2 1504 	ldrd	r1, r5, [r2, #16]
 800fd18:	42a9      	cmp	r1, r5
 800fd1a:	d021      	beq.n	800fd60 <_HandlePriorityInheritance+0x54>
 800fd1c:	4e1a      	ldr	r6, [pc, #104]	; (800fd88 <_HandlePriorityInheritance+0x7c>)
 800fd1e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fd20:	2700      	movs	r7, #0
 800fd22:	b9f3      	cbnz	r3, 800fd62 <_HandlePriorityInheritance+0x56>
 800fd24:	42a9      	cmp	r1, r5
 800fd26:	d01b      	beq.n	800fd60 <_HandlePriorityInheritance+0x54>
 800fd28:	2380      	movs	r3, #128	; 0x80
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	6860      	ldr	r0, [r4, #4]
 800fd30:	f000 facd 	bl	80102ce <OS_UnlinkTask>
 800fd34:	6860      	ldr	r0, [r4, #4]
 800fd36:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800fd38:	6105      	str	r5, [r0, #16]
 800fd3a:	b10b      	cbz	r3, 800fd40 <_HandlePriorityInheritance+0x34>
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	4798      	blx	r3
 800fd40:	6860      	ldr	r0, [r4, #4]
 800fd42:	4639      	mov	r1, r7
 800fd44:	f000 fa56 	bl	80101f4 <OS_InsertTask>
 800fd48:	7873      	ldrb	r3, [r6, #1]
 800fd4a:	2b0f      	cmp	r3, #15
 800fd4c:	d902      	bls.n	800fd54 <_HandlePriorityInheritance+0x48>
 800fd4e:	2099      	movs	r0, #153	; 0x99
 800fd50:	f7ff fa40 	bl	800f1d4 <OS_Error>
 800fd54:	7873      	ldrb	r3, [r6, #1]
 800fd56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fd5a:	b90b      	cbnz	r3, 800fd60 <_HandlePriorityInheritance+0x54>
 800fd5c:	f382 8811 	msr	BASEPRI, r2
 800fd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd62:	42a3      	cmp	r3, r4
 800fd64:	d004      	beq.n	800fd70 <_HandlePriorityInheritance+0x64>
 800fd66:	6858      	ldr	r0, [r3, #4]
 800fd68:	4282      	cmp	r2, r0
 800fd6a:	d101      	bne.n	800fd70 <_HandlePriorityInheritance+0x64>
 800fd6c:	6818      	ldr	r0, [r3, #0]
 800fd6e:	b908      	cbnz	r0, 800fd74 <_HandlePriorityInheritance+0x68>
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	e7d6      	b.n	800fd22 <_HandlePriorityInheritance+0x16>
 800fd74:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800fd78:	6800      	ldr	r0, [r0, #0]
 800fd7a:	f8dc e010 	ldr.w	lr, [ip, #16]
 800fd7e:	45ae      	cmp	lr, r5
 800fd80:	bf84      	itt	hi
 800fd82:	4675      	movhi	r5, lr
 800fd84:	4667      	movhi	r7, ip
 800fd86:	e7f2      	b.n	800fd6e <_HandlePriorityInheritance+0x62>
 800fd88:	200051a8 	.word	0x200051a8

0800fd8c <_OS_Mutex_OnTerminate>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	4e0f      	ldr	r6, [pc, #60]	; (800fdcc <_OS_Mutex_OnTerminate+0x40>)
 800fd90:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800fd92:	4605      	mov	r5, r0
 800fd94:	2700      	movs	r7, #0
 800fd96:	b92c      	cbnz	r4, 800fda4 <_OS_Mutex_OnTerminate+0x18>
 800fd98:	68ab      	ldr	r3, [r5, #8]
 800fd9a:	b113      	cbz	r3, 800fda2 <_OS_Mutex_OnTerminate+0x16>
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800fda0:	b958      	cbnz	r0, 800fdba <_OS_Mutex_OnTerminate+0x2e>
 800fda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda4:	7b23      	ldrb	r3, [r4, #12]
 800fda6:	b133      	cbz	r3, 800fdb6 <_OS_Mutex_OnTerminate+0x2a>
 800fda8:	6863      	ldr	r3, [r4, #4]
 800fdaa:	42ab      	cmp	r3, r5
 800fdac:	d103      	bne.n	800fdb6 <_OS_Mutex_OnTerminate+0x2a>
 800fdae:	7327      	strb	r7, [r4, #12]
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 f9ff 	bl	80101b4 <OS_ClearWaitObj>
 800fdb6:	68a4      	ldr	r4, [r4, #8]
 800fdb8:	e7ed      	b.n	800fd96 <_OS_Mutex_OnTerminate+0xa>
 800fdba:	4298      	cmp	r0, r3
 800fdbc:	d103      	bne.n	800fdc6 <_OS_Mutex_OnTerminate+0x3a>
 800fdbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fdc2:	f7ff bfa3 	b.w	800fd0c <_HandlePriorityInheritance>
 800fdc6:	6880      	ldr	r0, [r0, #8]
 800fdc8:	e7ea      	b.n	800fda0 <_OS_Mutex_OnTerminate+0x14>
 800fdca:	bf00      	nop
 800fdcc:	200051a8 	.word	0x200051a8

0800fdd0 <OS_MUTEX_Create>:
 800fdd0:	b570      	push	{r4, r5, r6, lr}
 800fdd2:	4c29      	ldr	r4, [pc, #164]	; (800fe78 <OS_MUTEX_Create+0xa8>)
 800fdd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fdd6:	4605      	mov	r5, r0
 800fdd8:	b12b      	cbz	r3, 800fde6 <OS_MUTEX_Create+0x16>
 800fdda:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdde:	4798      	blx	r3
 800fde0:	4601      	mov	r1, r0
 800fde2:	2052      	movs	r0, #82	; 0x52
 800fde4:	47b0      	blx	r6
 800fde6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde8:	b12b      	cbz	r3, 800fdf6 <OS_MUTEX_Create+0x26>
 800fdea:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800fdee:	b913      	cbnz	r3, 800fdf6 <OS_MUTEX_Create+0x26>
 800fdf0:	20a1      	movs	r0, #161	; 0xa1
 800fdf2:	f7ff f9ef 	bl	800f1d4 <OS_Error>
 800fdf6:	f7ff fb9f 	bl	800f538 <OS_GetCPUState>
 800fdfa:	2801      	cmp	r0, #1
 800fdfc:	d102      	bne.n	800fe04 <OS_MUTEX_Create+0x34>
 800fdfe:	20a0      	movs	r0, #160	; 0xa0
 800fe00:	f7ff f9e8 	bl	800f1d4 <OS_Error>
 800fe04:	f000 f8ea 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800fe08:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 800fe0c:	b913      	cbnz	r3, 800fe14 <OS_MUTEX_Create+0x44>
 800fe0e:	20a5      	movs	r0, #165	; 0xa5
 800fe10:	f7ff f9e0 	bl	800f1d4 <OS_Error>
 800fe14:	2380      	movs	r3, #128	; 0x80
 800fe16:	f383 8811 	msr	BASEPRI, r3
 800fe1a:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800fe1c:	bb1e      	cbnz	r6, 800fe66 <OS_MUTEX_Create+0x96>
 800fe1e:	7863      	ldrb	r3, [r4, #1]
 800fe20:	2b0f      	cmp	r3, #15
 800fe22:	d902      	bls.n	800fe2a <OS_MUTEX_Create+0x5a>
 800fe24:	2099      	movs	r0, #153	; 0x99
 800fe26:	f7ff f9d5 	bl	800f1d4 <OS_Error>
 800fe2a:	7863      	ldrb	r3, [r4, #1]
 800fe2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fe30:	b90b      	cbnz	r3, 800fe36 <OS_MUTEX_Create+0x66>
 800fe32:	f382 8811 	msr	BASEPRI, r2
 800fe36:	4b11      	ldr	r3, [pc, #68]	; (800fe7c <OS_MUTEX_Create+0xac>)
 800fe38:	4a11      	ldr	r2, [pc, #68]	; (800fe80 <OS_MUTEX_Create+0xb0>)
 800fe3a:	601a      	str	r2, [r3, #0]
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	2210      	movs	r2, #16
 800fe40:	4628      	mov	r0, r5
 800fe42:	f001 f91d 	bl	8011080 <memset>
 800fe46:	2366      	movs	r3, #102	; 0x66
 800fe48:	736b      	strb	r3, [r5, #13]
 800fe4a:	f000 f94d 	bl	80100e8 <OS_EnterRegionFunc>
 800fe4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe50:	60ab      	str	r3, [r5, #8]
 800fe52:	6425      	str	r5, [r4, #64]	; 0x40
 800fe54:	f7ff fec4 	bl	800fbe0 <OS_TASK_LeaveRegion>
 800fe58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe5a:	b15b      	cbz	r3, 800fe74 <OS_MUTEX_Create+0xa4>
 800fe5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe62:	2052      	movs	r0, #82	; 0x52
 800fe64:	4718      	bx	r3
 800fe66:	42ae      	cmp	r6, r5
 800fe68:	d102      	bne.n	800fe70 <OS_MUTEX_Create+0xa0>
 800fe6a:	20af      	movs	r0, #175	; 0xaf
 800fe6c:	f7ff f9b2 	bl	800f1d4 <OS_Error>
 800fe70:	68b6      	ldr	r6, [r6, #8]
 800fe72:	e7d3      	b.n	800fe1c <OS_MUTEX_Create+0x4c>
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
 800fe76:	bf00      	nop
 800fe78:	200051a8 	.word	0x200051a8
 800fe7c:	200051a0 	.word	0x200051a0
 800fe80:	0800fd8d 	.word	0x0800fd8d

0800fe84 <OS_MUTEX_LockBlocked>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	4d25      	ldr	r5, [pc, #148]	; (800ff1c <OS_MUTEX_LockBlocked+0x98>)
 800fe88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	b12b      	cbz	r3, 800fe9a <OS_MUTEX_LockBlocked+0x16>
 800fe8e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fe90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe92:	4798      	blx	r3
 800fe94:	4601      	mov	r1, r0
 800fe96:	2053      	movs	r0, #83	; 0x53
 800fe98:	47b0      	blx	r6
 800fe9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe9c:	b12b      	cbz	r3, 800feaa <OS_MUTEX_LockBlocked+0x26>
 800fe9e:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800fea2:	b913      	cbnz	r3, 800feaa <OS_MUTEX_LockBlocked+0x26>
 800fea4:	20a1      	movs	r0, #161	; 0xa1
 800fea6:	f7ff f995 	bl	800f1d4 <OS_Error>
 800feaa:	f7ff fb45 	bl	800f538 <OS_GetCPUState>
 800feae:	2801      	cmp	r0, #1
 800feb0:	d102      	bne.n	800feb8 <OS_MUTEX_LockBlocked+0x34>
 800feb2:	20a0      	movs	r0, #160	; 0xa0
 800feb4:	f7ff f98e 	bl	800f1d4 <OS_Error>
 800feb8:	f000 f890 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800febc:	7b63      	ldrb	r3, [r4, #13]
 800febe:	2b66      	cmp	r3, #102	; 0x66
 800fec0:	d002      	beq.n	800fec8 <OS_MUTEX_LockBlocked+0x44>
 800fec2:	2085      	movs	r0, #133	; 0x85
 800fec4:	f7ff f986 	bl	800f1d4 <OS_Error>
 800fec8:	f000 f90e 	bl	80100e8 <OS_EnterRegionFunc>
 800fecc:	7b23      	ldrb	r3, [r4, #12]
 800fece:	b973      	cbnz	r3, 800feee <OS_MUTEX_LockBlocked+0x6a>
 800fed0:	68ab      	ldr	r3, [r5, #8]
 800fed2:	6063      	str	r3, [r4, #4]
 800fed4:	2601      	movs	r6, #1
 800fed6:	b2f3      	uxtb	r3, r6
 800fed8:	7323      	strb	r3, [r4, #12]
 800feda:	f7ff fe81 	bl	800fbe0 <OS_TASK_LeaveRegion>
 800fede:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fee0:	b11b      	cbz	r3, 800feea <OS_MUTEX_LockBlocked+0x66>
 800fee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fee4:	4631      	mov	r1, r6
 800fee6:	2053      	movs	r0, #83	; 0x53
 800fee8:	4798      	blx	r3
 800feea:	4630      	mov	r0, r6
 800feec:	bd70      	pop	{r4, r5, r6, pc}
 800feee:	6862      	ldr	r2, [r4, #4]
 800fef0:	68ab      	ldr	r3, [r5, #8]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d008      	beq.n	800ff08 <OS_MUTEX_LockBlocked+0x84>
 800fef6:	2110      	movs	r1, #16
 800fef8:	4620      	mov	r0, r4
 800fefa:	f000 f8a5 	bl	8010048 <OS_DeactivateP>
 800fefe:	7b23      	ldrb	r3, [r4, #12]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1f8      	bne.n	800fef6 <OS_MUTEX_LockBlocked+0x72>
 800ff04:	68ab      	ldr	r3, [r5, #8]
 800ff06:	6063      	str	r3, [r4, #4]
 800ff08:	7b23      	ldrb	r3, [r4, #12]
 800ff0a:	2bff      	cmp	r3, #255	; 0xff
 800ff0c:	d102      	bne.n	800ff14 <OS_MUTEX_LockBlocked+0x90>
 800ff0e:	209f      	movs	r0, #159	; 0x9f
 800ff10:	f7ff f960 	bl	800f1d4 <OS_Error>
 800ff14:	7b26      	ldrb	r6, [r4, #12]
 800ff16:	3601      	adds	r6, #1
 800ff18:	e7dd      	b.n	800fed6 <OS_MUTEX_LockBlocked+0x52>
 800ff1a:	bf00      	nop
 800ff1c:	200051a8 	.word	0x200051a8

0800ff20 <OS_MUTEX_Unlock>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	4d22      	ldr	r5, [pc, #136]	; (800ffac <OS_MUTEX_Unlock+0x8c>)
 800ff24:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ff26:	4604      	mov	r4, r0
 800ff28:	b12b      	cbz	r3, 800ff36 <OS_MUTEX_Unlock+0x16>
 800ff2a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800ff2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff2e:	4798      	blx	r3
 800ff30:	4601      	mov	r1, r0
 800ff32:	2054      	movs	r0, #84	; 0x54
 800ff34:	47b0      	blx	r6
 800ff36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff38:	b12b      	cbz	r3, 800ff46 <OS_MUTEX_Unlock+0x26>
 800ff3a:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 800ff3e:	b913      	cbnz	r3, 800ff46 <OS_MUTEX_Unlock+0x26>
 800ff40:	20a1      	movs	r0, #161	; 0xa1
 800ff42:	f7ff f947 	bl	800f1d4 <OS_Error>
 800ff46:	f7ff faf7 	bl	800f538 <OS_GetCPUState>
 800ff4a:	2801      	cmp	r0, #1
 800ff4c:	d102      	bne.n	800ff54 <OS_MUTEX_Unlock+0x34>
 800ff4e:	20a0      	movs	r0, #160	; 0xa0
 800ff50:	f7ff f940 	bl	800f1d4 <OS_Error>
 800ff54:	f000 f842 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 800ff58:	7b63      	ldrb	r3, [r4, #13]
 800ff5a:	2b66      	cmp	r3, #102	; 0x66
 800ff5c:	d002      	beq.n	800ff64 <OS_MUTEX_Unlock+0x44>
 800ff5e:	2085      	movs	r0, #133	; 0x85
 800ff60:	f7ff f938 	bl	800f1d4 <OS_Error>
 800ff64:	7b23      	ldrb	r3, [r4, #12]
 800ff66:	b913      	cbnz	r3, 800ff6e <OS_MUTEX_Unlock+0x4e>
 800ff68:	2096      	movs	r0, #150	; 0x96
 800ff6a:	f7ff f933 	bl	800f1d4 <OS_Error>
 800ff6e:	6862      	ldr	r2, [r4, #4]
 800ff70:	68ab      	ldr	r3, [r5, #8]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d002      	beq.n	800ff7c <OS_MUTEX_Unlock+0x5c>
 800ff76:	209c      	movs	r0, #156	; 0x9c
 800ff78:	f7ff f92c 	bl	800f1d4 <OS_Error>
 800ff7c:	f000 f8b4 	bl	80100e8 <OS_EnterRegionFunc>
 800ff80:	7b23      	ldrb	r3, [r4, #12]
 800ff82:	3b01      	subs	r3, #1
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	7323      	strb	r3, [r4, #12]
 800ff88:	7b23      	ldrb	r3, [r4, #12]
 800ff8a:	b92b      	cbnz	r3, 800ff98 <OS_MUTEX_Unlock+0x78>
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7ff febd 	bl	800fd0c <_HandlePriorityInheritance>
 800ff92:	4620      	mov	r0, r4
 800ff94:	f000 f90e 	bl	80101b4 <OS_ClearWaitObj>
 800ff98:	f7ff fe22 	bl	800fbe0 <OS_TASK_LeaveRegion>
 800ff9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ff9e:	b123      	cbz	r3, 800ffaa <OS_MUTEX_Unlock+0x8a>
 800ffa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffa6:	2054      	movs	r0, #84	; 0x54
 800ffa8:	4718      	bx	r3
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}
 800ffac:	200051a8 	.word	0x200051a8

0800ffb0 <OS_AssertCPUInISRMode>:
 800ffb0:	b508      	push	{r3, lr}
 800ffb2:	f7ff fac1 	bl	800f538 <OS_GetCPUState>
 800ffb6:	2804      	cmp	r0, #4
 800ffb8:	d80d      	bhi.n	800ffd6 <OS_AssertCPUInISRMode+0x26>
 800ffba:	e8df f000 	tbb	[pc, r0]
 800ffbe:	0e03      	.short	0x0e03
 800ffc0:	0a08      	.short	0x0a08
 800ffc2:	0a          	.byte	0x0a
 800ffc3:	00          	.byte	0x00
 800ffc4:	20a3      	movs	r0, #163	; 0xa3
 800ffc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ffca:	f7ff b903 	b.w	800f1d4 <OS_Error>
 800ffce:	20a6      	movs	r0, #166	; 0xa6
 800ffd0:	e7f9      	b.n	800ffc6 <OS_AssertCPUInISRMode+0x16>
 800ffd2:	20a7      	movs	r0, #167	; 0xa7
 800ffd4:	e7f7      	b.n	800ffc6 <OS_AssertCPUInISRMode+0x16>
 800ffd6:	20a8      	movs	r0, #168	; 0xa8
 800ffd8:	e7f5      	b.n	800ffc6 <OS_AssertCPUInISRMode+0x16>
 800ffda:	bd08      	pop	{r3, pc}

0800ffdc <OS_AssertCPUNotInIllegalState>:
 800ffdc:	b508      	push	{r3, lr}
 800ffde:	f7ff faab 	bl	800f538 <OS_GetCPUState>
 800ffe2:	2804      	cmp	r0, #4
 800ffe4:	d80b      	bhi.n	800fffe <OS_AssertCPUNotInIllegalState+0x22>
 800ffe6:	e8df f000 	tbb	[pc, r0]
 800ffea:	0c0c      	.short	0x0c0c
 800ffec:	0803      	.short	0x0803
 800ffee:	0c          	.byte	0x0c
 800ffef:	00          	.byte	0x00
 800fff0:	20a6      	movs	r0, #166	; 0xa6
 800fff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fff6:	f7ff b8ed 	b.w	800f1d4 <OS_Error>
 800fffa:	20a7      	movs	r0, #167	; 0xa7
 800fffc:	e7f9      	b.n	800fff2 <OS_AssertCPUNotInIllegalState+0x16>
 800fffe:	20a8      	movs	r0, #168	; 0xa8
 8010000:	e7f7      	b.n	800fff2 <OS_AssertCPUNotInIllegalState+0x16>
 8010002:	bd08      	pop	{r3, pc}

08010004 <OS_Deactivated>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4c0f      	ldr	r4, [pc, #60]	; (8010044 <OS_Deactivated+0x40>)
 8010008:	7823      	ldrb	r3, [r4, #0]
 801000a:	b2dd      	uxtb	r5, r3
 801000c:	3301      	adds	r3, #1
 801000e:	b2db      	uxtb	r3, r3
 8010010:	7023      	strb	r3, [r4, #0]
 8010012:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010014:	b123      	cbz	r3, 8010020 <OS_Deactivated+0x1c>
 8010016:	68a0      	ldr	r0, [r4, #8]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 801001e:	4798      	blx	r3
 8010020:	4808      	ldr	r0, [pc, #32]	; (8010044 <OS_Deactivated+0x40>)
 8010022:	f7f0 f9bd 	bl	80003a0 <OS_Switch>
 8010026:	7025      	strb	r5, [r4, #0]
 8010028:	7863      	ldrb	r3, [r4, #1]
 801002a:	2b0f      	cmp	r3, #15
 801002c:	d902      	bls.n	8010034 <OS_Deactivated+0x30>
 801002e:	2099      	movs	r0, #153	; 0x99
 8010030:	f7ff f8d0 	bl	800f1d4 <OS_Error>
 8010034:	7863      	ldrb	r3, [r4, #1]
 8010036:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801003a:	b90b      	cbnz	r3, 8010040 <OS_Deactivated+0x3c>
 801003c:	f382 8811 	msr	BASEPRI, r2
 8010040:	bd38      	pop	{r3, r4, r5, pc}
 8010042:	bf00      	nop
 8010044:	200051a8 	.word	0x200051a8

08010048 <OS_DeactivateP>:
 8010048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801004a:	4a0c      	ldr	r2, [pc, #48]	; (801007c <OS_DeactivateP+0x34>)
 801004c:	6893      	ldr	r3, [r2, #8]
 801004e:	9303      	str	r3, [sp, #12]
 8010050:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8010054:	2380      	movs	r3, #128	; 0x80
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	6803      	ldr	r3, [r0, #0]
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	f8c0 d000 	str.w	sp, [r0]
 8010062:	b10b      	cbz	r3, 8010068 <OS_DeactivateP+0x20>
 8010064:	f8c3 d004 	str.w	sp, [r3, #4]
 8010068:	6893      	ldr	r3, [r2, #8]
 801006a:	f8c3 d008 	str.w	sp, [r3, #8]
 801006e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
 8010072:	f7ff ffc7 	bl	8010004 <OS_Deactivated>
 8010076:	b005      	add	sp, #20
 8010078:	f85d fb04 	ldr.w	pc, [sp], #4
 801007c:	200051a8 	.word	0x200051a8

08010080 <OS_EnableProfiling>:
 8010080:	b510      	push	{r4, lr}
 8010082:	4c17      	ldr	r4, [pc, #92]	; (80100e0 <OS_EnableProfiling+0x60>)
 8010084:	7863      	ldrb	r3, [r4, #1]
 8010086:	2b0f      	cmp	r3, #15
 8010088:	d902      	bls.n	8010090 <OS_EnableProfiling+0x10>
 801008a:	2099      	movs	r0, #153	; 0x99
 801008c:	f7ff f8a2 	bl	800f1d4 <OS_Error>
 8010090:	2380      	movs	r3, #128	; 0x80
 8010092:	f383 8811 	msr	BASEPRI, r3
 8010096:	7863      	ldrb	r3, [r4, #1]
 8010098:	3301      	adds	r3, #1
 801009a:	b2db      	uxtb	r3, r3
 801009c:	7063      	strb	r3, [r4, #1]
 801009e:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80100a2:	b92b      	cbnz	r3, 80100b0 <OS_EnableProfiling+0x30>
 80100a4:	2301      	movs	r3, #1
 80100a6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 80100aa:	f7ff fae5 	bl	800f678 <OS__TIME_GetCycles>
 80100ae:	6720      	str	r0, [r4, #112]	; 0x70
 80100b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80100b2:	4a0c      	ldr	r2, [pc, #48]	; (80100e4 <OS_EnableProfiling+0x64>)
 80100b4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80100b8:	3308      	adds	r3, #8
 80100ba:	6013      	str	r3, [r2, #0]
 80100bc:	7863      	ldrb	r3, [r4, #1]
 80100be:	2b0f      	cmp	r3, #15
 80100c0:	d902      	bls.n	80100c8 <OS_EnableProfiling+0x48>
 80100c2:	2099      	movs	r0, #153	; 0x99
 80100c4:	f7ff f886 	bl	800f1d4 <OS_Error>
 80100c8:	7863      	ldrb	r3, [r4, #1]
 80100ca:	3b01      	subs	r3, #1
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	7063      	strb	r3, [r4, #1]
 80100d0:	7863      	ldrb	r3, [r4, #1]
 80100d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80100d6:	b90b      	cbnz	r3, 80100dc <OS_EnableProfiling+0x5c>
 80100d8:	f382 8811 	msr	BASEPRI, r2
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	200051a8 	.word	0x200051a8
 80100e4:	200051a4 	.word	0x200051a4

080100e8 <OS_EnterRegionFunc>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	4c06      	ldr	r4, [pc, #24]	; (8010104 <OS_EnterRegionFunc+0x1c>)
 80100ec:	7823      	ldrb	r3, [r4, #0]
 80100ee:	2bff      	cmp	r3, #255	; 0xff
 80100f0:	d102      	bne.n	80100f8 <OS_EnterRegionFunc+0x10>
 80100f2:	209d      	movs	r0, #157	; 0x9d
 80100f4:	f7ff f86e 	bl	800f1d4 <OS_Error>
 80100f8:	7823      	ldrb	r3, [r4, #0]
 80100fa:	3301      	adds	r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	7023      	strb	r3, [r4, #0]
 8010100:	bd10      	pop	{r4, pc}
 8010102:	bf00      	nop
 8010104:	200051a8 	.word	0x200051a8

08010108 <OS_RemoveTaskFromWaitList>:
 8010108:	6882      	ldr	r2, [r0, #8]
 801010a:	e9d2 3200 	ldrd	r3, r2, [r2]
 801010e:	b103      	cbz	r3, 8010112 <OS_RemoveTaskFromWaitList+0xa>
 8010110:	605a      	str	r2, [r3, #4]
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	2300      	movs	r3, #0
 8010116:	6083      	str	r3, [r0, #8]
 8010118:	4770      	bx	lr
	...

0801011c <OS_MakeTaskReady>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	4c24      	ldr	r4, [pc, #144]	; (80101b0 <OS_MakeTaskReady+0x94>)
 8010120:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010122:	4605      	mov	r5, r0
 8010124:	b10b      	cbz	r3, 801012a <OS_MakeTaskReady+0xe>
 8010126:	69db      	ldr	r3, [r3, #28]
 8010128:	4798      	blx	r3
 801012a:	68ab      	ldr	r3, [r5, #8]
 801012c:	b123      	cbz	r3, 8010138 <OS_MakeTaskReady+0x1c>
 801012e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010130:	60eb      	str	r3, [r5, #12]
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff ffe8 	bl	8010108 <OS_RemoveTaskFromWaitList>
 8010138:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 801013c:	f003 0303 	and.w	r3, r3, #3
 8010140:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8010144:	b9f3      	cbnz	r3, 8010184 <OS_MakeTaskReady+0x68>
 8010146:	69e2      	ldr	r2, [r4, #28]
 8010148:	b9fa      	cbnz	r2, 801018a <OS_MakeTaskReady+0x6e>
 801014a:	61e5      	str	r5, [r4, #28]
 801014c:	7822      	ldrb	r2, [r4, #0]
 801014e:	2301      	movs	r3, #1
 8010150:	b9ca      	cbnz	r2, 8010186 <OS_MakeTaskReady+0x6a>
 8010152:	7023      	strb	r3, [r4, #0]
 8010154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010156:	b123      	cbz	r3, 8010162 <OS_MakeTaskReady+0x46>
 8010158:	68a0      	ldr	r0, [r4, #8]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 8010160:	4798      	blx	r3
 8010162:	4813      	ldr	r0, [pc, #76]	; (80101b0 <OS_MakeTaskReady+0x94>)
 8010164:	f7f0 f91c 	bl	80003a0 <OS_Switch>
 8010168:	2300      	movs	r3, #0
 801016a:	7023      	strb	r3, [r4, #0]
 801016c:	7863      	ldrb	r3, [r4, #1]
 801016e:	2b0f      	cmp	r3, #15
 8010170:	d902      	bls.n	8010178 <OS_MakeTaskReady+0x5c>
 8010172:	2099      	movs	r0, #153	; 0x99
 8010174:	f7ff f82e 	bl	800f1d4 <OS_Error>
 8010178:	7863      	ldrb	r3, [r4, #1]
 801017a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801017e:	b90b      	cbnz	r3, 8010184 <OS_MakeTaskReady+0x68>
 8010180:	f382 8811 	msr	BASEPRI, r2
 8010184:	bd38      	pop	{r3, r4, r5, pc}
 8010186:	7163      	strb	r3, [r4, #5]
 8010188:	e7f0      	b.n	801016c <OS_MakeTaskReady+0x50>
 801018a:	6929      	ldr	r1, [r5, #16]
 801018c:	6913      	ldr	r3, [r2, #16]
 801018e:	4299      	cmp	r1, r3
 8010190:	d8db      	bhi.n	801014a <OS_MakeTaskReady+0x2e>
 8010192:	4295      	cmp	r5, r2
 8010194:	d0da      	beq.n	801014c <OS_MakeTaskReady+0x30>
 8010196:	4299      	cmp	r1, r3
 8010198:	d1f4      	bne.n	8010184 <OS_MakeTaskReady+0x68>
 801019a:	462b      	mov	r3, r5
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0e4      	beq.n	801016c <OS_MakeTaskReady+0x50>
 80101a2:	6918      	ldr	r0, [r3, #16]
 80101a4:	4281      	cmp	r1, r0
 80101a6:	d1e1      	bne.n	801016c <OS_MakeTaskReady+0x50>
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d1f7      	bne.n	801019c <OS_MakeTaskReady+0x80>
 80101ac:	e7cd      	b.n	801014a <OS_MakeTaskReady+0x2e>
 80101ae:	bf00      	nop
 80101b0:	200051a8 	.word	0x200051a8

080101b4 <OS_ClearWaitObj>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4604      	mov	r4, r0
 80101b8:	2380      	movs	r3, #128	; 0x80
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	461d      	mov	r5, r3
 80101c0:	6823      	ldr	r3, [r4, #0]
 80101c2:	b96b      	cbnz	r3, 80101e0 <OS_ClearWaitObj+0x2c>
 80101c4:	4c0a      	ldr	r4, [pc, #40]	; (80101f0 <OS_ClearWaitObj+0x3c>)
 80101c6:	7863      	ldrb	r3, [r4, #1]
 80101c8:	2b0f      	cmp	r3, #15
 80101ca:	d902      	bls.n	80101d2 <OS_ClearWaitObj+0x1e>
 80101cc:	2099      	movs	r0, #153	; 0x99
 80101ce:	f7ff f801 	bl	800f1d4 <OS_Error>
 80101d2:	7863      	ldrb	r3, [r4, #1]
 80101d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80101d8:	b90b      	cbnz	r3, 80101de <OS_ClearWaitObj+0x2a>
 80101da:	f382 8811 	msr	BASEPRI, r2
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	68d8      	ldr	r0, [r3, #12]
 80101e4:	f7ff ff9a 	bl	801011c <OS_MakeTaskReady>
 80101e8:	f385 8811 	msr	BASEPRI, r5
 80101ec:	e7e8      	b.n	80101c0 <OS_ClearWaitObj+0xc>
 80101ee:	bf00      	nop
 80101f0:	200051a8 	.word	0x200051a8

080101f4 <OS_InsertTask>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	6903      	ldr	r3, [r0, #16]
 80101f8:	4604      	mov	r4, r0
 80101fa:	460d      	mov	r5, r1
 80101fc:	b913      	cbnz	r3, 8010204 <OS_InsertTask+0x10>
 80101fe:	20cb      	movs	r0, #203	; 0xcb
 8010200:	f7fe ffe8 	bl	800f1d4 <OS_Error>
 8010204:	f7ff ff70 	bl	80100e8 <OS_EnterRegionFunc>
 8010208:	6922      	ldr	r2, [r4, #16]
 801020a:	b94d      	cbnz	r5, 8010220 <OS_InsertTask+0x2c>
 801020c:	4d18      	ldr	r5, [pc, #96]	; (8010270 <OS_InsertTask+0x7c>)
 801020e:	f855 3f18 	ldr.w	r3, [r5, #24]!
 8010212:	b133      	cbz	r3, 8010222 <OS_InsertTask+0x2e>
 8010214:	6918      	ldr	r0, [r3, #16]
 8010216:	4290      	cmp	r0, r2
 8010218:	d903      	bls.n	8010222 <OS_InsertTask+0x2e>
 801021a:	461d      	mov	r5, r3
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	e7f8      	b.n	8010212 <OS_InsertTask+0x1e>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	6023      	str	r3, [r4, #0]
 8010224:	6225      	str	r5, [r4, #32]
 8010226:	602c      	str	r4, [r5, #0]
 8010228:	b143      	cbz	r3, 801023c <OS_InsertTask+0x48>
 801022a:	621c      	str	r4, [r3, #32]
 801022c:	691b      	ldr	r3, [r3, #16]
 801022e:	4293      	cmp	r3, r2
 8010230:	bf0c      	ite	eq
 8010232:	f894 3052 	ldrbeq.w	r3, [r4, #82]	; 0x52
 8010236:	2300      	movne	r3, #0
 8010238:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801023c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8010240:	b993      	cbnz	r3, 8010268 <OS_InsertTask+0x74>
 8010242:	2380      	movs	r3, #128	; 0x80
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	4620      	mov	r0, r4
 801024a:	4c09      	ldr	r4, [pc, #36]	; (8010270 <OS_InsertTask+0x7c>)
 801024c:	f7ff ff66 	bl	801011c <OS_MakeTaskReady>
 8010250:	7863      	ldrb	r3, [r4, #1]
 8010252:	2b0f      	cmp	r3, #15
 8010254:	d902      	bls.n	801025c <OS_InsertTask+0x68>
 8010256:	2099      	movs	r0, #153	; 0x99
 8010258:	f7fe ffbc 	bl	800f1d4 <OS_Error>
 801025c:	7863      	ldrb	r3, [r4, #1]
 801025e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010262:	b90b      	cbnz	r3, 8010268 <OS_InsertTask+0x74>
 8010264:	f382 8811 	msr	BASEPRI, r2
 8010268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801026c:	f7ff bcb8 	b.w	800fbe0 <OS_TASK_LeaveRegion>
 8010270:	200051a8 	.word	0x200051a8

08010274 <OS_SaveMainStack>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	4d0c      	ldr	r5, [pc, #48]	; (80102a8 <OS_SaveMainStack+0x34>)
 8010278:	f000 fe82 	bl	8010f80 <OS_STACK_GetSysStackBase>
 801027c:	68eb      	ldr	r3, [r5, #12]
 801027e:	4604      	mov	r4, r0
 8010280:	685e      	ldr	r6, [r3, #4]
 8010282:	f000 fe81 	bl	8010f88 <OS_STACK_GetSysStackSize>
 8010286:	68eb      	ldr	r3, [r5, #12]
 8010288:	1b80      	subs	r0, r0, r6
 801028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028c:	4404      	add	r4, r0
 801028e:	42a3      	cmp	r3, r4
 8010290:	d202      	bcs.n	8010298 <OS_SaveMainStack+0x24>
 8010292:	20fb      	movs	r0, #251	; 0xfb
 8010294:	f7fe ff9e 	bl	800f1d4 <OS_Error>
 8010298:	68eb      	ldr	r3, [r5, #12]
 801029a:	4622      	mov	r2, r4
 801029c:	4631      	mov	r1, r6
 801029e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80102a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102a4:	f000 bede 	b.w	8011064 <memcpy>
 80102a8:	200051a8 	.word	0x200051a8

080102ac <OS_TaskInit>:
 80102ac:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <OS_TaskInit+0x18>)
 80102ae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80102b0:	b119      	cbz	r1, 80102ba <OS_TaskInit+0xe>
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	6451      	str	r1, [r2, #68]	; 0x44
 80102b6:	2100      	movs	r1, #0
 80102b8:	6491      	str	r1, [r2, #72]	; 0x48
 80102ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102bc:	b103      	cbz	r3, 80102c0 <OS_TaskInit+0x14>
 80102be:	4718      	bx	r3
 80102c0:	4770      	bx	lr
 80102c2:	bf00      	nop
 80102c4:	200051a8 	.word	0x200051a8

080102c8 <OS_TerminateError>:
 80102c8:	209b      	movs	r0, #155	; 0x9b
 80102ca:	f7fe bf83 	b.w	800f1d4 <OS_Error>

080102ce <OS_UnlinkTask>:
 80102ce:	6a02      	ldr	r2, [r0, #32]
 80102d0:	6803      	ldr	r3, [r0, #0]
 80102d2:	6013      	str	r3, [r2, #0]
 80102d4:	b103      	cbz	r3, 80102d8 <OS_UnlinkTask+0xa>
 80102d6:	621a      	str	r2, [r3, #32]
 80102d8:	4770      	bx	lr
	...

080102dc <OS_ChangeTask_VFP>:
 80102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e0:	4c86      	ldr	r4, [pc, #536]	; (80104fc <OS_ChangeTask_VFP+0x220>)
 80102e2:	2500      	movs	r5, #0
 80102e4:	2301      	movs	r3, #1
 80102e6:	7065      	strb	r5, [r4, #1]
 80102e8:	7023      	strb	r3, [r4, #0]
 80102ea:	2380      	movs	r3, #128	; 0x80
 80102ec:	f383 8811 	msr	BASEPRI, r3
 80102f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102f2:	b162      	cbz	r2, 801030e <OS_ChangeTask_VFP+0x32>
 80102f4:	7863      	ldrb	r3, [r4, #1]
 80102f6:	3301      	adds	r3, #1
 80102f8:	b2db      	uxtb	r3, r3
 80102fa:	7063      	strb	r3, [r4, #1]
 80102fc:	4790      	blx	r2
 80102fe:	7863      	ldrb	r3, [r4, #1]
 8010300:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 8010304:	3b01      	subs	r3, #1
 8010306:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801030a:	b2db      	uxtb	r3, r3
 801030c:	7063      	strb	r3, [r4, #1]
 801030e:	2300      	movs	r3, #0
 8010310:	f383 8811 	msr	BASEPRI, r3
 8010314:	f000 fe34 	bl	8010f80 <OS_STACK_GetSysStackBase>
 8010318:	7803      	ldrb	r3, [r0, #0]
 801031a:	2bcd      	cmp	r3, #205	; 0xcd
 801031c:	d002      	beq.n	8010324 <OS_ChangeTask_VFP+0x48>
 801031e:	207d      	movs	r0, #125	; 0x7d
 8010320:	f7fe ff58 	bl	800f1d4 <OS_Error>
 8010324:	68a3      	ldr	r3, [r4, #8]
 8010326:	b133      	cbz	r3, 8010336 <OS_ChangeTask_VFP+0x5a>
 8010328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2bcd      	cmp	r3, #205	; 0xcd
 801032e:	d002      	beq.n	8010336 <OS_ChangeTask_VFP+0x5a>
 8010330:	2078      	movs	r0, #120	; 0x78
 8010332:	f7fe ff4f 	bl	800f1d4 <OS_Error>
 8010336:	68a3      	ldr	r3, [r4, #8]
 8010338:	b153      	cbz	r3, 8010350 <OS_ChangeTask_VFP+0x74>
 801033a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801033c:	b142      	cbz	r2, 8010350 <OS_ChangeTask_VFP+0x74>
 801033e:	6858      	ldr	r0, [r3, #4]
 8010340:	f103 0544 	add.w	r5, r3, #68	; 0x44
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4798      	blx	r3
 801034a:	686d      	ldr	r5, [r5, #4]
 801034c:	2d00      	cmp	r5, #0
 801034e:	d1f9      	bne.n	8010344 <OS_ChangeTask_VFP+0x68>
 8010350:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8010354:	2b00      	cmp	r3, #0
 8010356:	d034      	beq.n	80103c2 <OS_ChangeTask_VFP+0xe6>
 8010358:	68a3      	ldr	r3, [r4, #8]
 801035a:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 801035e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8010362:	7923      	ldrb	r3, [r4, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d02c      	beq.n	80103c2 <OS_ChangeTask_VFP+0xe6>
 8010368:	2380      	movs	r3, #128	; 0x80
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	2200      	movs	r2, #0
 8010370:	68a3      	ldr	r3, [r4, #8]
 8010372:	7122      	strb	r2, [r4, #4]
 8010374:	f382 8811 	msr	BASEPRI, r2
 8010378:	b303      	cbz	r3, 80103bc <OS_ChangeTask_VFP+0xe0>
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	b1f2      	cbz	r2, 80103bc <OS_ChangeTask_VFP+0xe0>
 801037e:	6918      	ldr	r0, [r3, #16]
 8010380:	6911      	ldr	r1, [r2, #16]
 8010382:	4288      	cmp	r0, r1
 8010384:	d11a      	bne.n	80103bc <OS_ChangeTask_VFP+0xe0>
 8010386:	4611      	mov	r1, r2
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	b112      	cbz	r2, 8010392 <OS_ChangeTask_VFP+0xb6>
 801038c:	6915      	ldr	r5, [r2, #16]
 801038e:	42a8      	cmp	r0, r5
 8010390:	d0f9      	beq.n	8010386 <OS_ChangeTask_VFP+0xaa>
 8010392:	2280      	movs	r2, #128	; 0x80
 8010394:	f382 8811 	msr	BASEPRI, r2
 8010398:	69e2      	ldr	r2, [r4, #28]
 801039a:	6a18      	ldr	r0, [r3, #32]
 801039c:	4293      	cmp	r3, r2
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	bf08      	it	eq
 80103a2:	61e2      	streq	r2, [r4, #28]
 80103a4:	6002      	str	r2, [r0, #0]
 80103a6:	6210      	str	r0, [r2, #32]
 80103a8:	680a      	ldr	r2, [r1, #0]
 80103aa:	6219      	str	r1, [r3, #32]
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	b102      	cbz	r2, 80103b2 <OS_ChangeTask_VFP+0xd6>
 80103b0:	6213      	str	r3, [r2, #32]
 80103b2:	600b      	str	r3, [r1, #0]
 80103b4:	f891 3052 	ldrb.w	r3, [r1, #82]	; 0x52
 80103b8:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 80103bc:	2300      	movs	r3, #0
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80103c6:	b1bb      	cbz	r3, 80103f8 <OS_ChangeTask_VFP+0x11c>
 80103c8:	07d9      	lsls	r1, r3, #31
 80103ca:	d406      	bmi.n	80103da <OS_ChangeTask_VFP+0xfe>
 80103cc:	f7ff f954 	bl	800f678 <OS__TIME_GetCycles>
 80103d0:	68a2      	ldr	r2, [r4, #8]
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d14f      	bne.n	8010476 <OS_ChangeTask_VFP+0x19a>
 80103d6:	6720      	str	r0, [r4, #112]	; 0x70
 80103d8:	e00e      	b.n	80103f8 <OS_ChangeTask_VFP+0x11c>
 80103da:	f7ff f9d7 	bl	800f78c <OS_TIME_GetTicks>
 80103de:	4b48      	ldr	r3, [pc, #288]	; (8010500 <OS_ChangeTask_VFP+0x224>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	1a18      	subs	r0, r3, r0
 80103e4:	2800      	cmp	r0, #0
 80103e6:	daf1      	bge.n	80103cc <OS_ChangeTask_VFP+0xf0>
 80103e8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80103ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80103f0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1e9      	bne.n	80103cc <OS_ChangeTask_VFP+0xf0>
 80103f8:	68a3      	ldr	r3, [r4, #8]
 80103fa:	b12b      	cbz	r3, 8010408 <OS_ChangeTask_VFP+0x12c>
 80103fc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010400:	b912      	cbnz	r2, 8010408 <OS_ChangeTask_VFP+0x12c>
 8010402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010404:	3201      	adds	r2, #1
 8010406:	635a      	str	r2, [r3, #52]	; 0x34
 8010408:	69e3      	ldr	r3, [r4, #28]
 801040a:	b1b3      	cbz	r3, 801043a <OS_ChangeTask_VFP+0x15e>
 801040c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8010410:	2700      	movs	r7, #0
 8010412:	f388 8811 	msr	BASEPRI, r8
 8010416:	69e5      	ldr	r5, [r4, #28]
 8010418:	b195      	cbz	r5, 8010440 <OS_ChangeTask_VFP+0x164>
 801041a:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
 801041e:	b17e      	cbz	r6, 8010440 <OS_ChangeTask_VFP+0x164>
 8010420:	0772      	lsls	r2, r6, #29
 8010422:	d533      	bpl.n	801048c <OS_ChangeTask_VFP+0x1b0>
 8010424:	68eb      	ldr	r3, [r5, #12]
 8010426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010428:	1a9a      	subs	r2, r3, r2
 801042a:	2a00      	cmp	r2, #0
 801042c:	dc29      	bgt.n	8010482 <OS_ChangeTask_VFP+0x1a6>
 801042e:	4628      	mov	r0, r5
 8010430:	f7ff fe74 	bl	801011c <OS_MakeTaskReady>
 8010434:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8010438:	bb43      	cbnz	r3, 801048c <OS_ChangeTask_VFP+0x1b0>
 801043a:	2380      	movs	r3, #128	; 0x80
 801043c:	f383 8811 	msr	BASEPRI, r3
 8010440:	2700      	movs	r7, #0
 8010442:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80104fc <OS_ChangeTask_VFP+0x220>
 8010446:	46b8      	mov	r8, r7
 8010448:	7963      	ldrb	r3, [r4, #5]
 801044a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801044e:	2b00      	cmp	r3, #0
 8010450:	d058      	beq.n	8010504 <OS_ChangeTask_VFP+0x228>
 8010452:	7167      	strb	r7, [r4, #5]
 8010454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010456:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801045a:	3b01      	subs	r3, #1
 801045c:	6323      	str	r3, [r4, #48]	; 0x30
 801045e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010460:	b10b      	cbz	r3, 8010466 <OS_ChangeTask_VFP+0x18a>
 8010462:	4648      	mov	r0, r9
 8010464:	4798      	blx	r3
 8010466:	f388 8811 	msr	BASEPRI, r8
 801046a:	69a5      	ldr	r5, [r4, #24]
 801046c:	2680      	movs	r6, #128	; 0x80
 801046e:	bb05      	cbnz	r5, 80104b2 <OS_ChangeTask_VFP+0x1d6>
 8010470:	f386 8811 	msr	BASEPRI, r6
 8010474:	e7e8      	b.n	8010448 <OS_ChangeTask_VFP+0x16c>
 8010476:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010478:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801047a:	1a5b      	subs	r3, r3, r1
 801047c:	4403      	add	r3, r0
 801047e:	6393      	str	r3, [r2, #56]	; 0x38
 8010480:	e7a9      	b.n	80103d6 <OS_ChangeTask_VFP+0xfa>
 8010482:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010484:	1a9a      	subs	r2, r3, r2
 8010486:	2a00      	cmp	r2, #0
 8010488:	bfb8      	it	lt
 801048a:	6323      	strlt	r3, [r4, #48]	; 0x30
 801048c:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
 8010490:	2e10      	cmp	r6, #16
 8010492:	d109      	bne.n	80104a8 <OS_ChangeTask_VFP+0x1cc>
 8010494:	68ab      	ldr	r3, [r5, #8]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801049e:	b91a      	cbnz	r2, 80104a8 <OS_ChangeTask_VFP+0x1cc>
 80104a0:	691a      	ldr	r2, [r3, #16]
 80104a2:	692b      	ldr	r3, [r5, #16]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d1c8      	bne.n	801043a <OS_ChangeTask_VFP+0x15e>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	61e3      	str	r3, [r4, #28]
 80104ac:	f387 8811 	msr	BASEPRI, r7
 80104b0:	e7af      	b.n	8010412 <OS_ChangeTask_VFP+0x136>
 80104b2:	f386 8811 	msr	BASEPRI, r6
 80104b6:	69e3      	ldr	r3, [r4, #28]
 80104b8:	b11b      	cbz	r3, 80104c2 <OS_ChangeTask_VFP+0x1e6>
 80104ba:	692a      	ldr	r2, [r5, #16]
 80104bc:	691b      	ldr	r3, [r3, #16]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d3c2      	bcc.n	8010448 <OS_ChangeTask_VFP+0x16c>
 80104c2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80104c6:	075b      	lsls	r3, r3, #29
 80104c8:	d50a      	bpl.n	80104e0 <OS_ChangeTask_VFP+0x204>
 80104ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80104cc:	68eb      	ldr	r3, [r5, #12]
 80104ce:	1a9b      	subs	r3, r3, r2
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dd09      	ble.n	80104e8 <OS_ChangeTask_VFP+0x20c>
 80104d4:	68ea      	ldr	r2, [r5, #12]
 80104d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	da00      	bge.n	80104e0 <OS_ChangeTask_VFP+0x204>
 80104de:	6322      	str	r2, [r4, #48]	; 0x30
 80104e0:	f387 8811 	msr	BASEPRI, r7
 80104e4:	682d      	ldr	r5, [r5, #0]
 80104e6:	e7c2      	b.n	801046e <OS_ChangeTask_VFP+0x192>
 80104e8:	4628      	mov	r0, r5
 80104ea:	f7ff fe17 	bl	801011c <OS_MakeTaskReady>
 80104ee:	f386 8811 	msr	BASEPRI, r6
 80104f2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1ec      	bne.n	80104d4 <OS_ChangeTask_VFP+0x1f8>
 80104fa:	e7a5      	b.n	8010448 <OS_ChangeTask_VFP+0x16c>
 80104fc:	200051a8 	.word	0x200051a8
 8010500:	200051a4 	.word	0x200051a4
 8010504:	6062      	str	r2, [r4, #4]
 8010506:	69e5      	ldr	r5, [r4, #28]
 8010508:	2d00      	cmp	r5, #0
 801050a:	d041      	beq.n	8010590 <OS_ChangeTask_VFP+0x2b4>
 801050c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8010510:	b193      	cbz	r3, 8010538 <OS_ChangeTask_VFP+0x25c>
 8010512:	68ab      	ldr	r3, [r5, #8]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	685e      	ldr	r6, [r3, #4]
 8010518:	4630      	mov	r0, r6
 801051a:	f7ff fed8 	bl	80102ce <OS_UnlinkTask>
 801051e:	692b      	ldr	r3, [r5, #16]
 8010520:	6133      	str	r3, [r6, #16]
 8010522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010524:	b10b      	cbz	r3, 801052a <OS_ChangeTask_VFP+0x24e>
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	4798      	blx	r3
 801052a:	2301      	movs	r3, #1
 801052c:	4629      	mov	r1, r5
 801052e:	4630      	mov	r0, r6
 8010530:	7063      	strb	r3, [r4, #1]
 8010532:	f7ff fe5f 	bl	80101f4 <OS_InsertTask>
 8010536:	61e6      	str	r6, [r4, #28]
 8010538:	69e3      	ldr	r3, [r4, #28]
 801053a:	60a3      	str	r3, [r4, #8]
 801053c:	b913      	cbnz	r3, 8010544 <OS_ChangeTask_VFP+0x268>
 801053e:	2080      	movs	r0, #128	; 0x80
 8010540:	f7fe fe48 	bl	800f1d4 <OS_Error>
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801054a:	2b0f      	cmp	r3, #15
 801054c:	d002      	beq.n	8010554 <OS_ChangeTask_VFP+0x278>
 801054e:	2080      	movs	r0, #128	; 0x80
 8010550:	f7fe fe40 	bl	800f1d4 <OS_Error>
 8010554:	68a3      	ldr	r3, [r4, #8]
 8010556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010558:	b142      	cbz	r2, 801056c <OS_ChangeTask_VFP+0x290>
 801055a:	6858      	ldr	r0, [r3, #4]
 801055c:	f103 0544 	add.w	r5, r3, #68	; 0x44
 8010560:	682b      	ldr	r3, [r5, #0]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	4798      	blx	r3
 8010566:	686d      	ldr	r5, [r5, #4]
 8010568:	2d00      	cmp	r5, #0
 801056a:	d1f9      	bne.n	8010560 <OS_ChangeTask_VFP+0x284>
 801056c:	68a0      	ldr	r0, [r4, #8]
 801056e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8010572:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 8010576:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 801057a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801057c:	b10b      	cbz	r3, 8010582 <OS_ChangeTask_VFP+0x2a6>
 801057e:	695b      	ldr	r3, [r3, #20]
 8010580:	4798      	blx	r3
 8010582:	68a2      	ldr	r2, [r4, #8]
 8010584:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010586:	3301      	adds	r3, #1
 8010588:	6313      	str	r3, [r2, #48]	; 0x30
 801058a:	4808      	ldr	r0, [pc, #32]	; (80105ac <OS_ChangeTask_VFP+0x2d0>)
 801058c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010592:	b10b      	cbz	r3, 8010598 <OS_ChangeTask_VFP+0x2bc>
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	4798      	blx	r3
 8010598:	2300      	movs	r3, #0
 801059a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 801059e:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 80105a2:	60a3      	str	r3, [r4, #8]
 80105a4:	7023      	strb	r3, [r4, #0]
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	e7ee      	b.n	801058a <OS_ChangeTask_VFP+0x2ae>
 80105ac:	200051a8 	.word	0x200051a8

080105b0 <OS_Init_VFP>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4b29      	ldr	r3, [pc, #164]	; (8010658 <OS_Init_VFP+0xa8>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b53      	cmp	r3, #83	; 0x53
 80105ba:	d1fd      	bne.n	80105b8 <OS_Init_VFP+0x8>
 80105bc:	4b27      	ldr	r3, [pc, #156]	; (801065c <OS_Init_VFP+0xac>)
 80105be:	799b      	ldrb	r3, [r3, #6]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1fd      	bne.n	80105c0 <OS_Init_VFP+0x10>
 80105c4:	4b26      	ldr	r3, [pc, #152]	; (8010660 <OS_Init_VFP+0xb0>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	f64c 2371 	movw	r3, #51825	; 0xca71
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d1fd      	bne.n	80105cc <OS_Init_VFP+0x1c>
 80105d0:	4c24      	ldr	r4, [pc, #144]	; (8010664 <OS_Init_VFP+0xb4>)
 80105d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80105d6:	6323      	str	r3, [r4, #48]	; 0x30
 80105d8:	4b23      	ldr	r3, [pc, #140]	; (8010668 <OS_Init_VFP+0xb8>)
 80105da:	2201      	movs	r2, #1
 80105dc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80105e0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80105e4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80105e8:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80105ec:	b193      	cbz	r3, 8010614 <OS_Init_VFP+0x64>
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d10d      	bne.n	801060e <OS_Init_VFP+0x5e>
 80105f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105f4:	b133      	cbz	r3, 8010604 <OS_Init_VFP+0x54>
 80105f6:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 80105fa:	b973      	cbnz	r3, 801061a <OS_Init_VFP+0x6a>
 80105fc:	20a1      	movs	r0, #161	; 0xa1
 80105fe:	f7fe fde9 	bl	800f1d4 <OS_Error>
 8010602:	e00a      	b.n	801061a <OS_Init_VFP+0x6a>
 8010604:	68a3      	ldr	r3, [r4, #8]
 8010606:	b143      	cbz	r3, 801061a <OS_Init_VFP+0x6a>
 8010608:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 801060c:	b92b      	cbnz	r3, 801061a <OS_Init_VFP+0x6a>
 801060e:	20e3      	movs	r0, #227	; 0xe3
 8010610:	f7fe fde0 	bl	800f1d4 <OS_Error>
 8010614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1ed      	bne.n	80105f6 <OS_Init_VFP+0x46>
 801061a:	f7fe ff8d 	bl	800f538 <OS_GetCPUState>
 801061e:	2801      	cmp	r0, #1
 8010620:	d102      	bne.n	8010628 <OS_Init_VFP+0x78>
 8010622:	20a0      	movs	r0, #160	; 0xa0
 8010624:	f7fe fdd6 	bl	800f1d4 <OS_Error>
 8010628:	f7ff fcd8 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 801062c:	f000 fcb6 	bl	8010f9c <OS_ARMv7M_Init>
 8010630:	2301      	movs	r3, #1
 8010632:	7023      	strb	r3, [r4, #0]
 8010634:	f000 fca4 	bl	8010f80 <OS_STACK_GetSysStackBase>
 8010638:	4605      	mov	r5, r0
 801063a:	f000 fcad 	bl	8010f98 <OS_STACK_GetSP>
 801063e:	f1a0 0220 	sub.w	r2, r0, #32
 8010642:	1b52      	subs	r2, r2, r5
 8010644:	d003      	beq.n	801064e <OS_Init_VFP+0x9e>
 8010646:	21cd      	movs	r1, #205	; 0xcd
 8010648:	4628      	mov	r0, r5
 801064a:	f000 fd19 	bl	8011080 <memset>
 801064e:	2301      	movs	r3, #1
 8010650:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8010654:	bd38      	pop	{r3, r4, r5, pc}
 8010656:	bf00      	nop
 8010658:	08014248 	.word	0x08014248
 801065c:	080141fe 	.word	0x080141fe
 8010660:	08014244 	.word	0x08014244
 8010664:	200051a8 	.word	0x200051a8
 8010668:	20005228 	.word	0x20005228

0801066c <OS_IsRunning>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	4c0f      	ldr	r4, [pc, #60]	; (80106ac <OS_IsRunning+0x40>)
 8010670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010672:	b11b      	cbz	r3, 801067c <OS_IsRunning+0x10>
 8010674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010676:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801067a:	4798      	blx	r3
 801067c:	f7fe ff5c 	bl	800f538 <OS_GetCPUState>
 8010680:	2801      	cmp	r0, #1
 8010682:	d105      	bne.n	8010690 <OS_IsRunning+0x24>
 8010684:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8010688:	b913      	cbnz	r3, 8010690 <OS_IsRunning+0x24>
 801068a:	20a4      	movs	r0, #164	; 0xa4
 801068c:	f7fe fda2 	bl	800f1d4 <OS_Error>
 8010690:	f7ff fca4 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010696:	f894 5076 	ldrb.w	r5, [r4, #118]	; 0x76
 801069a:	b123      	cbz	r3, 80106a6 <OS_IsRunning+0x3a>
 801069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801069e:	4629      	mov	r1, r5
 80106a0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80106a4:	4798      	blx	r3
 80106a6:	4628      	mov	r0, r5
 80106a8:	bd38      	pop	{r3, r4, r5, pc}
 80106aa:	bf00      	nop
 80106ac:	200051a8 	.word	0x200051a8

080106b0 <OS__Start>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	4c0f      	ldr	r4, [pc, #60]	; (80106f0 <OS__Start+0x40>)
 80106b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80106b6:	b11b      	cbz	r3, 80106c0 <OS__Start+0x10>
 80106b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ba:	f240 1061 	movw	r0, #353	; 0x161
 80106be:	4798      	blx	r3
 80106c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80106c4:	b913      	cbnz	r3, 80106cc <OS__Start+0x1c>
 80106c6:	20a5      	movs	r0, #165	; 0xa5
 80106c8:	f7fe fd84 	bl	800f1d4 <OS_Error>
 80106cc:	2380      	movs	r3, #128	; 0x80
 80106ce:	f383 8811 	msr	BASEPRI, r3
 80106d2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80106d6:	b113      	cbz	r3, 80106de <OS__Start+0x2e>
 80106d8:	20e4      	movs	r0, #228	; 0xe4
 80106da:	f7fe fd7b 	bl	800f1d4 <OS_Error>
 80106de:	2301      	movs	r3, #1
 80106e0:	68e0      	ldr	r0, [r4, #12]
 80106e2:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
 80106e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ea:	f7ef be2a 	b.w	8000342 <OS_StartASM>
 80106ee:	bf00      	nop
 80106f0:	200051a8 	.word	0x200051a8

080106f4 <OS_STAT_GetExecTime>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	4d26      	ldr	r5, [pc, #152]	; (8010790 <OS_STAT_GetExecTime+0x9c>)
 80106f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80106fa:	4604      	mov	r4, r0
 80106fc:	b133      	cbz	r3, 801070c <OS_STAT_GetExecTime+0x18>
 80106fe:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8010700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010702:	4798      	blx	r3
 8010704:	4601      	mov	r1, r0
 8010706:	f240 1027 	movw	r0, #295	; 0x127
 801070a:	47b0      	blx	r6
 801070c:	f7fe ff14 	bl	800f538 <OS_GetCPUState>
 8010710:	2801      	cmp	r0, #1
 8010712:	d105      	bne.n	8010720 <OS_STAT_GetExecTime+0x2c>
 8010714:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8010718:	b913      	cbnz	r3, 8010720 <OS_STAT_GetExecTime+0x2c>
 801071a:	20a4      	movs	r0, #164	; 0xa4
 801071c:	f7fe fd5a 	bl	800f1d4 <OS_Error>
 8010720:	f7ff fc5c 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010724:	b93c      	cbnz	r4, 8010736 <OS_STAT_GetExecTime+0x42>
 8010726:	68ac      	ldr	r4, [r5, #8]
 8010728:	b92c      	cbnz	r4, 8010736 <OS_STAT_GetExecTime+0x42>
 801072a:	2080      	movs	r0, #128	; 0x80
 801072c:	f7fe fd52 	bl	800f1d4 <OS_Error>
 8010730:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8010734:	deff      	udf	#255	; 0xff
 8010736:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 801073a:	2b0f      	cmp	r3, #15
 801073c:	d002      	beq.n	8010744 <OS_STAT_GetExecTime+0x50>
 801073e:	2080      	movs	r0, #128	; 0x80
 8010740:	f7fe fd48 	bl	800f1d4 <OS_Error>
 8010744:	f7ff fcd0 	bl	80100e8 <OS_EnterRegionFunc>
 8010748:	68ab      	ldr	r3, [r5, #8]
 801074a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801074c:	42a3      	cmp	r3, r4
 801074e:	d113      	bne.n	8010778 <OS_STAT_GetExecTime+0x84>
 8010750:	2380      	movs	r3, #128	; 0x80
 8010752:	f383 8811 	msr	BASEPRI, r3
 8010756:	f7fe ff8f 	bl	800f678 <OS__TIME_GetCycles>
 801075a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801075c:	1af3      	subs	r3, r6, r3
 801075e:	181e      	adds	r6, r3, r0
 8010760:	786b      	ldrb	r3, [r5, #1]
 8010762:	2b0f      	cmp	r3, #15
 8010764:	d902      	bls.n	801076c <OS_STAT_GetExecTime+0x78>
 8010766:	2099      	movs	r0, #153	; 0x99
 8010768:	f7fe fd34 	bl	800f1d4 <OS_Error>
 801076c:	786b      	ldrb	r3, [r5, #1]
 801076e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010772:	b90b      	cbnz	r3, 8010778 <OS_STAT_GetExecTime+0x84>
 8010774:	f382 8811 	msr	BASEPRI, r2
 8010778:	f7ff fa32 	bl	800fbe0 <OS_TASK_LeaveRegion>
 801077c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801077e:	b123      	cbz	r3, 801078a <OS_STAT_GetExecTime+0x96>
 8010780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010782:	4631      	mov	r1, r6
 8010784:	f240 1027 	movw	r0, #295	; 0x127
 8010788:	4798      	blx	r3
 801078a:	4630      	mov	r0, r6
 801078c:	bd70      	pop	{r4, r5, r6, pc}
 801078e:	bf00      	nop
 8010790:	200051a8 	.word	0x200051a8

08010794 <OS_INFO_GetCPU>:
 8010794:	b510      	push	{r4, lr}
 8010796:	4c0e      	ldr	r4, [pc, #56]	; (80107d0 <OS_INFO_GetCPU+0x3c>)
 8010798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801079a:	b11b      	cbz	r3, 80107a4 <OS_INFO_GetCPU+0x10>
 801079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801079e:	f240 103b 	movw	r0, #315	; 0x13b
 80107a2:	4798      	blx	r3
 80107a4:	f7fe fec8 	bl	800f538 <OS_GetCPUState>
 80107a8:	2801      	cmp	r0, #1
 80107aa:	d105      	bne.n	80107b8 <OS_INFO_GetCPU+0x24>
 80107ac:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 80107b0:	b913      	cbnz	r3, 80107b8 <OS_INFO_GetCPU+0x24>
 80107b2:	20a4      	movs	r0, #164	; 0xa4
 80107b4:	f7fe fd0e 	bl	800f1d4 <OS_Error>
 80107b8:	f7ff fc10 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 80107bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80107be:	b123      	cbz	r3, 80107ca <OS_INFO_GetCPU+0x36>
 80107c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107c2:	4904      	ldr	r1, [pc, #16]	; (80107d4 <OS_INFO_GetCPU+0x40>)
 80107c4:	f240 103b 	movw	r0, #315	; 0x13b
 80107c8:	4798      	blx	r3
 80107ca:	4802      	ldr	r0, [pc, #8]	; (80107d4 <OS_INFO_GetCPU+0x40>)
 80107cc:	bd10      	pop	{r4, pc}
 80107ce:	bf00      	nop
 80107d0:	200051a8 	.word	0x200051a8
 80107d4:	08014216 	.word	0x08014216

080107d8 <OS_INFO_GetLibName>:
 80107d8:	b510      	push	{r4, lr}
 80107da:	4c0e      	ldr	r4, [pc, #56]	; (8010814 <OS_INFO_GetLibName+0x3c>)
 80107dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80107de:	b11b      	cbz	r3, 80107e8 <OS_INFO_GetLibName+0x10>
 80107e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107e2:	f240 103d 	movw	r0, #317	; 0x13d
 80107e6:	4798      	blx	r3
 80107e8:	f7fe fea6 	bl	800f538 <OS_GetCPUState>
 80107ec:	2801      	cmp	r0, #1
 80107ee:	d105      	bne.n	80107fc <OS_INFO_GetLibName+0x24>
 80107f0:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 80107f4:	b913      	cbnz	r3, 80107fc <OS_INFO_GetLibName+0x24>
 80107f6:	20a4      	movs	r0, #164	; 0xa4
 80107f8:	f7fe fcec 	bl	800f1d4 <OS_Error>
 80107fc:	f7ff fbee 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010802:	b123      	cbz	r3, 801080e <OS_INFO_GetLibName+0x36>
 8010804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010806:	4904      	ldr	r1, [pc, #16]	; (8010818 <OS_INFO_GetLibName+0x40>)
 8010808:	f240 103d 	movw	r0, #317	; 0x13d
 801080c:	4798      	blx	r3
 801080e:	4802      	ldr	r0, [pc, #8]	; (8010818 <OS_INFO_GetLibName+0x40>)
 8010810:	bd10      	pop	{r4, pc}
 8010812:	bf00      	nop
 8010814:	200051a8 	.word	0x200051a8
 8010818:	08014225 	.word	0x08014225

0801081c <OS_INFO_GetVersion>:
 801081c:	b510      	push	{r4, lr}
 801081e:	4c0f      	ldr	r4, [pc, #60]	; (801085c <OS_INFO_GetVersion+0x40>)
 8010820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010822:	b11b      	cbz	r3, 801082c <OS_INFO_GetVersion+0x10>
 8010824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010826:	f240 103f 	movw	r0, #319	; 0x13f
 801082a:	4798      	blx	r3
 801082c:	f7fe fe84 	bl	800f538 <OS_GetCPUState>
 8010830:	2801      	cmp	r0, #1
 8010832:	d105      	bne.n	8010840 <OS_INFO_GetVersion+0x24>
 8010834:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8010838:	b913      	cbnz	r3, 8010840 <OS_INFO_GetVersion+0x24>
 801083a:	20a4      	movs	r0, #164	; 0xa4
 801083c:	f7fe fcca 	bl	800f1d4 <OS_Error>
 8010840:	f7ff fbcc 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010846:	b12b      	cbz	r3, 8010854 <OS_INFO_GetVersion+0x38>
 8010848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801084a:	f64c 2171 	movw	r1, #51825	; 0xca71
 801084e:	f240 103f 	movw	r0, #319	; 0x13f
 8010852:	4798      	blx	r3
 8010854:	f64c 2071 	movw	r0, #51825	; 0xca71
 8010858:	bd10      	pop	{r4, pc}
 801085a:	bf00      	nop
 801085c:	200051a8 	.word	0x200051a8

08010860 <OS_STACK_GetTaskStackBase>:
 8010860:	b570      	push	{r4, r5, r6, lr}
 8010862:	4d18      	ldr	r5, [pc, #96]	; (80108c4 <OS_STACK_GetTaskStackBase+0x64>)
 8010864:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010866:	4604      	mov	r4, r0
 8010868:	b133      	cbz	r3, 8010878 <OS_STACK_GetTaskStackBase+0x18>
 801086a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801086c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801086e:	4798      	blx	r3
 8010870:	4601      	mov	r1, r0
 8010872:	f44f 70a1 	mov.w	r0, #322	; 0x142
 8010876:	47b0      	blx	r6
 8010878:	f7fe fe5e 	bl	800f538 <OS_GetCPUState>
 801087c:	2801      	cmp	r0, #1
 801087e:	d105      	bne.n	801088c <OS_STACK_GetTaskStackBase+0x2c>
 8010880:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8010884:	b913      	cbnz	r3, 801088c <OS_STACK_GetTaskStackBase+0x2c>
 8010886:	20a4      	movs	r0, #164	; 0xa4
 8010888:	f7fe fca4 	bl	800f1d4 <OS_Error>
 801088c:	f7ff fba6 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010890:	b93c      	cbnz	r4, 80108a2 <OS_STACK_GetTaskStackBase+0x42>
 8010892:	68ac      	ldr	r4, [r5, #8]
 8010894:	b92c      	cbnz	r4, 80108a2 <OS_STACK_GetTaskStackBase+0x42>
 8010896:	2080      	movs	r0, #128	; 0x80
 8010898:	f7fe fc9c 	bl	800f1d4 <OS_Error>
 801089c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80108a0:	deff      	udf	#255	; 0xff
 80108a2:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80108a6:	2b0f      	cmp	r3, #15
 80108a8:	d002      	beq.n	80108b0 <OS_STACK_GetTaskStackBase+0x50>
 80108aa:	2080      	movs	r0, #128	; 0x80
 80108ac:	f7fe fc92 	bl	800f1d4 <OS_Error>
 80108b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80108b2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80108b4:	b123      	cbz	r3, 80108c0 <OS_STACK_GetTaskStackBase+0x60>
 80108b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108b8:	4621      	mov	r1, r4
 80108ba:	f44f 70a1 	mov.w	r0, #322	; 0x142
 80108be:	4798      	blx	r3
 80108c0:	4620      	mov	r0, r4
 80108c2:	bd70      	pop	{r4, r5, r6, pc}
 80108c4:	200051a8 	.word	0x200051a8

080108c8 <OS_STACK_GetTaskStackSize>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	4d18      	ldr	r5, [pc, #96]	; (801092c <OS_STACK_GetTaskStackSize+0x64>)
 80108cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80108ce:	4604      	mov	r4, r0
 80108d0:	b133      	cbz	r3, 80108e0 <OS_STACK_GetTaskStackSize+0x18>
 80108d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80108d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108d6:	4798      	blx	r3
 80108d8:	4601      	mov	r1, r0
 80108da:	f240 1043 	movw	r0, #323	; 0x143
 80108de:	47b0      	blx	r6
 80108e0:	f7fe fe2a 	bl	800f538 <OS_GetCPUState>
 80108e4:	2801      	cmp	r0, #1
 80108e6:	d105      	bne.n	80108f4 <OS_STACK_GetTaskStackSize+0x2c>
 80108e8:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 80108ec:	b913      	cbnz	r3, 80108f4 <OS_STACK_GetTaskStackSize+0x2c>
 80108ee:	20a4      	movs	r0, #164	; 0xa4
 80108f0:	f7fe fc70 	bl	800f1d4 <OS_Error>
 80108f4:	f7ff fb72 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 80108f8:	b93c      	cbnz	r4, 801090a <OS_STACK_GetTaskStackSize+0x42>
 80108fa:	68ac      	ldr	r4, [r5, #8]
 80108fc:	b92c      	cbnz	r4, 801090a <OS_STACK_GetTaskStackSize+0x42>
 80108fe:	2080      	movs	r0, #128	; 0x80
 8010900:	f7fe fc68 	bl	800f1d4 <OS_Error>
 8010904:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8010908:	deff      	udf	#255	; 0xff
 801090a:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 801090e:	2b0f      	cmp	r3, #15
 8010910:	d002      	beq.n	8010918 <OS_STACK_GetTaskStackSize+0x50>
 8010912:	2080      	movs	r0, #128	; 0x80
 8010914:	f7fe fc5e 	bl	800f1d4 <OS_Error>
 8010918:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801091a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 801091c:	b123      	cbz	r3, 8010928 <OS_STACK_GetTaskStackSize+0x60>
 801091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010920:	4621      	mov	r1, r4
 8010922:	f240 1043 	movw	r0, #323	; 0x143
 8010926:	4798      	blx	r3
 8010928:	4620      	mov	r0, r4
 801092a:	bd70      	pop	{r4, r5, r6, pc}
 801092c:	200051a8 	.word	0x200051a8

08010930 <_OnTx>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	4b4e      	ldr	r3, [pc, #312]	; (8010a6c <_OnTx+0x13c>)
 8010934:	781a      	ldrb	r2, [r3, #0]
 8010936:	2a09      	cmp	r2, #9
 8010938:	f200 8095 	bhi.w	8010a66 <_OnTx+0x136>
 801093c:	e8df f002 	tbb	[pc, r2]
 8010940:	32231a05 	.word	0x32231a05
 8010944:	4b8f8b37 	.word	0x4b8f8b37
 8010948:	5e56      	.short	0x5e56
 801094a:	4a49      	ldr	r2, [pc, #292]	; (8010a70 <_OnTx+0x140>)
 801094c:	8811      	ldrh	r1, [r2, #0]
 801094e:	4a49      	ldr	r2, [pc, #292]	; (8010a74 <_OnTx+0x144>)
 8010950:	b921      	cbnz	r1, 801095c <_OnTx+0x2c>
 8010952:	4949      	ldr	r1, [pc, #292]	; (8010a78 <_OnTx+0x148>)
 8010954:	7809      	ldrb	r1, [r1, #0]
 8010956:	f001 00ff 	and.w	r0, r1, #255	; 0xff
 801095a:	b139      	cbz	r1, 801096c <_OnTx+0x3c>
 801095c:	2101      	movs	r1, #1
 801095e:	7019      	strb	r1, [r3, #0]
 8010960:	4b46      	ldr	r3, [pc, #280]	; (8010a7c <_OnTx+0x14c>)
 8010962:	7011      	strb	r1, [r2, #0]
 8010964:	2200      	movs	r2, #0
 8010966:	801a      	strh	r2, [r3, #0]
 8010968:	208c      	movs	r0, #140	; 0x8c
 801096a:	bd70      	pop	{r4, r5, r6, pc}
 801096c:	7010      	strb	r0, [r2, #0]
 801096e:	f04f 30ff 	mov.w	r0, #4294967295
 8010972:	e7fa      	b.n	801096a <_OnTx+0x3a>
 8010974:	4a3e      	ldr	r2, [pc, #248]	; (8010a70 <_OnTx+0x140>)
 8010976:	8812      	ldrh	r2, [r2, #0]
 8010978:	b11a      	cbz	r2, 8010982 <_OnTx+0x52>
 801097a:	2202      	movs	r2, #2
 801097c:	701a      	strb	r2, [r3, #0]
 801097e:	20ed      	movs	r0, #237	; 0xed
 8010980:	e7f3      	b.n	801096a <_OnTx+0x3a>
 8010982:	2207      	movs	r2, #7
 8010984:	e7fa      	b.n	801097c <_OnTx+0x4c>
 8010986:	4a3a      	ldr	r2, [pc, #232]	; (8010a70 <_OnTx+0x140>)
 8010988:	8810      	ldrh	r0, [r2, #0]
 801098a:	4a3d      	ldr	r2, [pc, #244]	; (8010a80 <_OnTx+0x150>)
 801098c:	28ef      	cmp	r0, #239	; 0xef
 801098e:	bf83      	ittte	hi
 8010990:	0a00      	lsrhi	r0, r0, #8
 8010992:	2103      	movhi	r1, #3
 8010994:	f040 00f0 	orrhi.w	r0, r0, #240	; 0xf0
 8010998:	2104      	movls	r1, #4
 801099a:	bf8c      	ite	hi
 801099c:	7019      	strbhi	r1, [r3, #0]
 801099e:	7019      	strbls	r1, [r3, #0]
 80109a0:	7010      	strb	r0, [r2, #0]
 80109a2:	e7e2      	b.n	801096a <_OnTx+0x3a>
 80109a4:	2204      	movs	r2, #4
 80109a6:	701a      	strb	r2, [r3, #0]
 80109a8:	4b31      	ldr	r3, [pc, #196]	; (8010a70 <_OnTx+0x140>)
 80109aa:	7818      	ldrb	r0, [r3, #0]
 80109ac:	e7dd      	b.n	801096a <_OnTx+0x3a>
 80109ae:	4c33      	ldr	r4, [pc, #204]	; (8010a7c <_OnTx+0x14c>)
 80109b0:	4934      	ldr	r1, [pc, #208]	; (8010a84 <_OnTx+0x154>)
 80109b2:	8822      	ldrh	r2, [r4, #0]
 80109b4:	4d32      	ldr	r5, [pc, #200]	; (8010a80 <_OnTx+0x150>)
 80109b6:	5c88      	ldrb	r0, [r1, r2]
 80109b8:	7829      	ldrb	r1, [r5, #0]
 80109ba:	4401      	add	r1, r0
 80109bc:	7029      	strb	r1, [r5, #0]
 80109be:	3201      	adds	r2, #1
 80109c0:	492b      	ldr	r1, [pc, #172]	; (8010a70 <_OnTx+0x140>)
 80109c2:	b292      	uxth	r2, r2
 80109c4:	8022      	strh	r2, [r4, #0]
 80109c6:	880c      	ldrh	r4, [r1, #0]
 80109c8:	4294      	cmp	r4, r2
 80109ca:	d1ce      	bne.n	801096a <_OnTx+0x3a>
 80109cc:	2205      	movs	r2, #5
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	2300      	movs	r3, #0
 80109d2:	800b      	strh	r3, [r1, #0]
 80109d4:	e7c9      	b.n	801096a <_OnTx+0x3a>
 80109d6:	2208      	movs	r2, #8
 80109d8:	701a      	strb	r2, [r3, #0]
 80109da:	4a27      	ldr	r2, [pc, #156]	; (8010a78 <_OnTx+0x148>)
 80109dc:	4928      	ldr	r1, [pc, #160]	; (8010a80 <_OnTx+0x150>)
 80109de:	7813      	ldrb	r3, [r2, #0]
 80109e0:	7810      	ldrb	r0, [r2, #0]
 80109e2:	3301      	adds	r3, #1
 80109e4:	3001      	adds	r0, #1
 80109e6:	700b      	strb	r3, [r1, #0]
 80109e8:	b2c0      	uxtb	r0, r0
 80109ea:	e7be      	b.n	801096a <_OnTx+0x3a>
 80109ec:	2209      	movs	r2, #9
 80109ee:	701a      	strb	r2, [r3, #0]
 80109f0:	4a23      	ldr	r2, [pc, #140]	; (8010a80 <_OnTx+0x150>)
 80109f2:	7813      	ldrb	r3, [r2, #0]
 80109f4:	3343      	adds	r3, #67	; 0x43
 80109f6:	7013      	strb	r3, [r2, #0]
 80109f8:	2043      	movs	r0, #67	; 0x43
 80109fa:	e7b6      	b.n	801096a <_OnTx+0x3a>
 80109fc:	491f      	ldr	r1, [pc, #124]	; (8010a7c <_OnTx+0x14c>)
 80109fe:	4822      	ldr	r0, [pc, #136]	; (8010a88 <_OnTx+0x158>)
 8010a00:	880a      	ldrh	r2, [r1, #0]
 8010a02:	6800      	ldr	r0, [r0, #0]
 8010a04:	5c84      	ldrb	r4, [r0, r2]
 8010a06:	3201      	adds	r2, #1
 8010a08:	b292      	uxth	r2, r2
 8010a0a:	800a      	strh	r2, [r1, #0]
 8010a0c:	491a      	ldr	r1, [pc, #104]	; (8010a78 <_OnTx+0x148>)
 8010a0e:	7808      	ldrb	r0, [r1, #0]
 8010a10:	4282      	cmp	r2, r0
 8010a12:	d11a      	bne.n	8010a4a <_OnTx+0x11a>
 8010a14:	2205      	movs	r2, #5
 8010a16:	701a      	strb	r2, [r3, #0]
 8010a18:	2380      	movs	r3, #128	; 0x80
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	4d1b      	ldr	r5, [pc, #108]	; (8010a8c <_OnTx+0x15c>)
 8010a20:	2600      	movs	r6, #0
 8010a22:	700e      	strb	r6, [r1, #0]
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	b11b      	cbz	r3, 8010a30 <_OnTx+0x100>
 8010a28:	6828      	ldr	r0, [r5, #0]
 8010a2a:	f7ff fb77 	bl	801011c <OS_MakeTaskReady>
 8010a2e:	602e      	str	r6, [r5, #0]
 8010a30:	4d17      	ldr	r5, [pc, #92]	; (8010a90 <_OnTx+0x160>)
 8010a32:	786b      	ldrb	r3, [r5, #1]
 8010a34:	2b0f      	cmp	r3, #15
 8010a36:	d902      	bls.n	8010a3e <_OnTx+0x10e>
 8010a38:	2099      	movs	r0, #153	; 0x99
 8010a3a:	f7fe fbcb 	bl	800f1d4 <OS_Error>
 8010a3e:	786b      	ldrb	r3, [r5, #1]
 8010a40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010a44:	b90b      	cbnz	r3, 8010a4a <_OnTx+0x11a>
 8010a46:	f382 8811 	msr	BASEPRI, r2
 8010a4a:	4a0d      	ldr	r2, [pc, #52]	; (8010a80 <_OnTx+0x150>)
 8010a4c:	7813      	ldrb	r3, [r2, #0]
 8010a4e:	4423      	add	r3, r4
 8010a50:	7013      	strb	r3, [r2, #0]
 8010a52:	4620      	mov	r0, r4
 8010a54:	e789      	b.n	801096a <_OnTx+0x3a>
 8010a56:	2206      	movs	r2, #6
 8010a58:	701a      	strb	r2, [r3, #0]
 8010a5a:	4b09      	ldr	r3, [pc, #36]	; (8010a80 <_OnTx+0x150>)
 8010a5c:	e7a5      	b.n	80109aa <_OnTx+0x7a>
 8010a5e:	2200      	movs	r2, #0
 8010a60:	701a      	strb	r2, [r3, #0]
 8010a62:	208d      	movs	r0, #141	; 0x8d
 8010a64:	e781      	b.n	801096a <_OnTx+0x3a>
 8010a66:	2000      	movs	r0, #0
 8010a68:	e77f      	b.n	801096a <_OnTx+0x3a>
 8010a6a:	bf00      	nop
 8010a6c:	2000526c 	.word	0x2000526c
 8010a70:	2000526a 	.word	0x2000526a
 8010a74:	20005269 	.word	0x20005269
 8010a78:	20005268 	.word	0x20005268
 8010a7c:	2000526e 	.word	0x2000526e
 8010a80:	2000525c 	.word	0x2000525c
 8010a84:	20005278 	.word	0x20005278
 8010a88:	20005264 	.word	0x20005264
 8010a8c:	20005258 	.word	0x20005258
 8010a90:	200051a8 	.word	0x200051a8

08010a94 <_StartSend>:
 8010a94:	b510      	push	{r4, lr}
 8010a96:	2380      	movs	r3, #128	; 0x80
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <_StartSend+0x38>)
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	b933      	cbnz	r3, 8010ab0 <_StartSend+0x1c>
 8010aa2:	f7ff ff45 	bl	8010930 <_OnTx>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	db02      	blt.n	8010ab0 <_StartSend+0x1c>
 8010aaa:	b2c0      	uxtb	r0, r0
 8010aac:	f7fe fca7 	bl	800f3fe <OS_COM_Send1>
 8010ab0:	4c07      	ldr	r4, [pc, #28]	; (8010ad0 <_StartSend+0x3c>)
 8010ab2:	7863      	ldrb	r3, [r4, #1]
 8010ab4:	2b0f      	cmp	r3, #15
 8010ab6:	d902      	bls.n	8010abe <_StartSend+0x2a>
 8010ab8:	2099      	movs	r0, #153	; 0x99
 8010aba:	f7fe fb8b 	bl	800f1d4 <OS_Error>
 8010abe:	7863      	ldrb	r3, [r4, #1]
 8010ac0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010ac4:	b90b      	cbnz	r3, 8010aca <_StartSend+0x36>
 8010ac6:	f382 8811 	msr	BASEPRI, r2
 8010aca:	bd10      	pop	{r4, pc}
 8010acc:	20005269 	.word	0x20005269
 8010ad0:	200051a8 	.word	0x200051a8

08010ad4 <OS_COM_ClearTxActive>:
 8010ad4:	4a04      	ldr	r2, [pc, #16]	; (8010ae8 <OS_COM_ClearTxActive+0x14>)
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	7013      	strb	r3, [r2, #0]
 8010ada:	4a04      	ldr	r2, [pc, #16]	; (8010aec <OS_COM_ClearTxActive+0x18>)
 8010adc:	7013      	strb	r3, [r2, #0]
 8010ade:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <OS_COM_ClearTxActive+0x1c>)
 8010ae0:	6013      	str	r3, [r2, #0]
 8010ae2:	4a04      	ldr	r2, [pc, #16]	; (8010af4 <OS_COM_ClearTxActive+0x20>)
 8010ae4:	7013      	strb	r3, [r2, #0]
 8010ae6:	4770      	bx	lr
 8010ae8:	20005269 	.word	0x20005269
 8010aec:	20005268 	.word	0x20005268
 8010af0:	20005258 	.word	0x20005258
 8010af4:	2000526c 	.word	0x2000526c

08010af8 <OS_COM_GetInU8>:
 8010af8:	4a03      	ldr	r2, [pc, #12]	; (8010b08 <OS_COM_GetInU8+0x10>)
 8010afa:	7813      	ldrb	r3, [r2, #0]
 8010afc:	1c59      	adds	r1, r3, #1
 8010afe:	7011      	strb	r1, [r2, #0]
 8010b00:	4a02      	ldr	r2, [pc, #8]	; (8010b0c <OS_COM_GetInU8+0x14>)
 8010b02:	5cd0      	ldrb	r0, [r2, r3]
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	20005260 	.word	0x20005260
 8010b0c:	20005270 	.word	0x20005270

08010b10 <OS_COM_GetInU16>:
 8010b10:	b510      	push	{r4, lr}
 8010b12:	f7ff fff1 	bl	8010af8 <OS_COM_GetInU8>
 8010b16:	4604      	mov	r4, r0
 8010b18:	f7ff ffee 	bl	8010af8 <OS_COM_GetInU8>
 8010b1c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8010b20:	b280      	uxth	r0, r0
 8010b22:	bd10      	pop	{r4, pc}

08010b24 <OS_COM_GetInU32>:
 8010b24:	b510      	push	{r4, lr}
 8010b26:	f7ff fff3 	bl	8010b10 <OS_COM_GetInU16>
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	f7ff fff0 	bl	8010b10 <OS_COM_GetInU16>
 8010b30:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010b34:	bd10      	pop	{r4, pc}

08010b36 <OS_COM_GetNextChar>:
 8010b36:	f7ff befb 	b.w	8010930 <_OnTx>
	...

08010b3c <OS_COM_StoreInU8>:
 8010b3c:	4a04      	ldr	r2, [pc, #16]	; (8010b50 <OS_COM_StoreInU8+0x14>)
 8010b3e:	7813      	ldrb	r3, [r2, #0]
 8010b40:	2b07      	cmp	r3, #7
 8010b42:	bf9f      	itttt	ls
 8010b44:	4903      	ldrls	r1, [pc, #12]	; (8010b54 <OS_COM_StoreInU8+0x18>)
 8010b46:	54c8      	strbls	r0, [r1, r3]
 8010b48:	3301      	addls	r3, #1
 8010b4a:	7013      	strbls	r3, [r2, #0]
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	2000525d 	.word	0x2000525d
 8010b54:	20005270 	.word	0x20005270

08010b58 <OS_COM_StoreOutU8>:
 8010b58:	4a04      	ldr	r2, [pc, #16]	; (8010b6c <OS_COM_StoreOutU8+0x14>)
 8010b5a:	8813      	ldrh	r3, [r2, #0]
 8010b5c:	2bc7      	cmp	r3, #199	; 0xc7
 8010b5e:	bf9f      	itttt	ls
 8010b60:	4903      	ldrls	r1, [pc, #12]	; (8010b70 <OS_COM_StoreOutU8+0x18>)
 8010b62:	54c8      	strbls	r0, [r1, r3]
 8010b64:	3301      	addls	r3, #1
 8010b66:	8013      	strhls	r3, [r2, #0]
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	2000526a 	.word	0x2000526a
 8010b70:	20005278 	.word	0x20005278

08010b74 <_StoreOutString.constprop.0>:
 8010b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b76:	4f10      	ldr	r7, [pc, #64]	; (8010bb8 <_StoreOutString.constprop.0+0x44>)
 8010b78:	4605      	mov	r5, r0
 8010b7a:	883b      	ldrh	r3, [r7, #0]
 8010b7c:	b1c8      	cbz	r0, 8010bb2 <_StoreOutString.constprop.0+0x3e>
 8010b7e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010b82:	2b1e      	cmp	r3, #30
 8010b84:	bf28      	it	cs
 8010b86:	231e      	movcs	r3, #30
 8010b88:	2400      	movs	r4, #0
 8010b8a:	42a3      	cmp	r3, r4
 8010b8c:	d001      	beq.n	8010b92 <_StoreOutString.constprop.0+0x1e>
 8010b8e:	5d2a      	ldrb	r2, [r5, r4]
 8010b90:	b96a      	cbnz	r2, 8010bae <_StoreOutString.constprop.0+0x3a>
 8010b92:	4620      	mov	r0, r4
 8010b94:	f7ff ffe0 	bl	8010b58 <OS_COM_StoreOutU8>
 8010b98:	b144      	cbz	r4, 8010bac <_StoreOutString.constprop.0+0x38>
 8010b9a:	883e      	ldrh	r6, [r7, #0]
 8010b9c:	4807      	ldr	r0, [pc, #28]	; (8010bbc <_StoreOutString.constprop.0+0x48>)
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	4430      	add	r0, r6
 8010ba2:	4629      	mov	r1, r5
 8010ba4:	4426      	add	r6, r4
 8010ba6:	f000 fa5d 	bl	8011064 <memcpy>
 8010baa:	803e      	strh	r6, [r7, #0]
 8010bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bae:	3401      	adds	r4, #1
 8010bb0:	e7eb      	b.n	8010b8a <_StoreOutString.constprop.0+0x16>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	e7ed      	b.n	8010b92 <_StoreOutString.constprop.0+0x1e>
 8010bb6:	bf00      	nop
 8010bb8:	2000526a 	.word	0x2000526a
 8010bbc:	20005278 	.word	0x20005278

08010bc0 <OS_COM_StoreOutU16>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	0a00      	lsrs	r0, r0, #8
 8010bc6:	f7ff ffc7 	bl	8010b58 <OS_COM_StoreOutU8>
 8010bca:	4620      	mov	r0, r4
 8010bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bd0:	f7ff bfc2 	b.w	8010b58 <OS_COM_StoreOutU8>

08010bd4 <OS_COM_StoreOutU32>:
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	0c00      	lsrs	r0, r0, #16
 8010bda:	f7ff fff1 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010bde:	4620      	mov	r0, r4
 8010be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010be4:	f7ff bfec 	b.w	8010bc0 <OS_COM_StoreOutU16>

08010be8 <_EvaPacket>:
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bea:	f7ff ff85 	bl	8010af8 <OS_COM_GetInU8>
 8010bee:	2843      	cmp	r0, #67	; 0x43
 8010bf0:	d108      	bne.n	8010c04 <_EvaPacket+0x1c>
 8010bf2:	f7ff ff81 	bl	8010af8 <OS_COM_GetInU8>
 8010bf6:	4b71      	ldr	r3, [pc, #452]	; (8010dbc <_EvaPacket+0x1d4>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	b90b      	cbnz	r3, 8010c00 <_EvaPacket+0x18>
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c00:	4798      	blx	r3
 8010c02:	e7fb      	b.n	8010bfc <_EvaPacket+0x14>
 8010c04:	4d6e      	ldr	r5, [pc, #440]	; (8010dc0 <_EvaPacket+0x1d8>)
 8010c06:	882b      	ldrh	r3, [r5, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1f7      	bne.n	8010bfc <_EvaPacket+0x14>
 8010c0c:	f7ff ffa4 	bl	8010b58 <OS_COM_StoreOutU8>
 8010c10:	2873      	cmp	r0, #115	; 0x73
 8010c12:	d01d      	beq.n	8010c50 <_EvaPacket+0x68>
 8010c14:	d807      	bhi.n	8010c26 <_EvaPacket+0x3e>
 8010c16:	2863      	cmp	r0, #99	; 0x63
 8010c18:	f000 80b8 	beq.w	8010d8c <_EvaPacket+0x1a4>
 8010c1c:	286c      	cmp	r0, #108	; 0x6c
 8010c1e:	f000 80a8 	beq.w	8010d72 <_EvaPacket+0x18a>
 8010c22:	8828      	ldrh	r0, [r5, #0]
 8010c24:	e7eb      	b.n	8010bfe <_EvaPacket+0x16>
 8010c26:	2874      	cmp	r0, #116	; 0x74
 8010c28:	d1fb      	bne.n	8010c22 <_EvaPacket+0x3a>
 8010c2a:	f7ff ff7b 	bl	8010b24 <OS_COM_GetInU32>
 8010c2e:	4f65      	ldr	r7, [pc, #404]	; (8010dc4 <_EvaPacket+0x1dc>)
 8010c30:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	4604      	mov	r4, r0
 8010c38:	429c      	cmp	r4, r3
 8010c3a:	d048      	beq.n	8010cce <_EvaPacket+0xe6>
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d144      	bne.n	8010cca <_EvaPacket+0xe2>
 8010c40:	f244 104e 	movw	r0, #16718	; 0x414e
 8010c44:	f7ff ffbc 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010c48:	2054      	movs	r0, #84	; 0x54
 8010c4a:	f7ff ff85 	bl	8010b58 <OS_COM_StoreOutU8>
 8010c4e:	e7e8      	b.n	8010c22 <_EvaPacket+0x3a>
 8010c50:	4c5c      	ldr	r4, [pc, #368]	; (8010dc4 <_EvaPacket+0x1dc>)
 8010c52:	f7ff fa15 	bl	8010080 <OS_EnableProfiling>
 8010c56:	f7fe fdab 	bl	800f7b0 <OS_TIME_GetTicks32>
 8010c5a:	f7ff ffbb 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010c5e:	69e0      	ldr	r0, [r4, #28]
 8010c60:	f7ff ffb8 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010c64:	68a0      	ldr	r0, [r4, #8]
 8010c66:	f7ff ffb5 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010c6a:	f64c 2071 	movw	r0, #51825	; 0xca71
 8010c6e:	f7ff ffa7 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010c72:	2001      	movs	r0, #1
 8010c74:	f7ff ff70 	bl	8010b58 <OS_COM_StoreOutU8>
 8010c78:	f7ff fd8c 	bl	8010794 <OS_INFO_GetCPU>
 8010c7c:	f7ff ff7a 	bl	8010b74 <_StoreOutString.constprop.0>
 8010c80:	f7ff fdaa 	bl	80107d8 <OS_INFO_GetLibName>
 8010c84:	f7ff ff76 	bl	8010b74 <_StoreOutString.constprop.0>
 8010c88:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 8010c8c:	28ff      	cmp	r0, #255	; 0xff
 8010c8e:	d919      	bls.n	8010cc4 <_EvaPacket+0xdc>
 8010c90:	20fc      	movs	r0, #252	; 0xfc
 8010c92:	f7ff ff61 	bl	8010b58 <OS_COM_StoreOutU8>
 8010c96:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 8010c9a:	f7ff ff91 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010c9e:	f000 f96f 	bl	8010f80 <OS_STACK_GetSysStackBase>
 8010ca2:	f7ff ff97 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010ca6:	f000 f96f 	bl	8010f88 <OS_STACK_GetSysStackSize>
 8010caa:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8010cae:	4604      	mov	r4, r0
 8010cb0:	d304      	bcc.n	8010cbc <_EvaPacket+0xd4>
 8010cb2:	0c00      	lsrs	r0, r0, #16
 8010cb4:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8010cb8:	f7ff ff82 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7ff ff7f 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010cc2:	e7ae      	b.n	8010c22 <_EvaPacket+0x3a>
 8010cc4:	f7ff ff48 	bl	8010b58 <OS_COM_StoreOutU8>
 8010cc8:	e7e9      	b.n	8010c9e <_EvaPacket+0xb6>
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	e7b4      	b.n	8010c38 <_EvaPacket+0x50>
 8010cce:	f7fe fcd3 	bl	800f678 <OS__TIME_GetCycles>
 8010cd2:	f7ff ff7f 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010cd6:	b936      	cbnz	r6, 8010ce6 <_EvaPacket+0xfe>
 8010cd8:	68be      	ldr	r6, [r7, #8]
 8010cda:	42a6      	cmp	r6, r4
 8010cdc:	f04f 36ff 	mov.w	r6, #4294967295
 8010ce0:	bf18      	it	ne
 8010ce2:	2600      	movne	r6, #0
 8010ce4:	b2f6      	uxtb	r6, r6
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7fe ff12 	bl	800fb10 <OS_TASK_GetName>
 8010cec:	f7ff ff42 	bl	8010b74 <_StoreOutString.constprop.0>
 8010cf0:	6927      	ldr	r7, [r4, #16]
 8010cf2:	2fff      	cmp	r7, #255	; 0xff
 8010cf4:	d937      	bls.n	8010d66 <_EvaPacket+0x17e>
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	f7ff ff2e 	bl	8010b58 <OS_COM_StoreOutU8>
 8010cfc:	4638      	mov	r0, r7
 8010cfe:	f7ff ff69 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ff ff28 	bl	8010b58 <OS_COM_StoreOutU8>
 8010d08:	68a0      	ldr	r0, [r4, #8]
 8010d0a:	bb80      	cbnz	r0, 8010d6e <_EvaPacket+0x186>
 8010d0c:	f7ff ff62 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d10:	68e0      	ldr	r0, [r4, #12]
 8010d12:	f7ff ff5f 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d16:	4620      	mov	r0, r4
 8010d18:	f7ff fda2 	bl	8010860 <OS_STACK_GetTaskStackBase>
 8010d1c:	f7ff ff5a 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7ff fce7 	bl	80106f4 <OS_STAT_GetExecTime>
 8010d26:	f7ff ff55 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010d2c:	f7ff ff52 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7ff fdc9 	bl	80108c8 <OS_STACK_GetTaskStackSize>
 8010d36:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	d304      	bcc.n	8010d48 <_EvaPacket+0x160>
 8010d3e:	0c00      	lsrs	r0, r0, #16
 8010d40:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8010d44:	f7ff ff3c 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f7ff ff39 	bl	8010bc0 <OS_COM_StoreOutU16>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f7fe ff10 	bl	800fb74 <OS_TASK_GetTimeSliceRem>
 8010d54:	f7ff ff00 	bl	8010b58 <OS_COM_StoreOutU8>
 8010d58:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8010d5c:	f7ff fefc 	bl	8010b58 <OS_COM_StoreOutU8>
 8010d60:	f7fe fd14 	bl	800f78c <OS_TIME_GetTicks>
 8010d64:	e7ab      	b.n	8010cbe <_EvaPacket+0xd6>
 8010d66:	4638      	mov	r0, r7
 8010d68:	f7ff fef6 	bl	8010b58 <OS_COM_StoreOutU8>
 8010d6c:	e7c9      	b.n	8010d02 <_EvaPacket+0x11a>
 8010d6e:	6880      	ldr	r0, [r0, #8]
 8010d70:	e7cc      	b.n	8010d0c <_EvaPacket+0x124>
 8010d72:	2074      	movs	r0, #116	; 0x74
 8010d74:	f7ff fef0 	bl	8010b58 <OS_COM_StoreOutU8>
 8010d78:	4b12      	ldr	r3, [pc, #72]	; (8010dc4 <_EvaPacket+0x1dc>)
 8010d7a:	699c      	ldr	r4, [r3, #24]
 8010d7c:	2c00      	cmp	r4, #0
 8010d7e:	f43f af50 	beq.w	8010c22 <_EvaPacket+0x3a>
 8010d82:	4620      	mov	r0, r4
 8010d84:	f7ff ff26 	bl	8010bd4 <OS_COM_StoreOutU32>
 8010d88:	6824      	ldr	r4, [r4, #0]
 8010d8a:	e7f7      	b.n	8010d7c <_EvaPacket+0x194>
 8010d8c:	f7ff feca 	bl	8010b24 <OS_COM_GetInU32>
 8010d90:	4604      	mov	r4, r0
 8010d92:	f7ff febd 	bl	8010b10 <OS_COM_GetInU16>
 8010d96:	4603      	mov	r3, r0
 8010d98:	f020 0003 	bic.w	r0, r0, #3
 8010d9c:	b280      	uxth	r0, r0
 8010d9e:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8010da2:	6822      	ldr	r2, [r4, #0]
 8010da4:	f1b2 3fcd 	cmp.w	r2, #3452816845	; 0xcdcdcdcd
 8010da8:	d104      	bne.n	8010db4 <_EvaPacket+0x1cc>
 8010daa:	3b01      	subs	r3, #1
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	3404      	adds	r4, #4
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1f6      	bne.n	8010da2 <_EvaPacket+0x1ba>
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	1ac0      	subs	r0, r0, r3
 8010dba:	e780      	b.n	8010cbe <_EvaPacket+0xd6>
 8010dbc:	20005340 	.word	0x20005340
 8010dc0:	2000526a 	.word	0x2000526a
 8010dc4:	200051a8 	.word	0x200051a8

08010dc8 <OS_COM_OnRx>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	4e27      	ldr	r6, [pc, #156]	; (8010e68 <OS_COM_OnRx+0xa0>)
 8010dcc:	7833      	ldrb	r3, [r6, #0]
 8010dce:	4604      	mov	r4, r0
 8010dd0:	b113      	cbz	r3, 8010dd8 <OS_COM_OnRx+0x10>
 8010dd2:	20b4      	movs	r0, #180	; 0xb4
 8010dd4:	f7fe f9fe 	bl	800f1d4 <OS_Error>
 8010dd8:	4d24      	ldr	r5, [pc, #144]	; (8010e6c <OS_COM_OnRx+0xa4>)
 8010dda:	782a      	ldrb	r2, [r5, #0]
 8010ddc:	2301      	movs	r3, #1
 8010dde:	7033      	strb	r3, [r6, #0]
 8010de0:	2a05      	cmp	r2, #5
 8010de2:	d80c      	bhi.n	8010dfe <OS_COM_OnRx+0x36>
 8010de4:	e8df f002 	tbb	[pc, r2]
 8010de8:	1c130e03 	.word	0x1c130e03
 8010dec:	342c      	.short	0x342c
 8010dee:	2ced      	cmp	r4, #237	; 0xed
 8010df0:	d105      	bne.n	8010dfe <OS_COM_OnRx+0x36>
 8010df2:	4a1f      	ldr	r2, [pc, #124]	; (8010e70 <OS_COM_OnRx+0xa8>)
 8010df4:	702b      	strb	r3, [r5, #0]
 8010df6:	2300      	movs	r3, #0
 8010df8:	7013      	strb	r3, [r2, #0]
 8010dfa:	4a1e      	ldr	r2, [pc, #120]	; (8010e74 <OS_COM_OnRx+0xac>)
 8010dfc:	7013      	strb	r3, [r2, #0]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	7033      	strb	r3, [r6, #0]
 8010e02:	bd70      	pop	{r4, r5, r6, pc}
 8010e04:	2c8c      	cmp	r4, #140	; 0x8c
 8010e06:	d12c      	bne.n	8010e62 <OS_COM_OnRx+0x9a>
 8010e08:	2302      	movs	r3, #2
 8010e0a:	702b      	strb	r3, [r5, #0]
 8010e0c:	e7f7      	b.n	8010dfe <OS_COM_OnRx+0x36>
 8010e0e:	1e63      	subs	r3, r4, #1
 8010e10:	2b07      	cmp	r3, #7
 8010e12:	d826      	bhi.n	8010e62 <OS_COM_OnRx+0x9a>
 8010e14:	4b18      	ldr	r3, [pc, #96]	; (8010e78 <OS_COM_OnRx+0xb0>)
 8010e16:	701c      	strb	r4, [r3, #0]
 8010e18:	4b18      	ldr	r3, [pc, #96]	; (8010e7c <OS_COM_OnRx+0xb4>)
 8010e1a:	701c      	strb	r4, [r3, #0]
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	e7f4      	b.n	8010e0a <OS_COM_OnRx+0x42>
 8010e20:	4620      	mov	r0, r4
 8010e22:	f7ff fe8b 	bl	8010b3c <OS_COM_StoreInU8>
 8010e26:	4a15      	ldr	r2, [pc, #84]	; (8010e7c <OS_COM_OnRx+0xb4>)
 8010e28:	7813      	ldrb	r3, [r2, #0]
 8010e2a:	4418      	add	r0, r3
 8010e2c:	7010      	strb	r0, [r2, #0]
 8010e2e:	4a12      	ldr	r2, [pc, #72]	; (8010e78 <OS_COM_OnRx+0xb0>)
 8010e30:	7813      	ldrb	r3, [r2, #0]
 8010e32:	3b01      	subs	r3, #1
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	7013      	strb	r3, [r2, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1e0      	bne.n	8010dfe <OS_COM_OnRx+0x36>
 8010e3c:	2304      	movs	r3, #4
 8010e3e:	e7e4      	b.n	8010e0a <OS_COM_OnRx+0x42>
 8010e40:	4a0e      	ldr	r2, [pc, #56]	; (8010e7c <OS_COM_OnRx+0xb4>)
 8010e42:	7813      	ldrb	r3, [r2, #0]
 8010e44:	4423      	add	r3, r4
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	7013      	strb	r3, [r2, #0]
 8010e4a:	b953      	cbnz	r3, 8010e62 <OS_COM_OnRx+0x9a>
 8010e4c:	2305      	movs	r3, #5
 8010e4e:	e7dc      	b.n	8010e0a <OS_COM_OnRx+0x42>
 8010e50:	2c8d      	cmp	r4, #141	; 0x8d
 8010e52:	d106      	bne.n	8010e62 <OS_COM_OnRx+0x9a>
 8010e54:	f7ff fec8 	bl	8010be8 <_EvaPacket>
 8010e58:	b118      	cbz	r0, 8010e62 <OS_COM_OnRx+0x9a>
 8010e5a:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <OS_COM_OnRx+0xb8>)
 8010e5c:	8018      	strh	r0, [r3, #0]
 8010e5e:	f7ff fe19 	bl	8010a94 <_StartSend>
 8010e62:	2300      	movs	r3, #0
 8010e64:	e7d1      	b.n	8010e0a <OS_COM_OnRx+0x42>
 8010e66:	bf00      	nop
 8010e68:	2000525f 	.word	0x2000525f
 8010e6c:	20005261 	.word	0x20005261
 8010e70:	2000525d 	.word	0x2000525d
 8010e74:	20005260 	.word	0x20005260
 8010e78:	2000526d 	.word	0x2000526d
 8010e7c:	2000525e 	.word	0x2000525e
 8010e80:	2000526a 	.word	0x2000526a

08010e84 <OS_COM_OnTx>:
 8010e84:	b508      	push	{r3, lr}
 8010e86:	f7ff fd53 	bl	8010930 <_OnTx>
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	db04      	blt.n	8010e98 <OS_COM_OnTx+0x14>
 8010e8e:	b2c0      	uxtb	r0, r0
 8010e90:	f7fe fab5 	bl	800f3fe <OS_COM_Send1>
 8010e94:	2000      	movs	r0, #0
 8010e96:	bd08      	pop	{r3, pc}
 8010e98:	2001      	movs	r0, #1
 8010e9a:	e7fc      	b.n	8010e96 <OS_COM_OnTx+0x12>

08010e9c <OS_HEAP_free>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	4c16      	ldr	r4, [pc, #88]	; (8010ef8 <OS_HEAP_free+0x5c>)
 8010ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	b12b      	cbz	r3, 8010eb2 <OS_HEAP_free+0x16>
 8010ea6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8010ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eaa:	4798      	blx	r3
 8010eac:	4601      	mov	r1, r0
 8010eae:	2071      	movs	r0, #113	; 0x71
 8010eb0:	47b0      	blx	r6
 8010eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eb4:	b12b      	cbz	r3, 8010ec2 <OS_HEAP_free+0x26>
 8010eb6:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8010eba:	b913      	cbnz	r3, 8010ec2 <OS_HEAP_free+0x26>
 8010ebc:	20a1      	movs	r0, #161	; 0xa1
 8010ebe:	f7fe f989 	bl	800f1d4 <OS_Error>
 8010ec2:	f7fe fb39 	bl	800f538 <OS_GetCPUState>
 8010ec6:	2801      	cmp	r0, #1
 8010ec8:	d102      	bne.n	8010ed0 <OS_HEAP_free+0x34>
 8010eca:	20a0      	movs	r0, #160	; 0xa0
 8010ecc:	f7fe f982 	bl	800f1d4 <OS_Error>
 8010ed0:	f7ff f884 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010ed4:	4809      	ldr	r0, [pc, #36]	; (8010efc <OS_HEAP_free+0x60>)
 8010ed6:	f7fe ffd5 	bl	800fe84 <OS_MUTEX_LockBlocked>
 8010eda:	4628      	mov	r0, r5
 8010edc:	f000 f8ba 	bl	8011054 <free>
 8010ee0:	4806      	ldr	r0, [pc, #24]	; (8010efc <OS_HEAP_free+0x60>)
 8010ee2:	f7ff f81d 	bl	800ff20 <OS_MUTEX_Unlock>
 8010ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ee8:	b123      	cbz	r3, 8010ef4 <OS_HEAP_free+0x58>
 8010eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ef0:	2071      	movs	r0, #113	; 0x71
 8010ef2:	4718      	bx	r3
 8010ef4:	bd70      	pop	{r4, r5, r6, pc}
 8010ef6:	bf00      	nop
 8010ef8:	200051a8 	.word	0x200051a8
 8010efc:	20005348 	.word	0x20005348

08010f00 <OS_HEAP_malloc>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	4d1c      	ldr	r5, [pc, #112]	; (8010f74 <OS_HEAP_malloc+0x74>)
 8010f04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010f06:	4604      	mov	r4, r0
 8010f08:	b11b      	cbz	r3, 8010f12 <OS_HEAP_malloc+0x12>
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0e:	2070      	movs	r0, #112	; 0x70
 8010f10:	4798      	blx	r3
 8010f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010f14:	b12b      	cbz	r3, 8010f22 <OS_HEAP_malloc+0x22>
 8010f16:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8010f1a:	b913      	cbnz	r3, 8010f22 <OS_HEAP_malloc+0x22>
 8010f1c:	20a1      	movs	r0, #161	; 0xa1
 8010f1e:	f7fe f959 	bl	800f1d4 <OS_Error>
 8010f22:	f7fe fb09 	bl	800f538 <OS_GetCPUState>
 8010f26:	2801      	cmp	r0, #1
 8010f28:	d102      	bne.n	8010f30 <OS_HEAP_malloc+0x30>
 8010f2a:	20a0      	movs	r0, #160	; 0xa0
 8010f2c:	f7fe f952 	bl	800f1d4 <OS_Error>
 8010f30:	4e11      	ldr	r6, [pc, #68]	; (8010f78 <OS_HEAP_malloc+0x78>)
 8010f32:	f7ff f853 	bl	800ffdc <OS_AssertCPUNotInIllegalState>
 8010f36:	7833      	ldrb	r3, [r6, #0]
 8010f38:	b953      	cbnz	r3, 8010f50 <OS_HEAP_malloc+0x50>
 8010f3a:	f7ff f8d5 	bl	80100e8 <OS_EnterRegionFunc>
 8010f3e:	7833      	ldrb	r3, [r6, #0]
 8010f40:	b923      	cbnz	r3, 8010f4c <OS_HEAP_malloc+0x4c>
 8010f42:	2301      	movs	r3, #1
 8010f44:	480d      	ldr	r0, [pc, #52]	; (8010f7c <OS_HEAP_malloc+0x7c>)
 8010f46:	7033      	strb	r3, [r6, #0]
 8010f48:	f7fe ff42 	bl	800fdd0 <OS_MUTEX_Create>
 8010f4c:	f7fe fe48 	bl	800fbe0 <OS_TASK_LeaveRegion>
 8010f50:	480a      	ldr	r0, [pc, #40]	; (8010f7c <OS_HEAP_malloc+0x7c>)
 8010f52:	f7fe ff97 	bl	800fe84 <OS_MUTEX_LockBlocked>
 8010f56:	4620      	mov	r0, r4
 8010f58:	f000 f874 	bl	8011044 <malloc>
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	4807      	ldr	r0, [pc, #28]	; (8010f7c <OS_HEAP_malloc+0x7c>)
 8010f60:	f7fe ffde 	bl	800ff20 <OS_MUTEX_Unlock>
 8010f64:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010f66:	b11b      	cbz	r3, 8010f70 <OS_HEAP_malloc+0x70>
 8010f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	2070      	movs	r0, #112	; 0x70
 8010f6e:	4798      	blx	r3
 8010f70:	4620      	mov	r0, r4
 8010f72:	bd70      	pop	{r4, r5, r6, pc}
 8010f74:	200051a8 	.word	0x200051a8
 8010f78:	20005344 	.word	0x20005344
 8010f7c:	20005348 	.word	0x20005348

08010f80 <OS_STACK_GetSysStackBase>:
 8010f80:	4800      	ldr	r0, [pc, #0]	; (8010f84 <OS_STACK_GetSysStackBase+0x4>)
 8010f82:	4770      	bx	lr
 8010f84:	20014368 	.word	0x20014368

08010f88 <OS_STACK_GetSysStackSize>:
 8010f88:	4b01      	ldr	r3, [pc, #4]	; (8010f90 <OS_STACK_GetSysStackSize+0x8>)
 8010f8a:	4802      	ldr	r0, [pc, #8]	; (8010f94 <OS_STACK_GetSysStackSize+0xc>)
 8010f8c:	1ac0      	subs	r0, r0, r3
 8010f8e:	4770      	bx	lr
 8010f90:	20014368 	.word	0x20014368
 8010f94:	20014768 	.word	0x20014768

08010f98 <OS_STACK_GetSP>:
 8010f98:	4668      	mov	r0, sp
 8010f9a:	4770      	bx	lr

08010f9c <OS_ARMv7M_Init>:
 8010f9c:	b510      	push	{r4, lr}
 8010f9e:	f3ef 8110 	mrs	r1, PRIMASK
 8010fa2:	b672      	cpsid	i
 8010fa4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010fa8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8010fac:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8010fb0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
 8010fba:	f381 8810 	msr	PRIMASK, r1
 8010fbe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8010fc2:	f640 4127 	movw	r1, #3111	; 0xc27
 8010fc6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8010fca:	428a      	cmp	r2, r1
 8010fcc:	d10c      	bne.n	8010fe8 <OS_ARMv7M_Init+0x4c>
 8010fce:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8010fd2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8010fd6:	d107      	bne.n	8010fe8 <OS_ARMv7M_Init+0x4c>
 8010fd8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8010fdc:	f013 0f0e 	tst.w	r3, #14
 8010fe0:	d102      	bne.n	8010fe8 <OS_ARMv7M_Init+0x4c>
 8010fe2:	20fe      	movs	r0, #254	; 0xfe
 8010fe4:	f7fe f8f6 	bl	800f1d4 <OS_Error>
 8010fe8:	f3ef 8314 	mrs	r3, CONTROL
 8010fec:	079b      	lsls	r3, r3, #30
 8010fee:	d502      	bpl.n	8010ff6 <OS_ARMv7M_Init+0x5a>
 8010ff0:	20a7      	movs	r0, #167	; 0xa7
 8010ff2:	f7fe f8ef 	bl	800f1d4 <OS_Error>
 8010ff6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8010ffa:	f8d4 3d88 	ldr.w	r3, [r4, #3464]	; 0xd88
 8010ffe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8011002:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8011006:	d003      	beq.n	8011010 <OS_ARMv7M_Init+0x74>
 8011008:	f44f 7083 	mov.w	r0, #262	; 0x106
 801100c:	f7fe f8e2 	bl	800f1d4 <OS_Error>
 8011010:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8011014:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8011018:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 801101c:	d003      	beq.n	8011026 <OS_ARMv7M_Init+0x8a>
 801101e:	f44f 7083 	mov.w	r0, #262	; 0x106
 8011022:	f7fe f8d7 	bl	800f1d4 <OS_Error>
 8011026:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801102a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801102e:	f8c3 2f3c 	str.w	r2, [r3, #3900]	; 0xf3c
 8011032:	bd10      	pop	{r4, pc}

08011034 <calloc>:
 8011034:	4b02      	ldr	r3, [pc, #8]	; (8011040 <calloc+0xc>)
 8011036:	460a      	mov	r2, r1
 8011038:	4601      	mov	r1, r0
 801103a:	6818      	ldr	r0, [r3, #0]
 801103c:	f000 b828 	b.w	8011090 <_calloc_r>
 8011040:	20000020 	.word	0x20000020

08011044 <malloc>:
 8011044:	4b02      	ldr	r3, [pc, #8]	; (8011050 <malloc+0xc>)
 8011046:	4601      	mov	r1, r0
 8011048:	6818      	ldr	r0, [r3, #0]
 801104a:	f000 b8a3 	b.w	8011194 <_malloc_r>
 801104e:	bf00      	nop
 8011050:	20000020 	.word	0x20000020

08011054 <free>:
 8011054:	4b02      	ldr	r3, [pc, #8]	; (8011060 <free+0xc>)
 8011056:	4601      	mov	r1, r0
 8011058:	6818      	ldr	r0, [r3, #0]
 801105a:	f000 b82f 	b.w	80110bc <_free_r>
 801105e:	bf00      	nop
 8011060:	20000020 	.word	0x20000020

08011064 <memcpy>:
 8011064:	440a      	add	r2, r1
 8011066:	4291      	cmp	r1, r2
 8011068:	f100 33ff 	add.w	r3, r0, #4294967295
 801106c:	d100      	bne.n	8011070 <memcpy+0xc>
 801106e:	4770      	bx	lr
 8011070:	b510      	push	{r4, lr}
 8011072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011076:	f803 4f01 	strb.w	r4, [r3, #1]!
 801107a:	4291      	cmp	r1, r2
 801107c:	d1f9      	bne.n	8011072 <memcpy+0xe>
 801107e:	bd10      	pop	{r4, pc}

08011080 <memset>:
 8011080:	4402      	add	r2, r0
 8011082:	4603      	mov	r3, r0
 8011084:	4293      	cmp	r3, r2
 8011086:	d100      	bne.n	801108a <memset+0xa>
 8011088:	4770      	bx	lr
 801108a:	f803 1b01 	strb.w	r1, [r3], #1
 801108e:	e7f9      	b.n	8011084 <memset+0x4>

08011090 <_calloc_r>:
 8011090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011092:	fba1 2402 	umull	r2, r4, r1, r2
 8011096:	b94c      	cbnz	r4, 80110ac <_calloc_r+0x1c>
 8011098:	4611      	mov	r1, r2
 801109a:	9201      	str	r2, [sp, #4]
 801109c:	f000 f87a 	bl	8011194 <_malloc_r>
 80110a0:	9a01      	ldr	r2, [sp, #4]
 80110a2:	4605      	mov	r5, r0
 80110a4:	b930      	cbnz	r0, 80110b4 <_calloc_r+0x24>
 80110a6:	4628      	mov	r0, r5
 80110a8:	b003      	add	sp, #12
 80110aa:	bd30      	pop	{r4, r5, pc}
 80110ac:	220c      	movs	r2, #12
 80110ae:	6002      	str	r2, [r0, #0]
 80110b0:	2500      	movs	r5, #0
 80110b2:	e7f8      	b.n	80110a6 <_calloc_r+0x16>
 80110b4:	4621      	mov	r1, r4
 80110b6:	f7ff ffe3 	bl	8011080 <memset>
 80110ba:	e7f4      	b.n	80110a6 <_calloc_r+0x16>

080110bc <_free_r>:
 80110bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110be:	2900      	cmp	r1, #0
 80110c0:	d044      	beq.n	801114c <_free_r+0x90>
 80110c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110c6:	9001      	str	r0, [sp, #4]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f1a1 0404 	sub.w	r4, r1, #4
 80110ce:	bfb8      	it	lt
 80110d0:	18e4      	addlt	r4, r4, r3
 80110d2:	f7fd fe3c 	bl	800ed4e <__malloc_lock>
 80110d6:	4a1e      	ldr	r2, [pc, #120]	; (8011150 <_free_r+0x94>)
 80110d8:	9801      	ldr	r0, [sp, #4]
 80110da:	6813      	ldr	r3, [r2, #0]
 80110dc:	b933      	cbnz	r3, 80110ec <_free_r+0x30>
 80110de:	6063      	str	r3, [r4, #4]
 80110e0:	6014      	str	r4, [r2, #0]
 80110e2:	b003      	add	sp, #12
 80110e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110e8:	f7fd be3b 	b.w	800ed62 <__malloc_unlock>
 80110ec:	42a3      	cmp	r3, r4
 80110ee:	d908      	bls.n	8011102 <_free_r+0x46>
 80110f0:	6825      	ldr	r5, [r4, #0]
 80110f2:	1961      	adds	r1, r4, r5
 80110f4:	428b      	cmp	r3, r1
 80110f6:	bf01      	itttt	eq
 80110f8:	6819      	ldreq	r1, [r3, #0]
 80110fa:	685b      	ldreq	r3, [r3, #4]
 80110fc:	1949      	addeq	r1, r1, r5
 80110fe:	6021      	streq	r1, [r4, #0]
 8011100:	e7ed      	b.n	80110de <_free_r+0x22>
 8011102:	461a      	mov	r2, r3
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	b10b      	cbz	r3, 801110c <_free_r+0x50>
 8011108:	42a3      	cmp	r3, r4
 801110a:	d9fa      	bls.n	8011102 <_free_r+0x46>
 801110c:	6811      	ldr	r1, [r2, #0]
 801110e:	1855      	adds	r5, r2, r1
 8011110:	42a5      	cmp	r5, r4
 8011112:	d10b      	bne.n	801112c <_free_r+0x70>
 8011114:	6824      	ldr	r4, [r4, #0]
 8011116:	4421      	add	r1, r4
 8011118:	1854      	adds	r4, r2, r1
 801111a:	42a3      	cmp	r3, r4
 801111c:	6011      	str	r1, [r2, #0]
 801111e:	d1e0      	bne.n	80110e2 <_free_r+0x26>
 8011120:	681c      	ldr	r4, [r3, #0]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	6053      	str	r3, [r2, #4]
 8011126:	4421      	add	r1, r4
 8011128:	6011      	str	r1, [r2, #0]
 801112a:	e7da      	b.n	80110e2 <_free_r+0x26>
 801112c:	d902      	bls.n	8011134 <_free_r+0x78>
 801112e:	230c      	movs	r3, #12
 8011130:	6003      	str	r3, [r0, #0]
 8011132:	e7d6      	b.n	80110e2 <_free_r+0x26>
 8011134:	6825      	ldr	r5, [r4, #0]
 8011136:	1961      	adds	r1, r4, r5
 8011138:	428b      	cmp	r3, r1
 801113a:	bf04      	itt	eq
 801113c:	6819      	ldreq	r1, [r3, #0]
 801113e:	685b      	ldreq	r3, [r3, #4]
 8011140:	6063      	str	r3, [r4, #4]
 8011142:	bf04      	itt	eq
 8011144:	1949      	addeq	r1, r1, r5
 8011146:	6021      	streq	r1, [r4, #0]
 8011148:	6054      	str	r4, [r2, #4]
 801114a:	e7ca      	b.n	80110e2 <_free_r+0x26>
 801114c:	b003      	add	sp, #12
 801114e:	bd30      	pop	{r4, r5, pc}
 8011150:	20005358 	.word	0x20005358

08011154 <sbrk_aligned>:
 8011154:	b570      	push	{r4, r5, r6, lr}
 8011156:	4e0e      	ldr	r6, [pc, #56]	; (8011190 <sbrk_aligned+0x3c>)
 8011158:	460c      	mov	r4, r1
 801115a:	6831      	ldr	r1, [r6, #0]
 801115c:	4605      	mov	r5, r0
 801115e:	b911      	cbnz	r1, 8011166 <sbrk_aligned+0x12>
 8011160:	f000 f88c 	bl	801127c <_sbrk_r>
 8011164:	6030      	str	r0, [r6, #0]
 8011166:	4621      	mov	r1, r4
 8011168:	4628      	mov	r0, r5
 801116a:	f000 f887 	bl	801127c <_sbrk_r>
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d00a      	beq.n	8011188 <sbrk_aligned+0x34>
 8011172:	1cc4      	adds	r4, r0, #3
 8011174:	f024 0403 	bic.w	r4, r4, #3
 8011178:	42a0      	cmp	r0, r4
 801117a:	d007      	beq.n	801118c <sbrk_aligned+0x38>
 801117c:	1a21      	subs	r1, r4, r0
 801117e:	4628      	mov	r0, r5
 8011180:	f000 f87c 	bl	801127c <_sbrk_r>
 8011184:	3001      	adds	r0, #1
 8011186:	d101      	bne.n	801118c <sbrk_aligned+0x38>
 8011188:	f04f 34ff 	mov.w	r4, #4294967295
 801118c:	4620      	mov	r0, r4
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	2000535c 	.word	0x2000535c

08011194 <_malloc_r>:
 8011194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	1ccd      	adds	r5, r1, #3
 801119a:	f025 0503 	bic.w	r5, r5, #3
 801119e:	3508      	adds	r5, #8
 80111a0:	2d0c      	cmp	r5, #12
 80111a2:	bf38      	it	cc
 80111a4:	250c      	movcc	r5, #12
 80111a6:	2d00      	cmp	r5, #0
 80111a8:	4607      	mov	r7, r0
 80111aa:	db01      	blt.n	80111b0 <_malloc_r+0x1c>
 80111ac:	42a9      	cmp	r1, r5
 80111ae:	d905      	bls.n	80111bc <_malloc_r+0x28>
 80111b0:	230c      	movs	r3, #12
 80111b2:	603b      	str	r3, [r7, #0]
 80111b4:	2600      	movs	r6, #0
 80111b6:	4630      	mov	r0, r6
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	4e2e      	ldr	r6, [pc, #184]	; (8011278 <_malloc_r+0xe4>)
 80111be:	f7fd fdc6 	bl	800ed4e <__malloc_lock>
 80111c2:	6833      	ldr	r3, [r6, #0]
 80111c4:	461c      	mov	r4, r3
 80111c6:	bb34      	cbnz	r4, 8011216 <_malloc_r+0x82>
 80111c8:	4629      	mov	r1, r5
 80111ca:	4638      	mov	r0, r7
 80111cc:	f7ff ffc2 	bl	8011154 <sbrk_aligned>
 80111d0:	1c43      	adds	r3, r0, #1
 80111d2:	4604      	mov	r4, r0
 80111d4:	d14d      	bne.n	8011272 <_malloc_r+0xde>
 80111d6:	6834      	ldr	r4, [r6, #0]
 80111d8:	4626      	mov	r6, r4
 80111da:	2e00      	cmp	r6, #0
 80111dc:	d140      	bne.n	8011260 <_malloc_r+0xcc>
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	4631      	mov	r1, r6
 80111e2:	4638      	mov	r0, r7
 80111e4:	eb04 0803 	add.w	r8, r4, r3
 80111e8:	f000 f848 	bl	801127c <_sbrk_r>
 80111ec:	4580      	cmp	r8, r0
 80111ee:	d13a      	bne.n	8011266 <_malloc_r+0xd2>
 80111f0:	6821      	ldr	r1, [r4, #0]
 80111f2:	3503      	adds	r5, #3
 80111f4:	1a6d      	subs	r5, r5, r1
 80111f6:	f025 0503 	bic.w	r5, r5, #3
 80111fa:	3508      	adds	r5, #8
 80111fc:	2d0c      	cmp	r5, #12
 80111fe:	bf38      	it	cc
 8011200:	250c      	movcc	r5, #12
 8011202:	4629      	mov	r1, r5
 8011204:	4638      	mov	r0, r7
 8011206:	f7ff ffa5 	bl	8011154 <sbrk_aligned>
 801120a:	3001      	adds	r0, #1
 801120c:	d02b      	beq.n	8011266 <_malloc_r+0xd2>
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	442b      	add	r3, r5
 8011212:	6023      	str	r3, [r4, #0]
 8011214:	e00e      	b.n	8011234 <_malloc_r+0xa0>
 8011216:	6822      	ldr	r2, [r4, #0]
 8011218:	1b52      	subs	r2, r2, r5
 801121a:	d41e      	bmi.n	801125a <_malloc_r+0xc6>
 801121c:	2a0b      	cmp	r2, #11
 801121e:	d916      	bls.n	801124e <_malloc_r+0xba>
 8011220:	1961      	adds	r1, r4, r5
 8011222:	42a3      	cmp	r3, r4
 8011224:	6025      	str	r5, [r4, #0]
 8011226:	bf18      	it	ne
 8011228:	6059      	strne	r1, [r3, #4]
 801122a:	6863      	ldr	r3, [r4, #4]
 801122c:	bf08      	it	eq
 801122e:	6031      	streq	r1, [r6, #0]
 8011230:	5162      	str	r2, [r4, r5]
 8011232:	604b      	str	r3, [r1, #4]
 8011234:	4638      	mov	r0, r7
 8011236:	f104 060b 	add.w	r6, r4, #11
 801123a:	f7fd fd92 	bl	800ed62 <__malloc_unlock>
 801123e:	f026 0607 	bic.w	r6, r6, #7
 8011242:	1d23      	adds	r3, r4, #4
 8011244:	1af2      	subs	r2, r6, r3
 8011246:	d0b6      	beq.n	80111b6 <_malloc_r+0x22>
 8011248:	1b9b      	subs	r3, r3, r6
 801124a:	50a3      	str	r3, [r4, r2]
 801124c:	e7b3      	b.n	80111b6 <_malloc_r+0x22>
 801124e:	6862      	ldr	r2, [r4, #4]
 8011250:	42a3      	cmp	r3, r4
 8011252:	bf0c      	ite	eq
 8011254:	6032      	streq	r2, [r6, #0]
 8011256:	605a      	strne	r2, [r3, #4]
 8011258:	e7ec      	b.n	8011234 <_malloc_r+0xa0>
 801125a:	4623      	mov	r3, r4
 801125c:	6864      	ldr	r4, [r4, #4]
 801125e:	e7b2      	b.n	80111c6 <_malloc_r+0x32>
 8011260:	4634      	mov	r4, r6
 8011262:	6876      	ldr	r6, [r6, #4]
 8011264:	e7b9      	b.n	80111da <_malloc_r+0x46>
 8011266:	230c      	movs	r3, #12
 8011268:	603b      	str	r3, [r7, #0]
 801126a:	4638      	mov	r0, r7
 801126c:	f7fd fd79 	bl	800ed62 <__malloc_unlock>
 8011270:	e7a1      	b.n	80111b6 <_malloc_r+0x22>
 8011272:	6025      	str	r5, [r4, #0]
 8011274:	e7de      	b.n	8011234 <_malloc_r+0xa0>
 8011276:	bf00      	nop
 8011278:	20005358 	.word	0x20005358

0801127c <_sbrk_r>:
 801127c:	b538      	push	{r3, r4, r5, lr}
 801127e:	4d06      	ldr	r5, [pc, #24]	; (8011298 <_sbrk_r+0x1c>)
 8011280:	2300      	movs	r3, #0
 8011282:	4604      	mov	r4, r0
 8011284:	4608      	mov	r0, r1
 8011286:	602b      	str	r3, [r5, #0]
 8011288:	f000 f808 	bl	801129c <_sbrk>
 801128c:	1c43      	adds	r3, r0, #1
 801128e:	d102      	bne.n	8011296 <_sbrk_r+0x1a>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	b103      	cbz	r3, 8011296 <_sbrk_r+0x1a>
 8011294:	6023      	str	r3, [r4, #0]
 8011296:	bd38      	pop	{r3, r4, r5, pc}
 8011298:	20005360 	.word	0x20005360

0801129c <_sbrk>:
 801129c:	4a04      	ldr	r2, [pc, #16]	; (80112b0 <_sbrk+0x14>)
 801129e:	6811      	ldr	r1, [r2, #0]
 80112a0:	4603      	mov	r3, r0
 80112a2:	b909      	cbnz	r1, 80112a8 <_sbrk+0xc>
 80112a4:	4903      	ldr	r1, [pc, #12]	; (80112b4 <_sbrk+0x18>)
 80112a6:	6011      	str	r1, [r2, #0]
 80112a8:	6810      	ldr	r0, [r2, #0]
 80112aa:	4403      	add	r3, r0
 80112ac:	6013      	str	r3, [r2, #0]
 80112ae:	4770      	bx	lr
 80112b0:	20005364 	.word	0x20005364
 80112b4:	20005368 	.word	0x20005368

080112b8 <_init>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	bf00      	nop
 80112bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112be:	bc08      	pop	{r3}
 80112c0:	469e      	mov	lr, r3
 80112c2:	4770      	bx	lr

080112c4 <_fini>:
 80112c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c6:	bf00      	nop
 80112c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ca:	bc08      	pop	{r3}
 80112cc:	469e      	mov	lr, r3
 80112ce:	4770      	bx	lr
